_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  91.0k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.37k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  10.5k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  10.5k|  return idx < lenminusstep;
   70|  10.5k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  8.15k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  8.15k|  return &buf[idx];
   75|  8.15k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  10.5k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  10.5k|  idx += STEP_SIZE;
   88|  10.5k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.37k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.37k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.37k]
  ------------------
   80|  2.37k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.37k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.37k|  return len - idx;
   83|  2.37k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.85k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.85k|    size_t pos = 0;
   12|  1.85k|    size_t count = 0;
   13|  8.60k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 6.75k, False: 1.85k]
  ------------------
   14|  6.75k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  6.75k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  6.75k|      count += count_ones(utf8_continuation_mask);
   17|  6.75k|    }
   18|  1.85k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.85k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  84.9k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  84.9k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  84.9k|      size_t pos = 0;
  131|  84.9k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  84.9k|      size_t leading_byte = 0;
  139|  84.9k|      size_t margin = size;
  140|   186k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 101k, False: 84.9k]
  |  Branch (140:27): [True: 101k, False: 0]
  ------------------
  141|   101k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   101k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  84.9k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  84.9k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 84.9k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  84.9k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 84.9k]
  ------------------
  195|  84.9k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 84.9k, False: 0]
  ------------------
  196|  84.9k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  84.9k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.70k, False: 80.2k]
  ------------------
  198|  80.2k|        utf32_output += howmany;
  199|  80.2k|      }
  200|  80.2k|      return utf32_output - start;
  201|  84.9k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  84.9k|    simdutf_really_inline bool errors() const {
  291|  84.9k|      return this->error.any_bits_set_anywhere();
  292|  84.9k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.85k|    char32_t* utf32_output) noexcept {
   13|  1.85k|  size_t pos = 0;
   14|  1.85k|  char32_t* start{utf32_output};
   15|  1.85k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  8.49k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 6.64k, False: 1.85k]
  ------------------
   17|  6.64k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  6.64k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 5.34k, False: 1.30k]
  ------------------
   19|  5.34k|      in.store_ascii_as_utf32(utf32_output);
   20|  5.34k|      utf32_output += 64;
   21|  5.34k|      pos += 64;
   22|  5.34k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.30k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.30k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.30k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.30k|    size_t max_starting_point = (pos + 64) - 12;
   28|  8.77k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 7.47k, False: 1.30k]
  ------------------
   29|  7.47k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  7.47k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  7.47k|      pos += consumed;
   32|  7.47k|      utf8_end_of_code_point_mask >>= consumed;
   33|  7.47k|      }
   34|  1.30k|    }
   35|  6.64k|  }
   36|  1.85k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.85k|  return utf32_output - start;
   38|  1.85k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  10.5k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  10.5k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  10.5k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 8.55k, False: 1.97k]
  |  |  ------------------
  ------------------
  154|  8.55k|        this->error |= this->prev_incomplete;
  155|  8.55k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.97k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.97k|            "We support either two or four chunks per 64-byte block.");
  159|  1.97k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.97k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.97k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.97k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.97k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.97k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.97k|      }
  172|  10.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.95k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.95k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.95k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.95k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.95k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.95k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.95k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.95k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.95k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.95k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.95k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.95k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.95k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.95k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.95k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.95k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.95k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.95k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.95k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.95k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.95k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.95k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.95k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.95k|    );
   51|  3.95k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.95k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.95k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.95k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.95k|      CARRY,
   59|  3.95k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.95k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.95k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.95k|    );
   80|  3.95k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.95k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.95k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.95k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.95k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.95k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.95k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.95k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.95k|    );
   96|  3.95k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.95k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.95k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.95k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.95k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.95k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.95k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.95k|    return must23_80 ^ sc;
  105|  3.95k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.97k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.97k|    static const uint8_t max_array[32] = {
  115|  1.97k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.97k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.97k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.97k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.97k|    };
  120|  1.97k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.97k|    return input.gt_bits(max_value);
  122|  1.97k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.37k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.37k|      this->error |= this->prev_incomplete;
  150|  2.37k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.37k|    simdutf_really_inline bool errors() const {
  176|  2.37k|      return this->error.any_bits_set_anywhere();
  177|  2.37k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.37k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.37k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.37k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.37k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.37k|    checker c{};
   12|  2.37k|    buf_block_reader<64> reader(input, length);
   13|  10.5k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 8.15k, False: 2.37k]
  ------------------
   14|  8.15k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  8.15k|      c.check_next_input(in);
   16|  8.15k|      reader.advance();
   17|  8.15k|    }
   18|  2.37k|    uint8_t block[64]{};
   19|  2.37k|    reader.get_remainder(block);
   20|  2.37k|    simd::simd8x64<uint8_t> in(block);
   21|  2.37k|    c.check_next_input(in);
   22|  2.37k|    reader.advance();
   23|  2.37k|    c.check_eof();
   24|  2.37k|    return !c.errors();
   25|  2.37k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  7.47k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  7.47k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  7.47k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  7.47k|      utf8_end_of_code_point_mask & 0xfff;
   24|  7.47k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 2.39k, False: 5.07k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  2.39k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  2.39k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  2.39k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  2.39k|    return 16; // We consumed 16 bytes.
   30|  2.39k|  }
   31|  5.07k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 202, False: 4.87k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    202|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    202|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    202|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    202|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    202|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    202|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    202|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    202|    return 16;
   42|    202|  }
   43|  4.87k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 114, False: 4.76k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    114|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    114|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    114|    const __m128i ascii =
   49|    114|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    114|    const __m128i middlebyte =
   51|    114|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    114|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    114|    const __m128i highbyte =
   54|    114|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    114|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    114|    const __m128i composed =
   57|    114|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    114|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    114|    utf32_output += 4;
   60|    114|    return 12;
   61|    114|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.76k|  const uint8_t idx =
   65|  4.76k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.76k|  const uint8_t consumed =
   67|  4.76k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.76k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 3.40k, False: 1.36k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  3.40k|    const __m128i sh =
   75|  3.40k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  3.40k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  3.40k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  3.40k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  3.40k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  3.40k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  3.40k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  3.40k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.15k, False: 205]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.15k|    const __m128i sh =
   86|  1.15k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.15k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.15k|    const __m128i ascii =
   89|  1.15k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.15k|    const __m128i middlebyte =
   91|  1.15k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.15k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.15k|    const __m128i highbyte =
   94|  1.15k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.15k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.15k|    const __m128i composed =
   97|  1.15k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.15k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.15k|    utf32_output += 4;
  100|  1.15k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 205, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    205|    const __m128i sh =
  103|    205|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    205|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    205|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    205|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    205|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    205|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    205|    const __m128i correct =
  111|    205|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    205|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    205|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    205|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    205|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    205|    const __m128i composed =
  117|    205|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    205|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    205|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    205|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    205|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.76k|  return consumed;
  125|  4.87k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.37k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.37k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.37k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  84.9k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  84.9k|  utf8_to_utf32::validating_transcoder converter;
  276|  84.9k|  return converter.convert(buf, len, utf32_output);
  277|  84.9k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.85k|    char32_t* utf32_output) const noexcept {
  286|  1.85k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.85k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.85k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.85k|  return utf8::count_code_points(input, length);
  778|  1.85k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  10.5k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  10.5k|  return input.reduce_or().is_ascii();
   25|  10.5k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.95k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.95k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.95k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.95k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.95k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  91.0k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  91.0k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  91.0k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  91.0k|    return active_implementation;
  815|  91.0k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.37k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.37k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.37k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  84.9k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  84.9k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  84.9k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.85k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.85k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.85k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.85k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.85k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.85k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.85k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.85k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.85k|    size_t counter{0};
  171|  47.0k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 45.1k, False: 1.85k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  45.1k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 44.6k, False: 492]
  ------------------
  174|  45.1k|    }
  175|  1.85k|    return counter;
  176|  1.85k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  84.9k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  84.9k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  84.9k|  size_t pos = 0;
   12|  84.9k|  char32_t* start{utf32_output};
   13|   165k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 84.9k, False: 80.2k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  84.9k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 84.9k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  84.9k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  84.9k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 74.8k, False: 10.0k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  74.8k|      *utf32_output++ = char32_t(leading_byte);
   34|  74.8k|      pos++;
   35|  74.8k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.76k, False: 4.32k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.76k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.76k]
  ------------------
   38|  5.76k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.43k, False: 3.32k]
  ------------------
   39|       |      // range check
   40|  3.32k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.32k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 3.18k]
  |  Branch (41:32): [True: 0, False: 3.18k]
  ------------------
   42|  3.18k|      *utf32_output++ = char32_t(code_point);
   43|  3.18k|      pos += 2;
   44|  4.32k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.38k, False: 1.94k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.38k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.38k]
  ------------------
   47|       |
   48|  2.38k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 618, False: 1.76k]
  ------------------
   49|  1.76k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 236, False: 1.53k]
  ------------------
   50|       |      // range check
   51|  1.53k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.53k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.53k|                   (data[pos + 2] & 0b00111111);
   54|  1.53k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.38k]
  |  Branch (54:33): [True: 0, False: 1.38k]
  ------------------
   55|  1.53k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.11k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    277|        return 0;
   57|    277|      }
   58|  1.25k|      *utf32_output++ = char32_t(code_point);
   59|  1.25k|      pos += 3;
   60|  1.94k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.94k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.94k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.94k]
  ------------------
   63|  1.94k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 307, False: 1.63k]
  ------------------
   64|  1.63k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 143, False: 1.49k]
  ------------------
   65|  1.49k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.35k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.35k|      uint32_t code_point =
   69|  1.35k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.35k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.35k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 262, False: 1.08k]
  |  Branch (71:35): [True: 141, False: 947]
  ------------------
   72|    947|      *utf32_output++ = char32_t(code_point);
   73|    947|      pos += 4;
   74|    947|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  84.9k|  }
   78|  80.2k|  return utf32_output - start;
   79|  84.9k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.85k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.85k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.85k|  size_t pos = 0;
   12|  1.85k|  char32_t* start{utf32_output};
   13|  15.5k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 13.7k, False: 1.85k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  13.7k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 7.48k, False: 6.24k]
  ------------------
   16|  7.48k|      uint64_t v;
   17|  7.48k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  7.48k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.92k, False: 562]
  ------------------
   19|  6.92k|        size_t final_pos = pos + 8;
   20|  62.3k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 55.4k, False: 6.92k]
  ------------------
   21|  55.4k|          *utf32_output++ = char32_t(buf[pos]);
   22|  55.4k|          pos++;
   23|  55.4k|        }
   24|  6.92k|        continue;
   25|  6.92k|      }
   26|  7.48k|    }
   27|  6.80k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.80k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 6.45k, False: 345]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  6.45k|      *utf32_output++ = char32_t(leading_byte);
   31|  6.45k|      pos++;
   32|  6.45k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 187, False: 158]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    187|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 187]
  ------------------
   35|    187|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    187|      pos += 2;
   37|    187|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 89, False: 69]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     89|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 89]
  ------------------
   40|     89|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     89|      pos += 3;
   42|     89|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 69, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     69|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 69]
  ------------------
   45|     69|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     69|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     69|      *utf32_output++ = char32_t(code_word);
   48|     69|      pos += 4;
   49|     69|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.80k|  }
   54|  1.85k|  return utf32_output - start;
   55|  1.85k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  6.75k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  6.75k|  return _popcnt64(input_num);
   16|  6.75k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  7.11k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  7.11k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  7.11k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  7.11k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  10.5k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  23.0k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  23.0k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  23.0k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   246k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   246k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   246k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   246k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  10.5k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  10.5k|      return this->chunks[0] | this->chunks[1];
  297|  10.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  29.3k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   374k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  10.5k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  14.8k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.95k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.95k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.90k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  11.8k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  11.8k|      return lookup_16(simd8<L>::repeat_16(
  140|  11.8k|        replace0,  replace1,  replace2,  replace3,
  141|  11.8k|        replace4,  replace5,  replace6,  replace7,
  142|  11.8k|        replace8,  replace9,  replace10, replace11,
  143|  11.8k|        replace12, replace13, replace14, replace15
  144|  11.8k|      ));
  145|  11.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  11.8k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  11.8k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  11.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  15.8k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  11.8k|    ) {
  218|  11.8k|      return simd8<uint8_t>(
  219|  11.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  11.8k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  11.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  11.8k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  11.8k|      );
  224|  11.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  11.8k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  23.7k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   108k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   108k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.95k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.95k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.95k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.95k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.88k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  49.4k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  49.4k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  49.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  49.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  17.4k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   102k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  20.0k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  20.0k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  20.0k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.95k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  12.0k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.95k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.95k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.97k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.97k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  87.3k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  87.3k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  13.3k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  26.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  26.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  26.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  6.64k|    simdutf_really_inline bool is_ascii() const {
  300|  6.64k|      return this->reduce_or().is_ascii();
  301|  6.64k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  6.64k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  6.64k|      return this->chunks[0] | this->chunks[1];
  297|  6.64k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  6.64k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  6.64k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.30k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.30k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.30k|      return  simd8x64<bool>(
  365|  1.30k|        this->chunks[0] < mask,
  366|  1.30k|        this->chunks[1] < mask
  367|  1.30k|      ).to_bitmask();
  368|  1.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.60k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  8.05k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  8.05k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  8.05k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  8.05k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  8.05k|      return r_lo | (r_hi << 32);
  287|  8.05k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  16.1k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  16.1k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  5.34k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  5.34k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  5.34k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  5.34k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  10.6k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  10.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  10.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  10.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  10.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  10.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  6.75k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  6.75k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  6.75k|      return  simd8x64<bool>(
  373|  6.75k|        this->chunks[0] > mask,
  374|  6.75k|        this->chunks[1] > mask
  375|  6.75k|      ).to_bitmask();
  376|  6.75k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   786k|{
  619|   786k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   786k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   786k|    static_cast<    \
  |  |  247|   786k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   786k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.84M|{
  387|  1.84M|    static_assert(
  388|  1.84M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.84M|        "Scan argument types must be default constructible");
  390|  1.84M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.84M|                  "Scan argument types must be Destructible");
  392|  1.84M|    static_assert(
  393|  1.84M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.84M|        "Scan argument types must not be references");
  395|  1.84M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   786k|    {
  564|   786k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   786k|    {
  574|   786k|        return {
  575|   786k|            detail::make_arg<base::is_packed, Context,
  576|   786k|                             detail::mapped_type_constant<
  577|   786k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   786k|                args)...};
  579|   786k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   786k|{
  415|   786k|    return make_value<Context>(value);
  416|   786k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   872k|{
  372|   872k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   872k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   872k|                                  needs_context_tag>) {
  376|   872k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   872k|    }
  378|   872k|    else {
  379|   872k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   872k|            value, context_tag<Context>{}));
  381|   872k|    }
  382|   872k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   872k|    {                                                                        \
  217|   872k|        return val;                                                          \
  218|   872k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.84M|{
  341|  1.84M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.84M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.84M|    constexpr bool scannable_char =
  345|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.84M|    static_assert(scannable_char,
  347|  1.84M|                  "Cannot scan an argument of an unsupported character "
  348|  1.84M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.84M|    constexpr bool scannable_const =
  351|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.84M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.84M|    constexpr bool scannable_disabled =
  355|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.84M|    static_assert(scannable_disabled,
  357|  1.84M|                  "Cannot scan an argument that has been disabled by "
  358|  1.84M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.84M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.84M|    static_assert(
  362|  1.84M|        scannable,
  363|  1.84M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.84M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.84M|    return arg_value{arg};
  367|  1.84M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.84M|    {
  160|  1.84M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   786k|    {
  647|   786k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  5.87M|    {
  694|  5.87M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   691k|    {
  554|   691k|        return m_args;
  555|   691k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  86.0k|{
  400|  86.0k|    check_scan_arg_types<T>();
  401|       |
  402|  86.0k|    basic_scan_arg<Context> arg;
  403|  86.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  86.0k|    arg.m_value = make_value<Context>(value);
  405|  86.0k|    return arg;
  406|  86.0k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  6.47M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  13.4M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   773k|{
  619|   773k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   773k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   773k|    static_cast<    \
  |  |  247|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   773k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.82M|{
  387|  1.82M|    static_assert(
  388|  1.82M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.82M|        "Scan argument types must be default constructible");
  390|  1.82M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.82M|                  "Scan argument types must be Destructible");
  392|  1.82M|    static_assert(
  393|  1.82M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.82M|        "Scan argument types must not be references");
  395|  1.82M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   773k|    {
  564|   773k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   773k|    {
  574|   773k|        return {
  575|   773k|            detail::make_arg<base::is_packed, Context,
  576|   773k|                             detail::mapped_type_constant<
  577|   773k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   773k|                args)...};
  579|   773k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   773k|{
  415|   773k|    return make_value<Context>(value);
  416|   773k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   855k|{
  372|   855k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   855k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   855k|                                  needs_context_tag>) {
  376|   855k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   855k|    }
  378|   855k|    else {
  379|   855k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   855k|            value, context_tag<Context>{}));
  381|   855k|    }
  382|   855k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   855k|    {                                                                        \
  217|   855k|        return val;                                                          \
  218|   855k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.82M|{
  341|  1.82M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.82M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.82M|    constexpr bool scannable_char =
  345|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.82M|    static_assert(scannable_char,
  347|  1.82M|                  "Cannot scan an argument of an unsupported character "
  348|  1.82M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.82M|    constexpr bool scannable_const =
  351|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.82M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.82M|    constexpr bool scannable_disabled =
  355|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.82M|    static_assert(scannable_disabled,
  357|  1.82M|                  "Cannot scan an argument that has been disabled by "
  358|  1.82M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.82M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.82M|    static_assert(
  362|  1.82M|        scannable,
  363|  1.82M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.82M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.82M|    return arg_value{arg};
  367|  1.82M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.82M|    {
  160|  1.82M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   773k|    {
  647|   773k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   678k|    {
  554|   678k|        return m_args;
  555|   678k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  81.7k|{
  400|  81.7k|    check_scan_arg_types<T>();
  401|       |
  402|  81.7k|    basic_scan_arg<Context> arg;
  403|  81.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  81.7k|    arg.m_value = make_value<Context>(value);
  405|  81.7k|    return arg;
  406|  81.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.15M|{
  619|  1.15M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.15M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.15M|    static_cast<    \
  |  |  247|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.15M|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  2.58M|{
  387|  2.58M|    static_assert(
  388|  2.58M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.58M|        "Scan argument types must be default constructible");
  390|  2.58M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.58M|                  "Scan argument types must be Destructible");
  392|  2.58M|    static_assert(
  393|  2.58M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.58M|        "Scan argument types must not be references");
  395|  2.58M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.15M|    {
  564|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.15M|    {
  574|  1.15M|        return {
  575|  1.15M|            detail::make_arg<base::is_packed, Context,
  576|  1.15M|                             detail::mapped_type_constant<
  577|  1.15M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.15M|                args)...};
  579|  1.15M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.15M|{
  415|  1.15M|    return make_value<Context>(value);
  416|  1.15M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.27M|{
  372|  1.27M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.27M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.27M|                                  needs_context_tag>) {
  376|  1.27M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.27M|    }
  378|  1.27M|    else {
  379|  1.27M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.27M|            value, context_tag<Context>{}));
  381|  1.27M|    }
  382|  1.27M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.27M|    {                                                                        \
  217|  1.27M|        return val;                                                          \
  218|  1.27M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  2.58M|{
  341|  2.58M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.58M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.58M|    constexpr bool scannable_char =
  345|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.58M|    static_assert(scannable_char,
  347|  2.58M|                  "Cannot scan an argument of an unsupported character "
  348|  2.58M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.58M|    constexpr bool scannable_const =
  351|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.58M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.58M|    constexpr bool scannable_disabled =
  355|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.58M|    static_assert(scannable_disabled,
  357|  2.58M|                  "Cannot scan an argument that has been disabled by "
  358|  2.58M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.58M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.58M|    static_assert(
  362|  2.58M|        scannable,
  363|  2.58M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.58M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.58M|    return arg_value{arg};
  367|  2.58M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  2.58M|    {
  160|  2.58M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.15M|    {
  647|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|  1.06M|    {
  554|  1.06M|        return m_args;
  555|  1.06M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   114k|{
  400|   114k|    check_scan_arg_types<T>();
  401|       |
  402|   114k|    basic_scan_arg<Context> arg;
  403|   114k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   114k|    arg.m_value = make_value<Context>(value);
  405|   114k|    return arg;
  406|   114k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   957k|{
  619|   957k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   957k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   957k|    static_cast<    \
  |  |  247|   957k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   957k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  2.20M|{
  387|  2.20M|    static_assert(
  388|  2.20M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.20M|        "Scan argument types must be default constructible");
  390|  2.20M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.20M|                  "Scan argument types must be Destructible");
  392|  2.20M|    static_assert(
  393|  2.20M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.20M|        "Scan argument types must not be references");
  395|  2.20M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   957k|    {
  564|   957k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   957k|    {
  574|   957k|        return {
  575|   957k|            detail::make_arg<base::is_packed, Context,
  576|   957k|                             detail::mapped_type_constant<
  577|   957k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   957k|                args)...};
  579|   957k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   957k|{
  415|   957k|    return make_value<Context>(value);
  416|   957k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  1.05M|{
  372|  1.05M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.05M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.05M|                                  needs_context_tag>) {
  376|  1.05M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.05M|    }
  378|  1.05M|    else {
  379|  1.05M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.05M|            value, context_tag<Context>{}));
  381|  1.05M|    }
  382|  1.05M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  1.05M|    {                                                                        \
  217|  1.05M|        return val;                                                          \
  218|  1.05M|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  2.20M|{
  341|  2.20M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.20M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.20M|    constexpr bool scannable_char =
  345|  2.20M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.20M|    static_assert(scannable_char,
  347|  2.20M|                  "Cannot scan an argument of an unsupported character "
  348|  2.20M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.20M|    constexpr bool scannable_const =
  351|  2.20M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.20M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.20M|    constexpr bool scannable_disabled =
  355|  2.20M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.20M|    static_assert(scannable_disabled,
  357|  2.20M|                  "Cannot scan an argument that has been disabled by "
  358|  2.20M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.20M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.20M|    static_assert(
  362|  2.20M|        scannable,
  363|  2.20M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.20M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.20M|    return arg_value{arg};
  367|  2.20M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  2.20M|    {
  160|  2.20M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   957k|    {
  647|   957k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   862k|    {
  554|   862k|        return m_args;
  555|   862k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  95.9k|{
  400|  95.9k|    check_scan_arg_types<T>();
  401|       |
  402|  95.9k|    basic_scan_arg<Context> arg;
  403|  95.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  95.9k|    arg.m_value = make_value<Context>(value);
  405|  95.9k|    return arg;
  406|  95.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.21M|{
  619|  1.21M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.21M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.21M|    static_cast<    \
  |  |  247|  1.21M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.21M|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  2.70M|{
  387|  2.70M|    static_assert(
  388|  2.70M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.70M|        "Scan argument types must be default constructible");
  390|  2.70M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.70M|                  "Scan argument types must be Destructible");
  392|  2.70M|    static_assert(
  393|  2.70M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.70M|        "Scan argument types must not be references");
  395|  2.70M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.21M|    {
  564|  1.21M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.21M|    {
  574|  1.21M|        return {
  575|  1.21M|            detail::make_arg<base::is_packed, Context,
  576|  1.21M|                             detail::mapped_type_constant<
  577|  1.21M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.21M|                args)...};
  579|  1.21M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.21M|{
  415|  1.21M|    return make_value<Context>(value);
  416|  1.21M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.33M|{
  372|  1.33M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.33M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.33M|                                  needs_context_tag>) {
  376|  1.33M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.33M|    }
  378|  1.33M|    else {
  379|  1.33M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.33M|            value, context_tag<Context>{}));
  381|  1.33M|    }
  382|  1.33M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.33M|    {                                                                        \
  217|  1.33M|        return val;                                                          \
  218|  1.33M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  2.70M|{
  341|  2.70M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.70M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.70M|    constexpr bool scannable_char =
  345|  2.70M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.70M|    static_assert(scannable_char,
  347|  2.70M|                  "Cannot scan an argument of an unsupported character "
  348|  2.70M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.70M|    constexpr bool scannable_const =
  351|  2.70M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.70M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.70M|    constexpr bool scannable_disabled =
  355|  2.70M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.70M|    static_assert(scannable_disabled,
  357|  2.70M|                  "Cannot scan an argument that has been disabled by "
  358|  2.70M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.70M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.70M|    static_assert(
  362|  2.70M|        scannable,
  363|  2.70M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.70M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.70M|    return arg_value{arg};
  367|  2.70M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  2.70M|    {
  160|  2.70M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.21M|    {
  647|  1.21M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|  1.11M|    {
  554|  1.11M|        return m_args;
  555|  1.11M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|   120k|{
  400|   120k|    check_scan_arg_types<T>();
  401|       |
  402|   120k|    basic_scan_arg<Context> arg;
  403|   120k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   120k|    arg.m_value = make_value<Context>(value);
  405|   120k|    return arg;
  406|   120k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   987k|{
  619|   987k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   987k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   987k|    static_cast<    \
  |  |  247|   987k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   987k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  2.26M|{
  387|  2.26M|    static_assert(
  388|  2.26M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.26M|        "Scan argument types must be default constructible");
  390|  2.26M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.26M|                  "Scan argument types must be Destructible");
  392|  2.26M|    static_assert(
  393|  2.26M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.26M|        "Scan argument types must not be references");
  395|  2.26M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   987k|    {
  564|   987k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   987k|    {
  574|   987k|        return {
  575|   987k|            detail::make_arg<base::is_packed, Context,
  576|   987k|                             detail::mapped_type_constant<
  577|   987k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   987k|                args)...};
  579|   987k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   987k|{
  415|   987k|    return make_value<Context>(value);
  416|   987k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|  1.08M|{
  372|  1.08M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.08M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.08M|                                  needs_context_tag>) {
  376|  1.08M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.08M|    }
  378|  1.08M|    else {
  379|  1.08M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.08M|            value, context_tag<Context>{}));
  381|  1.08M|    }
  382|  1.08M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|  1.08M|    {                                                                        \
  217|  1.08M|        return val;                                                          \
  218|  1.08M|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  2.26M|{
  341|  2.26M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.26M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.26M|    constexpr bool scannable_char =
  345|  2.26M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.26M|    static_assert(scannable_char,
  347|  2.26M|                  "Cannot scan an argument of an unsupported character "
  348|  2.26M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.26M|    constexpr bool scannable_const =
  351|  2.26M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.26M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.26M|    constexpr bool scannable_disabled =
  355|  2.26M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.26M|    static_assert(scannable_disabled,
  357|  2.26M|                  "Cannot scan an argument that has been disabled by "
  358|  2.26M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.26M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.26M|    static_assert(
  362|  2.26M|        scannable,
  363|  2.26M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.26M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.26M|    return arg_value{arg};
  367|  2.26M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  2.26M|    {
  160|  2.26M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   987k|    {
  647|   987k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   892k|    {
  554|   892k|        return m_args;
  555|   892k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  98.5k|{
  400|  98.5k|    check_scan_arg_types<T>();
  401|       |
  402|  98.5k|    basic_scan_arg<Context> arg;
  403|  98.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  98.5k|    arg.m_value = make_value<Context>(value);
  405|  98.5k|    return arg;
  406|  98.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   885k|{
  619|   885k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   885k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   885k|    static_cast<    \
  |  |  247|   885k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   885k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   885k|    {
  564|   885k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   885k|    {
  574|   885k|        return {
  575|   885k|            detail::make_arg<base::is_packed, Context,
  576|   885k|                             detail::mapped_type_constant<
  577|   885k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   885k|                args)...};
  579|   885k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   885k|{
  415|   885k|    return make_value<Context>(value);
  416|   885k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   971k|{
  372|   971k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   971k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   971k|                                  needs_context_tag>) {
  376|   971k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   971k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   971k|    }
  378|   971k|    else {
  379|   971k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   971k|            value, context_tag<Context>{}));
  381|   971k|    }
  382|   971k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   971k|    {                                                                        \
  217|   971k|        return val;                                                          \
  218|   971k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   885k|    {
  647|   885k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  6.37M|    {
  694|  6.37M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   601k|    {
  554|   601k|        return m_args;
  555|   601k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  85.4k|{
  400|  85.4k|    check_scan_arg_types<T>();
  401|       |
  402|  85.4k|    basic_scan_arg<Context> arg;
  403|  85.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  85.4k|    arg.m_value = make_value<Context>(value);
  405|  85.4k|    return arg;
  406|  85.4k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  6.95M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   889k|{
  619|   889k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   889k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   889k|    static_cast<    \
  |  |  247|   889k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   889k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   889k|    {
  564|   889k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   889k|    {
  574|   889k|        return {
  575|   889k|            detail::make_arg<base::is_packed, Context,
  576|   889k|                             detail::mapped_type_constant<
  577|   889k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   889k|                args)...};
  579|   889k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   889k|{
  415|   889k|    return make_value<Context>(value);
  416|   889k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   973k|{
  372|   973k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   973k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   973k|                                  needs_context_tag>) {
  376|   973k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   973k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   973k|    }
  378|   973k|    else {
  379|   973k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   973k|            value, context_tag<Context>{}));
  381|   973k|    }
  382|   973k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   973k|    {                                                                        \
  217|   973k|        return val;                                                          \
  218|   973k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   889k|    {
  647|   889k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   605k|    {
  554|   605k|        return m_args;
  555|   605k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  83.3k|{
  400|  83.3k|    check_scan_arg_types<T>();
  401|       |
  402|  83.3k|    basic_scan_arg<Context> arg;
  403|  83.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.3k|    arg.m_value = make_value<Context>(value);
  405|  83.3k|    return arg;
  406|  83.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.20M|{
  619|  1.20M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.20M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.20M|    static_cast<    \
  |  |  247|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.20M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.20M|    {
  564|  1.20M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.20M|    {
  574|  1.20M|        return {
  575|  1.20M|            detail::make_arg<base::is_packed, Context,
  576|  1.20M|                             detail::mapped_type_constant<
  577|  1.20M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.20M|                args)...};
  579|  1.20M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.20M|{
  415|  1.20M|    return make_value<Context>(value);
  416|  1.20M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  1.31M|{
  372|  1.31M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.31M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.31M|                                  needs_context_tag>) {
  376|  1.31M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.31M|    }
  378|  1.31M|    else {
  379|  1.31M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.31M|            value, context_tag<Context>{}));
  381|  1.31M|    }
  382|  1.31M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  1.31M|    {                                                                        \
  217|  1.31M|        return val;                                                          \
  218|  1.31M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.20M|    {
  647|  1.20M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   923k|    {
  554|   923k|        return m_args;
  555|   923k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   109k|{
  400|   109k|    check_scan_arg_types<T>();
  401|       |
  402|   109k|    basic_scan_arg<Context> arg;
  403|   109k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   109k|    arg.m_value = make_value<Context>(value);
  405|   109k|    return arg;
  406|   109k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.05M|{
  619|  1.05M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.05M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.05M|    static_cast<    \
  |  |  247|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.05M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.05M|    {
  564|  1.05M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.05M|    {
  574|  1.05M|        return {
  575|  1.05M|            detail::make_arg<base::is_packed, Context,
  576|  1.05M|                             detail::mapped_type_constant<
  577|  1.05M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.05M|                args)...};
  579|  1.05M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.05M|{
  415|  1.05M|    return make_value<Context>(value);
  416|  1.05M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  1.15M|{
  372|  1.15M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.15M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.15M|                                  needs_context_tag>) {
  376|  1.15M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.15M|    }
  378|  1.15M|    else {
  379|  1.15M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.15M|            value, context_tag<Context>{}));
  381|  1.15M|    }
  382|  1.15M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  1.15M|    {                                                                        \
  217|  1.15M|        return val;                                                          \
  218|  1.15M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.05M|    {
  647|  1.05M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   769k|    {
  554|   769k|        return m_args;
  555|   769k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  96.0k|{
  400|  96.0k|    check_scan_arg_types<T>();
  401|       |
  402|  96.0k|    basic_scan_arg<Context> arg;
  403|  96.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  96.0k|    arg.m_value = make_value<Context>(value);
  405|  96.0k|    return arg;
  406|  96.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.25M|{
  619|  1.25M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.25M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.25M|    static_cast<    \
  |  |  247|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.25M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.25M|    {
  564|  1.25M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.25M|    {
  574|  1.25M|        return {
  575|  1.25M|            detail::make_arg<base::is_packed, Context,
  576|  1.25M|                             detail::mapped_type_constant<
  577|  1.25M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.25M|                args)...};
  579|  1.25M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.25M|{
  415|  1.25M|    return make_value<Context>(value);
  416|  1.25M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|  1.36M|{
  372|  1.36M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.36M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.36M|                                  needs_context_tag>) {
  376|  1.36M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.36M|    }
  378|  1.36M|    else {
  379|  1.36M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.36M|            value, context_tag<Context>{}));
  381|  1.36M|    }
  382|  1.36M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|  1.36M|    {                                                                        \
  217|  1.36M|        return val;                                                          \
  218|  1.36M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.25M|    {
  647|  1.25M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   969k|    {
  554|   969k|        return m_args;
  555|   969k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|   115k|{
  400|   115k|    check_scan_arg_types<T>();
  401|       |
  402|   115k|    basic_scan_arg<Context> arg;
  403|   115k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   115k|    arg.m_value = make_value<Context>(value);
  405|   115k|    return arg;
  406|   115k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.07M|{
  619|  1.07M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.07M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.07M|    static_cast<    \
  |  |  247|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.07M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.07M|    {
  564|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.07M|    {
  574|  1.07M|        return {
  575|  1.07M|            detail::make_arg<base::is_packed, Context,
  576|  1.07M|                             detail::mapped_type_constant<
  577|  1.07M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.07M|                args)...};
  579|  1.07M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.07M|{
  415|  1.07M|    return make_value<Context>(value);
  416|  1.07M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|  1.17M|{
  372|  1.17M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.17M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.17M|                                  needs_context_tag>) {
  376|  1.17M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.17M|    }
  378|  1.17M|    else {
  379|  1.17M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.17M|            value, context_tag<Context>{}));
  381|  1.17M|    }
  382|  1.17M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|  1.17M|    {                                                                        \
  217|  1.17M|        return val;                                                          \
  218|  1.17M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.07M|    {
  647|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   794k|    {
  554|   794k|        return m_args;
  555|   794k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  98.1k|{
  400|  98.1k|    check_scan_arg_types<T>();
  401|       |
  402|  98.1k|    basic_scan_arg<Context> arg;
  403|  98.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  98.1k|    arg.m_value = make_value<Context>(value);
  405|  98.1k|    return arg;
  406|  98.1k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  5.87M|    {
  682|  5.87M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.87M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  5.87M|        return static_cast<std::size_t>(m_desc &
  687|  5.87M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  5.87M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  11.7M|    {
  702|  11.7M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  11.7M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  5.87M|    {
  655|  5.87M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.87M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  5.87M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  5.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.87M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  5.87M|        const auto t = type(id);
  667|  5.87M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  5.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.87M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  5.87M|        basic_scan_arg<Context> arg;
  672|  5.87M|        arg.m_type = t;
  673|  5.87M|        arg.m_value = m_values[id];
  674|  5.87M|        return arg;
  675|  5.87M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  5.87M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  5.87M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  5.87M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  5.87M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  5.87M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  10.9M|    {
  483|  10.9M|        return m_type != detail::arg_type::none_type;
  484|  10.9M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  9.36M|    {
  488|  9.36M|        return m_type;
  489|  9.36M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  6.37M|    {
  682|  6.37M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.37M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  6.37M|        return static_cast<std::size_t>(m_desc &
  687|  6.37M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  6.37M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  12.7M|    {
  702|  12.7M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  12.7M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  6.37M|    {
  655|  6.37M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.37M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  6.37M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.37M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  6.37M|        const auto t = type(id);
  667|  6.37M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.37M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  6.37M|        basic_scan_arg<Context> arg;
  672|  6.37M|        arg.m_type = t;
  673|  6.37M|        arg.m_value = m_values[id];
  674|  6.37M|        return arg;
  675|  6.37M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  6.37M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  6.37M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  6.37M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  6.37M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  6.37M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  11.6M|    {
  483|  11.6M|        return m_type != detail::arg_type::none_type;
  484|  11.6M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  10.3M|    {
  488|  10.3M|        return m_type;
  489|  10.3M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   596k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   587k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   256k|    {
  109|   256k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  4.68M|    {
   60|  4.68M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   426k|    {
  124|   426k|        return m_current;
  125|   426k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  4.68M|    {
   43|  4.68M|        return m_args.get(id);
   44|  4.68M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  4.50M|    {
   53|  4.50M|        return m_locale;
   54|  4.50M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   170k|    {
  132|   170k|        return ranges_std::default_sentinel;
  133|   170k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   170k|    {
  140|   170k|        return ranges::subrange{begin(), end()};
  141|   170k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   768k|    {
  109|   768k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  5.19M|    {
   60|  5.19M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.28M|    {
  124|  1.28M|        return m_current;
  125|  1.28M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  5.19M|    {
   43|  5.19M|        return m_args.get(id);
   44|  5.19M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  4.68M|    {
   53|  4.68M|        return m_locale;
   54|  4.68M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   512k|    {
  132|   512k|        return ranges_std::default_sentinel;
  133|   512k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   512k|    {
  140|   512k|        return ranges::subrange{begin(), end()};
  141|   512k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  3.30M|    {
   69|  3.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  3.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  3.30M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  47.6M|    {
   75|  47.6M|        return m_code == good;
   76|  47.6M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.36M|    {
   86|  1.36M|        return m_code;
   87|  1.36M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.36M|{
  111|  1.36M|    return a.code() == b;
  112|  1.36M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.36M|{
  116|  1.36M|    return !(a == b);
  117|  1.36M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  28.9M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   739k|    {
  675|   739k|        return m_str;
  676|   739k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  5.87M|{
  385|  5.87M|    return s;
  386|  5.87M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  5.87M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   739k|    {
  671|   739k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   726k|    {
  675|   726k|        return m_str;
  676|   726k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   726k|    {
  671|   726k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.11M|    {
  675|  1.11M|        return m_str;
  676|  1.11M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.11M|    {
  671|  1.11M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   910k|    {
  675|   910k|        return m_str;
  676|   910k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   910k|    {
  671|   910k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.16M|    {
  675|  1.16M|        return m_str;
  676|  1.16M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.16M|    {
  671|  1.16M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   940k|    {
  675|   940k|        return m_str;
  676|   940k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   940k|    {
  671|   940k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  47.4k|    {
  675|  47.4k|        return m_str;
  676|  47.4k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  47.4k|    {
  671|  47.4k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   743k|    {
  675|   743k|        return m_str;
  676|   743k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  6.37M|{
  390|  6.37M|    return s;
  391|  6.37M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  6.37M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   743k|    {
  671|   743k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   747k|    {
  675|   747k|        return m_str;
  676|   747k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   747k|    {
  671|   747k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.06M|    {
  675|  1.06M|        return m_str;
  676|  1.06M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.06M|    {
  671|  1.06M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   911k|    {
  675|   911k|        return m_str;
  676|   911k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   911k|    {
  671|   911k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.11M|    {
  675|  1.11M|        return m_str;
  676|  1.11M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.11M|    {
  671|  1.11M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   936k|    {
  675|   936k|        return m_str;
  676|   936k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   936k|    {
  671|   936k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   142k|    {
  675|   142k|        return m_str;
  676|   142k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   142k|    {
  671|   142k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  9.14M|    {
  196|  9.14M|        SCN_GCC_COMPAT_PUSH
  197|  9.14M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  9.14M|        switch (type) {
  199|  2.35M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 2.35M, False: 6.79M]
  ------------------
  200|  4.71M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 2.35M, False: 6.78M]
  ------------------
  201|  4.71M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 9.14M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   375k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 375k, False: 8.77M]
  ------------------
  206|   375k|                return 2;
  207|   625k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 625k, False: 8.52M]
  ------------------
  208|   625k|                return 8;
  209|  1.70M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.70M, False: 7.43M]
  ------------------
  210|  1.70M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 9.14M]
  ------------------
  211|  1.70M|                return 10;
  212|  1.72M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.72M, False: 7.41M]
  ------------------
  213|  1.72M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 9.14M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  9.14M|        }
  219|  9.14M|        SCN_GCC_COMPAT_POP
  220|  9.14M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  9.87M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  2.36M|    {
  245|  2.36M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  2.36M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  2.36M|            m_specs.localized = true;
  247|  2.36M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  2.36M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  7.05M|    {
  260|  7.05M|        m_specs.type = type;
  261|  7.05M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   455k|    {
  322|   455k|        SCN_UNLIKELY_ATTR
  323|   455k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   455k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  9.42M|    {
  333|  9.42M|        return static_cast<bool>(m_error);
  334|  9.42M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  2.36M|{
  981|  2.36M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 2.36M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|   342k|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 342k, False: 2.02M]
  ------------------
  986|   342k|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 2.36M]
  ------------------
  987|   789k|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 447k, False: 1.91M]
  ------------------
  988|   789k|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 2.36M]
  ------------------
  989|  1.25M|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 469k, False: 1.89M]
  ------------------
  990|  1.25M|            return arg_type_category::integer;
  991|       |
  992|   329k|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 329k, False: 2.03M]
  ------------------
  993|   329k|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 2.36M]
  ------------------
  994|   713k|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 383k, False: 1.98M]
  ------------------
  995|   713k|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 2.36M]
  ------------------
  996|  1.10M|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 392k, False: 1.97M]
  ------------------
  997|  1.10M|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 2.36M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 2.36M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 2.36M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 2.36M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 2.36M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 0, False: 2.36M]
  ------------------
 1009|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 2.36M]
  ------------------
 1010|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 2.36M]
  ------------------
 1011|      0|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 2.36M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 2.36M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 2.36M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 2.36M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 2.36M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 2.36M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  2.36M|            SCN_CLANG_POP
 1028|  2.36M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  2.36M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.42M|{
  962|  4.42M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.42M|    handler.check_args_exhausted();
  964|  4.42M|    return handler.get_error();
  965|  4.42M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.42M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.42M|    auto begin = format.data();
  931|  4.42M|    auto it = begin;
  932|  4.42M|    const auto end = format.data() + format.size();
  933|       |
  934|  8.59M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.42M, False: 4.16M]
  ------------------
  935|  4.42M|        const auto ch = *it++;
  936|  4.42M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.42M, False: 0]
  ------------------
  937|  4.42M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.42M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.42M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 256k, False: 4.16M]
  ------------------
  941|   256k|                return;
  942|   256k|            }
  943|  4.42M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.42M|    }
  954|       |
  955|  4.16M|    handler.on_literal_text(begin, end);
  956|  4.16M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  4.42M|{
  860|  4.42M|    struct id_adapter {
  861|  4.42M|        constexpr void operator()()
  862|  4.42M|        {
  863|  4.42M|            arg_id = handler.on_arg_id();
  864|  4.42M|        }
  865|  4.42M|        constexpr void operator()(std::size_t id)
  866|  4.42M|        {
  867|  4.42M|            arg_id = handler.on_arg_id(id);
  868|  4.42M|        }
  869|       |
  870|  4.42M|        constexpr void on_error(const char* msg)
  871|  4.42M|        {
  872|  4.42M|            SCN_UNLIKELY_ATTR
  873|  4.42M|            handler.on_error(msg);
  874|  4.42M|        }
  875|       |
  876|  4.42M|        Handler& handler;
  877|  4.42M|        std::size_t arg_id;
  878|  4.42M|    };
  879|       |
  880|  4.42M|    ++begin;
  881|  4.42M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.42M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.42M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.42M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.42M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.42M|    else {
  893|  4.42M|        auto adapter = id_adapter{handler, 0};
  894|  4.42M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.42M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.42M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.42M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.42M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.42M, False: 0]
  ------------------
  905|  4.42M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.42M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.42M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  8.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 4.33M]
  |  |  |  Branch (153:45): [True: 0, False: 4.42M]
  |  |  |  Branch (153:45): [True: 85.3k, False: 4.33M]
  |  |  ------------------
  ------------------
  911|  85.3k|                handler.on_error("Unknown format specifier");
  912|  85.3k|                return begin;
  913|  85.3k|            }
  914|  4.42M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.42M|    }
  921|  4.33M|    return begin + 1;
  922|  4.42M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.42M|{
  400|  4.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.42M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.42M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.42M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.42M|    handler();
  406|  4.42M|    return begin;
  407|  4.42M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.42M|        {
  863|  4.42M|            arg_id = handler.on_arg_id();
  864|  4.42M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.42M|    {
 1040|  4.42M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.42M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.42M|{
  789|  4.42M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.42M|        if (*begin == CharT{'['}) {
  791|  4.42M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.42M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.42M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.42M|                return begin;
  797|  4.42M|            }
  798|  4.42M|            handler.on_character_set_string(set);
  799|  4.42M|            return begin;
  800|  4.42M|        }
  801|  4.42M|        if (*begin == CharT{'/'}) {
  802|  4.42M|            return parse_presentation_regex(begin, end, handler);
  803|  4.42M|        }
  804|  4.42M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.42M|            handler.on_error("Invalid type specifier in format string");
  807|  4.42M|            return begin;
  808|  4.42M|        }
  809|  4.42M|        handler.on_type(type);
  810|  4.42M|        return begin;
  811|  4.42M|    };
  812|       |
  813|  4.42M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.42M, False: 0]
  |  Branch (813:28): [True: 4.36M, False: 56.9k]
  ------------------
  814|  4.42M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 4.33M, False: 28.4k]
  |  Branch (814:36): [True: 3.17M, False: 1.16M]
  ------------------
  815|  3.17M|        return do_presentation();
  816|  3.17M|    }
  817|       |
  818|  1.24M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.24M|    begin = parse_align(begin, end, handler);
  824|  1.24M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.24M|    begin = parse_width(begin, end, handler);
  830|  1.24M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.24M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.16M, False: 85.3k]
  ------------------
  836|  1.16M|        handler.on_localized();
  837|  1.16M|        ++begin;
  838|  1.16M|    }
  839|  1.24M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.24M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.24M, False: 0]
  |  Branch (844:25): [True: 85.3k, False: 1.16M]
  ------------------
  845|  85.3k|        do_presentation();
  846|  85.3k|    }
  847|  1.24M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.24M|    return begin;
  853|  1.24M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  4.56M|{
  464|  4.56M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.31M, False: 1.24M]
  |  Branch (464:33): [True: 3.31M, False: 0]
  ------------------
  465|  4.56M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.19M, False: 56.9k]
  |  Branch (465:33): [True: 1.19M, False: 0]
  ------------------
  466|  4.56M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.26M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.26M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.26M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.26M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.26M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.26M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.26M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.9k, False: 3.20M]
  |  |  ------------------
  ------------------
  806|  56.9k|            handler.on_error("Invalid type specifier in format string");
  807|  56.9k|            return begin;
  808|  56.9k|        }
  809|  3.20M|        handler.on_type(type);
  810|  3.20M|        return begin;
  811|  3.26M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  3.48M|{
  412|  3.48M|    switch (type) {
  413|   136k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 136k, False: 3.35M]
  ------------------
  414|   193k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 56.9k, False: 3.43M]
  ------------------
  415|   193k|            return presentation_type::int_binary;
  416|   853k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 853k, False: 2.63M]
  ------------------
  417|   853k|            return presentation_type::int_decimal;
  418|  1.19M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.19M, False: 2.29M]
  ------------------
  419|  1.19M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 3.48M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   273k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 273k, False: 3.21M]
  ------------------
  423|   273k|            return presentation_type::int_octal;
  424|   862k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 862k, False: 2.62M]
  ------------------
  425|   862k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 3.48M]
  ------------------
  426|   862k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 3.48M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 3.48M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 3.48M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 3.48M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 3.48M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 3.48M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 3.48M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 3.48M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 3.48M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 3.48M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 3.48M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 3.48M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 3.48M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 3.48M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 3.48M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 3.48M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   113k|        default:
  ------------------
  |  Branch (456:9): [True: 113k, False: 3.37M]
  ------------------
  457|   113k|            return presentation_type::none;
  458|  3.48M|    }
  459|  3.48M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.24M|{
  489|  1.24M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.24M|        switch (ch) {
  493|  1.24M|            case L'<':
  494|  1.24M|                return align_type::left;
  495|  1.24M|            case L'>':
  496|  1.24M|                return align_type::right;
  497|  1.24M|            case L'^':
  498|  1.24M|                return align_type::center;
  499|  1.24M|            default:
  500|  1.24M|                return align_type::none;
  501|  1.24M|        }
  502|  1.24M|    };
  503|       |
  504|  1.24M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.24M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  |  Branch (153:45): [True: 0, False: 1.24M]
  |  |  |  Branch (153:45): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  506|  1.24M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.24M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.24M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.24M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.24M|    const auto begin_before_fill = begin;
  516|  1.24M|    begin += potential_fill_len;
  517|       |
  518|  1.24M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.24M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.24M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.24M|    const auto begin_after_fill = begin;
  524|  1.24M|    ++begin;
  525|       |
  526|  1.24M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.24M, False: 0]
  ------------------
  527|  1.24M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.24M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.24M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.24M|    }
  535|       |
  536|  1.24M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.24M, False: 0]
  ------------------
  537|  1.24M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.24M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.24M|        return begin_before_fill;
  542|  1.24M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.24M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.36M|{
  471|  1.36M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.36M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.36M|        return 1;
  474|  1.36M|    }
  475|  1.36M|    else {
  476|  1.36M|        const auto lengths =
  477|  1.36M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.36M|            "\3\4";
  479|  1.36M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.36M|        return len;
  481|  1.36M|    }
  482|  1.36M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.49M|    auto check_align = [](wchar_t ch) {
  492|  2.49M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.49M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.49M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.49M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.49M|            default:
  ------------------
  |  Branch (499:13): [True: 2.49M, False: 0]
  ------------------
  500|  2.49M|                return align_type::none;
  501|  2.49M|        }
  502|  2.49M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.24M|{
  554|  1.24M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.24M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.19M, False: 56.9k]
  |  Branch (556:33): [True: 0, False: 1.19M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.24M|    return begin;
  567|  1.24M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  1.16M|    {
 1045|  1.16M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.16M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 537k, False: 625k]
  ------------------
 1047|  1.16M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 537k]
  ------------------
 1048|  1.16M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.16M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.16M|        Handler::on_localized();
 1057|  1.16M|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1066|  9.19M|{
 1067|  9.19M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  9.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.19M]
  |  |  ------------------
  ------------------
 1068|      0|        return handler.on_error("Invalid type specifier for integer type");
 1069|      0|    }
 1070|  9.19M|    if (specs.localized) {
  ------------------
  |  Branch (1070:9): [True: 2.36M, False: 6.82M]
  ------------------
 1071|  2.36M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1072|       |            // clang-format off
 1073|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1074|       |            // clang-format on
 1075|      0|            return;
 1076|      0|        }
 1077|  2.36M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|        }
 1082|  2.36M|    }
 1083|  9.19M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   256k|{
  962|   256k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   256k|    handler.check_args_exhausted();
  964|   256k|    return handler.get_error();
  965|   256k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   256k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   256k|    auto begin = format.data();
  931|   256k|    auto it = begin;
  932|   256k|    const auto end = format.data() + format.size();
  933|       |
  934|   256k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 256k, False: 0]
  ------------------
  935|   256k|        const auto ch = *it++;
  936|   256k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 256k, False: 0]
  ------------------
  937|   256k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   256k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   256k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 256k, False: 0]
  ------------------
  941|   256k|                return;
  942|   256k|            }
  943|   256k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   256k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   256k|{
  860|   256k|    struct id_adapter {
  861|   256k|        constexpr void operator()()
  862|   256k|        {
  863|   256k|            arg_id = handler.on_arg_id();
  864|   256k|        }
  865|   256k|        constexpr void operator()(std::size_t id)
  866|   256k|        {
  867|   256k|            arg_id = handler.on_arg_id(id);
  868|   256k|        }
  869|       |
  870|   256k|        constexpr void on_error(const char* msg)
  871|   256k|        {
  872|   256k|            SCN_UNLIKELY_ATTR
  873|   256k|            handler.on_error(msg);
  874|   256k|        }
  875|       |
  876|   256k|        Handler& handler;
  877|   256k|        std::size_t arg_id;
  878|   256k|    };
  879|       |
  880|   256k|    ++begin;
  881|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   256k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 256k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   256k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 256k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   256k|    else {
  893|   256k|        auto adapter = id_adapter{handler, 0};
  894|   256k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   256k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   256k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 256k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   256k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 256k, False: 0]
  ------------------
  905|   256k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   256k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   256k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 170k]
  |  |  |  Branch (153:45): [True: 0, False: 256k]
  |  |  |  Branch (153:45): [True: 85.3k, False: 170k]
  |  |  ------------------
  ------------------
  911|  85.3k|                handler.on_error("Unknown format specifier");
  912|  85.3k|                return begin;
  913|  85.3k|            }
  914|   256k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   256k|    }
  921|   170k|    return begin + 1;
  922|   256k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   256k|{
  400|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   256k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 256k, False: 0]
  |  Branch (401:26): [True: 0, False: 256k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   256k|    handler();
  406|   256k|    return begin;
  407|   256k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   256k|        {
  863|   256k|            arg_id = handler.on_arg_id();
  864|   256k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   256k|    {
 1040|   256k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   256k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   256k|{
  789|   256k|    auto do_presentation = [&]() -> const CharT* {
  790|   256k|        if (*begin == CharT{'['}) {
  791|   256k|            auto set = parse_presentation_set(begin, end, handler);
  792|   256k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   256k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   256k|                return begin;
  797|   256k|            }
  798|   256k|            handler.on_character_set_string(set);
  799|   256k|            return begin;
  800|   256k|        }
  801|   256k|        if (*begin == CharT{'/'}) {
  802|   256k|            return parse_presentation_regex(begin, end, handler);
  803|   256k|        }
  804|   256k|        presentation_type type = parse_presentation_type(*begin++);
  805|   256k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   256k|            handler.on_error("Invalid type specifier in format string");
  807|   256k|            return begin;
  808|   256k|        }
  809|   256k|        handler.on_type(type);
  810|   256k|        return begin;
  811|   256k|    };
  812|       |
  813|   256k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 256k, False: 0]
  |  Branch (813:28): [True: 199k, False: 56.9k]
  ------------------
  814|   256k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 170k, False: 28.4k]
  |  Branch (814:36): [True: 142k, False: 28.4k]
  ------------------
  815|   142k|        return do_presentation();
  816|   142k|    }
  817|       |
  818|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   113k|    begin = parse_align(begin, end, handler);
  824|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   113k|    begin = parse_width(begin, end, handler);
  830|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   113k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 28.4k, False: 85.3k]
  ------------------
  836|  28.4k|        handler.on_localized();
  837|  28.4k|        ++begin;
  838|  28.4k|    }
  839|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   113k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 113k, False: 0]
  |  Branch (844:25): [True: 85.3k, False: 28.4k]
  ------------------
  845|  85.3k|        do_presentation();
  846|  85.3k|    }
  847|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   113k|    return begin;
  853|   113k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   227k|    auto do_presentation = [&]() -> const CharT* {
  790|   227k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 227k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   227k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 227k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   227k|        presentation_type type = parse_presentation_type(*begin++);
  805|   227k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.9k, False: 170k]
  |  |  ------------------
  ------------------
  806|  56.9k|            handler.on_error("Invalid type specifier in format string");
  807|  56.9k|            return begin;
  808|  56.9k|        }
  809|   170k|        handler.on_type(type);
  810|   170k|        return begin;
  811|   227k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   113k|{
  489|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   113k|        switch (ch) {
  493|   113k|            case L'<':
  494|   113k|                return align_type::left;
  495|   113k|            case L'>':
  496|   113k|                return align_type::right;
  497|   113k|            case L'^':
  498|   113k|                return align_type::center;
  499|   113k|            default:
  500|   113k|                return align_type::none;
  501|   113k|        }
  502|   113k|    };
  503|       |
  504|   113k|    auto potential_fill_len = code_point_length(begin, end);
  505|   113k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  506|   113k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   113k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   113k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   113k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   113k|    const auto begin_before_fill = begin;
  516|   113k|    begin += potential_fill_len;
  517|       |
  518|   113k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 113k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   113k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   113k|    const auto begin_after_fill = begin;
  524|   113k|    ++begin;
  525|       |
  526|   113k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 113k, False: 0]
  ------------------
  527|   113k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   113k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 113k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   113k|    }
  535|       |
  536|   113k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 113k, False: 0]
  ------------------
  537|   113k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 113k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   113k|        return begin_before_fill;
  542|   113k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   113k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   227k|    auto check_align = [](wchar_t ch) {
  492|   227k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 227k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 227k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 227k]
  ------------------
  498|      0|                return align_type::center;
  499|   227k|            default:
  ------------------
  |  Branch (499:13): [True: 227k, False: 0]
  ------------------
  500|   227k|                return align_type::none;
  501|   227k|        }
  502|   227k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   113k|{
  554|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   113k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 56.9k, False: 56.9k]
  |  Branch (556:33): [True: 0, False: 56.9k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   113k|    return begin;
  567|   113k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  28.4k|    {
 1045|  28.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  28.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 14.2k, False: 14.2k]
  ------------------
 1047|  28.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 14.2k]
  ------------------
 1048|  28.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  28.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  28.4k|        Handler::on_localized();
 1057|  28.4k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.42M|{
  962|  4.42M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.42M|    handler.check_args_exhausted();
  964|  4.42M|    return handler.get_error();
  965|  4.42M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.42M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.42M|    auto begin = format.data();
  931|  4.42M|    auto it = begin;
  932|  4.42M|    const auto end = format.data() + format.size();
  933|       |
  934|  8.08M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.42M, False: 3.65M]
  ------------------
  935|  4.42M|        const auto ch = *it++;
  936|  4.42M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.42M, False: 0]
  ------------------
  937|  4.42M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.42M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.42M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 768k, False: 3.65M]
  ------------------
  941|   768k|                return;
  942|   768k|            }
  943|  4.42M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.42M|    }
  954|       |
  955|  3.65M|    handler.on_literal_text(begin, end);
  956|  3.65M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  4.42M|{
  860|  4.42M|    struct id_adapter {
  861|  4.42M|        constexpr void operator()()
  862|  4.42M|        {
  863|  4.42M|            arg_id = handler.on_arg_id();
  864|  4.42M|        }
  865|  4.42M|        constexpr void operator()(std::size_t id)
  866|  4.42M|        {
  867|  4.42M|            arg_id = handler.on_arg_id(id);
  868|  4.42M|        }
  869|       |
  870|  4.42M|        constexpr void on_error(const char* msg)
  871|  4.42M|        {
  872|  4.42M|            SCN_UNLIKELY_ATTR
  873|  4.42M|            handler.on_error(msg);
  874|  4.42M|        }
  875|       |
  876|  4.42M|        Handler& handler;
  877|  4.42M|        std::size_t arg_id;
  878|  4.42M|    };
  879|       |
  880|  4.42M|    ++begin;
  881|  4.42M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.42M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.42M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.42M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.42M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.42M|    else {
  893|  4.42M|        auto adapter = id_adapter{handler, 0};
  894|  4.42M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.42M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.42M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.42M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.42M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.42M, False: 0]
  ------------------
  905|  4.42M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.42M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.42M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  8.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 4.17M]
  |  |  |  Branch (153:45): [True: 0, False: 4.42M]
  |  |  |  Branch (153:45): [True: 256k, False: 4.17M]
  |  |  ------------------
  ------------------
  911|   256k|                handler.on_error("Unknown format specifier");
  912|   256k|                return begin;
  913|   256k|            }
  914|  4.42M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.42M|    }
  921|  4.17M|    return begin + 1;
  922|  4.42M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.42M|{
  400|  4.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.42M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.42M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.42M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.42M|    handler();
  406|  4.42M|    return begin;
  407|  4.42M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.42M|        {
  863|  4.42M|            arg_id = handler.on_arg_id();
  864|  4.42M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.42M|    {
 1040|  4.42M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.42M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.42M|{
  789|  4.42M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.42M|        if (*begin == CharT{'['}) {
  791|  4.42M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.42M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.42M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.42M|                return begin;
  797|  4.42M|            }
  798|  4.42M|            handler.on_character_set_string(set);
  799|  4.42M|            return begin;
  800|  4.42M|        }
  801|  4.42M|        if (*begin == CharT{'/'}) {
  802|  4.42M|            return parse_presentation_regex(begin, end, handler);
  803|  4.42M|        }
  804|  4.42M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.42M|            handler.on_error("Invalid type specifier in format string");
  807|  4.42M|            return begin;
  808|  4.42M|        }
  809|  4.42M|        handler.on_type(type);
  810|  4.42M|        return begin;
  811|  4.42M|    };
  812|       |
  813|  4.42M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.42M, False: 0]
  |  Branch (813:28): [True: 4.25M, False: 170k]
  ------------------
  814|  4.42M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 4.17M, False: 85.3k]
  |  Branch (814:36): [True: 3.08M, False: 1.08M]
  ------------------
  815|  3.08M|        return do_presentation();
  816|  3.08M|    }
  817|       |
  818|  1.34M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.34M|    begin = parse_align(begin, end, handler);
  824|  1.34M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.34M|    begin = parse_width(begin, end, handler);
  830|  1.34M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.34M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.08M, False: 256k]
  ------------------
  836|  1.08M|        handler.on_localized();
  837|  1.08M|        ++begin;
  838|  1.08M|    }
  839|  1.34M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.34M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.34M, False: 0]
  |  Branch (844:25): [True: 256k, False: 1.08M]
  ------------------
  845|   256k|        do_presentation();
  846|   256k|    }
  847|  1.34M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.34M|    return begin;
  853|  1.34M|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  4.85M|{
  464|  4.85M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.50M, False: 1.34M]
  |  Branch (464:33): [True: 3.50M, False: 0]
  ------------------
  465|  4.85M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.17M, False: 170k]
  |  Branch (465:33): [True: 1.17M, False: 0]
  ------------------
  466|  4.85M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.33M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.33M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.33M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.33M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.33M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.33M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.33M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 3.16M]
  |  |  ------------------
  ------------------
  806|   170k|            handler.on_error("Invalid type specifier in format string");
  807|   170k|            return begin;
  808|   170k|        }
  809|  3.16M|        handler.on_type(type);
  810|  3.16M|        return begin;
  811|  3.33M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  4.02M|{
  412|  4.02M|    switch (type) {
  413|   241k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 241k, False: 3.78M]
  ------------------
  414|   411k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 170k, False: 3.85M]
  ------------------
  415|   411k|            return presentation_type::int_binary;
  416|   861k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 861k, False: 3.16M]
  ------------------
  417|   861k|            return presentation_type::int_decimal;
  418|  1.17M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.17M, False: 2.84M]
  ------------------
  419|  1.17M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 4.02M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   355k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 355k, False: 3.66M]
  ------------------
  423|   355k|            return presentation_type::int_octal;
  424|   876k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 876k, False: 3.14M]
  ------------------
  425|   876k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 4.02M]
  ------------------
  426|   876k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 4.02M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 4.02M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 4.02M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 4.02M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 4.02M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 4.02M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 4.02M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 4.02M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 4.02M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 4.02M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 4.02M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 4.02M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 4.02M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 4.02M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.02M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.02M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   341k|        default:
  ------------------
  |  Branch (456:9): [True: 341k, False: 3.68M]
  ------------------
  457|   341k|            return presentation_type::none;
  458|  4.02M|    }
  459|  4.02M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.34M|{
  489|  1.34M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.34M|        switch (ch) {
  493|  1.34M|            case L'<':
  494|  1.34M|                return align_type::left;
  495|  1.34M|            case L'>':
  496|  1.34M|                return align_type::right;
  497|  1.34M|            case L'^':
  498|  1.34M|                return align_type::center;
  499|  1.34M|            default:
  500|  1.34M|                return align_type::none;
  501|  1.34M|        }
  502|  1.34M|    };
  503|       |
  504|  1.34M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.34M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  |  Branch (153:45): [True: 0, False: 1.34M]
  |  |  |  Branch (153:45): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  506|  1.34M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.34M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.34M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.34M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.34M|    const auto begin_before_fill = begin;
  516|  1.34M|    begin += potential_fill_len;
  517|       |
  518|  1.34M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.34M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.34M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.34M|    const auto begin_after_fill = begin;
  524|  1.34M|    ++begin;
  525|       |
  526|  1.34M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.34M, False: 0]
  ------------------
  527|  1.34M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.34M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.34M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.34M|    }
  535|       |
  536|  1.34M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.34M, False: 0]
  ------------------
  537|  1.34M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.34M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.34M|        return begin_before_fill;
  542|  1.34M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.34M|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.68M|{
  471|  1.68M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.68M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.68M|        return 1;
  474|  1.68M|    }
  475|  1.68M|    else {
  476|  1.68M|        const auto lengths =
  477|  1.68M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.68M|            "\3\4";
  479|  1.68M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.68M|        return len;
  481|  1.68M|    }
  482|  1.68M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.68M|    auto check_align = [](wchar_t ch) {
  492|  2.68M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.68M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.68M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.68M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.68M|            default:
  ------------------
  |  Branch (499:13): [True: 2.68M, False: 0]
  ------------------
  500|  2.68M|                return align_type::none;
  501|  2.68M|        }
  502|  2.68M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.34M|{
  554|  1.34M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.34M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.17M, False: 170k]
  |  Branch (556:33): [True: 0, False: 1.17M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.34M|    return begin;
  567|  1.34M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|  1.08M|    {
 1045|  1.08M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.08M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 511k, False: 576k]
  ------------------
 1047|  1.08M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 511k]
  ------------------
 1048|  1.08M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.08M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.08M|        Handler::on_localized();
 1057|  1.08M|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   768k|{
  962|   768k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   768k|    handler.check_args_exhausted();
  964|   768k|    return handler.get_error();
  965|   768k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   768k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   768k|    auto begin = format.data();
  931|   768k|    auto it = begin;
  932|   768k|    const auto end = format.data() + format.size();
  933|       |
  934|   768k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 768k, False: 0]
  ------------------
  935|   768k|        const auto ch = *it++;
  936|   768k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 768k, False: 0]
  ------------------
  937|   768k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   768k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   768k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 768k, False: 0]
  ------------------
  941|   768k|                return;
  942|   768k|            }
  943|   768k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   768k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|   768k|{
  860|   768k|    struct id_adapter {
  861|   768k|        constexpr void operator()()
  862|   768k|        {
  863|   768k|            arg_id = handler.on_arg_id();
  864|   768k|        }
  865|   768k|        constexpr void operator()(std::size_t id)
  866|   768k|        {
  867|   768k|            arg_id = handler.on_arg_id(id);
  868|   768k|        }
  869|       |
  870|   768k|        constexpr void on_error(const char* msg)
  871|   768k|        {
  872|   768k|            SCN_UNLIKELY_ATTR
  873|   768k|            handler.on_error(msg);
  874|   768k|        }
  875|       |
  876|   768k|        Handler& handler;
  877|   768k|        std::size_t arg_id;
  878|   768k|    };
  879|       |
  880|   768k|    ++begin;
  881|   768k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   768k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 768k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   768k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 768k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   768k|    else {
  893|   768k|        auto adapter = id_adapter{handler, 0};
  894|   768k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   768k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   768k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 768k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   768k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 768k, False: 0]
  ------------------
  905|   768k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   768k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   768k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 512k]
  |  |  |  Branch (153:45): [True: 0, False: 768k]
  |  |  |  Branch (153:45): [True: 256k, False: 512k]
  |  |  ------------------
  ------------------
  911|   256k|                handler.on_error("Unknown format specifier");
  912|   256k|                return begin;
  913|   256k|            }
  914|   768k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   768k|    }
  921|   512k|    return begin + 1;
  922|   768k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   768k|{
  400|   768k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   768k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   768k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   768k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 768k, False: 0]
  |  Branch (401:26): [True: 0, False: 768k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   768k|    handler();
  406|   768k|    return begin;
  407|   768k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   768k|        {
  863|   768k|            arg_id = handler.on_arg_id();
  864|   768k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   768k|    {
 1040|   768k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   768k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   768k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   768k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|   768k|{
  789|   768k|    auto do_presentation = [&]() -> const CharT* {
  790|   768k|        if (*begin == CharT{'['}) {
  791|   768k|            auto set = parse_presentation_set(begin, end, handler);
  792|   768k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   768k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   768k|                return begin;
  797|   768k|            }
  798|   768k|            handler.on_character_set_string(set);
  799|   768k|            return begin;
  800|   768k|        }
  801|   768k|        if (*begin == CharT{'/'}) {
  802|   768k|            return parse_presentation_regex(begin, end, handler);
  803|   768k|        }
  804|   768k|        presentation_type type = parse_presentation_type(*begin++);
  805|   768k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   768k|            handler.on_error("Invalid type specifier in format string");
  807|   768k|            return begin;
  808|   768k|        }
  809|   768k|        handler.on_type(type);
  810|   768k|        return begin;
  811|   768k|    };
  812|       |
  813|   768k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 768k, False: 0]
  |  Branch (813:28): [True: 597k, False: 170k]
  ------------------
  814|   768k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 512k, False: 85.3k]
  |  Branch (814:36): [True: 426k, False: 85.3k]
  ------------------
  815|   426k|        return do_presentation();
  816|   426k|    }
  817|       |
  818|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   341k|    begin = parse_align(begin, end, handler);
  824|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   341k|    begin = parse_width(begin, end, handler);
  830|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   341k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 85.3k, False: 256k]
  ------------------
  836|  85.3k|        handler.on_localized();
  837|  85.3k|        ++begin;
  838|  85.3k|    }
  839|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   341k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 341k, False: 0]
  |  Branch (844:25): [True: 256k, False: 85.3k]
  ------------------
  845|   256k|        do_presentation();
  846|   256k|    }
  847|   341k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   341k|    return begin;
  853|   341k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   683k|    auto do_presentation = [&]() -> const CharT* {
  790|   683k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 683k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   683k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 683k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   683k|        presentation_type type = parse_presentation_type(*begin++);
  805|   683k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 512k]
  |  |  ------------------
  ------------------
  806|   170k|            handler.on_error("Invalid type specifier in format string");
  807|   170k|            return begin;
  808|   170k|        }
  809|   512k|        handler.on_type(type);
  810|   512k|        return begin;
  811|   683k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   341k|{
  489|   341k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   341k|        switch (ch) {
  493|   341k|            case L'<':
  494|   341k|                return align_type::left;
  495|   341k|            case L'>':
  496|   341k|                return align_type::right;
  497|   341k|            case L'^':
  498|   341k|                return align_type::center;
  499|   341k|            default:
  500|   341k|                return align_type::none;
  501|   341k|        }
  502|   341k|    };
  503|       |
  504|   341k|    auto potential_fill_len = code_point_length(begin, end);
  505|   341k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  |  Branch (153:45): [True: 0, False: 341k]
  |  |  |  Branch (153:45): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  506|   341k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   341k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   341k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   341k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   341k|    const auto begin_before_fill = begin;
  516|   341k|    begin += potential_fill_len;
  517|       |
  518|   341k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 341k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   341k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   341k|    const auto begin_after_fill = begin;
  524|   341k|    ++begin;
  525|       |
  526|   341k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 341k, False: 0]
  ------------------
  527|   341k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   341k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 341k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   341k|    }
  535|       |
  536|   341k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 341k, False: 0]
  ------------------
  537|   341k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 341k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   341k|        return begin_before_fill;
  542|   341k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   341k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   683k|    auto check_align = [](wchar_t ch) {
  492|   683k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 683k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 683k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 683k]
  ------------------
  498|      0|                return align_type::center;
  499|   683k|            default:
  ------------------
  |  Branch (499:13): [True: 683k, False: 0]
  ------------------
  500|   683k|                return align_type::none;
  501|   683k|        }
  502|   683k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   341k|{
  554|   341k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   341k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 170k, False: 170k]
  |  Branch (556:33): [True: 0, False: 170k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   341k|    return begin;
  567|   341k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|  85.3k|    {
 1045|  85.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  85.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 42.6k, False: 42.6k]
  ------------------
 1047|  85.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 42.6k]
  ------------------
 1048|  85.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  85.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  85.3k|        Handler::on_localized();
 1057|  85.3k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  6.17M|{
  226|  6.17M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  6.17M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  6.17M|                  "\n"
  230|  6.17M|                  "Unsupported range type given as input to a scanning "
  231|  6.17M|                  "function.\n"
  232|  6.17M|                  "A range needs to have a character type (value type) "
  233|  6.17M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  6.17M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  6.17M|                  "to be included.\n"
  236|  6.17M|                  "See the scnlib documentation for more details.");
  237|  6.17M|    static_assert(
  238|  6.17M|        !std::is_same_v<T, custom_char_traits>,
  239|  6.17M|        "\n"
  240|  6.17M|        "Unsupported range type given as input to a scanning "
  241|  6.17M|        "function.\n"
  242|  6.17M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  6.17M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  6.17M|        "not supported.");
  245|  6.17M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  6.17M|                  "\n"
  247|  6.17M|                  "Unsupported range type given as input to a scanning "
  248|  6.17M|                  "function.\n"
  249|  6.17M|                  "file_marker_found cannot be used as an "
  250|  6.17M|                  "source range type to scn::scan.\n"
  251|  6.17M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  6.17M|                  "and do not provide an explicit source range, "
  253|  6.17M|                  "or use scn::scan with a FILE* directly.");
  254|  6.17M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  6.17M|                  "\n"
  256|  6.17M|                  "Unsupported range type given as input to a scanning "
  257|  6.17M|                  "function.\n"
  258|  6.17M|                  "In order to be scannable, a range needs to satisfy "
  259|  6.17M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  6.17M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  6.17M|                  "\n"
  262|  6.17M|                  "Unsupported range type given as input to a scanning "
  263|  6.17M|                  "function.\n"
  264|  6.17M|                  "A range needs to model forward_range and have a valid "
  265|  6.17M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  6.17M|                  "Examples of scannable ranges are std::string, "
  267|  6.17M|                  "std::string_view, "
  268|  6.17M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  6.17M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  6.17M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  6.17M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  6.17M|{
  153|  6.17M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  6.17M|        return std::basic_string_view{ranges::data(r),
  155|  6.17M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  6.17M|    }
  162|  6.17M|    else {
  163|  6.17M|        return invalid_char_type{};
  164|  6.17M|    }
  165|  6.17M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   298k|{
  226|   298k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   298k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   298k|                  "\n"
  230|   298k|                  "Unsupported range type given as input to a scanning "
  231|   298k|                  "function.\n"
  232|   298k|                  "A range needs to have a character type (value type) "
  233|   298k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   298k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   298k|                  "to be included.\n"
  236|   298k|                  "See the scnlib documentation for more details.");
  237|   298k|    static_assert(
  238|   298k|        !std::is_same_v<T, custom_char_traits>,
  239|   298k|        "\n"
  240|   298k|        "Unsupported range type given as input to a scanning "
  241|   298k|        "function.\n"
  242|   298k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   298k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   298k|        "not supported.");
  245|   298k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   298k|                  "\n"
  247|   298k|                  "Unsupported range type given as input to a scanning "
  248|   298k|                  "function.\n"
  249|   298k|                  "file_marker_found cannot be used as an "
  250|   298k|                  "source range type to scn::scan.\n"
  251|   298k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   298k|                  "and do not provide an explicit source range, "
  253|   298k|                  "or use scn::scan with a FILE* directly.");
  254|   298k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   298k|                  "\n"
  256|   298k|                  "Unsupported range type given as input to a scanning "
  257|   298k|                  "function.\n"
  258|   298k|                  "In order to be scannable, a range needs to satisfy "
  259|   298k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   298k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   298k|                  "\n"
  262|   298k|                  "Unsupported range type given as input to a scanning "
  263|   298k|                  "function.\n"
  264|   298k|                  "A range needs to model forward_range and have a valid "
  265|   298k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   298k|                  "Examples of scannable ranges are std::string, "
  267|   298k|                  "std::string_view, "
  268|   298k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   298k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   298k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   298k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   298k|{
  196|   298k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   298k|        return file_marker_found{};
  198|   298k|    }
  199|   298k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   298k|        if constexpr (ranges::input_range<Range>) {
  201|   298k|            return insufficient_range{};
  202|   298k|        }
  203|   298k|        else {
  204|   298k|            return invalid_input_range{};
  205|   298k|        }
  206|   298k|    }
  207|   298k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   298k|        return invalid_char_type{};
  209|   298k|    }
  210|   298k|    else {
  211|   298k|        return make_forward_scan_buffer(r);
  212|   298k|    }
  213|   298k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  6.06M|{
  226|  6.06M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  6.06M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  6.06M|                  "\n"
  230|  6.06M|                  "Unsupported range type given as input to a scanning "
  231|  6.06M|                  "function.\n"
  232|  6.06M|                  "A range needs to have a character type (value type) "
  233|  6.06M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  6.06M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  6.06M|                  "to be included.\n"
  236|  6.06M|                  "See the scnlib documentation for more details.");
  237|  6.06M|    static_assert(
  238|  6.06M|        !std::is_same_v<T, custom_char_traits>,
  239|  6.06M|        "\n"
  240|  6.06M|        "Unsupported range type given as input to a scanning "
  241|  6.06M|        "function.\n"
  242|  6.06M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  6.06M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  6.06M|        "not supported.");
  245|  6.06M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  6.06M|                  "\n"
  247|  6.06M|                  "Unsupported range type given as input to a scanning "
  248|  6.06M|                  "function.\n"
  249|  6.06M|                  "file_marker_found cannot be used as an "
  250|  6.06M|                  "source range type to scn::scan.\n"
  251|  6.06M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  6.06M|                  "and do not provide an explicit source range, "
  253|  6.06M|                  "or use scn::scan with a FILE* directly.");
  254|  6.06M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  6.06M|                  "\n"
  256|  6.06M|                  "Unsupported range type given as input to a scanning "
  257|  6.06M|                  "function.\n"
  258|  6.06M|                  "In order to be scannable, a range needs to satisfy "
  259|  6.06M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  6.06M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  6.06M|                  "\n"
  262|  6.06M|                  "Unsupported range type given as input to a scanning "
  263|  6.06M|                  "function.\n"
  264|  6.06M|                  "A range needs to model forward_range and have a valid "
  265|  6.06M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  6.06M|                  "Examples of scannable ranges are std::string, "
  267|  6.06M|                  "std::string_view, "
  268|  6.06M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  6.06M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  6.06M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  6.06M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  6.06M|{
  153|  6.06M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  6.06M|        return std::basic_string_view{ranges::data(r),
  155|  6.06M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  6.06M|    }
  162|  6.06M|    else {
  163|  6.06M|        return invalid_char_type{};
  164|  6.06M|    }
  165|  6.06M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   896k|{
  226|   896k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   896k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   896k|                  "\n"
  230|   896k|                  "Unsupported range type given as input to a scanning "
  231|   896k|                  "function.\n"
  232|   896k|                  "A range needs to have a character type (value type) "
  233|   896k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   896k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   896k|                  "to be included.\n"
  236|   896k|                  "See the scnlib documentation for more details.");
  237|   896k|    static_assert(
  238|   896k|        !std::is_same_v<T, custom_char_traits>,
  239|   896k|        "\n"
  240|   896k|        "Unsupported range type given as input to a scanning "
  241|   896k|        "function.\n"
  242|   896k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   896k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   896k|        "not supported.");
  245|   896k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   896k|                  "\n"
  247|   896k|                  "Unsupported range type given as input to a scanning "
  248|   896k|                  "function.\n"
  249|   896k|                  "file_marker_found cannot be used as an "
  250|   896k|                  "source range type to scn::scan.\n"
  251|   896k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   896k|                  "and do not provide an explicit source range, "
  253|   896k|                  "or use scn::scan with a FILE* directly.");
  254|   896k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   896k|                  "\n"
  256|   896k|                  "Unsupported range type given as input to a scanning "
  257|   896k|                  "function.\n"
  258|   896k|                  "In order to be scannable, a range needs to satisfy "
  259|   896k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   896k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   896k|                  "\n"
  262|   896k|                  "Unsupported range type given as input to a scanning "
  263|   896k|                  "function.\n"
  264|   896k|                  "A range needs to model forward_range and have a valid "
  265|   896k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   896k|                  "Examples of scannable ranges are std::string, "
  267|   896k|                  "std::string_view, "
  268|   896k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   896k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   896k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   896k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   896k|{
  196|   896k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   896k|        return file_marker_found{};
  198|   896k|    }
  199|   896k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   896k|        if constexpr (ranges::input_range<Range>) {
  201|   896k|            return insufficient_range{};
  202|   896k|        }
  203|   896k|        else {
  204|   896k|            return invalid_input_range{};
  205|   896k|        }
  206|   896k|    }
  207|   896k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   896k|        return invalid_char_type{};
  209|   896k|    }
  210|   896k|    else {
  211|   896k|        return make_forward_scan_buffer(r);
  212|   896k|    }
  213|   896k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  9.67M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  4.68M|    {
   45|  4.68M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  4.68M|    {
   66|  4.68M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  4.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.68M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  4.68M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  4.68M|        do_check_arg_id(id);
   74|  4.68M|        return id;
   75|  4.68M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  4.68M|{
  210|  4.68M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  4.68M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  4.68M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  4.50M|    {
   61|  4.50M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.50M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  9.19M|    {
   50|  9.19M|        return m_format.data();
   51|  9.19M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  5.19M|    {
   45|  5.19M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  5.19M|    {
   66|  5.19M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  5.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.19M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  5.19M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  5.19M|        do_check_arg_id(id);
   74|  5.19M|        return id;
   75|  5.19M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  5.19M|{
  210|  5.19M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  5.19M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  5.19M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  4.68M|    {
   61|  4.68M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.68M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  9.87M|    {
   50|  9.87M|        return m_format.data();
   51|  9.87M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  19.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  12.2M|    {
  482|  12.2M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  12.2M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  12.2M|    {
  473|  12.2M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  12.2M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  6.06M|    {
  482|  6.06M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  6.06M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  6.06M|    {
  473|  6.06M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  6.06M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.60M|    {
  594|  1.60M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.60M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.60M|    {
  564|  1.60M|        return ranges::prev(it);
  565|  1.60M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.69M|    {
  482|  3.69M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.69M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.69M|    {
  473|  3.69M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.69M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  4.26M|    {
  513|  4.26M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  4.26M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  4.26M|    {
  505|  4.26M|        return ranges::next(it, n);
  506|  4.26M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  4.19M|    {
  549|  4.19M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  4.19M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  4.19M|    {
  541|  4.19M|        return ranges::distance(lhs, rhs);
  542|  4.19M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   597k|    {
  513|   597k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   597k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   597k|    {
  498|   597k|        it.batch_advance(n);
  499|   597k|        return it;
  500|   597k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  28.4k|    {
  549|  28.4k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  28.4k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  28.4k|    {
  534|  28.4k|        return rhs.position() - lhs.position();
  535|  28.4k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.61M|    {
  482|  3.61M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.61M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.61M|    {
  473|  3.61M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.61M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.42M|    {
  594|  1.42M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.42M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.42M|    {
  564|  1.42M|        return ranges::prev(it);
  565|  1.42M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.73M|    {
  513|  3.73M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.73M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.73M|    {
  505|  3.73M|        return ranges::next(it, n);
  506|  3.73M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.69M|    {
  549|  3.69M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.69M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.69M|    {
  541|  3.69M|        return ranges::distance(lhs, rhs);
  542|  3.69M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.79M|    {
  513|  1.79M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.79M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.79M|    {
  498|  1.79M|        it.batch_advance(n);
  499|  1.79M|        return it;
  500|  1.79M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   256k|    {
  549|   256k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   256k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   256k|    {
  534|   256k|        return rhs.position() - lhs.position();
  535|   256k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  5.87M|{
  343|  5.87M|    return {ranges::next(ranges::begin(source), n),
  344|  5.87M|            make_vscan_result_range_end(source)};
  345|  5.87M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  5.87M|{
  330|  5.87M|    return ranges::end(source);
  331|  5.87M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   772k|    {
  253|   772k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  5.87M|    {
  104|  5.87M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.44M|    {
   39|  1.44M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  5.87M|    {
  121|  5.87M|        return ranges::begin(m_range);
  122|  5.87M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   755k|    {
  253|   755k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.43M|    {
   39|  1.43M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.17M|    {
  253|  1.17M|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  2.19M|    {
   39|  2.19M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   954k|    {
  253|   954k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.80M|    {
   39|  1.80M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.23M|    {
  253|  1.23M|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  2.30M|    {
   39|  2.30M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   986k|    {
  253|   986k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.86M|    {
   39|  1.86M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  5.16M|{
  343|  5.16M|    return {ranges::next(ranges::begin(source), n),
  344|  5.16M|            make_vscan_result_range_end(source)};
  345|  5.16M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  5.16M|{
  330|  5.16M|    return ranges::end(source);
  331|  5.16M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   672k|    {
  253|   672k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  5.16M|    {
  104|  5.16M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  5.16M|    {
  121|  5.16M|        return ranges::begin(m_range);
  122|  5.16M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   674k|    {
  253|   674k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.01M|    {
  253|  1.01M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   851k|    {
  253|   851k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.07M|    {
  253|  1.07M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   878k|    {
  253|   878k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   369k|{
  117|   369k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   369k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   369k|{
   77|   369k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   369k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   369k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   369k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   739k|{
   55|   739k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 691k]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|   691k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   739k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   369k|{
  201|   369k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   369k|                                                      format, {});
  203|   369k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   369k|{
  163|   369k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   369k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   369k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   369k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  83.6k|{
  248|  83.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  83.6k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  83.6k|{
  229|  83.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  83.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  83.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  83.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  81.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.2k|    static_cast<    \
  |  |  247|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.2k|    static_cast<    \
  |  |  247|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  83.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   363k|{
  117|   363k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   363k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   363k|{
   77|   363k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   363k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   363k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   363k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   363k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   726k|{
   55|   726k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 678k]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|   678k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   678k|    static_cast<    \
  |  |  247|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   678k|    static_cast<    \
  |  |  247|   678k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   726k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   363k|{
  201|   363k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   363k|                                                      format, {});
  203|   363k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   363k|{
  163|   363k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   363k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   363k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   363k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   363k|    static_cast<    \
  |  |  247|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   363k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  79.4k|{
  248|  79.4k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  79.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  79.4k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  79.4k|{
  229|  79.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  79.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  79.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 77.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  79.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  77.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  77.0k|    static_cast<    \
  |  |  247|  77.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  77.0k|    static_cast<    \
  |  |  247|  77.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  79.4k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   555k|{
  117|   555k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   555k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   555k|{
   77|   555k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   555k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   555k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   555k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   555k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.11M|{
   55|  1.11M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 1.06M]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|  1.06M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06M|    static_cast<    \
  |  |  247|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06M|    static_cast<    \
  |  |  247|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.11M|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   555k|{
  201|   555k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   555k|                                                      format, {});
  203|   555k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   555k|{
  163|   555k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   555k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   555k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   555k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   555k|    static_cast<    \
  |  |  247|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   555k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   111k|{
  248|   111k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   111k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   111k|{
  229|   111k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   111k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   109k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   109k|    static_cast<    \
  |  |  247|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   109k|    static_cast<    \
  |  |  247|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   111k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   455k|{
  117|   455k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   455k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   455k|{
   77|   455k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   455k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   455k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   455k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   455k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   910k|{
   55|   910k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 862k]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|   862k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   862k|    static_cast<    \
  |  |  247|   862k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   862k|    static_cast<    \
  |  |  247|   862k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   910k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   455k|{
  201|   455k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   455k|                                                      format, {});
  203|   455k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   455k|{
  163|   455k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   455k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   455k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   455k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   455k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  93.5k|{
  248|  93.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  93.5k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  93.5k|{
  229|  93.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  93.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  93.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 91.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  93.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  91.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.2k|    static_cast<    \
  |  |  247|  91.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.2k|    static_cast<    \
  |  |  247|  91.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  93.5k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   581k|{
  117|   581k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   581k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   581k|{
   77|   581k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   581k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   581k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   581k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   581k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.16M|{
   55|  1.16M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 1.11M]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|  1.11M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.11M|    static_cast<    \
  |  |  247|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.11M|    static_cast<    \
  |  |  247|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.16M|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   581k|{
  201|   581k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   581k|                                                      format, {});
  203|   581k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   581k|{
  163|   581k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   581k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   581k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   581k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   581k|    static_cast<    \
  |  |  247|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   581k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   117k|{
  248|   117k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   117k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   117k|{
  229|   117k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   117k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   115k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   115k|    static_cast<    \
  |  |  247|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   115k|    static_cast<    \
  |  |  247|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   117k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   470k|{
  117|   470k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   470k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   470k|{
   77|   470k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   470k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   470k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   470k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   470k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   940k|{
   55|   940k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   940k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 892k]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|   892k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   892k|    static_cast<    \
  |  |  247|   892k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   892k|    static_cast<    \
  |  |  247|   892k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   940k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   470k|{
  201|   470k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   470k|                                                      format, {});
  203|   470k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   470k|{
  163|   470k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   470k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   470k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   470k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   470k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  96.1k|{
  248|  96.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  96.1k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  96.1k|{
  229|  96.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  96.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  96.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 93.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  96.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  93.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  93.8k|    static_cast<    \
  |  |  247|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  93.8k|    static_cast<    \
  |  |  247|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  96.1k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  23.7k|{
  117|  23.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  23.7k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  23.7k|{
   77|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  23.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  23.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  47.4k|{
   55|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.4k, False: 0]
  |  |  ------------------
  ------------------
   56|  47.4k|        return unexpected(result.error());
   57|  47.4k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  47.4k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  23.7k|{
  201|  23.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  23.7k|                                                      format, {});
  203|  23.7k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  23.7k|{
  163|  23.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  23.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  23.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  23.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  23.7k|    static_cast<    \
  |  |  247|  23.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  23.7k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.37k|{
  248|  2.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.37k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.37k|{
  229|  2.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.37k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   371k|{
   77|   371k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   371k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   371k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   371k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   371k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   743k|{
   55|   743k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 601k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   601k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   743k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   371k|{
  163|   371k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   371k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   371k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   371k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   371k|    static_cast<    \
  |  |  247|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   371k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  78.3k|{
  229|  78.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  78.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  78.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  78.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  71.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  71.2k|    static_cast<    \
  |  |  247|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  71.2k|    static_cast<    \
  |  |  247|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  78.3k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   373k|{
   77|   373k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   373k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   373k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   373k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   373k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   747k|{
   55|   747k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 605k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   605k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   605k|    static_cast<    \
  |  |  247|   605k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   605k|    static_cast<    \
  |  |  247|   605k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   747k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   373k|{
  163|   373k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   373k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   373k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   373k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   373k|    static_cast<    \
  |  |  247|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   373k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  76.2k|{
  229|  76.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  76.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  76.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 69.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  76.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  69.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  69.1k|    static_cast<    \
  |  |  247|  69.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  69.1k|    static_cast<    \
  |  |  247|  69.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  76.2k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   532k|{
   77|   532k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   532k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   532k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   532k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   532k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.06M|{
   55|  1.06M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 923k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   923k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   923k|    static_cast<    \
  |  |  247|   923k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   923k|    static_cast<    \
  |  |  247|   923k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.06M|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   532k|{
  163|   532k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   532k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   532k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   532k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   532k|    static_cast<    \
  |  |  247|   532k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   532k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   102k|{
  229|   102k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   102k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 95.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  95.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  95.5k|    static_cast<    \
  |  |  247|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  95.5k|    static_cast<    \
  |  |  247|  95.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   102k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   455k|{
   77|   455k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   455k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   455k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   455k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   455k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   911k|{
   55|   911k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 769k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   769k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   769k|    static_cast<    \
  |  |  247|   769k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   769k|    static_cast<    \
  |  |  247|   769k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   911k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   455k|{
  163|   455k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   455k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   455k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   455k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   455k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  88.9k|{
  229|  88.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  88.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  88.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 81.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  88.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  81.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.7k|    static_cast<    \
  |  |  247|  81.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.7k|    static_cast<    \
  |  |  247|  81.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  88.9k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   556k|{
   77|   556k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   556k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   556k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   556k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   556k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.11M|{
   55|  1.11M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 969k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   969k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   969k|    static_cast<    \
  |  |  247|   969k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   969k|    static_cast<    \
  |  |  247|   969k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.11M|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   556k|{
  163|   556k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   556k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   556k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   556k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   556k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   107k|{
  229|   107k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   107k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   100k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   100k|    static_cast<    \
  |  |  247|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   100k|    static_cast<    \
  |  |  247|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   107k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   468k|{
   77|   468k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   468k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   468k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   468k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   468k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   936k|{
   55|   936k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 794k]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|   794k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   794k|    static_cast<    \
  |  |  247|   794k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   794k|    static_cast<    \
  |  |  247|   794k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   936k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   468k|{
  163|   468k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   468k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   468k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   468k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   468k|    static_cast<    \
  |  |  247|   468k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   468k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  91.0k|{
  229|  91.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  91.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  91.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  91.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  83.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  83.9k|    static_cast<    \
  |  |  247|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  83.9k|    static_cast<    \
  |  |  247|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  91.0k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  71.1k|{
   77|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  71.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  71.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   142k|{
   55|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
   56|   142k|        return unexpected(result.error());
   57|   142k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   142k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  71.1k|{
  163|  71.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  71.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  71.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  71.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  71.1k|    static_cast<    \
  |  |  247|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  71.1k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.11k|{
  229|  7.11k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.11k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   298k|{
  486|   298k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   298k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   298k|    {
  378|   298k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   298k|    {
  360|   298k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   298k|    {
  129|   298k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   298k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   455k|    {
  382|   455k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 528, False: 455k]
  ------------------
  383|    528|            return false;
  384|    528|        }
  385|   455k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 241k, False: 213k]
  ------------------
  386|   241k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   241k|                                          this->m_current_view.begin(),
  388|   241k|                                          this->m_current_view.end());
  389|   241k|        }
  390|   455k|        m_latest = *m_cursor;
  391|   455k|        ++m_cursor;
  392|   455k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   455k|        return true;
  394|   455k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   298k|    {
   49|   298k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   298k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   298k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   896k|{
  486|   896k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   896k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   896k|    {
  378|   896k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   896k|    {
  360|   896k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   896k|    {
  129|   896k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   896k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.70M|    {
  382|  1.70M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 648, False: 1.70M]
  ------------------
  383|    648|            return false;
  384|    648|        }
  385|  1.70M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.06M, False: 640k]
  ------------------
  386|  1.06M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.06M|                                          this->m_current_view.begin(),
  388|  1.06M|                                          this->m_current_view.end());
  389|  1.06M|        }
  390|  1.70M|        m_latest = *m_cursor;
  391|  1.70M|        ++m_cursor;
  392|  1.70M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.70M|        return true;
  394|  1.70M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   896k|    {
   49|   896k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   896k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   896k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  12.4M|    {
  173|  12.4M|        return m_end == nullptr;
  174|  12.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   426k|    {
  189|   426k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 426k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   426k|        return parent()->get_segment_starting_at(position());
  195|   426k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  6.51M|    {
  183|  6.51M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  6.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  6.51M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   426k|    {
   79|   426k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 426k]
  |  |  ------------------
  ------------------
   80|   426k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   426k|        const auto start = pos - m_putback_buffer.size();
   84|   426k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   426k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   426k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   426k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   384k|    {
  178|   384k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   384k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   868k|    {
  168|   868k|        return m_position;
  169|   868k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   896k|    {
  101|   896k|        return m_is_contiguous;
  102|   896k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  43.1M|    {
  173|  43.1M|        return m_end == nullptr;
  174|  43.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.28M|    {
  189|  1.28M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.28M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.28M|        return parent()->get_segment_starting_at(position());
  195|  1.28M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  22.9M|    {
  183|  22.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  22.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.28M|    {
   79|  1.28M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.28M]
  |  |  ------------------
  ------------------
   80|  1.28M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|  1.28M|        const auto start = pos - m_putback_buffer.size();
   84|  1.28M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.28M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.15M|    {
  178|  1.15M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.15M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  2.94M|    {
  168|  2.94M|        return m_position;
  169|  2.94M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.68M|    {
  101|  2.68M|        return m_is_contiguous;
  102|  2.68M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   298k|{
  322|   298k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 298k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   298k|    return ranges::subrange{forward_iterator{this, 0},
  327|   298k|                            ranges_std::default_sentinel};
  328|   298k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   298k|    {
  155|   298k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   298k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   298k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   982k|    {
  258|   982k|        return x.is_at_end();
  259|   982k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.25M|    {
  302|  1.25M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.25M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.25M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.25M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.25M|        return !read_at_position();
  309|  1.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.21M|    {
  282|  3.21M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.21M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.21M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.21M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.76M, False: 455k]
  |  |  ------------------
  ------------------
  289|  2.76M|            return true;
  290|  2.76M|        }
  291|       |
  292|   911k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 455k, False: 455k]
  ------------------
  293|   455k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 528, False: 455k]
  ------------------
  294|    528|                return false;
  295|    528|            }
  296|   455k|        }
  297|   455k|        return true;
  298|   455k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  4.51M|    {
   59|  4.51M|        return m_putback_buffer.size() + m_current_view.size();
   60|  4.51M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   270k|    {
  269|   270k|        return !x.is_at_end();
  270|   270k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.50M|    {
  217|  1.50M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.50M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.50M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.50M|        auto res = read_at_position();
  226|  1.50M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.50M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.50M|    {
   90|  1.50M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.36M, False: 142k]
  |  |  ------------------
  ------------------
   91|  1.50M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.36M|            return m_putback_buffer[pos];
   93|  1.36M|        }
   94|   142k|        const auto start = pos - m_putback_buffer.size();
   95|   142k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.50M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   455k|    {
  203|   455k|        ++m_position;
  204|   455k|        std::ignore = read_at_position();
  205|   455k|        return *this;
  206|   455k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   469k|    {
  252|   469k|        return !(lhs == rhs);
  253|   469k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   654k|    {
  247|   654k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 654k, False: 0]
  |  Branch (247:46): [True: 213k, False: 441k]
  ------------------
  248|   654k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   597k|    {
  232|   597k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   597k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   597k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   597k|        return *this;
  235|   597k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   298k|    {
   54|   298k|        sync(0);
   55|   298k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   896k|{
  322|   896k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 896k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   896k|    return ranges::subrange{forward_iterator{this, 0},
  327|   896k|                            ranges_std::default_sentinel};
  328|   896k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   896k|    {
  155|   896k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   896k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   896k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.94M|    {
  258|  2.94M|        return x.is_at_end();
  259|  2.94M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.09M|    {
  302|  4.09M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.09M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.09M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.09M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.09M|        return !read_at_position();
  309|  4.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  11.3M|    {
  282|  11.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  11.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 11.3M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  11.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.64M, False: 1.70M]
  |  |  ------------------
  ------------------
  289|  9.64M|            return true;
  290|  9.64M|        }
  291|       |
  292|  3.41M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.70M, False: 1.70M]
  ------------------
  293|  1.70M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 648, False: 1.70M]
  ------------------
  294|    648|                return false;
  295|    648|            }
  296|  1.70M|        }
  297|  1.70M|        return true;
  298|  1.70M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  15.9M|    {
   59|  15.9M|        return m_putback_buffer.size() + m_current_view.size();
   60|  15.9M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.15M|    {
  269|  1.15M|        return !x.is_at_end();
  270|  1.15M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.20M|    {
  217|  5.20M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.20M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.20M|        auto res = read_at_position();
  226|  5.20M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.20M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.20M|    {
   90|  5.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.09M, False: 1.10M]
  |  |  ------------------
  ------------------
   91|  5.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.09M|            return m_putback_buffer[pos];
   93|  4.09M|        }
   94|  1.10M|        const auto start = pos - m_putback_buffer.size();
   95|  1.10M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.20M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.04M|    {
  203|  2.04M|        ++m_position;
  204|  2.04M|        std::ignore = read_at_position();
  205|  2.04M|        return *this;
  206|  2.04M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.75M|    {
  252|  1.75M|        return !(lhs == rhs);
  253|  1.75M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.30M|    {
  247|  2.30M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.30M, False: 0]
  |  Branch (247:46): [True: 640k, False: 1.66M]
  ------------------
  248|  2.30M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.79M|    {
  232|  1.79M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.79M|        return *this;
  235|  1.79M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   896k|    {
   54|   896k|        sync(0);
   55|   896k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   189k|{
   72|   189k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   189k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   189k|    }
   75|   189k|    else if constexpr (sizeof(U) == 2) {
   76|   189k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   189k|    }
   78|   189k|    else {
   79|       |        // utf-32
   80|   189k|        static_assert(sizeof(U) == 4);
   81|   189k|        SCN_UNUSED(ch);
   82|   189k|        return 1;
   83|   189k|    }
   84|   189k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   189k|{
   36|   189k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   189k|    SCN_GCC_COMPAT_PUSH
   39|   189k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   189k|    constexpr char lengths[] =
   41|   189k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   189k|        "\1\1\1\1\1\1\1\1"
   43|   189k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   189k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   189k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   189k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   189k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   189k|    SCN_GCC_COMPAT_POP
   50|   189k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  89.0M|{
   72|  89.0M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  89.0M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  89.0M|    }
   75|  89.0M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  89.0M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  89.0M|    }
   78|  89.0M|    else {
   79|       |        // utf-32
   80|  89.0M|        static_assert(sizeof(U) == 4);
   81|  89.0M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  89.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  89.0M|        return 1;
   83|  89.0M|    }
   84|  89.0M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.74M|{
   36|  1.74M|#define SCN_VISIT(Type)                                         \
   37|  1.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.74M|    }                                                           \
   40|  1.74M|    else {                                                      \
   41|  1.74M|        return vis(monostate_val);                              \
   42|  1.74M|    }
   43|       |
   44|  1.74M|    monostate monostate_val{};
   45|       |
   46|  1.74M|    switch (arg.m_type) {
   47|   250k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 250k, False: 1.49M]
  ------------------
   48|   250k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   250k|    }                                                           \
  |  |   40|   250k|    else {                                                      \
  |  |   41|   250k|        return vis(monostate_val);                              \
  |  |   42|   250k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.74M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   335k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 335k, False: 1.41M]
  ------------------
   52|   335k|            SCN_VISIT(int);
  ------------------
  |  |   37|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   335k|    }                                                           \
  |  |   40|   335k|    else {                                                      \
  |  |   41|   335k|        return vis(monostate_val);                              \
  |  |   42|   335k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.74M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   352k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 352k, False: 1.39M]
  ------------------
   56|   352k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   352k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   352k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   352k|    }                                                           \
  |  |   40|   352k|    else {                                                      \
  |  |   41|   352k|        return vis(monostate_val);                              \
  |  |   42|   352k|    }
  ------------------
   57|   238k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 238k, False: 1.50M]
  ------------------
   58|   238k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   238k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   238k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   238k|    }                                                           \
  |  |   40|   238k|    else {                                                      \
  |  |   41|   238k|        return vis(monostate_val);                              \
  |  |   42|   238k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.74M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   280k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 280k, False: 1.46M]
  ------------------
   62|   280k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   280k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   280k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   280k|    }                                                           \
  |  |   40|   280k|    else {                                                      \
  |  |   41|   280k|        return vis(monostate_val);                              \
  |  |   42|   280k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.74M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   288k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 288k, False: 1.45M]
  ------------------
   66|   288k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   288k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   288k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   288k|    }                                                           \
  |  |   40|   288k|    else {                                                      \
  |  |   41|   288k|        return vis(monostate_val);                              \
  |  |   42|   288k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.74M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.74M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.74M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.74M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.74M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.74M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.74M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.74M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.74M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.74M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.74M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.74M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.74M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.74M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.74M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.74M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.74M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.74M|            SCN_CLANG_POP
  114|  1.74M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.74M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  42.6k|{
   36|  42.6k|#define SCN_VISIT(Type)                                         \
   37|  42.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  42.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  42.6k|    }                                                           \
   40|  42.6k|    else {                                                      \
   41|  42.6k|        return vis(monostate_val);                              \
   42|  42.6k|    }
   43|       |
   44|  42.6k|    monostate monostate_val{};
   45|       |
   46|  42.6k|    switch (arg.m_type) {
   47|  7.11k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 7.11k, False: 35.5k]
  ------------------
   48|  7.11k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 42.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  7.11k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 7.11k, False: 35.5k]
  ------------------
   52|  7.11k|            SCN_VISIT(int);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 42.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  7.11k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 7.11k, False: 35.5k]
  ------------------
   56|  7.11k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   57|  7.11k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 7.11k, False: 35.5k]
  ------------------
   58|  7.11k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 42.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  7.11k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 7.11k, False: 35.5k]
  ------------------
   62|  7.11k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 42.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  7.11k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 7.11k, False: 35.5k]
  ------------------
   66|  7.11k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  7.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.11k|    }                                                           \
  |  |   40|  7.11k|    else {                                                      \
  |  |   41|  7.11k|        return vis(monostate_val);                              \
  |  |   42|  7.11k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 42.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 42.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 42.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 42.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 42.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 42.6k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 42.6k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 42.6k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 42.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 42.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 42.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 42.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 42.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 42.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 42.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 42.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 42.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  42.6k|            SCN_CLANG_POP
  114|  42.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  42.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  4.33M|{
   36|  4.33M|#define SCN_VISIT(Type)                                         \
   37|  4.33M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  4.33M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  4.33M|    }                                                           \
   40|  4.33M|    else {                                                      \
   41|  4.33M|        return vis(monostate_val);                              \
   42|  4.33M|    }
   43|       |
   44|  4.33M|    monostate monostate_val{};
   45|       |
   46|  4.33M|    switch (arg.m_type) {
   47|   557k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 557k, False: 3.78M]
  ------------------
   48|   557k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   557k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   557k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   557k|    }                                                           \
  |  |   40|   557k|    else {                                                      \
  |  |   41|   557k|        return vis(monostate_val);                              \
  |  |   42|   557k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 4.33M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   872k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 872k, False: 3.46M]
  ------------------
   52|   872k|            SCN_VISIT(int);
  ------------------
  |  |   37|   872k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   872k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   872k|    }                                                           \
  |  |   40|   872k|    else {                                                      \
  |  |   41|   872k|        return vis(monostate_val);                              \
  |  |   42|   872k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 4.33M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   913k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 913k, False: 3.42M]
  ------------------
   56|   913k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   913k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   913k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   913k|    }                                                           \
  |  |   40|   913k|    else {                                                      \
  |  |   41|   913k|        return vis(monostate_val);                              \
  |  |   42|   913k|    }
  ------------------
   57|   553k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 553k, False: 3.78M]
  ------------------
   58|   553k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   553k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   553k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   553k|    }                                                           \
  |  |   40|   553k|    else {                                                      \
  |  |   41|   553k|        return vis(monostate_val);                              \
  |  |   42|   553k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 4.33M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   708k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 708k, False: 3.63M]
  ------------------
   62|   708k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   708k|    }                                                           \
  |  |   40|   708k|    else {                                                      \
  |  |   41|   708k|        return vis(monostate_val);                              \
  |  |   42|   708k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 4.33M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   733k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 733k, False: 3.60M]
  ------------------
   66|   733k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   733k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   733k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   733k|    }                                                           \
  |  |   40|   733k|    else {                                                      \
  |  |   41|   733k|        return vis(monostate_val);                              \
  |  |   42|   733k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 4.33M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 4.33M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 4.33M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 4.33M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 4.33M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 4.33M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 4.33M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 4.33M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 4.33M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 4.33M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 4.33M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 4.33M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 4.33M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 4.33M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 4.33M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 4.33M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 4.33M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  4.33M|            SCN_CLANG_POP
  114|  4.33M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  4.33M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   170k|{
   36|   170k|#define SCN_VISIT(Type)                                         \
   37|   170k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   170k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   170k|    }                                                           \
   40|   170k|    else {                                                      \
   41|   170k|        return vis(monostate_val);                              \
   42|   170k|    }
   43|       |
   44|   170k|    monostate monostate_val{};
   45|       |
   46|   170k|    switch (arg.m_type) {
   47|  28.4k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 28.4k, False: 142k]
  ------------------
   48|  28.4k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 170k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  28.4k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 28.4k, False: 142k]
  ------------------
   52|  28.4k|            SCN_VISIT(int);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 170k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  28.4k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 28.4k, False: 142k]
  ------------------
   56|  28.4k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   57|  28.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 28.4k, False: 142k]
  ------------------
   58|  28.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 170k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  28.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 28.4k, False: 142k]
  ------------------
   62|  28.4k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 170k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  28.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 28.4k, False: 142k]
  ------------------
   66|  28.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  28.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.4k|    }                                                           \
  |  |   40|  28.4k|    else {                                                      \
  |  |   41|  28.4k|        return vis(monostate_val);                              \
  |  |   42|  28.4k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 170k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 170k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 170k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 170k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 170k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 170k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 170k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 170k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 170k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 170k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 170k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 170k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 170k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 170k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 170k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 170k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 170k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   170k|            SCN_CLANG_POP
  114|   170k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   170k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.63M|{
   36|  1.63M|#define SCN_VISIT(Type)                                         \
   37|  1.63M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.63M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.63M|    }                                                           \
   40|  1.63M|    else {                                                      \
   41|  1.63M|        return vis(monostate_val);                              \
   42|  1.63M|    }
   43|       |
   44|  1.63M|    monostate monostate_val{};
   45|       |
   46|  1.63M|    switch (arg.m_type) {
   47|   235k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 235k, False: 1.40M]
  ------------------
   48|   235k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   235k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   235k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   235k|    }                                                           \
  |  |   40|   235k|    else {                                                      \
  |  |   41|   235k|        return vis(monostate_val);                              \
  |  |   42|   235k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.63M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   308k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 308k, False: 1.32M]
  ------------------
   52|   308k|            SCN_VISIT(int);
  ------------------
  |  |   37|   308k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   308k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   308k|    }                                                           \
  |  |   40|   308k|    else {                                                      \
  |  |   41|   308k|        return vis(monostate_val);                              \
  |  |   42|   308k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.63M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   323k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 323k, False: 1.31M]
  ------------------
   56|   323k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   323k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   323k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   323k|    }                                                           \
  |  |   40|   323k|    else {                                                      \
  |  |   41|   323k|        return vis(monostate_val);                              \
  |  |   42|   323k|    }
  ------------------
   57|   228k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 228k, False: 1.40M]
  ------------------
   58|   228k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   228k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   228k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   228k|    }                                                           \
  |  |   40|   228k|    else {                                                      \
  |  |   41|   228k|        return vis(monostate_val);                              \
  |  |   42|   228k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.63M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   266k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 266k, False: 1.36M]
  ------------------
   62|   266k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   266k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   266k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   266k|    }                                                           \
  |  |   40|   266k|    else {                                                      \
  |  |   41|   266k|        return vis(monostate_val);                              \
  |  |   42|   266k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.63M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   273k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 273k, False: 1.36M]
  ------------------
   66|   273k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   273k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   273k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   273k|    }                                                           \
  |  |   40|   273k|    else {                                                      \
  |  |   41|   273k|        return vis(monostate_val);                              \
  |  |   42|   273k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.63M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.63M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.63M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.63M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.63M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.63M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.63M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.63M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.63M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.63M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.63M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.63M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.63M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.63M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.63M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.63M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.63M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.63M|            SCN_CLANG_POP
  114|  1.63M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.63M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  4.17M|{
   36|  4.17M|#define SCN_VISIT(Type)                                         \
   37|  4.17M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  4.17M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  4.17M|    }                                                           \
   40|  4.17M|    else {                                                      \
   41|  4.17M|        return vis(monostate_val);                              \
   42|  4.17M|    }
   43|       |
   44|  4.17M|    monostate monostate_val{};
   45|       |
   46|  4.17M|    switch (arg.m_type) {
   47|   543k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 543k, False: 3.62M]
  ------------------
   48|   543k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   543k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   543k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   543k|    }                                                           \
  |  |   40|   543k|    else {                                                      \
  |  |   41|   543k|        return vis(monostate_val);                              \
  |  |   42|   543k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 4.17M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   817k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 817k, False: 3.35M]
  ------------------
   52|   817k|            SCN_VISIT(int);
  ------------------
  |  |   37|   817k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   817k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   817k|    }                                                           \
  |  |   40|   817k|    else {                                                      \
  |  |   41|   817k|        return vis(monostate_val);                              \
  |  |   42|   817k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 4.17M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   853k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 853k, False: 3.31M]
  ------------------
   56|   853k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   853k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   853k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   853k|    }                                                           \
  |  |   40|   853k|    else {                                                      \
  |  |   41|   853k|        return vis(monostate_val);                              \
  |  |   42|   853k|    }
  ------------------
   57|   552k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 552k, False: 3.61M]
  ------------------
   58|   552k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   552k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   552k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   552k|    }                                                           \
  |  |   40|   552k|    else {                                                      \
  |  |   41|   552k|        return vis(monostate_val);                              \
  |  |   42|   552k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 4.17M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   691k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 691k, False: 3.47M]
  ------------------
   62|   691k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   691k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   691k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   691k|    }                                                           \
  |  |   40|   691k|    else {                                                      \
  |  |   41|   691k|        return vis(monostate_val);                              \
  |  |   42|   691k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 4.17M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   712k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 712k, False: 3.45M]
  ------------------
   66|   712k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   712k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   712k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   712k|    }                                                           \
  |  |   40|   712k|    else {                                                      \
  |  |   41|   712k|        return vis(monostate_val);                              \
  |  |   42|   712k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 4.17M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 4.17M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 4.17M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 4.17M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 4.17M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 4.17M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 4.17M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 4.17M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 4.17M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 4.17M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 4.17M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 4.17M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 4.17M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 4.17M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 4.17M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 4.17M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 4.17M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  4.17M|            SCN_CLANG_POP
  114|  4.17M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  4.17M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   128k|{
   36|   128k|#define SCN_VISIT(Type)                                         \
   37|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   128k|    }                                                           \
   40|   128k|    else {                                                      \
   41|   128k|        return vis(monostate_val);                              \
   42|   128k|    }
   43|       |
   44|   128k|    monostate monostate_val{};
   45|       |
   46|   128k|    switch (arg.m_type) {
   47|  21.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 21.3k, False: 106k]
  ------------------
   48|  21.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 128k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  21.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 21.3k, False: 106k]
  ------------------
   52|  21.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 128k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  21.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 21.3k, False: 106k]
  ------------------
   56|  21.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   57|  21.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 21.3k, False: 106k]
  ------------------
   58|  21.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 128k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  21.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 21.3k, False: 106k]
  ------------------
   62|  21.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 128k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  21.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 21.3k, False: 106k]
  ------------------
   66|  21.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.3k|    }                                                           \
  |  |   40|  21.3k|    else {                                                      \
  |  |   41|  21.3k|        return vis(monostate_val);                              \
  |  |   42|  21.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 128k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 128k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 128k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 128k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 128k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 128k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 128k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 128k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 128k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 128k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 128k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 128k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 128k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 128k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 128k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 128k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 128k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   128k|            SCN_CLANG_POP
  114|   128k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   128k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   512k|{
   36|   512k|#define SCN_VISIT(Type)                                         \
   37|   512k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   512k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   512k|    }                                                           \
   40|   512k|    else {                                                      \
   41|   512k|        return vis(monostate_val);                              \
   42|   512k|    }
   43|       |
   44|   512k|    monostate monostate_val{};
   45|       |
   46|   512k|    switch (arg.m_type) {
   47|  85.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 85.3k, False: 426k]
  ------------------
   48|  85.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 512k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  85.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 85.3k, False: 426k]
  ------------------
   52|  85.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 512k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  85.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 85.3k, False: 426k]
  ------------------
   56|  85.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   57|  85.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 85.3k, False: 426k]
  ------------------
   58|  85.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 512k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  85.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 85.3k, False: 426k]
  ------------------
   62|  85.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 512k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  85.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 85.3k, False: 426k]
  ------------------
   66|  85.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  85.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.3k|    }                                                           \
  |  |   40|  85.3k|    else {                                                      \
  |  |   41|  85.3k|        return vis(monostate_val);                              \
  |  |   42|  85.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 512k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 512k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 512k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 512k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 512k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 512k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 512k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 512k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 512k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 512k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 512k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 512k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 512k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 512k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 512k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 512k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 512k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   512k|            SCN_CLANG_POP
  114|   512k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   512k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.79M|{
  174|  2.79M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.79M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.79M|{
  111|  2.79M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.79M|    auto result = vscan_impl(buffer, format, args);
  114|  2.79M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 2.65M]
  |  |  ------------------
  ------------------
  115|   142k|        return unexpected(result.error());
  116|   142k|    }
  117|  2.65M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.79M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.79M|{
  192|  2.79M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.79M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.79M|{
  127|  2.79M|#if !SCN_DISABLE_LOCALE
  128|  2.79M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.79M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.79M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.79M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.79M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 2.65M]
  |  |  ------------------
  ------------------
  135|   142k|        return unexpected(result.error());
  136|   142k|    }
  137|  2.65M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.79M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   582k|{
  205|   582k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   582k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   582k|{
  151|   582k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   582k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   582k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 568k]
  |  |  ------------------
  ------------------
  155|  14.2k|        return unexpected(result.error());
  156|  14.2k|    }
  157|   568k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   582k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   142k|{
  174|   142k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   142k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   142k|{
  111|   142k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   142k|    auto result = vscan_impl(buffer, format, args);
  114|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
  115|   142k|        return unexpected(result.error());
  116|   142k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   142k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   142k|{
  192|   142k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   142k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   142k|{
  127|   142k|#if !SCN_DISABLE_LOCALE
  128|   142k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   142k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   142k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   142k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 0]
  |  |  ------------------
  ------------------
  135|   142k|        return unexpected(result.error());
  136|   142k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   142k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  14.2k|{
  205|  14.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  14.2k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  14.2k|{
  151|  14.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  14.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  14.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  155|  14.2k|        return unexpected(result.error());
  156|  14.2k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  14.2k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.75M|{
  111|  2.75M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.75M|    auto result = vscan_impl(buffer, format, args);
  114|  2.75M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426k, False: 2.33M]
  |  |  ------------------
  ------------------
  115|   426k|        return unexpected(result.error());
  116|   426k|    }
  117|  2.33M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.75M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.75M|{
  127|  2.75M|#if !SCN_DISABLE_LOCALE
  128|  2.75M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.75M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.75M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.75M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.75M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426k, False: 2.33M]
  |  |  ------------------
  ------------------
  135|   426k|        return unexpected(result.error());
  136|   426k|    }
  137|  2.33M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.75M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   545k|{
  151|   545k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   545k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   545k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.6k, False: 502k]
  |  |  ------------------
  ------------------
  155|  42.6k|        return unexpected(result.error());
  156|  42.6k|    }
  157|   502k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   545k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   426k|{
  111|   426k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   426k|    auto result = vscan_impl(buffer, format, args);
  114|   426k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426k, False: 0]
  |  |  ------------------
  ------------------
  115|   426k|        return unexpected(result.error());
  116|   426k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   426k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   426k|{
  127|   426k|#if !SCN_DISABLE_LOCALE
  128|   426k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   426k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   426k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   426k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   426k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426k, False: 0]
  |  |  ------------------
  ------------------
  135|   426k|        return unexpected(result.error());
  136|   426k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   426k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  42.6k|{
  151|  42.6k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  42.6k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  42.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.6k, False: 0]
  |  |  ------------------
  ------------------
  155|  42.6k|        return unexpected(result.error());
  156|  42.6k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  42.6k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   371k|{
   90|   371k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   371k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.75M|{
   45|  2.75M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.75M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   371k|{
  125|   371k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   371k|                                                         format, {});
  127|   371k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.75M|{
   61|  2.75M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.75M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  78.3k|{
  159|  78.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  78.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   545k|{
   73|   545k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   545k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   373k|{
   90|   373k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   373k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   373k|{
  125|   373k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   373k|                                                         format, {});
  127|   373k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  76.2k|{
  159|  76.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  76.2k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   532k|{
   90|   532k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   532k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   532k|{
  125|   532k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   532k|                                                         format, {});
  127|   532k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   102k|{
  159|   102k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   102k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   455k|{
   90|   455k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   455k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   455k|{
  125|   455k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   455k|                                                         format, {});
  127|   455k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  88.9k|{
  159|  88.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  88.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  88.9k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   556k|{
   90|   556k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   556k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   556k|{
  125|   556k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   556k|                                                         format, {});
  127|   556k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   107k|{
  159|   107k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   107k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   468k|{
   90|   468k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   468k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   468k|{
  125|   468k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   468k|                                                         format, {});
  127|   468k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  91.0k|{
  159|  91.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  91.0k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   426k|{
   45|   426k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   426k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   426k|{
   61|   426k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   426k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  42.6k|{
   73|  42.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  42.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  71.1k|{
   90|  71.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  71.1k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  71.1k|{
  125|  71.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  71.1k|                                                         format, {});
  127|  71.1k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.11k|{
  159|  7.11k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.11k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  6.62M|            {
 2693|  6.62M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.62M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  6.62M|            {
 2672|  6.62M|                return decay_copy(t.begin());
 2673|  6.62M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   197M|    {
 2606|   197M|        return std::forward<T>(t);
 2607|   197M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  12.2M|            {
 3178|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  12.2M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  12.2M|            {
 3158|  12.2M|                return t.data();
 3159|  12.2M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  12.2M|    {
 6095|  12.2M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 24.2k, False: 12.2M]
  ------------------
 6096|  12.2M|                   ? nullptr
 6097|  12.2M|                   : std::addressof(*ranges::begin(derived()));
 6098|  12.2M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  12.2M|            {
 3127|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  12.2M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  12.2M|            {
 3098|  12.2M|                return bool((std::forward<T>(t).empty()));
 3099|  12.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  29.1M|        {
 6454|  29.1M|            return data_.begin_ == data_.end_;
 6455|  29.1M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  24.4M|    {
 6049|  24.4M|        return static_cast<const D&>(*this);
 6050|  24.4M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  50.2M|            {
 2693|  50.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  50.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  50.2M|            {
 2672|  50.2M|                return decay_copy(t.begin());
 2673|  50.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   116M|        {
 6444|   116M|            return data_.begin_;
 6445|   116M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  12.2M|            {
 3038|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  12.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  12.2M|            {
 3000|  12.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  12.2M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  51.3M|    {
 2606|  51.3M|        return std::forward<T>(t);
 2607|  51.3M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  29.1M|        {
 6462|  29.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  29.1M|                return data_.size_;
 6464|  29.1M|            }
 6465|  29.1M|            else {
 6466|  29.1M|                return data_.end_ - data_.begin_;
 6467|  29.1M|            }
 6468|  29.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  20.5M|            {
 3788|  20.5M|                ranges::advance(x, n);
 3789|  20.5M|                return x;
 3790|  20.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  20.5M|            {
 3678|  20.5M|                fn::impl(i, n);
 3679|  20.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  20.5M|            {
 3562|  20.5M|                r += n;
 3563|  20.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  61.3M|            {
 2693|  61.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  61.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  61.3M|            {
 2672|  61.3M|                return decay_copy(t.begin());
 2673|  61.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  28.4M|            {
 2759|  28.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  28.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  28.4M|            {
 2739|  28.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  28.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  75.1M|        {
 6449|  75.1M|            return data_.end_;
 6450|  75.1M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  12.4M|            {
 2759|  12.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  12.4M|            {
 2739|  12.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  12.4M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  48.8M|        {
 6375|  48.8M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  48.8M|        {
 6294|  48.8M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   298k|            {
 2693|   298k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   298k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   298k|            {
 2672|   298k|                return decay_copy(t.begin());
 2673|   298k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.35M|    {
 2606|  1.35M|        return std::forward<T>(t);
 2607|  1.35M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   298k|            {
 2693|   298k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   298k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   298k|            {
 2672|   298k|                return decay_copy(t.begin());
 2673|   298k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   298k|        {
 6444|   298k|            return data_.begin_;
 6445|   298k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   455k|            {
 2759|   455k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   455k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   455k|            {
 2739|   455k|                return decay_copy(std::forward<T>(t).end());
 2740|   455k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   455k|        {
 6449|   455k|            return data_.end_;
 6450|   455k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   298k|            {
 2759|   298k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   298k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   298k|            {
 2739|   298k|                return decay_copy(std::forward<T>(t).end());
 2740|   298k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   298k|        {
 6375|   298k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   298k|        {
 6294|   298k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.54M|            {
 2693|  1.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.54M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.54M|            {
 2672|  1.54M|                return decay_copy(t.begin());
 2673|  1.54M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   285M|    {
 2606|   285M|        return std::forward<T>(t);
 2607|   285M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  6.06M|            {
 3178|  6.06M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.06M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.06M|            {
 3158|  6.06M|                return t.data();
 3159|  6.06M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  6.06M|    {
 6095|  6.06M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 28.9k, False: 6.03M]
  ------------------
 6096|  6.06M|                   ? nullptr
 6097|  6.06M|                   : std::addressof(*ranges::begin(derived()));
 6098|  6.06M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  6.06M|            {
 3127|  6.06M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.06M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  6.06M|            {
 3098|  6.06M|                return bool((std::forward<T>(t).empty()));
 3099|  6.06M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  9.68M|        {
 6454|  9.68M|            return data_.begin_ == data_.end_;
 6455|  9.68M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  12.0M|    {
 6049|  12.0M|        return static_cast<const D&>(*this);
 6050|  12.0M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  47.7M|            {
 2693|  47.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  47.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  47.7M|            {
 2672|  47.7M|                return decay_copy(t.begin());
 2673|  47.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   122M|        {
 6444|   122M|            return data_.begin_;
 6445|   122M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.06M|            {
 3038|  6.06M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.06M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  6.06M|            {
 3000|  6.06M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.06M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  22.1M|        {
 6462|  22.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  22.1M|                return data_.size_;
 6464|  22.1M|            }
 6465|  22.1M|            else {
 6466|  22.1M|                return data_.end_ - data_.begin_;
 6467|  22.1M|            }
 6468|  22.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  25.0M|            {
 3788|  25.0M|                ranges::advance(x, n);
 3789|  25.0M|                return x;
 3790|  25.0M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  25.0M|            {
 3678|  25.0M|                fn::impl(i, n);
 3679|  25.0M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  25.0M|            {
 3562|  25.0M|                r += n;
 3563|  25.0M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  70.1M|            {
 2693|  70.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  70.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  70.1M|            {
 2672|  70.1M|                return decay_copy(t.begin());
 2673|  70.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  26.7M|            {
 2759|  26.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  26.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  26.7M|            {
 2739|  26.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  26.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   165M|        {
 6449|   165M|            return data_.end_;
 6450|   165M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  7.99M|            {
 2759|  7.99M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.99M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  7.99M|            {
 2739|  7.99M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.99M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  46.7M|        {
 6375|  46.7M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  46.7M|        {
 6294|  46.7M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   896k|            {
 2693|   896k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   896k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   896k|            {
 2672|   896k|                return decay_copy(t.begin());
 2673|   896k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.39M|    {
 2606|  4.39M|        return std::forward<T>(t);
 2607|  4.39M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   896k|            {
 2693|   896k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   896k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   896k|            {
 2672|   896k|                return decay_copy(t.begin());
 2673|   896k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   896k|        {
 6444|   896k|            return data_.begin_;
 6445|   896k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.70M|            {
 2759|  1.70M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.70M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.70M|            {
 2739|  1.70M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.70M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.70M|        {
 6449|  1.70M|            return data_.end_;
 6450|  1.70M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   896k|            {
 2759|   896k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   896k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   896k|            {
 2739|   896k|                return decay_copy(std::forward<T>(t).end());
 2740|   896k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   896k|        {
 6375|   896k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   896k|        {
 6294|   896k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  5.33M|        {
 6444|  5.33M|            return data_.begin_;
 6445|  5.33M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  16.8M|        {
 6444|  16.8M|            return data_.begin_;
 6445|  16.8M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  33.8M|    {
 6044|  33.8M|        return static_cast<D&>(*this);
 6045|  33.8M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  16.9M|            {
 3098|  16.9M|                return bool((std::forward<T>(t).empty()));
 3099|  16.9M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  16.9M|            {
 3127|  16.9M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  16.9M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  16.9M|    {
 6085|  16.9M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 16.9M]
  ------------------
 6086|  16.9M|                   ? nullptr
 6087|  16.9M|                   : std::addressof(*ranges::begin(derived()));
 6088|  16.9M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  38.2M|            {
 2739|  38.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  38.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  38.2M|            {
 2759|  38.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  38.2M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  7.23M|    {
 6044|  7.23M|        return static_cast<D&>(*this);
 6045|  7.23M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  3.61M|            {
 3098|  3.61M|                return bool((std::forward<T>(t).empty()));
 3099|  3.61M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  3.61M|            {
 3127|  3.61M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.61M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  3.61M|    {
 6085|  3.61M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 3.61M]
  ------------------
 6086|  3.61M|                   ? nullptr
 6087|  3.61M|                   : std::addressof(*ranges::begin(derived()));
 6088|  3.61M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   131M|            {
 2739|   131M|                return decay_copy(std::forward<T>(t).end());
 2740|   131M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   131M|            {
 2759|   131M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   131M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  10.2M|            {
 3780|  10.2M|                ++x;
 3781|  10.2M|                return x;
 3782|  10.2M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  16.9M|            {
 3038|  16.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  16.9M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  16.9M|            {
 3000|  16.9M|                return decay_copy(std::forward<T>(t).size());
 3001|  16.9M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  16.9M|            {
 3178|  16.9M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  16.9M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  16.9M|            {
 3158|  16.9M|                return t.data();
 3159|  16.9M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.60M|            {
 3828|  1.60M|                --x;
 3829|  1.60M|                return x;
 3830|  1.60M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.32M|            {
 3077|  1.32M|                return fn::impl(std::forward<T>(t));
 3078|  1.32M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.32M|            {
 3067|  1.32M|                return static_cast<ssize_return_t<T>>(
 3068|  1.32M|                    ranges::size(std::forward<T>(t)));
 3069|  1.32M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.32M|            {
 3038|  1.32M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.32M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.32M|            {
 3000|  1.32M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.32M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  15.3M|    {
 2606|  15.3M|        return std::forward<T>(t);
 2607|  15.3M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  14.0M|            {
 3077|  14.0M|                return fn::impl(std::forward<T>(t));
 3078|  14.0M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  14.0M|            {
 3067|  14.0M|                return static_cast<ssize_return_t<T>>(
 3068|  14.0M|                    ranges::size(std::forward<T>(t)));
 3069|  14.0M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  14.0M|            {
 3038|  14.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  14.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  14.0M|            {
 3000|  14.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  14.0M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  13.4M|            {
 1300|  13.4M|                return fn::impl(std::forward<F>(f),
 1301|  13.4M|                                std::forward<Args>(args)...);
 1302|  13.4M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  13.4M|            {
 1289|  13.4M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  13.4M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  13.4M|    {
 1142|  13.4M|        return std::forward<T>(t);
 1143|  13.4M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  20.7M|            {
 3756|  20.7M|                return fn::impl(std::move(first), std::move(last));
 3757|  20.7M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  20.7M|            {
 3716|  20.7M|                return s - i;
 3717|  20.7M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.32M|        {
 6375|  1.32M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.32M|        {
 6294|  1.32M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.56M|            {
 2693|  2.56M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.56M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.56M|            {
 2672|  2.56M|                return decay_copy(t.begin());
 2673|  2.56M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  5.13M|    {
 2606|  5.13M|        return std::forward<T>(t);
 2607|  5.13M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   911k|            {
 2759|   911k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   911k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   911k|            {
 2739|   911k|                return decay_copy(std::forward<T>(t).end());
 2740|   911k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  8.76M|    {
 2606|  8.76M|        return std::forward<T>(t);
 2607|  8.76M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.10M|        {
 6449|  2.10M|            return data_.end_;
 6450|  2.10M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  28.4k|        {
 6444|  28.4k|            return data_.begin_;
 6445|  28.4k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  28.4k|        {
 6449|  28.4k|            return data_.end_;
 6450|  28.4k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  28.4k|        {
 6375|  28.4k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  28.4k|        {
 6294|  28.4k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   341k|            {
 3780|   341k|                ++x;
 3781|   341k|                return x;
 3782|   341k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   185k|        {
 6793|   185k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   185k|                                    proj);
 6795|   185k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   185k|        {
 6761|   185k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 185k, False: 0]
  ------------------
 6762|   185k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 185k, False: 0]
  ------------------
 6763|   185k|                    return first;
 6764|   185k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   185k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   185k|            {
 1300|   185k|                return fn::impl(std::forward<F>(f),
 1301|   185k|                                std::forward<Args>(args)...);
 1302|   185k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   185k|            {
 1289|   185k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   185k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   185k|            {
 1300|   185k|                return fn::impl(std::forward<F>(f),
 1301|   185k|                                std::forward<Args>(args)...);
 1302|   185k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   185k|            {
 1289|   185k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   185k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   185k|    {
 1142|   185k|        return std::forward<T>(t);
 1143|   185k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.19M|            {
 2759|  1.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.19M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.19M|            {
 2739|  1.19M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.19M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.51M|            {
 2693|  2.51M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.51M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.51M|            {
 2672|  2.51M|                return decay_copy(t.begin());
 2673|  2.51M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  28.4k|            {
 3756|  28.4k|                return fn::impl(std::move(first), std::move(last));
 3757|  28.4k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  28.4k|            {
 3724|  28.4k|                iter_difference_t<I> counter{0};
 3725|  85.3k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 56.9k, False: 28.4k]
  ------------------
 3726|  56.9k|                    ++i;
 3727|  56.9k|                    ++counter;
 3728|  56.9k|                }
 3729|  28.4k|                return counter;
 3730|  28.4k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2692|  28.4k|            {
 2693|  28.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  28.4k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESJ_E4typeEOSI_NS1_12priority_tagILm1EEE:
 2671|  28.4k|            {
 2672|  28.4k|                return decay_copy(t.begin());
 2673|  28.4k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2758|  28.4k|            {
 2759|  28.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  28.4k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESC_LNS0_13subrange_kindE0EEESC_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSK_NS1_12priority_tagILm1EEE:
 2738|  28.4k|            {
 2739|  28.4k|                return decay_copy(std::forward<T>(t).end());
 2740|  28.4k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.61M|            {
 3178|  3.61M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.61M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.61M|            {
 3158|  3.61M|                return t.data();
 3159|  3.61M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  16.1M|            {
 3038|  16.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  16.1M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  16.1M|            {
 3000|  16.1M|                return decay_copy(std::forward<T>(t).size());
 3001|  16.1M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  9.75M|            {
 3780|  9.75M|                ++x;
 3781|  9.75M|                return x;
 3782|  9.75M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  12.5M|            {
 3077|  12.5M|                return fn::impl(std::forward<T>(t));
 3078|  12.5M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  12.5M|            {
 3067|  12.5M|                return static_cast<ssize_return_t<T>>(
 3068|  12.5M|                    ranges::size(std::forward<T>(t)));
 3069|  12.5M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.42M|            {
 3828|  1.42M|                --x;
 3829|  1.42M|                return x;
 3830|  1.42M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  13.3M|            {
 3756|  13.3M|                return fn::impl(std::move(first), std::move(last));
 3757|  13.3M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  13.3M|            {
 3716|  13.3M|                return s - i;
 3717|  13.3M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.97M|        {
 6375|  3.97M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.97M|        {
 6294|  3.97M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  8.32M|            {
 2693|  8.32M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.32M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  8.32M|            {
 2672|  8.32M|                return decay_copy(t.begin());
 2673|  8.32M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  16.2M|    {
 2606|  16.2M|        return std::forward<T>(t);
 2607|  16.2M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.07M|            {
 2759|  3.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.07M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.07M|            {
 2739|  3.07M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.07M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  6.66M|        {
 6449|  6.66M|            return data_.end_;
 6450|  6.66M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  85.3k|        {
 6444|  85.3k|            return data_.begin_;
 6445|  85.3k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  85.3k|        {
 6449|  85.3k|            return data_.end_;
 6450|  85.3k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  85.3k|        {
 6375|  85.3k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  85.3k|        {
 6294|  85.3k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.02M|            {
 3780|  1.02M|                ++x;
 3781|  1.02M|                return x;
 3782|  1.02M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   555k|        {
 6793|   555k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   555k|                                    proj);
 6795|   555k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   555k|        {
 6761|   555k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 555k, False: 0]
  ------------------
 6762|   555k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 555k, False: 0]
  ------------------
 6763|   555k|                    return first;
 6764|   555k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   555k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   555k|            {
 1300|   555k|                return fn::impl(std::forward<F>(f),
 1301|   555k|                                std::forward<Args>(args)...);
 1302|   555k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   555k|            {
 1289|   555k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   555k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   555k|            {
 1300|   555k|                return fn::impl(std::forward<F>(f),
 1301|   555k|                                std::forward<Args>(args)...);
 1302|   555k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   555k|            {
 1289|   555k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   555k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   555k|    {
 1142|   555k|        return std::forward<T>(t);
 1143|   555k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.58M|            {
 2759|  3.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.58M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.58M|            {
 2739|  3.58M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.58M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  7.72M|            {
 2693|  7.72M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.72M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  7.72M|            {
 2672|  7.72M|                return decay_copy(t.begin());
 2673|  7.72M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  85.3k|            {
 3756|  85.3k|                return fn::impl(std::move(first), std::move(last));
 3757|  85.3k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  85.3k|            {
 3724|  85.3k|                iter_difference_t<I> counter{0};
 3725|   597k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 512k, False: 85.3k]
  ------------------
 3726|   512k|                    ++i;
 3727|   512k|                    ++counter;
 3728|   512k|                }
 3729|  85.3k|                return counter;
 3730|  85.3k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2692|  85.3k|            {
 2693|  85.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  85.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESJ_E4typeEOSI_NS1_12priority_tagILm1EEE:
 2671|  85.3k|            {
 2672|  85.3k|                return decay_copy(t.begin());
 2673|  85.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSG_:
 2758|  85.3k|            {
 2759|  85.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  85.3k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESC_LNS0_13subrange_kindE0EEESC_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSK_NS1_12priority_tagILm1EEE:
 2738|  85.3k|            {
 2739|  85.3k|                return decay_copy(std::forward<T>(t).end());
 2740|  85.3k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  6.32M|        {
 6793|  6.32M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  6.32M|                                    proj);
 6795|  6.32M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  6.32M|        {
 6761|  13.5M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 13.4M, False: 118k]
  ------------------
 6762|  13.4M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 6.20M, False: 7.27M]
  ------------------
 6763|  6.20M|                    return first;
 6764|  6.20M|                }
 6765|  7.27M|                ++first;
 6766|  7.27M|            }
 6767|   118k|            return first;
 6768|  6.32M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  13.4M|            {
 1300|  13.4M|                return fn::impl(std::forward<F>(f),
 1301|  13.4M|                                std::forward<Args>(args)...);
 1302|  13.4M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  13.4M|            {
 1289|  13.4M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  13.4M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   581k|{
   50|   581k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   581k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  84.7k|{
   50|  84.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  84.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  84.7k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  63.1k|{
   50|  63.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  63.1k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   185k|    {
   44|   185k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   555k|    {
   44|   555k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  55.2k|{
   50|  55.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  55.2k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  14.6M|    {
 1191|  14.6M|        return has_value();
 1192|  14.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  28.0M|    {
  189|  28.0M|        return m_has_value;
  190|  28.0M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  2.39M|    {
 1197|  2.39M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.39M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.39M|    {
  172|  2.39M|        return m_unexpected;
  173|  2.39M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  17.7M|    {
   72|  17.7M|        return m_unexpected;
   73|  17.7M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  8.87M|    {
   58|  8.87M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  8.87M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   298k|    {
 1078|   298k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   298k|    {
  151|   298k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  10.4M|    {
   67|  10.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  10.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  10.4M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.17M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  11.0M|    {
 1251|  11.0M|        return value();
 1252|  11.0M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  11.0M|    {
 1221|  11.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  11.0M|    {
  155|  11.0M|        return m_value;
  156|  11.0M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  5.87M|    {
 1034|  5.87M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  5.87M|    {
  142|  5.87M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  6.17M|    {
 1191|  6.17M|        return has_value();
 1192|  6.17M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  12.3M|    {
  189|  12.3M|        return m_has_value;
  190|  12.3M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   298k|    {
 1197|   298k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   298k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   298k|    {
  172|   298k|        return m_unexpected;
  173|   298k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   822k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  5.30M|    {
 1251|  5.30M|        return value();
 1252|  5.30M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  5.87M|    {
 1221|  5.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.87M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.87M|    {
  155|  5.87M|        return m_value;
  156|  5.87M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   772k|    {
 1034|   772k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   772k|    {
  142|   772k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   822k|    {
 1191|   822k|        return has_value();
 1192|   822k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.59M|    {
  189|  1.59M|        return m_has_value;
  190|  1.59M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   772k|    {
 1274|   772k|        return std::addressof(value());
 1275|   772k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   772k|    {
 1221|   772k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   772k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   772k|    {
  155|   772k|        return m_value;
  156|   772k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   568k|    {
 1263|   568k|        return std::move(value());
 1264|   568k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   805k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   755k|    {
 1034|   755k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   755k|    {
  142|   755k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   805k|    {
 1191|   805k|        return has_value();
 1192|   805k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.56M|    {
  189|  1.56M|        return m_has_value;
  190|  1.56M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   755k|    {
 1274|   755k|        return std::addressof(value());
 1275|   755k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   755k|    {
 1221|   755k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   755k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   755k|    {
  155|   755k|        return m_value;
  156|   755k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.17M|    {
 1034|  1.17M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.17M|    {
  142|  1.17M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.39M|    {
  189|  2.39M|        return m_has_value;
  190|  2.39M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.17M|    {
 1274|  1.17M|        return std::addressof(value());
 1275|  1.17M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.17M|    {
 1221|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.17M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.17M|    {
  155|  1.17M|        return m_value;
  156|  1.17M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   954k|    {
 1034|   954k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   954k|    {
  142|   954k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.00M|    {
 1191|  1.00M|        return has_value();
 1192|  1.00M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.95M|    {
  189|  1.95M|        return m_has_value;
  190|  1.95M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   954k|    {
 1274|   954k|        return std::addressof(value());
 1275|   954k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   954k|    {
 1221|   954k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   954k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   954k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   954k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   954k|    {
  155|   954k|        return m_value;
  156|   954k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.28M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.23M|    {
 1034|  1.23M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.23M|    {
  142|  1.23M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.28M|    {
 1191|  1.28M|        return has_value();
 1192|  1.28M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.51M|    {
  189|  2.51M|        return m_has_value;
  190|  2.51M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.23M|    {
 1274|  1.23M|        return std::addressof(value());
 1275|  1.23M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.23M|    {
 1221|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.23M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.23M|    {
  155|  1.23M|        return m_value;
  156|  1.23M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   986k|    {
 1034|   986k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   986k|    {
  142|   986k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.03M|    {
 1191|  1.03M|        return has_value();
 1192|  1.03M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.02M|    {
  189|  2.02M|        return m_has_value;
  190|  2.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   986k|    {
 1274|   986k|        return std::addressof(value());
 1275|   986k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   986k|    {
 1221|   986k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   986k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   986k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   986k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   986k|    {
  155|   986k|        return m_value;
  156|   986k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   298k|    {
 1078|   298k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   298k|    {
  151|   298k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   298k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   298k|    {
 1191|   298k|        return has_value();
 1192|   298k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   597k|    {
  189|   597k|        return m_has_value;
  190|   597k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   298k|    {
 1197|   298k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   298k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   298k|    {
  172|   298k|        return m_unexpected;
  173|   298k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.8k|    {
  151|  49.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  49.8k|    {
 1191|  49.8k|        return has_value();
 1192|  49.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  49.8k|    {
  189|  49.8k|        return m_has_value;
  190|  49.8k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   896k|    {
 1078|   896k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   896k|    {
  151|   896k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.06M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  5.16M|    {
 1034|  5.16M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  5.16M|    {
  142|  5.16M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  6.06M|    {
 1191|  6.06M|        return has_value();
 1192|  6.06M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  12.1M|    {
  189|  12.1M|        return m_has_value;
  190|  12.1M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   896k|    {
 1197|   896k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   896k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   896k|    {
  172|   896k|        return m_unexpected;
  173|   896k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   821k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.66M|    {
 1251|  4.66M|        return value();
 1252|  4.66M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  5.16M|    {
 1221|  5.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.16M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.16M|    {
  155|  5.16M|        return m_value;
  156|  5.16M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   672k|    {
 1034|   672k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   672k|    {
  142|   672k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   821k|    {
 1191|   821k|        return has_value();
 1192|   821k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.49M|    {
  189|  1.49M|        return m_has_value;
  190|  1.49M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   672k|    {
 1274|   672k|        return std::addressof(value());
 1275|   672k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   672k|    {
 1221|   672k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   672k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   672k|    {
  155|   672k|        return m_value;
  156|   672k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   502k|    {
 1263|   502k|        return std::move(value());
 1264|   502k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   823k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   674k|    {
 1034|   674k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   674k|    {
  142|   674k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   823k|    {
 1191|   823k|        return has_value();
 1192|   823k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.49M|    {
  189|  1.49M|        return m_has_value;
  190|  1.49M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   674k|    {
 1274|   674k|        return std::addressof(value());
 1275|   674k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   674k|    {
 1221|   674k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   674k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   674k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   674k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   674k|    {
  155|   674k|        return m_value;
  156|   674k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.01M|    {
 1034|  1.01M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.01M|    {
  142|  1.01M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.16M|    {
 1191|  1.16M|        return has_value();
 1192|  1.16M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.18M|    {
  189|  2.18M|        return m_has_value;
  190|  2.18M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.01M|    {
 1274|  1.01M|        return std::addressof(value());
 1275|  1.01M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.01M|    {
 1221|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.01M|    {
  155|  1.01M|        return m_value;
  156|  1.01M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   851k|    {
 1034|   851k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   851k|    {
  142|   851k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.00M|    {
 1191|  1.00M|        return has_value();
 1192|  1.00M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.85M|    {
  189|  1.85M|        return m_has_value;
  190|  1.85M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   851k|    {
 1274|   851k|        return std::addressof(value());
 1275|   851k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   851k|    {
 1221|   851k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   851k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   851k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   851k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   851k|    {
  155|   851k|        return m_value;
  156|   851k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.07M|    {
 1034|  1.07M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.07M|    {
  142|  1.07M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.29M|    {
  189|  2.29M|        return m_has_value;
  190|  2.29M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.07M|    {
 1274|  1.07M|        return std::addressof(value());
 1275|  1.07M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.07M|    {
 1221|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.07M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.07M|    {
  155|  1.07M|        return m_value;
  156|  1.07M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.02M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   878k|    {
 1034|   878k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   878k|    {
  142|   878k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.02M|    {
 1191|  1.02M|        return has_value();
 1192|  1.02M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.90M|    {
  189|  1.90M|        return m_has_value;
  190|  1.90M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   878k|    {
 1274|   878k|        return std::addressof(value());
 1275|   878k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   878k|    {
 1221|   878k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   878k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   878k|    {
  155|   878k|        return m_value;
  156|   878k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   896k|    {
 1078|   896k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   896k|    {
  151|   896k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   896k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   896k|    {
 1191|   896k|        return has_value();
 1192|   896k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.79M|    {
  189|  1.79M|        return m_has_value;
  190|  1.79M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   896k|    {
 1197|   896k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   896k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   896k|    {
  172|   896k|        return m_unexpected;
  173|   896k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   149k|    {
 1078|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   149k|    {
  151|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   149k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   149k|    {
 1191|   149k|        return has_value();
 1192|   149k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   149k|    {
  189|   149k|        return m_has_value;
  190|   149k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  6.08M|    {
 1405|  6.08M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.08M|                                            std::forward<F>(f));
 1407|  6.08M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.08M|{
  927|  6.08M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.08M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.08M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.08M|            return result(*std::forward<Exp>(exp));
  931|  6.08M|        }
  932|       |
  933|  6.08M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.08M|        return result(unexpect, monostate{});
  935|  6.08M|    }
  936|  6.08M|    else {
  937|  6.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.05M, False: 28.2k]
  |  |  ------------------
  ------------------
  939|  6.08M|                   ? result(*std::forward<Exp>(exp))
  940|  6.08M|                   : result(unexpect,
  941|  28.2k|                            std::invoke(std::forward<F>(f),
  942|  28.2k|                                        std::forward<Exp>(exp).error()));
  943|  6.08M|    }
  944|  6.08M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  25.2M|    {
  189|  25.2M|        return m_has_value;
  190|  25.2M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.05M|    {
 1263|  6.05M|        return std::move(value());
 1264|  6.05M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.88M|    {
 1221|  8.88M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.88M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  8.88M|    {
  155|  8.88M|        return m_value;
  156|  8.88M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  22.8M|    {
 1034|  22.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  22.8M|    {
  142|  22.8M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  28.2k|    {
 1207|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  28.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  29.9k|    {
  172|  29.9k|        return m_unexpected;
  173|  29.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   376k|    {
   72|   376k|        return m_unexpected;
   73|   376k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.2k|    {
 1088|  28.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   409k|    {
  151|   409k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  23.2M|    {
 1191|  23.2M|        return has_value();
 1192|  23.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  46.5M|    {
  189|  46.5M|        return m_has_value;
  190|  46.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   409k|    {
 1197|   409k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   409k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   409k|    {
  172|   409k|        return m_unexpected;
  173|   409k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   380k|    {
 1078|   380k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  18.7M|    {
 1263|  18.7M|        return std::move(value());
 1264|  18.7M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  22.8M|    {
 1221|  22.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  22.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  22.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  22.8M|    {
  155|  22.8M|        return m_value;
  156|  22.8M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   784k|    {
   58|   784k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   784k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   784k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  2.39M|    {
 1078|  2.39M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  2.39M|    {
  151|  2.39M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  69.1k|    {
   58|  69.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  69.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  69.1k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  29.9k|    {
 1078|  29.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  29.9k|    {
  151|  29.9k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   188k|    {
   67|   188k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   188k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   188k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  16.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  16.3M|    {
 1034|  16.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  16.3M|    {
  142|  16.3M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  10.2M|    {
 1191|  10.2M|        return has_value();
 1192|  10.2M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.68k|    {
 1197|  1.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.68k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  55.0k|    {
   58|  55.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  55.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.0k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  52.1k|    {
 1078|  52.1k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  13.0M|    {
   72|  13.0M|        return m_unexpected;
   73|  13.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  52.1k|    {
  151|  52.1k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   293k|    {
   67|   293k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   293k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   293k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  27.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.82M|    {
 1251|  2.82M|        return value();
 1252|  2.82M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  5.34M|    {
 1034|  5.34M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.34M|    {
  142|  5.34M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  47.8M|    {
   58|  47.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  47.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  47.8M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  22.3M|    {
 1078|  22.3M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  47.8M|    {
   72|  47.8M|        return m_unexpected;
   73|  47.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  22.3M|    {
  151|  22.3M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  47.8M|    {
   67|  47.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  47.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  47.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  27.8M|    {
 1191|  27.8M|        return has_value();
 1192|  27.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  38.9M|    {
  189|  38.9M|        return m_has_value;
  190|  38.9M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  5.71M|    {
 1197|  5.71M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.71M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.71M|    {
  172|  5.71M|        return m_unexpected;
  173|  5.71M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  6.05M|    {
 1034|  6.05M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  6.05M|    {
  142|  6.05M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   119k|    {
   58|   119k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   119k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   119k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.43M|    {
 1251|  5.43M|        return value();
 1252|  5.43M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.43M|    {
 1221|  5.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.43M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  5.43M|    {
  155|  5.43M|        return m_value;
  156|  5.43M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  6.05M|    {
 1191|  6.05M|        return has_value();
 1192|  6.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  12.1M|    {
  189|  12.1M|        return m_has_value;
  190|  12.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  6.05M|    {
 1263|  6.05M|        return std::move(value());
 1264|  6.05M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  6.05M|    {
 1221|  6.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.05M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  6.05M|    {
  155|  6.05M|        return m_value;
  156|  6.05M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  85.5k|    {
 1034|  85.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  85.5k|    {
  142|  85.5k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  6.05M|    {
 1034|  6.05M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.05M|    {
  142|  6.05M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  6.05M|    {
 1405|  6.05M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.05M|                                            std::forward<F>(f));
 1407|  6.05M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  6.05M|{
  927|  6.05M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.05M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.05M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.05M|            return result(*std::forward<Exp>(exp));
  931|  6.05M|        }
  932|       |
  933|  6.05M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.05M|        return result(unexpect, monostate{});
  935|  6.05M|    }
  936|  6.05M|    else {
  937|  6.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.05M, False: 0]
  |  |  ------------------
  ------------------
  939|  6.05M|                   ? result(*std::forward<Exp>(exp))
  940|  6.05M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  6.05M|    }
  944|  6.05M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  12.1M|    {
  189|  12.1M|        return m_has_value;
  190|  12.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.05M|    {
 1263|  6.05M|        return std::move(value());
 1264|  6.05M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.05M|    {
 1221|  6.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.05M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  6.05M|    {
  155|  6.05M|        return m_value;
  156|  6.05M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  6.05M|    {
 1034|  6.05M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.05M|    {
  142|  6.05M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  6.05M|    {
 1191|  6.05M|        return has_value();
 1192|  6.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  12.1M|    {
  189|  12.1M|        return m_has_value;
  190|  12.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.05M|    {
 1263|  6.05M|        return std::move(value());
 1264|  6.05M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.05M|    {
 1221|  6.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.05M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.05M|    {
  155|  6.05M|        return m_value;
  156|  6.05M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  11.3k|    {
 1078|  11.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  11.3k|    {
  312|  11.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  11.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  11.3k|    {
  373|  11.3k|        scn::detail::construct_at(unexpected_ptr(),
  374|  11.3k|                                  std::forward<Args>(args)...);
  375|  11.3k|        m_has_value = false;
  376|  11.3k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  80.3k|{
  102|  80.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  80.3k|        T(std::forward<Args>(args)...);
  104|  80.3k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  34.1k|    {
  403|  34.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  34.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  34.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   720k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   720k|    {
  317|   720k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 709k, False: 11.3k]
  ------------------
  318|   709k|            destroy_value();
  319|   709k|        }
  320|  11.3k|        else {
  321|  11.3k|            destroy_unexpected();
  322|  11.3k|        }
  323|   720k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.16M|    {
  361|  2.16M|        return m_has_value;
  362|  2.16M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   709k|    {
  380|   709k|        scn::detail::destroy_at(value_ptr());
  381|   709k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   709k|{
  108|   709k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   709k|        for (auto& elem : *p) {
  110|   709k|            scn::detail::destroy_at(std::addressof(elem));
  111|   709k|        }
  112|   709k|    }
  113|   709k|    else {
  114|   709k|        p->~T();
  115|   709k|    }
  116|   709k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.12M|    {
  390|  2.12M|        return reinterpret_cast<T*>(
  391|  2.12M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.12M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.12M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  11.3k|    {
  384|  11.3k|        scn::detail::destroy_at(unexpected_ptr());
  385|  11.3k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  80.3k|{
  108|  80.3k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  80.3k|        for (auto& elem : *p) {
  110|  80.3k|            scn::detail::destroy_at(std::addressof(elem));
  111|  80.3k|        }
  112|  80.3k|    }
  113|  80.3k|    else {
  114|  80.3k|        p->~T();
  115|  80.3k|    }
  116|  80.3k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   709k|    {
 1034|   709k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   709k|    {
  303|   709k|        construct(std::forward<Args>(args)...);
  304|   709k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   709k|    {
  367|   709k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   709k|        m_has_value = true;
  369|   709k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   709k|{
  102|   709k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   709k|        T(std::forward<Args>(args)...);
  104|   709k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   720k|    {
 1191|   720k|        return has_value();
 1192|   720k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  11.3k|    {
 1197|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  11.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  11.3k|    {
  344|  11.3k|        return *unexpected_ptr();
  345|  11.3k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   709k|    {
 1263|   709k|        return std::move(value());
 1264|   709k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   709k|    {
 1221|   709k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   709k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   709k|    {
  327|   709k|        return *value_ptr();
  328|   709k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.16M|    {
 1251|  4.16M|        return value();
 1252|  4.16M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   119k|    {
   58|   119k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   119k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   119k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  11.0M|    {
 1034|  11.0M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  11.0M|    {
  142|  11.0M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   939k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   939k|    {
 1034|   939k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   939k|    {
  142|   939k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   213k|    {
 1405|   213k|        return detail::transform_error_impl(std::move(*this),
 1406|   213k|                                            std::forward<F>(f));
 1407|   213k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   213k|{
  927|   213k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   213k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   213k|        if (SCN_LIKELY(exp.has_value())) {
  930|   213k|            return result(*std::forward<Exp>(exp));
  931|   213k|        }
  932|       |
  933|   213k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   213k|        return result(unexpect, monostate{});
  935|   213k|    }
  936|   213k|    else {
  937|   213k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   213k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   213k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 213k, False: 0]
  |  |  ------------------
  ------------------
  939|   213k|                   ? result(*std::forward<Exp>(exp))
  940|   213k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   213k|    }
  944|   213k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.53M|    {
  189|  1.53M|        return m_has_value;
  190|  1.53M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   597k|    {
 1263|   597k|        return std::move(value());
 1264|   597k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   597k|    {
 1221|   597k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   597k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   597k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   597k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   597k|    {
  155|   597k|        return m_value;
  156|   597k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   213k|    {
 1034|   213k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   213k|    {
  142|   213k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   611k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    162|    {
 1207|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    162|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    162|    {
  172|    162|        return m_unexpected;
  173|    162|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   185k|    {
 1088|   185k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   398k|    {
  151|   398k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   341k|    {
 1191|   341k|        return has_value();
 1192|   341k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    324|    {
  151|    324|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.03M|    {
 1078|  1.03M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.03M|    {
  151|  1.03M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.23M|    {
 1191|  1.23M|        return has_value();
 1192|  1.23M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.20M|    {
  189|  2.20M|        return m_has_value;
  190|  2.20M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   213k|    {
 1197|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   213k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   398k|    {
  172|   398k|        return m_unexpected;
  173|   398k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   213k|    {
 1034|   213k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   213k|    {
  142|   213k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   213k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   384k|    {
 1221|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   384k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   384k|    {
  155|   384k|        return m_value;
  156|   384k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   213k|    {
 1191|   213k|        return has_value();
 1192|   213k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   426k|    {
  189|   426k|        return m_has_value;
  190|   426k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   213k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   213k|    {
 1263|   213k|        return std::move(value());
 1264|   213k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   213k|    {
 1221|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   213k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   213k|    {
  155|   213k|        return m_value;
  156|   213k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   384k|    {
 1405|   384k|        return detail::transform_error_impl(std::move(*this),
 1406|   384k|                                            std::forward<F>(f));
 1407|   384k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   384k|{
  927|   384k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   384k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   384k|        if (SCN_LIKELY(exp.has_value())) {
  930|   384k|            return result(*std::forward<Exp>(exp));
  931|   384k|        }
  932|       |
  933|   384k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   384k|        return result(unexpect, monostate{});
  935|   384k|    }
  936|   384k|    else {
  937|   384k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   384k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   384k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 384k, False: 162]
  |  |  ------------------
  ------------------
  939|   384k|                   ? result(*std::forward<Exp>(exp))
  940|   384k|                   : result(unexpect,
  941|    162|                            std::invoke(std::forward<F>(f),
  942|    162|                                        std::forward<Exp>(exp).error()));
  943|   384k|    }
  944|   384k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   384k|    {
 1034|   384k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   384k|    {
  142|   384k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    162|    {
 1088|    162|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   384k|    {
 1263|   384k|        return std::move(value());
 1264|   384k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   213k|    {
 1034|   213k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   213k|    {
  142|   213k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   213k|    {
 1405|   213k|        return detail::transform_error_impl(std::move(*this),
 1406|   213k|                                            std::forward<F>(f));
 1407|   213k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   213k|{
  927|   213k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   213k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   213k|        if (SCN_LIKELY(exp.has_value())) {
  930|   213k|            return result(*std::forward<Exp>(exp));
  931|   213k|        }
  932|       |
  933|   213k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   213k|        return result(unexpect, monostate{});
  935|   213k|    }
  936|   213k|    else {
  937|   213k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   213k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   213k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 213k, False: 0]
  |  |  ------------------
  ------------------
  939|   213k|                   ? result(*std::forward<Exp>(exp))
  940|   213k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   213k|    }
  944|   213k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   426k|    {
  189|   426k|        return m_has_value;
  190|   426k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   213k|    {
 1263|   213k|        return std::move(value());
 1264|   213k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   213k|    {
 1221|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   213k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   213k|    {
  155|   213k|        return m_value;
  156|   213k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   213k|    {
 1034|   213k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   213k|    {
  142|   213k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   213k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   213k|    {
 1191|   213k|        return has_value();
 1192|   213k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   426k|    {
  189|   426k|        return m_has_value;
  190|   426k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   213k|    {
 1263|   213k|        return std::move(value());
 1264|   213k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   213k|    {
 1221|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   213k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   213k|    {
  155|   213k|        return m_value;
  156|   213k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   185k|    {
 1405|   185k|        return detail::transform_error_impl(std::move(*this),
 1406|   185k|                                            std::forward<F>(f));
 1407|   185k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   185k|{
  927|   185k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   185k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   185k|        if (SCN_LIKELY(exp.has_value())) {
  930|   185k|            return result(*std::forward<Exp>(exp));
  931|   185k|        }
  932|       |
  933|   185k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   185k|        return result(unexpect, monostate{});
  935|   185k|    }
  936|   185k|    else {
  937|   185k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   185k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   185k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  939|   185k|                   ? result(*std::forward<Exp>(exp))
  940|   185k|                   : result(unexpect,
  941|   185k|                            std::invoke(std::forward<F>(f),
  942|   185k|                                        std::forward<Exp>(exp).error()));
  943|   185k|    }
  944|   185k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   185k|    {
 1207|   185k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   185k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   213k|    {
 1078|   213k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|     12|    {
 1078|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|     12|    {
  312|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|     12|    {
  373|     12|        scn::detail::construct_at(unexpected_ptr(),
  374|     12|                                  std::forward<Args>(args)...);
  375|     12|        m_has_value = false;
  376|     12|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     36|    {
  403|     36|        return reinterpret_cast<unexpected<E>*>(
  404|     36|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     36|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  28.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  28.4k|    {
  317|  28.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 28.4k, False: 12]
  ------------------
  318|  28.4k|            destroy_value();
  319|  28.4k|        }
  320|     12|        else {
  321|     12|            destroy_unexpected();
  322|     12|        }
  323|  28.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  85.3k|    {
  361|  85.3k|        return m_has_value;
  362|  85.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  28.4k|    {
  380|  28.4k|        scn::detail::destroy_at(value_ptr());
  381|  28.4k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  28.4k|{
  108|  28.4k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  28.4k|        for (auto& elem : *p) {
  110|  28.4k|            scn::detail::destroy_at(std::addressof(elem));
  111|  28.4k|        }
  112|  28.4k|    }
  113|  28.4k|    else {
  114|  28.4k|        p->~T();
  115|  28.4k|    }
  116|  28.4k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  85.3k|    {
  390|  85.3k|        return reinterpret_cast<T*>(
  391|  85.3k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  85.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  85.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     12|    {
  384|     12|        scn::detail::destroy_at(unexpected_ptr());
  385|     12|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  28.4k|    {
 1034|  28.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  28.4k|    {
  303|  28.4k|        construct(std::forward<Args>(args)...);
  304|  28.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  28.4k|    {
  367|  28.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  28.4k|        m_has_value = true;
  369|  28.4k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  28.4k|{
  102|  28.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  28.4k|        T(std::forward<Args>(args)...);
  104|  28.4k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  28.4k|    {
 1191|  28.4k|        return has_value();
 1192|  28.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|     12|    {
 1197|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     12|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     12|    {
  344|     12|        return *unexpected_ptr();
  345|     12|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  28.4k|    {
 1263|  28.4k|        return std::move(value());
 1264|  28.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  28.4k|    {
 1221|  28.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  28.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  28.4k|    {
  327|  28.4k|        return *value_ptr();
  328|  28.4k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   213k|    {
 1221|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   213k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.22M|    {
  189|  1.22M|        return m_has_value;
  190|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   213k|    {
  155|   213k|        return m_value;
  156|   213k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   611k|    {
 1191|   611k|        return has_value();
 1192|   611k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   398k|    {
 1197|   398k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   398k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   398k|    {
  172|   398k|        return m_unexpected;
  173|   398k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   213k|    {
 1263|   213k|        return std::move(value());
 1264|   213k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   158k|    {
 1078|   158k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   158k|    {
  151|   158k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  28.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  27.9M|    {
 1034|  27.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  27.9M|    {
  142|  27.9M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.80M|    {
 1405|  5.80M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.80M|                                            std::forward<F>(f));
 1407|  5.80M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.80M|{
  927|  5.80M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.80M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.80M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.80M|            return result(*std::forward<Exp>(exp));
  931|  5.80M|        }
  932|       |
  933|  5.80M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.80M|        return result(unexpect, monostate{});
  935|  5.80M|    }
  936|  5.80M|    else {
  937|  5.80M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.80M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.77M, False: 36.2k]
  |  |  ------------------
  ------------------
  939|  5.80M|                   ? result(*std::forward<Exp>(exp))
  940|  5.80M|                   : result(unexpect,
  941|  36.2k|                            std::invoke(std::forward<F>(f),
  942|  36.2k|                                        std::forward<Exp>(exp).error()));
  943|  5.80M|    }
  944|  5.80M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  48.8M|    {
  189|  48.8M|        return m_has_value;
  190|  48.8M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  18.1M|    {
 1263|  18.1M|        return std::move(value());
 1264|  18.1M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  20.6M|    {
 1221|  20.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  20.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  20.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  20.6M|    {
  155|  20.6M|        return m_value;
  156|  20.6M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  20.8M|    {
 1034|  20.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  20.8M|    {
  142|  20.8M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  22.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   155k|    {
 1207|   155k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   155k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   158k|    {
  172|   158k|        return m_unexpected;
  173|   158k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  36.2k|    {
 1088|  36.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  1.20M|    {
  151|  1.20M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.16M|    {
 1078|  1.16M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  9.75M|    {
 1191|  9.75M|        return has_value();
 1192|  9.75M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  2.92k|    {
 1197|  2.92k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.92k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   121k|    {
 1078|   121k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   240k|    {
  151|   240k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  38.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.48M|    {
 1251|  2.48M|        return value();
 1252|  2.48M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  4.71M|    {
 1034|  4.71M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.71M|    {
  142|  4.71M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  21.3M|    {
 1078|  21.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  21.3M|    {
  151|  21.3M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  38.7M|    {
 1191|  38.7M|        return has_value();
 1192|  38.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  61.5M|    {
  189|  61.5M|        return m_has_value;
  190|  61.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  5.61M|    {
 1197|  5.61M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.61M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.61M|    {
  172|  5.61M|        return m_unexpected;
  173|  5.61M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.77M|    {
 1034|  5.77M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.77M|    {
  142|  5.77M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.80M|    {
 1251|  4.80M|        return value();
 1252|  4.80M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  17.1M|    {
 1221|  17.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  17.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  17.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  17.1M|    {
  155|  17.1M|        return m_value;
  156|  17.1M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  5.77M|    {
 1191|  5.77M|        return has_value();
 1192|  5.77M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  11.5M|    {
  189|  11.5M|        return m_has_value;
  190|  11.5M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.77M|    {
 1263|  5.77M|        return std::move(value());
 1264|  5.77M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.77M|    {
 1221|  5.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.77M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.77M|    {
  155|  5.77M|        return m_value;
  156|  5.77M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  12.5M|    {
 1405|  12.5M|        return detail::transform_error_impl(std::move(*this),
 1406|  12.5M|                                            std::forward<F>(f));
 1407|  12.5M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  12.5M|{
  927|  12.5M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  12.5M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  12.5M|        if (SCN_LIKELY(exp.has_value())) {
  930|  12.5M|            return result(*std::forward<Exp>(exp));
  931|  12.5M|        }
  932|       |
  933|  12.5M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  12.5M|        return result(unexpect, monostate{});
  935|  12.5M|    }
  936|  12.5M|    else {
  937|  12.5M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  12.5M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  12.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.3M, False: 118k]
  |  |  ------------------
  ------------------
  939|  12.5M|                   ? result(*std::forward<Exp>(exp))
  940|  12.5M|                   : result(unexpect,
  941|   118k|                            std::invoke(std::forward<F>(f),
  942|   118k|                                        std::forward<Exp>(exp).error()));
  943|  12.5M|    }
  944|  12.5M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  12.4M|    {
 1034|  12.4M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  12.4M|    {
  142|  12.4M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   118k|    {
 1088|   118k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  12.3M|    {
 1263|  12.3M|        return std::move(value());
 1264|  12.3M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  5.77M|    {
 1034|  5.77M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.77M|    {
  142|  5.77M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  5.77M|    {
 1405|  5.77M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.77M|                                            std::forward<F>(f));
 1407|  5.77M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  5.77M|{
  927|  5.77M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.77M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.77M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.77M|            return result(*std::forward<Exp>(exp));
  931|  5.77M|        }
  932|       |
  933|  5.77M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.77M|        return result(unexpect, monostate{});
  935|  5.77M|    }
  936|  5.77M|    else {
  937|  5.77M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.77M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.77M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.77M|                   ? result(*std::forward<Exp>(exp))
  940|  5.77M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.77M|    }
  944|  5.77M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  11.5M|    {
  189|  11.5M|        return m_has_value;
  190|  11.5M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.77M|    {
 1263|  5.77M|        return std::move(value());
 1264|  5.77M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.77M|    {
 1221|  5.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.77M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  5.77M|    {
  155|  5.77M|        return m_value;
  156|  5.77M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  5.77M|    {
 1034|  5.77M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.77M|    {
  142|  5.77M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.77M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  5.77M|    {
 1191|  5.77M|        return has_value();
 1192|  5.77M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  11.5M|    {
  189|  11.5M|        return m_has_value;
  190|  11.5M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.77M|    {
 1263|  5.77M|        return std::move(value());
 1264|  5.77M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.77M|    {
 1221|  5.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.77M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.77M|    {
  155|  5.77M|        return m_value;
  156|  5.77M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  68.8k|    {
 1078|  68.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  68.8k|    {
  312|  68.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  68.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  68.8k|    {
  373|  68.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  68.8k|                                  std::forward<Args>(args)...);
  375|  68.8k|        m_has_value = false;
  376|  68.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   206k|    {
  403|   206k|        return reinterpret_cast<unexpected<E>*>(
  404|   206k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   206k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   206k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   693k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   693k|    {
  317|   693k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 624k, False: 68.8k]
  ------------------
  318|   624k|            destroy_value();
  319|   624k|        }
  320|  68.8k|        else {
  321|  68.8k|            destroy_unexpected();
  322|  68.8k|        }
  323|   693k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.07M|    {
  361|  2.07M|        return m_has_value;
  362|  2.07M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   624k|    {
  380|   624k|        scn::detail::destroy_at(value_ptr());
  381|   624k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   624k|{
  108|   624k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   624k|        for (auto& elem : *p) {
  110|   624k|            scn::detail::destroy_at(std::addressof(elem));
  111|   624k|        }
  112|   624k|    }
  113|   624k|    else {
  114|   624k|        p->~T();
  115|   624k|    }
  116|   624k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.87M|    {
  390|  1.87M|        return reinterpret_cast<T*>(
  391|  1.87M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.87M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.87M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  68.8k|    {
  384|  68.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  68.8k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   624k|    {
 1034|   624k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   624k|    {
  303|   624k|        construct(std::forward<Args>(args)...);
  304|   624k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   624k|    {
  367|   624k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   624k|        m_has_value = true;
  369|   624k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   624k|{
  102|   624k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   624k|        T(std::forward<Args>(args)...);
  104|   624k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   693k|    {
 1191|   693k|        return has_value();
 1192|   693k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  68.8k|    {
 1197|  68.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  68.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  68.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  68.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  68.8k|    {
  344|  68.8k|        return *unexpected_ptr();
  345|  68.8k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   624k|    {
 1263|   624k|        return std::move(value());
 1264|   624k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   624k|    {
 1221|   624k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   624k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   624k|    {
  327|   624k|        return *value_ptr();
  328|   624k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.65M|    {
 1251|  3.65M|        return value();
 1252|  3.65M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  20.8M|    {
 1221|  20.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  20.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  20.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  44.2M|    {
  189|  44.2M|        return m_has_value;
  190|  44.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  20.8M|    {
  155|  20.8M|        return m_value;
  156|  20.8M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  22.1M|    {
 1191|  22.1M|        return has_value();
 1192|  22.1M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.20M|    {
 1197|  1.20M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.20M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.20M|    {
  172|  1.20M|        return m_unexpected;
  173|  1.20M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  17.2M|    {
 1263|  17.2M|        return std::move(value());
 1264|  17.2M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   640k|    {
 1078|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.19M|    {
  151|  1.19M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.83M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.83M|    {
 1191|  1.83M|        return has_value();
 1192|  1.83M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.67M|    {
  189|  3.67M|        return m_has_value;
  190|  3.67M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.19M|    {
 1197|  1.19M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.19M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.19M|    {
  172|  1.19M|        return m_unexpected;
  173|  1.19M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.81M|    {
 1034|  2.81M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.81M|    {
  142|  2.81M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   640k|    {
 1405|   640k|        return detail::transform_error_impl(std::move(*this),
 1406|   640k|                                            std::forward<F>(f));
 1407|   640k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   640k|{
  927|   640k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   640k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   640k|        if (SCN_LIKELY(exp.has_value())) {
  930|   640k|            return result(*std::forward<Exp>(exp));
  931|   640k|        }
  932|       |
  933|   640k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   640k|        return result(unexpect, monostate{});
  935|   640k|    }
  936|   640k|    else {
  937|   640k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   640k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   640k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 640k, False: 0]
  |  |  ------------------
  ------------------
  939|   640k|                   ? result(*std::forward<Exp>(exp))
  940|   640k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   640k|    }
  944|   640k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.61M|    {
  189|  4.61M|        return m_has_value;
  190|  4.61M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.79M|    {
 1263|  1.79M|        return std::move(value());
 1264|  1.79M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.79M|    {
 1221|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.79M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.79M|    {
  155|  1.79M|        return m_value;
  156|  1.79M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    162|    {
 1207|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    162|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    162|    {
  172|    162|        return m_unexpected;
  173|    162|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   555k|    {
 1088|   555k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.02M|    {
 1191|  1.02M|        return has_value();
 1192|  1.02M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    324|    {
  151|    324|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.26M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  3.11M|    {
 1078|  3.11M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  3.11M|    {
  151|  3.11M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.71M|    {
 1191|  3.71M|        return has_value();
 1192|  3.71M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.61M|    {
  189|  6.61M|        return m_has_value;
  190|  6.61M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   640k|    {
 1197|   640k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.19M|    {
  172|  1.19M|        return m_unexpected;
  173|  1.19M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   640k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.15M|    {
 1221|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.15M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.15M|    {
  155|  1.15M|        return m_value;
  156|  1.15M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   640k|    {
 1191|   640k|        return has_value();
 1192|   640k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.28M|    {
  189|  1.28M|        return m_has_value;
  190|  1.28M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   640k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   640k|    {
 1263|   640k|        return std::move(value());
 1264|   640k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.15M|    {
 1405|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.15M|                                            std::forward<F>(f));
 1407|  1.15M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.15M|{
  927|  1.15M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.15M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.15M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.15M|            return result(*std::forward<Exp>(exp));
  931|  1.15M|        }
  932|       |
  933|  1.15M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.15M|        return result(unexpect, monostate{});
  935|  1.15M|    }
  936|  1.15M|    else {
  937|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.15M, False: 162]
  |  |  ------------------
  ------------------
  939|  1.15M|                   ? result(*std::forward<Exp>(exp))
  940|  1.15M|                   : result(unexpect,
  941|    162|                            std::invoke(std::forward<F>(f),
  942|    162|                                        std::forward<Exp>(exp).error()));
  943|  1.15M|    }
  944|  1.15M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.15M|    {
 1034|  1.15M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.15M|    {
  142|  1.15M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    162|    {
 1088|    162|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.15M|    {
 1263|  1.15M|        return std::move(value());
 1264|  1.15M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   640k|    {
 1405|   640k|        return detail::transform_error_impl(std::move(*this),
 1406|   640k|                                            std::forward<F>(f));
 1407|   640k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   640k|{
  927|   640k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   640k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   640k|        if (SCN_LIKELY(exp.has_value())) {
  930|   640k|            return result(*std::forward<Exp>(exp));
  931|   640k|        }
  932|       |
  933|   640k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   640k|        return result(unexpect, monostate{});
  935|   640k|    }
  936|   640k|    else {
  937|   640k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   640k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   640k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 640k, False: 0]
  |  |  ------------------
  ------------------
  939|   640k|                   ? result(*std::forward<Exp>(exp))
  940|   640k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   640k|    }
  944|   640k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.28M|    {
  189|  1.28M|        return m_has_value;
  190|  1.28M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   640k|    {
 1263|   640k|        return std::move(value());
 1264|   640k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   640k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   640k|    {
 1191|   640k|        return has_value();
 1192|   640k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.28M|    {
  189|  1.28M|        return m_has_value;
  190|  1.28M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   640k|    {
 1263|   640k|        return std::move(value());
 1264|   640k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   555k|    {
 1405|   555k|        return detail::transform_error_impl(std::move(*this),
 1406|   555k|                                            std::forward<F>(f));
 1407|   555k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   555k|{
  927|   555k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   555k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   555k|        if (SCN_LIKELY(exp.has_value())) {
  930|   555k|            return result(*std::forward<Exp>(exp));
  931|   555k|        }
  932|       |
  933|   555k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   555k|        return result(unexpect, monostate{});
  935|   555k|    }
  936|   555k|    else {
  937|   555k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   555k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
  939|   555k|                   ? result(*std::forward<Exp>(exp))
  940|   555k|                   : result(unexpect,
  941|   555k|                            std::invoke(std::forward<F>(f),
  942|   555k|                                        std::forward<Exp>(exp).error()));
  943|   555k|    }
  944|   555k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   555k|    {
 1207|   555k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   555k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|     36|    {
 1078|     36|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|     36|    {
  312|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     36|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|     36|    {
  373|     36|        scn::detail::construct_at(unexpected_ptr(),
  374|     36|                                  std::forward<Args>(args)...);
  375|     36|        m_has_value = false;
  376|     36|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|    108|    {
  403|    108|        return reinterpret_cast<unexpected<E>*>(
  404|    108|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|    108|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  85.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  85.3k|    {
  317|  85.3k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 85.3k, False: 36]
  ------------------
  318|  85.3k|            destroy_value();
  319|  85.3k|        }
  320|     36|        else {
  321|     36|            destroy_unexpected();
  322|     36|        }
  323|  85.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   256k|    {
  361|   256k|        return m_has_value;
  362|   256k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  85.3k|    {
  380|  85.3k|        scn::detail::destroy_at(value_ptr());
  381|  85.3k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  85.3k|{
  108|  85.3k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  85.3k|        for (auto& elem : *p) {
  110|  85.3k|            scn::detail::destroy_at(std::addressof(elem));
  111|  85.3k|        }
  112|  85.3k|    }
  113|  85.3k|    else {
  114|  85.3k|        p->~T();
  115|  85.3k|    }
  116|  85.3k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   256k|    {
  390|   256k|        return reinterpret_cast<T*>(
  391|   256k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   256k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   256k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     36|    {
  384|     36|        scn::detail::destroy_at(unexpected_ptr());
  385|     36|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  85.3k|    {
 1034|  85.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  85.3k|    {
  303|  85.3k|        construct(std::forward<Args>(args)...);
  304|  85.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  85.3k|    {
  367|  85.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  85.3k|        m_has_value = true;
  369|  85.3k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  85.3k|{
  102|  85.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  85.3k|        T(std::forward<Args>(args)...);
  104|  85.3k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  85.3k|    {
 1191|  85.3k|        return has_value();
 1192|  85.3k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|     36|    {
 1197|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     36|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     36|    {
  344|     36|        return *unexpected_ptr();
  345|     36|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  85.3k|    {
 1263|  85.3k|        return std::move(value());
 1264|  85.3k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  85.3k|    {
 1221|  85.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  85.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  85.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  85.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  85.3k|    {
  327|  85.3k|        return *value_ptr();
  328|  85.3k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   640k|    {
 1263|   640k|        return std::move(value());
 1264|   640k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.74k|{
  200|  4.74k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.74k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.74k|{
  180|  4.74k|    return p;
  181|  4.74k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.74k|{
  200|  4.74k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.74k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.74k|{
  180|  4.74k|    return p;
  181|  4.74k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.74k|{
  200|  4.74k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.74k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.74k|{
  180|  4.74k|    return p;
  181|  4.74k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  19.4M|{
  200|  19.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  19.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  19.4M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  19.4M|{
  180|  19.4M|    return p;
  181|  19.4M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.8M|{
  200|  12.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.8M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  12.8M|{
  180|  12.8M|    return p;
  181|  12.8M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.8M|{
  200|  12.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.8M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  12.8M|{
  180|  12.8M|    return p;
  181|  12.8M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  18.8k|    {
  242|  18.8k|        return static_cast<size_type>(m_end - m_ptr);
  243|  18.8k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  4.74k|    {
  181|  4.74k|        return m_ptr;
  182|  4.74k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  4.74k|    {
  185|  4.74k|        return m_end;
  186|  4.74k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.37k|    {
  238|  2.37k|        return m_ptr;
  239|  2.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.37k|    {
  120|  2.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  56.9k|    {
  181|  56.9k|        return m_ptr;
  182|  56.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  56.9k|    {
  185|  56.9k|        return m_end;
  186|  56.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.37k|    {
  120|  2.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   170k|    {
  181|   170k|        return m_ptr;
  182|   170k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   170k|    {
  185|   170k|        return m_end;
  186|   170k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.37k|    {
  120|  2.37k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  6.44M|    {
  120|  6.44M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  6.44M|    {
  238|  6.44M|        return m_ptr;
  239|  6.44M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  6.44M|    {
  242|  6.44M|        return static_cast<size_type>(m_end - m_ptr);
  243|  6.44M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  3.01M|{
   60|  3.01M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  3.01M|                                          const CharT*, const CharT*>) {
   62|  3.01M|        return {first, last};
   63|  3.01M|    }
   64|  3.01M|    else {
   65|  3.01M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  3.01M|    }
   67|  3.01M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  9.06M|{
   60|  9.06M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  9.06M|                                          const CharT*, const CharT*>) {
   62|  9.06M|        return {first, last};
   63|  9.06M|    }
   64|  9.06M|    else {
   65|  9.06M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  9.06M|    }
   67|  9.06M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  6.48M|{
   44|  6.48M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  6.48M|                                          decltype(first), decltype(last)> &&
   46|  6.48M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  6.48M|        return {first, last};
   48|  6.48M|    }
   49|  6.48M|    else {
   50|  6.48M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  6.48M|                                       to_address(first), to_address(last)))};
   52|  6.48M|    }
   53|  6.48M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  12.5M|{
   75|  12.5M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  12.5M|                      typename std::basic_string_view<CharT>::iterator,
   77|  12.5M|                      decltype(it)> &&
   78|  12.5M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  12.5M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  12.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  12.5M|        return it;
   81|  12.5M|    }
   82|  12.5M|    else {
   83|  12.5M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  12.5M|    }
   85|  12.5M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   213k|{
   54|   213k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   213k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   213k|        return true;
   57|   213k|    }
   58|   213k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   213k|                           ranges::iterator_t<Range>,
   60|   213k|                           typename detail::basic_scan_buffer<
   61|   213k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   213k|        auto beg = ranges::begin(r);
   63|   213k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 213k, False: 0]
  ------------------
   64|   213k|            return false;
   65|   213k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   213k|    else {
   79|   213k|        return false;
   80|   213k|    }
   81|   213k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   213k|{
  112|   213k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   213k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   213k|        return r;
  115|   213k|    }
  116|   213k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   213k|                           ranges::iterator_t<Range>,
  118|   213k|                           typename detail::basic_scan_buffer<
  119|   213k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   213k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   213k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   213k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   213k|                ranges::begin(r), ranges::end(r)));
  124|   213k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   213k|        }
  126|   213k|        else {
  127|   213k|            return ranges::begin(r).contiguous_segment();
  128|   213k|        }
  129|   213k|    }
  130|   213k|    else {
  131|   213k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   213k|    }
  133|   213k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   384k|{
  166|   384k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   384k|        return ranges_polyfill::usize(r);
  168|   384k|    }
  169|   384k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   384k|                           ranges::iterator_t<Range>,
  171|   384k|                           typename detail::basic_scan_buffer<
  172|   384k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   384k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   384k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   384k|                                       ranges::begin(r).position());
  176|   384k|        }
  177|   384k|        else {
  178|   384k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 384k, False: 0]
  ------------------
  179|   384k|                return static_cast<size_t>(
  180|   384k|                    ranges::begin(r).parent()->chars_available() -
  181|   384k|                    ranges::begin(r).position());
  182|   384k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   384k|        }
  185|   384k|    }
  186|   384k|    else {
  187|   384k|        return 0;
  188|   384k|    }
  189|   384k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   640k|{
   54|   640k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   640k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   640k|        return true;
   57|   640k|    }
   58|   640k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   640k|                           ranges::iterator_t<Range>,
   60|   640k|                           typename detail::basic_scan_buffer<
   61|   640k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   640k|        auto beg = ranges::begin(r);
   63|   640k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 640k, False: 0]
  ------------------
   64|   640k|            return false;
   65|   640k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   640k|    else {
   79|   640k|        return false;
   80|   640k|    }
   81|   640k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   640k|{
  112|   640k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   640k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   640k|        return r;
  115|   640k|    }
  116|   640k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   640k|                           ranges::iterator_t<Range>,
  118|   640k|                           typename detail::basic_scan_buffer<
  119|   640k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   640k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   640k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   640k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   640k|                ranges::begin(r), ranges::end(r)));
  124|   640k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   640k|        }
  126|   640k|        else {
  127|   640k|            return ranges::begin(r).contiguous_segment();
  128|   640k|        }
  129|   640k|    }
  130|   640k|    else {
  131|   640k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   640k|    }
  133|   640k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.15M|{
  166|  1.15M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.15M|        return ranges_polyfill::usize(r);
  168|  1.15M|    }
  169|  1.15M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.15M|                           ranges::iterator_t<Range>,
  171|  1.15M|                           typename detail::basic_scan_buffer<
  172|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.15M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.15M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.15M|                                       ranges::begin(r).position());
  176|  1.15M|        }
  177|  1.15M|        else {
  178|  1.15M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.15M, False: 0]
  ------------------
  179|  1.15M|                return static_cast<size_t>(
  180|  1.15M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.15M|                    ranges::begin(r).position());
  182|  1.15M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.15M|        }
  185|  1.15M|    }
  186|  1.15M|    else {
  187|  1.15M|        return 0;
  188|  1.15M|    }
  189|  1.15M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  6.06M|{
  235|  6.06M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  6.06M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  6.06M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  6.06M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  6.06M|    }
  240|  6.06M|    else {
  241|  6.06M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  6.06M|    }
  243|  6.06M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  6.06M|    {
   50|  6.06M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  19.3M|    {
   63|  19.3M|        return sv;
   64|  19.3M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.69M|{
  235|  3.69M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.69M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.69M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.69M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.69M|    }
  240|  3.69M|    else {
  241|  3.69M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.69M|    }
  243|  3.69M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.69M|    {
   50|  3.69M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.61M|{
  235|  3.61M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.61M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.61M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.61M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.61M|    }
  240|  3.61M|    else {
  241|  3.61M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.61M|    }
  243|  3.61M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.61M|    {
   50|  3.61M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  6.74M|    {
   63|  6.74M|        return sv;
   64|  6.74M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  26.1M|{
   97|  26.1M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  26.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.6k, False: 26.0M]
  |  |  ------------------
  ------------------
   98|  31.6k|        return eof_error::eof;
   99|  31.6k|    }
  100|  26.0M|    return eof_error::good;
  101|  26.1M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  26.1M|{
   91|  26.1M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  26.1M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  26.1M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  26.1M|    {
   84|  26.1M|        return begin == end;
   85|  26.1M|    }
   86|  26.1M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   768k|{
   97|   768k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|   768k|    return eof_error::good;
  101|   768k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   768k|{
   91|   768k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   768k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   768k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   768k|    {
   84|   768k|        return begin == end;
   85|   768k|    }
   86|   768k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  24.9M|{
   97|  24.9M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  24.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.8k, False: 24.9M]
  |  |  ------------------
  ------------------
   98|  41.8k|        return eof_error::eof;
   99|  41.8k|    }
  100|  24.9M|    return eof_error::good;
  101|  24.9M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  24.9M|{
   91|  24.9M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  24.9M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  24.9M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  24.9M|    {
   84|  24.9M|        return begin == end;
   85|  24.9M|    }
   86|  24.9M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.30M|{
   97|  2.30M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.30M]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  2.30M|    return eof_error::good;
  101|  2.30M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.30M|{
   91|  2.30M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.30M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.30M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.30M|    {
   84|  2.30M|        return begin == end;
   85|  2.30M|    }
   86|  2.30M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  6.27M|{
  128|  6.27M|    return find_classic_impl(
  129|  6.27M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  6.27M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  6.27M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  6.39M|{
   31|  6.39M|    static_assert(sizeof(*source.data()) == 1);
   32|  6.39M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  6.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  6.39M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  6.39M|    return has_byte_greater(word, 127) != 0;
   37|  6.39M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  6.27M|{
   44|  6.27M|    auto it = source.begin();
   45|       |
   46|  6.39M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 6.39M, False: 4.03k]
  ------------------
   47|  6.39M|        auto sv =
   48|  6.39M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  6.39M|                .substr(0, 8);
   50|       |
   51|  6.39M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 6.32M, False: 65.7k]
  ------------------
   52|  6.32M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  6.32M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  6.32M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 6.20M, False: 118k]
  ------------------
   55|  6.20M|                break;
   56|  6.20M|            }
   57|   118k|            continue;
   58|  6.32M|        }
   59|       |
   60|  93.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 91.8k, False: 1.23k]
  ------------------
   61|  91.8k|            auto tmp =
   62|  91.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  91.8k|            auto res = get_next_code_point(tmp);
   64|  91.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 64.5k, False: 27.3k]
  ------------------
   65|  64.5k|                return it;
   66|  64.5k|            }
   67|  27.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  27.3k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  27.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  27.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  27.3k|        }
   71|  65.7k|    }
   72|       |
   73|  6.21M|    return detail::make_string_view_iterator(source, it);
   74|  6.27M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  13.4M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  91.8k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  6.06M|{
  300|  6.06M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  6.06M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  6.06M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  6.06M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  6.06M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  6.06M|        return ranges::next(ranges::begin(range),
  306|  6.06M|                            ranges::distance(buf.view().begin(), it));
  307|  6.06M|    }
  308|  6.06M|    else {
  309|  6.06M|        auto it = ranges::begin(range);
  310|       |
  311|  6.06M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  6.06M|            auto seg = get_contiguous_beginning(range);
  313|  6.06M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  6.06M|                seg_it != seg.end()) {
  315|  6.06M|                return ranges_polyfill::batch_next(
  316|  6.06M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  6.06M|            }
  318|  6.06M|            ranges_polyfill::batch_next(it, seg.size());
  319|  6.06M|        }
  320|       |
  321|  6.06M|        return read_while_code_point(
  322|  6.06M|            SCN_FWD(range),
  323|  6.06M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  6.06M|    }
  325|  6.06M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  6.05M|{
  459|  6.05M|    auto it = read_code_unit(range);
  460|  6.05M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  6.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.05M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  12.0M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 12.0M, False: 5.71M]
  ------------------
  465|  12.0M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 340k, False: 11.7M]
  ------------------
  466|   340k|            return *it;
  467|   340k|        }
  468|  12.0M|    }
  469|       |
  470|  5.71M|    return unexpected(parse_error::error);
  471|  6.05M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.17M|{
  482|  1.17M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.02M, False: 159k]
  ------------------
  483|  1.02M|        return ranges::begin(range);
  484|  1.02M|    }
  485|   159k|    return *result;
  486|  1.17M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  13.2M|{
  418|  13.2M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  13.2M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  13.2M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  13.2M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 50.4k, False: 13.2M]
  ------------------
  423|  50.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  50.4k|        }
  425|  13.2M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 13.1M, False: 85.5k]
  ------------------
  426|  13.1M|            return unexpected(parse_error::error);
  427|  13.1M|        }
  428|  85.5k|        return ranges::next(ranges::begin(range), str.size());
  429|  13.2M|    }
  430|  13.2M|    else {
  431|  13.2M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  13.2M|            if (ch < 'A' || ch > 'Z') {
  433|  13.2M|                return ch;
  434|  13.2M|            }
  435|  13.2M|            return static_cast<char_type>(ch +
  436|  13.2M|                                          static_cast<char_type>('a' - 'A'));
  437|  13.2M|        };
  438|       |
  439|  13.2M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  13.2M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  13.2M|        if (SCN_UNLIKELY(!std::equal(
  443|  13.2M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  13.2M|                    return ascii_tolower(a) ==
  445|  13.2M|                           static_cast<detail::char_t<Range>>(b);
  446|  13.2M|                }))) {
  447|  13.2M|            return unexpected(parse_error::error);
  448|  13.2M|        }
  449|       |
  450|  13.2M|        return it;
  451|  13.2M|    }
  452|  13.2M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  13.2M|{
  407|  13.2M|    unsigned char running_diff{0};
  408|  39.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 26.4M, False: 13.2M]
  ------------------
  409|  26.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  26.4M|    }
  411|  13.2M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 77.8k, False: 13.1M]
  |  Branch (411:33): [True: 7.70k, False: 13.1M]
  ------------------
  412|  13.2M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  4.22M|{
  332|  4.22M|    auto it = read_code_unit(range);
  333|  4.22M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.68k, False: 4.22M]
  |  |  ------------------
  ------------------
  334|  1.68k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.68k|    }
  336|       |
  337|  4.22M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  4.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.73M, False: 2.48M]
  |  |  ------------------
  ------------------
  338|  4.22M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.73M|        return unexpected(parse_error::error);
  340|  1.73M|    }
  341|       |
  342|  2.48M|    return *it;
  343|  4.22M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   213k|{
  300|   213k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   213k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   213k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   213k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   213k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   213k|        return ranges::next(ranges::begin(range),
  306|   213k|                            ranges::distance(buf.view().begin(), it));
  307|   213k|    }
  308|   213k|    else {
  309|   213k|        auto it = ranges::begin(range);
  310|       |
  311|   213k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   213k|            auto seg = get_contiguous_beginning(range);
  313|   213k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   213k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 213k, False: 0]
  ------------------
  315|   213k|                return ranges_polyfill::batch_next(
  316|   213k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   213k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   213k|    }
  325|   213k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   213k|{
  459|   213k|    auto it = read_code_unit(range);
  460|   213k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 213k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   426k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 426k, False: 213k]
  ------------------
  465|   426k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 426k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   426k|    }
  469|       |
  470|   213k|    return unexpected(parse_error::error);
  471|   213k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  85.3k|{
  482|  85.3k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 85.3k, False: 0]
  ------------------
  483|  85.3k|        return ranges::begin(range);
  484|  85.3k|    }
  485|      0|    return *result;
  486|  85.3k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   384k|{
  418|   384k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   384k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   384k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   384k|        if (ranges::size(range) < str.size()) {
  423|   384k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   384k|        }
  425|   384k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   384k|            return unexpected(parse_error::error);
  427|   384k|        }
  428|   384k|        return ranges::next(ranges::begin(range), str.size());
  429|   384k|    }
  430|   384k|    else {
  431|   384k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   384k|            if (ch < 'A' || ch > 'Z') {
  433|   384k|                return ch;
  434|   384k|            }
  435|   384k|            return static_cast<char_type>(ch +
  436|   384k|                                          static_cast<char_type>('a' - 'A'));
  437|   384k|        };
  438|       |
  439|   384k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   384k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   384k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   384k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162, False: 384k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|   384k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   384k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   384k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 384k, False: 0]
  |  |  ------------------
  ------------------
  443|   384k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   384k|                    return ascii_tolower(a) ==
  445|   384k|                           static_cast<detail::char_t<Range>>(b);
  446|   384k|                }))) {
  447|   384k|            return unexpected(parse_error::error);
  448|   384k|        }
  449|       |
  450|      0|        return it;
  451|   384k|    }
  452|   384k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   384k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   384k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 384k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   384k|                return ch;
  434|   384k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   384k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   128k|{
  332|   128k|    auto it = read_code_unit(range);
  333|   128k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   128k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
  338|   128k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   128k|        return unexpected(parse_error::error);
  340|   128k|    }
  341|       |
  342|      0|    return *it;
  343|   128k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   185k|{
  159|   185k|    auto it = read_while_code_unit(range, pred);
  160|   185k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 185k, False: 0]
  ------------------
  161|   185k|        return unexpected(parse_error::error);
  162|   185k|    }
  163|      0|    return it;
  164|   185k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   185k|{
  139|   185k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   185k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   185k|{
  131|   185k|    return ranges::find_if(range, pred);
  132|   185k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.77M|{
  300|  5.77M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.77M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.77M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.77M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  5.77M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.77M|        return ranges::next(ranges::begin(range),
  306|  5.77M|                            ranges::distance(buf.view().begin(), it));
  307|  5.77M|    }
  308|  5.77M|    else {
  309|  5.77M|        auto it = ranges::begin(range);
  310|       |
  311|  5.77M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  5.77M|            auto seg = get_contiguous_beginning(range);
  313|  5.77M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.77M|                seg_it != seg.end()) {
  315|  5.77M|                return ranges_polyfill::batch_next(
  316|  5.77M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.77M|            }
  318|  5.77M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.77M|        }
  320|       |
  321|  5.77M|        return read_while_code_point(
  322|  5.77M|            SCN_FWD(range),
  ------------------
  |  |  248|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.77M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.77M|    }
  325|  5.77M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  5.77M|{
  264|  5.77M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  5.77M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  5.77M|{
  231|  5.77M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  5.77M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  5.77M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  5.77M|    }
  235|  5.77M|    else {
  236|  5.77M|        auto it = ranges::begin(range);
  237|  5.77M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  5.77M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  5.77M|            seg_it != seg.end()) {
  241|  5.77M|            return ranges_polyfill::batch_next(
  242|  5.77M|                it, ranges::distance(seg.begin(), seg_it));
  243|  5.77M|        }
  244|       |
  245|  5.77M|        while (it != ranges::end(range)) {
  246|  5.77M|            const auto [iter, value] =
  247|  5.77M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  5.77M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  5.77M|            if (pred(cp)) {
  250|  5.77M|                return it;
  251|  5.77M|            }
  252|  5.77M|            it = iter;
  253|  5.77M|        }
  254|       |
  255|  5.77M|        return it;
  256|  5.77M|    }
  257|  5.77M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  5.77M|{
  178|  5.77M|    static_assert(ranges::contiguous_range<Range> &&
  179|  5.77M|                  ranges::sized_range<Range>);
  180|       |
  181|  5.77M|    std::array<char32_t, 16> cp_buf{};
  182|  5.77M|    std::array<uint8_t, 16> idx_buf{};
  183|  5.77M|    auto it = ranges::begin(range);
  184|  5.80M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 5.79M, False: 7.34k]
  ------------------
  185|  5.79M|        auto chunk_begin = it;
  186|  5.79M|        size_t code_point_count = 0;
  187|  5.79M|        uint8_t code_unit_idx = 0;
  188|  94.1M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 88.8M, False: 5.31M]
  |  Branch (188:52): [True: 88.3M, False: 485k]
  ------------------
  189|  88.3M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 88.3M, False: 0]
  ------------------
  190|  88.3M|                idx_buf[code_point_count] = code_unit_idx;
  191|  88.3M|                ++code_point_count;
  192|  88.3M|            }
  193|  88.3M|            ++it;
  194|  88.3M|            ++code_unit_idx;
  195|  88.3M|        }
  196|       |
  197|  5.79M|        auto input = detail::make_string_view_from_pointers(
  198|  5.79M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  5.79M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  5.79M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  5.79M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  5.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.79M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  12.2M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 12.1M, False: 29.6k]
  ------------------
  217|  12.1M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 5.77M, False: 6.42M]
  ------------------
  218|  5.77M|                return chunk_begin + idx_buf[i];
  219|  5.77M|            }
  220|  12.1M|        }
  221|  5.79M|    }
  222|       |
  223|  7.34k|    return it;
  224|  5.77M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  12.1M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.77M|{
  459|  5.77M|    auto it = read_code_unit(range);
  460|  5.77M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.77M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  11.4M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 11.4M, False: 5.49M]
  ------------------
  465|  11.4M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 277k, False: 11.2M]
  ------------------
  466|   277k|            return *it;
  467|   277k|        }
  468|  11.4M|    }
  469|       |
  470|  5.49M|    return unexpected(parse_error::error);
  471|  5.77M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.20M|{
  482|  1.20M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.06M, False: 138k]
  ------------------
  483|  1.06M|        return ranges::begin(range);
  484|  1.06M|    }
  485|   138k|    return *result;
  486|  1.20M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  12.5M|{
  418|  12.5M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  12.5M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  12.5M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  12.5M|        if (ranges::size(range) < str.size()) {
  423|  12.5M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  12.5M|        }
  425|  12.5M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  12.5M|            return unexpected(parse_error::error);
  427|  12.5M|        }
  428|  12.5M|        return ranges::next(ranges::begin(range), str.size());
  429|  12.5M|    }
  430|  12.5M|    else {
  431|  12.5M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  12.5M|            if (ch < 'A' || ch > 'Z') {
  433|  12.5M|                return ch;
  434|  12.5M|            }
  435|  12.5M|            return static_cast<char_type>(ch +
  436|  12.5M|                                          static_cast<char_type>('a' - 'A'));
  437|  12.5M|        };
  438|       |
  439|  12.5M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  12.5M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.5M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.5M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 118k, False: 12.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   118k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   118k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   118k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   118k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   118k|    }                                                  \
  |  |  |  |   70|  12.5M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  12.3M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  12.3M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  12.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3M, False: 83.1k]
  |  |  ------------------
  ------------------
  443|  12.3M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  12.3M|                    return ascii_tolower(a) ==
  445|  12.3M|                           static_cast<detail::char_t<Range>>(b);
  446|  12.3M|                }))) {
  447|  12.3M|            return unexpected(parse_error::error);
  448|  12.3M|        }
  449|       |
  450|  83.1k|        return it;
  451|  12.3M|    }
  452|  12.5M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  19.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  19.4M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 18.5M, False: 932k]
  |  Branch (432:29): [True: 883k, False: 49.1k]
  ------------------
  433|  19.3M|                return ch;
  434|  19.3M|            }
  435|  49.1k|            return static_cast<char_type>(ch +
  436|  49.1k|                                          static_cast<char_type>('a' - 'A'));
  437|  19.4M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.98M|{
  332|  3.98M|    auto it = read_code_unit(range);
  333|  3.98M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.92k, False: 3.98M]
  |  |  ------------------
  ------------------
  334|  2.92k|        return unexpected(make_eof_parse_error(it.error()));
  335|  2.92k|    }
  336|       |
  337|  3.98M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.77M, False: 2.20M]
  |  |  ------------------
  ------------------
  338|  3.98M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.77M|        return unexpected(parse_error::error);
  340|  1.77M|    }
  341|       |
  342|  2.20M|    return *it;
  343|  3.98M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   640k|{
  178|   640k|    static_assert(ranges::contiguous_range<Range> &&
  179|   640k|                  ranges::sized_range<Range>);
  180|       |
  181|   640k|    std::array<char32_t, 16> cp_buf{};
  182|   640k|    std::array<uint8_t, 16> idx_buf{};
  183|   640k|    auto it = ranges::begin(range);
  184|   640k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 640k, False: 0]
  ------------------
  185|   640k|        auto chunk_begin = it;
  186|   640k|        size_t code_point_count = 0;
  187|   640k|        uint8_t code_unit_idx = 0;
  188|  1.28M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.28M, False: 0]
  |  Branch (188:52): [True: 640k, False: 640k]
  ------------------
  189|   640k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 640k, False: 0]
  ------------------
  190|   640k|                idx_buf[code_point_count] = code_unit_idx;
  191|   640k|                ++code_point_count;
  192|   640k|            }
  193|   640k|            ++it;
  194|   640k|            ++code_unit_idx;
  195|   640k|        }
  196|       |
  197|   640k|        auto input = detail::make_string_view_from_pointers(
  198|   640k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   640k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   640k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   640k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 640k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   640k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 640k, False: 0]
  ------------------
  217|   640k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 640k, False: 0]
  ------------------
  218|   640k|                return chunk_begin + idx_buf[i];
  219|   640k|            }
  220|   640k|        }
  221|   640k|    }
  222|       |
  223|      0|    return it;
  224|   640k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   640k|{
  300|   640k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   640k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   640k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   640k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   640k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   640k|        return ranges::next(ranges::begin(range),
  306|   640k|                            ranges::distance(buf.view().begin(), it));
  307|   640k|    }
  308|   640k|    else {
  309|   640k|        auto it = ranges::begin(range);
  310|       |
  311|   640k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   640k|            auto seg = get_contiguous_beginning(range);
  313|   640k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   640k|                seg_it != seg.end()) {
  315|   640k|                return ranges_polyfill::batch_next(
  316|   640k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   640k|            }
  318|   640k|            ranges_polyfill::batch_next(it, seg.size());
  319|   640k|        }
  320|       |
  321|   640k|        return read_while_code_point(
  322|   640k|            SCN_FWD(range),
  ------------------
  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   640k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   640k|    }
  325|   640k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   640k|{
  264|   640k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   640k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   640k|{
  231|   640k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   640k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   640k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   640k|    }
  235|   640k|    else {
  236|   640k|        auto it = ranges::begin(range);
  237|   640k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   640k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   640k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 640k, False: 0]
  ------------------
  241|   640k|            return ranges_polyfill::batch_next(
  242|   640k|                it, ranges::distance(seg.begin(), seg_it));
  243|   640k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   640k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   640k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   640k|{
  459|   640k|    auto it = read_code_unit(range);
  460|   640k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 640k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.28M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.28M, False: 640k]
  ------------------
  465|  1.28M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.28M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.28M|    }
  469|       |
  470|   640k|    return unexpected(parse_error::error);
  471|   640k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   256k|{
  482|   256k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 256k, False: 0]
  ------------------
  483|   256k|        return ranges::begin(range);
  484|   256k|    }
  485|      0|    return *result;
  486|   256k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.15M|{
  418|  1.15M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.15M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.15M|        if (ranges::size(range) < str.size()) {
  423|  1.15M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.15M|        }
  425|  1.15M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.15M|            return unexpected(parse_error::error);
  427|  1.15M|        }
  428|  1.15M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.15M|    }
  430|  1.15M|    else {
  431|  1.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.15M|            if (ch < 'A' || ch > 'Z') {
  433|  1.15M|                return ch;
  434|  1.15M|            }
  435|  1.15M|            return static_cast<char_type>(ch +
  436|  1.15M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.15M|        };
  438|       |
  439|  1.15M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162, False: 1.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.15M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.15M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.15M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.15M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.15M|                    return ascii_tolower(a) ==
  445|  1.15M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.15M|                }))) {
  447|  1.15M|            return unexpected(parse_error::error);
  448|  1.15M|        }
  449|       |
  450|      0|        return it;
  451|  1.15M|    }
  452|  1.15M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.15M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 1.15M, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|  1.15M|                return ch;
  434|  1.15M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.15M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   384k|{
  332|   384k|    auto it = read_code_unit(range);
  333|   384k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 384k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   384k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 384k, False: 0]
  |  |  ------------------
  ------------------
  338|   384k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   384k|        return unexpected(parse_error::error);
  340|   384k|    }
  341|       |
  342|      0|    return *it;
  343|   384k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   555k|{
  159|   555k|    auto it = read_while_code_unit(range, pred);
  160|   555k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 555k, False: 0]
  ------------------
  161|   555k|        return unexpected(parse_error::error);
  162|   555k|    }
  163|      0|    return it;
  164|   555k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   555k|{
  139|   555k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   555k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   555k|{
  131|   555k|    return ranges::find_if(range, pred);
  132|   555k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  10.2M|{
   36|  10.2M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  10.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.68k, False: 10.2M]
  |  |  ------------------
  ------------------
   37|  1.68k|        return unexpected(e);
   38|  1.68k|    }
   39|       |
   40|  10.2M|    return ranges::next(ranges::begin(range));
   41|  10.2M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   341k|{
   36|   341k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   341k|    return ranges::next(ranges::begin(range));
   41|   341k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   384k|{
   48|   384k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   384k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   384k|        const auto sz = ranges::ssize(range);
   52|   384k|        if (sz < count) {
   53|   384k|            return unexpected(eof_error::eof);
   54|   384k|        }
   55|       |
   56|   384k|        return ranges::next(ranges::begin(range), count);
   57|   384k|    }
   58|   384k|    else {
   59|   384k|        auto it = ranges::begin(range);
   60|   384k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 384k, False: 162]
  ------------------
   61|   384k|            return ranges_polyfill::batch_next(it, count);
   62|   384k|        }
   63|       |
   64|    324|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 324, False: 0]
  ------------------
   65|    324|             ++i, (void)++it) {
   66|    324|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 162, False: 162]
  ------------------
   67|    162|                return unexpected(eof_error::eof);
   68|    162|            }
   69|    324|        }
   70|       |
   71|      0|        return it;
   72|    162|    }
   73|   384k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  9.75M|{
   36|  9.75M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  9.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.92k, False: 9.75M]
  |  |  ------------------
  ------------------
   37|  2.92k|        return unexpected(e);
   38|  2.92k|    }
   39|       |
   40|  9.75M|    return ranges::next(ranges::begin(range));
   41|  9.75M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  12.5M|{
   48|  12.5M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  12.5M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  12.5M|        const auto sz = ranges::ssize(range);
   52|  12.5M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 118k, False: 12.3M]
  ------------------
   53|   118k|            return unexpected(eof_error::eof);
   54|   118k|        }
   55|       |
   56|  12.3M|        return ranges::next(ranges::begin(range), count);
   57|  12.5M|    }
   58|  12.5M|    else {
   59|  12.5M|        auto it = ranges::begin(range);
   60|  12.5M|        if (guaranteed_minimum_size(range) >= count) {
   61|  12.5M|            return ranges_polyfill::batch_next(it, count);
   62|  12.5M|        }
   63|       |
   64|  12.5M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  12.5M|             ++i, (void)++it) {
   66|  12.5M|            if (it == ranges::end(range)) {
   67|  12.5M|                return unexpected(eof_error::eof);
   68|  12.5M|            }
   69|  12.5M|        }
   70|       |
   71|  12.5M|        return it;
   72|  12.5M|    }
   73|  12.5M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.02M|{
   36|  1.02M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.02M|    return ranges::next(ranges::begin(range));
   41|  1.02M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.15M|{
   48|  1.15M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.15M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.15M|        const auto sz = ranges::ssize(range);
   52|  1.15M|        if (sz < count) {
   53|  1.15M|            return unexpected(eof_error::eof);
   54|  1.15M|        }
   55|       |
   56|  1.15M|        return ranges::next(ranges::begin(range), count);
   57|  1.15M|    }
   58|  1.15M|    else {
   59|  1.15M|        auto it = ranges::begin(range);
   60|  1.15M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.15M, False: 162]
  ------------------
   61|  1.15M|            return ranges_polyfill::batch_next(it, count);
   62|  1.15M|        }
   63|       |
   64|    324|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 324, False: 0]
  ------------------
   65|    324|             ++i, (void)++it) {
   66|    324|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 162, False: 162]
  ------------------
   67|    162|                return unexpected(eof_error::eof);
   68|    162|            }
   69|    324|        }
   70|       |
   71|      0|        return it;
   72|    162|    }
   73|  1.15M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  6.12M|{
   33|  6.12M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  6.12M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.52M|{
   39|  1.52M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.52M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 763k, False: 763k]
  ------------------
   41|  1.52M|                    : std::locale{};
   42|  1.52M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   749k|    {
  112|   749k|        auto stdloc = loc.get<std::locale>();
  113|   749k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   749k|        grouping = numpunct.grouping();
  115|   749k|        thousands_sep =
  116|   749k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 749k]
  ------------------
  117|   749k|        decimal_point = numpunct.decimal_point();
  118|   749k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   749k|{
   49|   749k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 749k, False: 0]
  ------------------
   50|   749k|        return std::use_facet<Facet>(stdloc);
   51|   749k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   749k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   778k|    {
  112|   778k|        auto stdloc = loc.get<std::locale>();
  113|   778k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   778k|        grouping = numpunct.grouping();
  115|   778k|        thousands_sep =
  116|   778k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 778k]
  ------------------
  117|   778k|        decimal_point = numpunct.decimal_point();
  118|   778k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   778k|{
   49|   778k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 778k, False: 0]
  ------------------
   50|   778k|        return std::use_facet<Facet>(stdloc);
   51|   778k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   778k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  6.06M|{
   46|  6.06M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 6.06M, False: 0]
  ------------------
   47|  6.06M|        auto it = read_while_classic_space(range);
   48|  6.06M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  6.06M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.03k, False: 6.05M]
  |  |  ------------------
  ------------------
   50|  4.03k|            return unexpected(e);
   51|  4.03k|        }
   52|       |
   53|  6.05M|        return it;
   54|  6.06M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  6.06M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  6.29M|    {
  126|  6.29M|        return true;
  127|  6.29M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   213k|{
   46|   213k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 213k, False: 0]
  ------------------
   47|   213k|        auto it = read_while_classic_space(range);
   48|   213k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   213k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 213k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   213k|        return it;
   54|   213k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   213k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  4.50M|    {
  131|  4.50M|        reader_error_handler eh{};
  132|  4.50M|        get_derived().check_specs_impl(specs, eh);
  133|  4.50M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.50M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.50M|        return {};
  137|  4.50M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  4.50M|    {
  142|  4.50M|        return static_cast<Derived&>(*this);
  143|  4.50M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  9.19M|    {
   35|  9.19M|        return m_msg == nullptr;
   36|  9.19M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.77M|{
   46|  5.77M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.77M, False: 0]
  ------------------
   47|  5.77M|        auto it = read_while_classic_space(range);
   48|  5.77M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.77M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.34k, False: 5.77M]
  |  |  ------------------
  ------------------
   50|  7.34k|            return unexpected(e);
   51|  7.34k|        }
   52|       |
   53|  5.77M|        return it;
   54|  5.77M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.77M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  6.44M|    {
  126|  6.44M|        return true;
  127|  6.44M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.68M|    {
  131|  4.68M|        reader_error_handler eh{};
  132|  4.68M|        get_derived().check_specs_impl(specs, eh);
  133|  4.68M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.68M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.68M|        return {};
  137|  4.68M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  4.68M|    {
  142|  4.68M|        return static_cast<Derived&>(*this);
  143|  4.68M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   640k|{
   46|   640k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 640k, False: 0]
  ------------------
   47|   640k|        auto it = read_while_classic_space(range);
   48|   640k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   640k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 640k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   640k|        return it;
   54|   640k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   640k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   570k|{
  218|   570k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   570k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   570k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   570k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   570k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 16.2k, False: 554k]
  ------------------
  224|  16.2k|        SCN_UNLIKELY_ATTR
  225|  16.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  16.2k|                                     "Invalid integer value");
  227|  16.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   554k|    auto start = source.data();
  231|   554k|    const auto end = source.data() + source.size();
  232|   554k|    {
  233|  1.07M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 16.7k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 537k, False: 522k]
  ------------------
  235|   537k|                break;
  236|   537k|            }
  237|  1.06M|        }
  238|   554k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 147k, False: 407k]
  |  |  |  Branch (153:45): [True: 16.7k, False: 537k]
  |  |  |  Branch (153:45): [True: 130k, False: 407k]
  |  |  ------------------
  ------------------
  239|   147k|            value = 0;
  240|   147k|            return ranges::next(source.begin(),
  241|   147k|                                ranges::distance(source.data(), start));
  242|   147k|        }
  243|   554k|    }
  244|       |
  245|   407k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   407k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 302k, False: 104k]
  ------------------
  247|   302k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.36k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.36k|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   294k|                             detail::make_string_view_from_pointers(start, end),
  249|   294k|                             value, sign == sign_type::minus_sign));
  250|   294k|            return ranges::next(source.begin(),
  251|   294k|                                ranges::distance(source.data(), ptr));
  252|   302k|        }
  253|   407k|    }
  254|       |
  255|   104k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 98.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  98.6k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  98.6k|                     base, sign == sign_type::minus_sign));
  258|  98.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   104k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   556k|{
  218|   556k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   556k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   556k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   556k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   556k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 78.8k, False: 477k]
  ------------------
  224|  78.8k|        SCN_UNLIKELY_ATTR
  225|  78.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  78.8k|                                     "Invalid integer value");
  227|  78.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   477k|    auto start = source.data();
  231|   477k|    const auto end = source.data() + source.size();
  232|   477k|    {
  233|   960k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 945k, False: 15.3k]
  ------------------
  234|   945k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 461k, False: 483k]
  ------------------
  235|   461k|                break;
  236|   461k|            }
  237|   945k|        }
  238|   477k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   939k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130k, False: 346k]
  |  |  |  Branch (153:45): [True: 15.3k, False: 461k]
  |  |  |  Branch (153:45): [True: 115k, False: 346k]
  |  |  ------------------
  ------------------
  239|   130k|            value = 0;
  240|   130k|            return ranges::next(source.begin(),
  241|   130k|                                ranges::distance(source.data(), start));
  242|   130k|        }
  243|   477k|    }
  244|       |
  245|   346k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   346k|        if (base == 10) {
  247|   346k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   346k|                             detail::make_string_view_from_pointers(start, end),
  249|   346k|                             value, sign == sign_type::minus_sign));
  250|   346k|            return ranges::next(source.begin(),
  251|   346k|                                ranges::distance(source.data(), ptr));
  252|   346k|        }
  253|   346k|    }
  254|       |
  255|   346k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.8k, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.8k|    }                                                  \
  |  |  |  |   70|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   335k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   335k|                     base, sign == sign_type::minus_sign));
  258|   335k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   346k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   895k|{
  218|   895k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   895k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   895k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   895k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   895k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.1k, False: 874k]
  ------------------
  224|  21.1k|        SCN_UNLIKELY_ATTR
  225|  21.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.1k|                                     "Invalid integer value");
  227|  21.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   874k|    auto start = source.data();
  231|   874k|    const auto end = source.data() + source.size();
  232|   874k|    {
  233|  1.70M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.68M, False: 26.7k]
  ------------------
  234|  1.68M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 848k, False: 835k]
  ------------------
  235|   848k|                break;
  236|   848k|            }
  237|  1.68M|        }
  238|   874k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 625k]
  |  |  |  Branch (153:45): [True: 26.7k, False: 848k]
  |  |  |  Branch (153:45): [True: 222k, False: 625k]
  |  |  ------------------
  ------------------
  239|   249k|            value = 0;
  240|   249k|            return ranges::next(source.begin(),
  241|   249k|                                ranges::distance(source.data(), start));
  242|   249k|        }
  243|   874k|    }
  244|       |
  245|   625k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   625k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 418k, False: 206k]
  ------------------
  247|   418k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   418k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   418k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   418k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.27k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.27k|    }                                                  \
  |  |  |  |   70|   418k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   416k|                             detail::make_string_view_from_pointers(start, end),
  249|   416k|                             value, sign == sign_type::minus_sign));
  250|   416k|            return ranges::next(source.begin(),
  251|   416k|                                ranges::distance(source.data(), ptr));
  252|   418k|        }
  253|   625k|    }
  254|       |
  255|   206k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.43k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.43k|    }                                                  \
  |  |  |  |   70|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   204k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   204k|                     base, sign == sign_type::minus_sign));
  258|   204k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   206k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   837k|{
  218|   837k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   837k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   837k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   837k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   837k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 82.3k, False: 755k]
  ------------------
  224|  82.3k|        SCN_UNLIKELY_ATTR
  225|  82.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  82.3k|                                     "Invalid integer value");
  227|  82.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   755k|    auto start = source.data();
  231|   755k|    const auto end = source.data() + source.size();
  232|   755k|    {
  233|  1.50M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.48M, False: 24.2k]
  ------------------
  234|  1.48M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 731k, False: 752k]
  ------------------
  235|   731k|                break;
  236|   731k|            }
  237|  1.48M|        }
  238|   755k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 534k]
  |  |  |  Branch (153:45): [True: 24.2k, False: 731k]
  |  |  |  Branch (153:45): [True: 196k, False: 534k]
  |  |  ------------------
  ------------------
  239|   220k|            value = 0;
  240|   220k|            return ranges::next(source.begin(),
  241|   220k|                                ranges::distance(source.data(), start));
  242|   220k|        }
  243|   755k|    }
  244|       |
  245|   534k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   534k|        if (base == 10) {
  247|   534k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   534k|                             detail::make_string_view_from_pointers(start, end),
  249|   534k|                             value, sign == sign_type::minus_sign));
  250|   534k|            return ranges::next(source.begin(),
  251|   534k|                                ranges::distance(source.data(), ptr));
  252|   534k|        }
  253|   534k|    }
  254|       |
  255|   534k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   534k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   534k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   534k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.52k, False: 530k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.52k|    }                                                  \
  |  |  |  |   70|   534k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   530k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   530k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   530k|                     base, sign == sign_type::minus_sign));
  258|   530k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   534k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   949k|{
  218|   949k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   949k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   949k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   949k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   949k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 22.7k, False: 927k]
  ------------------
  224|  22.7k|        SCN_UNLIKELY_ATTR
  225|  22.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  22.7k|                                     "Invalid integer value");
  227|  22.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   927k|    auto start = source.data();
  231|   927k|    const auto end = source.data() + source.size();
  232|   927k|    {
  233|  1.77M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.74M, False: 26.9k]
  ------------------
  234|  1.74M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 900k, False: 846k]
  ------------------
  235|   900k|                break;
  236|   900k|            }
  237|  1.74M|        }
  238|   927k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 252k, False: 675k]
  |  |  |  Branch (153:45): [True: 26.9k, False: 900k]
  |  |  |  Branch (153:45): [True: 225k, False: 675k]
  |  |  ------------------
  ------------------
  239|   252k|            value = 0;
  240|   252k|            return ranges::next(source.begin(),
  241|   252k|                                ranges::distance(source.data(), start));
  242|   252k|        }
  243|   927k|    }
  244|       |
  245|   675k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   675k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 455k, False: 219k]
  ------------------
  247|   455k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   455k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   455k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   455k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 998, False: 454k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    998|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    998|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    998|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    998|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    998|    }                                                  \
  |  |  |  |   70|   455k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   454k|                             detail::make_string_view_from_pointers(start, end),
  249|   454k|                             value, sign == sign_type::minus_sign));
  250|   454k|            return ranges::next(source.begin(),
  251|   454k|                                ranges::distance(source.data(), ptr));
  252|   455k|        }
  253|   675k|    }
  254|       |
  255|   219k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.06k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.06k|    }                                                  \
  |  |  |  |   70|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   218k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   218k|                     base, sign == sign_type::minus_sign));
  258|   218k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   219k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   885k|{
  218|   885k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   885k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   885k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   885k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   885k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 83.4k, False: 801k]
  ------------------
  224|  83.4k|        SCN_UNLIKELY_ATTR
  225|  83.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  83.4k|                                     "Invalid integer value");
  227|  83.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   801k|    auto start = source.data();
  231|   801k|    const auto end = source.data() + source.size();
  232|   801k|    {
  233|  1.56M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.53M, False: 24.4k]
  ------------------
  234|  1.53M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 777k, False: 761k]
  ------------------
  235|   777k|                break;
  236|   777k|            }
  237|  1.53M|        }
  238|   801k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 223k, False: 578k]
  |  |  |  Branch (153:45): [True: 24.4k, False: 777k]
  |  |  |  Branch (153:45): [True: 198k, False: 578k]
  |  |  ------------------
  ------------------
  239|   223k|            value = 0;
  240|   223k|            return ranges::next(source.begin(),
  241|   223k|                                ranges::distance(source.data(), start));
  242|   223k|        }
  243|   801k|    }
  244|       |
  245|   578k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   578k|        if (base == 10) {
  247|   578k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   578k|                             detail::make_string_view_from_pointers(start, end),
  249|   578k|                             value, sign == sign_type::minus_sign));
  250|   578k|            return ranges::next(source.begin(),
  251|   578k|                                ranges::distance(source.data(), ptr));
  252|   578k|        }
  253|   578k|    }
  254|       |
  255|   578k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   578k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   578k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   578k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.52k, False: 577k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|   578k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   577k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   577k|                     base, sign == sign_type::minus_sign));
  258|   577k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   578k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   541k|{
  218|   541k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   541k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   541k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   541k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   541k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.1k, False: 528k]
  ------------------
  224|  13.1k|        SCN_UNLIKELY_ATTR
  225|  13.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.1k|                                     "Invalid integer value");
  227|  13.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   528k|    auto start = source.data();
  231|   528k|    const auto end = source.data() + source.size();
  232|   528k|    {
  233|  1.16M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.14M, False: 22.1k]
  ------------------
  234|  1.14M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 506k, False: 634k]
  ------------------
  235|   506k|                break;
  236|   506k|            }
  237|  1.14M|        }
  238|   528k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 180k, False: 347k]
  |  |  |  Branch (153:45): [True: 22.1k, False: 506k]
  |  |  |  Branch (153:45): [True: 158k, False: 347k]
  |  |  ------------------
  ------------------
  239|   180k|            value = 0;
  240|   180k|            return ranges::next(source.begin(),
  241|   180k|                                ranges::distance(source.data(), start));
  242|   180k|        }
  243|   528k|    }
  244|       |
  245|   347k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   347k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 239k, False: 108k]
  ------------------
  247|   239k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.86k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   235k|                             detail::make_string_view_from_pointers(start, end),
  249|   235k|                             value, sign == sign_type::minus_sign));
  250|   235k|            return ranges::next(source.begin(),
  251|   235k|                                ranges::distance(source.data(), ptr));
  252|   239k|        }
  253|   347k|    }
  254|       |
  255|   108k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.13k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.13k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   104k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   104k|                     base, sign == sign_type::minus_sign));
  258|   104k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   108k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   546k|{
  218|   546k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   546k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   546k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   546k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   546k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 76.2k, False: 470k]
  ------------------
  224|  76.2k|        SCN_UNLIKELY_ATTR
  225|  76.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  76.2k|                                     "Invalid integer value");
  227|  76.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   470k|    auto start = source.data();
  231|   470k|    const auto end = source.data() + source.size();
  232|   470k|    {
  233|  1.05M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.03M, False: 20.2k]
  ------------------
  234|  1.03M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 450k, False: 580k]
  ------------------
  235|   450k|                break;
  236|   450k|            }
  237|  1.03M|        }
  238|   470k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 160k, False: 309k]
  |  |  |  Branch (153:45): [True: 20.2k, False: 450k]
  |  |  |  Branch (153:45): [True: 140k, False: 309k]
  |  |  ------------------
  ------------------
  239|   160k|            value = 0;
  240|   160k|            return ranges::next(source.begin(),
  241|   160k|                                ranges::distance(source.data(), start));
  242|   160k|        }
  243|   470k|    }
  244|       |
  245|   309k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   309k|        if (base == 10) {
  247|   309k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   309k|                             detail::make_string_view_from_pointers(start, end),
  249|   309k|                             value, sign == sign_type::minus_sign));
  250|   309k|            return ranges::next(source.begin(),
  251|   309k|                                ranges::distance(source.data(), ptr));
  252|   309k|        }
  253|   309k|    }
  254|       |
  255|   309k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.87k, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.87k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   303k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   303k|                     base, sign == sign_type::minus_sign));
  258|   303k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   309k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   707k|{
  218|   707k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   707k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   707k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   707k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   707k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.0k, False: 692k]
  ------------------
  224|  15.0k|        SCN_UNLIKELY_ATTR
  225|  15.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.0k|                                     "Invalid integer value");
  227|  15.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   692k|    auto start = source.data();
  231|   692k|    const auto end = source.data() + source.size();
  232|   692k|    {
  233|  1.47M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.45M, False: 24.9k]
  ------------------
  234|  1.45M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 667k, False: 783k]
  ------------------
  235|   667k|                break;
  236|   667k|            }
  237|  1.45M|        }
  238|   692k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224k, False: 467k]
  |  |  |  Branch (153:45): [True: 24.9k, False: 667k]
  |  |  |  Branch (153:45): [True: 199k, False: 467k]
  |  |  ------------------
  ------------------
  239|   224k|            value = 0;
  240|   224k|            return ranges::next(source.begin(),
  241|   224k|                                ranges::distance(source.data(), start));
  242|   224k|        }
  243|   692k|    }
  244|       |
  245|   467k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   467k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 316k, False: 151k]
  ------------------
  247|   316k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 315k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   315k|                             detail::make_string_view_from_pointers(start, end),
  249|   315k|                             value, sign == sign_type::minus_sign));
  250|   315k|            return ranges::next(source.begin(),
  251|   315k|                                ranges::distance(source.data(), ptr));
  252|   316k|        }
  253|   467k|    }
  254|       |
  255|   151k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.19k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.19k|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   149k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   149k|                     base, sign == sign_type::minus_sign));
  258|   149k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   151k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   694k|{
  218|   694k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   694k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   694k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   694k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   694k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   694k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 77.8k, False: 617k]
  ------------------
  224|  77.8k|        SCN_UNLIKELY_ATTR
  225|  77.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  77.8k|                                     "Invalid integer value");
  227|  77.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   617k|    auto start = source.data();
  231|   617k|    const auto end = source.data() + source.size();
  232|   617k|    {
  233|  1.33M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.30M, False: 22.7k]
  ------------------
  234|  1.30M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 594k, False: 713k]
  ------------------
  235|   594k|                break;
  236|   594k|            }
  237|  1.30M|        }
  238|   617k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 200k, False: 416k]
  |  |  |  Branch (153:45): [True: 22.7k, False: 594k]
  |  |  |  Branch (153:45): [True: 178k, False: 416k]
  |  |  ------------------
  ------------------
  239|   200k|            value = 0;
  240|   200k|            return ranges::next(source.begin(),
  241|   200k|                                ranges::distance(source.data(), start));
  242|   200k|        }
  243|   617k|    }
  244|       |
  245|   416k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   416k|        if (base == 10) {
  247|   416k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   416k|                             detail::make_string_view_from_pointers(start, end),
  249|   416k|                             value, sign == sign_type::minus_sign));
  250|   416k|            return ranges::next(source.begin(),
  251|   416k|                                ranges::distance(source.data(), ptr));
  252|   416k|        }
  253|   416k|    }
  254|       |
  255|   416k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.83k, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.83k|    }                                                  \
  |  |  |  |   70|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   414k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   414k|                     base, sign == sign_type::minus_sign));
  258|   414k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   416k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   737k|{
  218|   737k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   737k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   737k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   737k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   737k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   737k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   737k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   737k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   737k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   737k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   737k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   737k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   737k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.6k, False: 721k]
  ------------------
  224|  15.6k|        SCN_UNLIKELY_ATTR
  225|  15.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.6k|                                     "Invalid integer value");
  227|  15.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   721k|    auto start = source.data();
  231|   721k|    const auto end = source.data() + source.size();
  232|   721k|    {
  233|  1.51M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.48M, False: 25.0k]
  ------------------
  234|  1.48M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 696k, False: 791k]
  ------------------
  235|   696k|                break;
  236|   696k|            }
  237|  1.48M|        }
  238|   721k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 226k, False: 495k]
  |  |  |  Branch (153:45): [True: 25.0k, False: 696k]
  |  |  |  Branch (153:45): [True: 201k, False: 495k]
  |  |  ------------------
  ------------------
  239|   226k|            value = 0;
  240|   226k|            return ranges::next(source.begin(),
  241|   226k|                                ranges::distance(source.data(), start));
  242|   226k|        }
  243|   721k|    }
  244|       |
  245|   495k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   495k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 336k, False: 158k]
  ------------------
  247|   336k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 517, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    517|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    517|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    517|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    517|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    517|    }                                                  \
  |  |  |  |   70|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   335k|                             detail::make_string_view_from_pointers(start, end),
  249|   335k|                             value, sign == sign_type::minus_sign));
  250|   335k|            return ranges::next(source.begin(),
  251|   335k|                                ranges::distance(source.data(), ptr));
  252|   336k|        }
  253|   495k|    }
  254|       |
  255|   158k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 463, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    463|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    463|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    463|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    463|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    463|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   158k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   158k|                     base, sign == sign_type::minus_sign));
  258|   158k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   158k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   720k|{
  218|   720k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   720k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   720k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   720k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   720k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   720k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   720k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   720k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   720k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   720k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   720k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   720k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   720k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 78.2k, False: 641k]
  ------------------
  224|  78.2k|        SCN_UNLIKELY_ATTR
  225|  78.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  78.2k|                                     "Invalid integer value");
  227|  78.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   641k|    auto start = source.data();
  231|   641k|    const auto end = source.data() + source.size();
  232|   641k|    {
  233|  1.36M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.33M, False: 22.8k]
  ------------------
  234|  1.33M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 619k, False: 719k]
  ------------------
  235|   619k|                break;
  236|   619k|            }
  237|  1.33M|        }
  238|   641k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 202k, False: 439k]
  |  |  |  Branch (153:45): [True: 22.8k, False: 619k]
  |  |  |  Branch (153:45): [True: 179k, False: 439k]
  |  |  ------------------
  ------------------
  239|   202k|            value = 0;
  240|   202k|            return ranges::next(source.begin(),
  241|   202k|                                ranges::distance(source.data(), start));
  242|   202k|        }
  243|   641k|    }
  244|       |
  245|   439k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   439k|        if (base == 10) {
  247|   439k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   439k|                             detail::make_string_view_from_pointers(start, end),
  249|   439k|                             value, sign == sign_type::minus_sign));
  250|   439k|            return ranges::next(source.begin(),
  251|   439k|                                ranges::distance(source.data(), ptr));
  252|   439k|        }
  253|   439k|    }
  254|       |
  255|   439k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   439k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   439k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   439k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 742, False: 439k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    742|    }                                                  \
  |  |  |  |   70|   439k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   439k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   439k|                     base, sign == sign_type::minus_sign));
  258|   439k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   439k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   753k|{
  126|   753k|    auto max_digits = maxdigits_u64(base);
  127|   753k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.05k, False: 751k]
  ------------------
  128|  2.05k|        return true;
  129|  2.05k|    }
  130|   751k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 990, False: 750k]
  |  Branch (130:39): [True: 128, False: 862]
  ------------------
  131|    128|        return true;
  132|    128|    }
  133|   751k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   751k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 22.3k, False: 728k]
  ------------------
  135|   751k|                      static_cast<uint64_t>(is_negative)) {
  136|  22.3k|            SCN_UNLIKELY_ATTR
  137|  22.3k|            return true;
  138|  22.3k|        }
  139|   751k|    }
  140|       |
  141|   728k|    return false;
  142|   751k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  5.64M|{
   96|  5.64M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  5.64M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  5.58k|{
  116|  5.58k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  5.58k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   728k|{
  147|   728k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 110k, False: 618k]
  ------------------
  148|   110k|        SCN_MSVC_PUSH
  149|   110k|        SCN_MSVC_IGNORE(4146)
  150|   110k|        return static_cast<T>(
  151|   110k|            -std::numeric_limits<T>::max() -
  152|   110k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   110k|        SCN_MSVC_POP
  154|   110k|    }
  155|       |
  156|   618k|    return static_cast<T>(u64val);
  157|   728k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.15M|{
  126|  1.15M|    auto max_digits = maxdigits_u64(base);
  127|  1.15M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.34k, False: 1.15M]
  ------------------
  128|  2.34k|        return true;
  129|  2.34k|    }
  130|  1.15M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.00k, False: 1.15M]
  |  Branch (130:39): [True: 128, False: 880]
  ------------------
  131|    128|        return true;
  132|    128|    }
  133|  1.15M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.15M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 5.76k, False: 1.15M]
  ------------------
  135|  1.15M|                      static_cast<uint64_t>(is_negative)) {
  136|  5.76k|            SCN_UNLIKELY_ATTR
  137|  5.76k|            return true;
  138|  5.76k|        }
  139|  1.15M|    }
  140|       |
  141|  1.15M|    return false;
  142|  1.15M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.15M|{
  147|  1.15M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 141k, False: 1.00M]
  ------------------
  148|   141k|        SCN_MSVC_PUSH
  149|   141k|        SCN_MSVC_IGNORE(4146)
  150|   141k|        return static_cast<T>(
  151|   141k|            -std::numeric_limits<T>::max() -
  152|   141k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   141k|        SCN_MSVC_POP
  154|   141k|    }
  155|       |
  156|  1.00M|    return static_cast<T>(u64val);
  157|  1.15M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.25M|{
  126|  1.25M|    auto max_digits = maxdigits_u64(base);
  127|  1.25M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.82k, False: 1.25M]
  ------------------
  128|  2.82k|        return true;
  129|  2.82k|    }
  130|  1.25M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.40k, False: 1.24M]
  |  Branch (130:39): [True: 192, False: 1.21k]
  ------------------
  131|    192|        return true;
  132|    192|    }
  133|  1.25M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.25M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 570, False: 1.25M]
  ------------------
  135|  1.25M|                      static_cast<uint64_t>(is_negative)) {
  136|    570|            SCN_UNLIKELY_ATTR
  137|    570|            return true;
  138|    570|        }
  139|  1.25M|    }
  140|       |
  141|  1.25M|    return false;
  142|  1.25M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.25M|{
  147|  1.25M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 144k, False: 1.10M]
  ------------------
  148|   144k|        SCN_MSVC_PUSH
  149|   144k|        SCN_MSVC_IGNORE(4146)
  150|   144k|        return static_cast<T>(
  151|   144k|            -std::numeric_limits<T>::max() -
  152|   144k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   144k|        SCN_MSVC_POP
  154|   144k|    }
  155|       |
  156|  1.10M|    return static_cast<T>(u64val);
  157|  1.25M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   657k|{
  126|   657k|    auto max_digits = maxdigits_u64(base);
  127|   657k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.28k, False: 656k]
  ------------------
  128|  1.28k|        return true;
  129|  1.28k|    }
  130|   656k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 564, False: 655k]
  |  Branch (130:39): [True: 116, False: 448]
  ------------------
  131|    116|        return true;
  132|    116|    }
  133|   655k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   655k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 11.4k, False: 644k]
  ------------------
  135|   655k|                      static_cast<uint64_t>(is_negative)) {
  136|  11.4k|            SCN_UNLIKELY_ATTR
  137|  11.4k|            return true;
  138|  11.4k|        }
  139|   655k|    }
  140|       |
  141|   644k|    return false;
  142|   655k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   644k|{
  147|   644k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 644k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   644k|    return static_cast<T>(u64val);
  157|   644k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   883k|{
  126|   883k|    auto max_digits = maxdigits_u64(base);
  127|   883k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.30k, False: 882k]
  ------------------
  128|  1.30k|        return true;
  129|  1.30k|    }
  130|   882k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 582, False: 882k]
  |  Branch (130:39): [True: 116, False: 466]
  ------------------
  131|    116|        return true;
  132|    116|    }
  133|   882k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   882k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 2.92k, False: 879k]
  ------------------
  135|   882k|                      static_cast<uint64_t>(is_negative)) {
  136|  2.92k|            SCN_UNLIKELY_ATTR
  137|  2.92k|            return true;
  138|  2.92k|        }
  139|   882k|    }
  140|       |
  141|   879k|    return false;
  142|   882k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   879k|{
  147|   879k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 879k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   879k|    return static_cast<T>(u64val);
  157|   879k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   934k|{
  126|   934k|    auto max_digits = maxdigits_u64(base);
  127|   934k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.56k, False: 933k]
  ------------------
  128|  1.56k|        return true;
  129|  1.56k|    }
  130|   933k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.03k, False: 932k]
  |  Branch (130:39): [True: 156, False: 880]
  ------------------
  131|    156|        return true;
  132|    156|    }
  133|   933k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   933k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 933k]
  ------------------
  135|   933k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   933k|    }
  140|       |
  141|   933k|    return false;
  142|   933k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   933k|{
  147|   933k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 933k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   933k|    return static_cast<T>(u64val);
  157|   933k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.71M|{
   34|  1.71M|    uint64_t val{};
   35|  1.71M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.71M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.71M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.71M|    return val;
   40|  1.71M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  70.7k|{
   44|  70.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  70.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  70.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  70.7k|    word -= 0x3030303030303030;
   48|  70.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  70.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  70.7k|    return static_cast<uint32_t>(word);
   51|  70.7k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.64M|{
   55|  1.64M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.64M|              0x8080808080808080));
   57|  1.64M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   302k|{
  164|   302k|    uint64_t u64val{};
  165|   302k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   302k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   302k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   302k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.36k, False: 294k]
  |  |  ------------------
  ------------------
  170|   302k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  7.36k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  7.36k|                                     "Integer overflow");
  173|  7.36k|    }
  174|       |
  175|   294k|    val = store_result<T>(u64val, is_negative);
  176|   294k|    return ptr;
  177|   302k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  2.06M|{
   76|  2.06M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  5.16M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 4.70M, False: 461k]
  ------------------
   79|  4.70M|        const auto digit = char_to_int(*begin);
   80|  4.70M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.60M, False: 3.09M]
  ------------------
   81|  1.60M|            break;
   82|  1.60M|        }
   83|  3.09M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  3.09M|        ++begin;
   85|  3.09M|    }
   86|       |
   87|  2.06M|    return begin;
   88|  2.06M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  2.06M|{
   63|  2.06M|    while (
   64|  2.13M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.64M, False: 490k]
  ------------------
   65|  2.13M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 70.7k, False: 1.57M]
  ------------------
   66|  70.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  70.7k|                                      get_eight_digits_word(p));
   68|  70.7k|        p += 8;
   69|  70.7k|    }
   70|  2.06M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   104k|{
  185|   104k|    uint64_t u64val{};
  186|   104k|    const CharT* begin = input.data();
  187|   104k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   317k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 298k, False: 18.6k]
  ------------------
  190|   298k|        const auto digit = char_to_int(*begin);
  191|   298k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 86.3k, False: 212k]
  ------------------
  192|  86.3k|            break;
  193|  86.3k|        }
  194|   212k|        u64val =
  195|   212k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   212k|        ++begin;
  197|   212k|    }
  198|       |
  199|   104k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   104k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.30k, False: 98.6k]
  |  |  ------------------
  ------------------
  201|   104k|                                               is_negative))) {
  202|  6.30k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  6.30k|                                     "Integer overflow");
  204|  6.30k|    }
  205|       |
  206|  98.6k|    val = store_result<T>(u64val, is_negative);
  207|  98.6k|    return begin;
  208|   104k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   346k|{
  185|   346k|    uint64_t u64val{};
  186|   346k|    const CharT* begin = input.data();
  187|   346k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   948k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 871k, False: 76.8k]
  ------------------
  190|   871k|        const auto digit = char_to_int(*begin);
  191|   871k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 269k, False: 601k]
  ------------------
  192|   269k|            break;
  193|   269k|        }
  194|   601k|        u64val =
  195|   601k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   601k|        ++begin;
  197|   601k|    }
  198|       |
  199|   346k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   346k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.8k, False: 335k]
  |  |  ------------------
  ------------------
  201|   346k|                                               is_negative))) {
  202|  10.8k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  10.8k|                                     "Integer overflow");
  204|  10.8k|    }
  205|       |
  206|   335k|    val = store_result<T>(u64val, is_negative);
  207|   335k|    return begin;
  208|   346k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   418k|{
  164|   418k|    uint64_t u64val{};
  165|   418k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   418k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   418k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   418k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.27k, False: 416k]
  |  |  ------------------
  ------------------
  170|   418k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.27k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.27k|                                     "Integer overflow");
  173|  2.27k|    }
  174|       |
  175|   416k|    val = store_result<T>(u64val, is_negative);
  176|   416k|    return ptr;
  177|   418k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   206k|{
  185|   206k|    uint64_t u64val{};
  186|   206k|    const CharT* begin = input.data();
  187|   206k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   590k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 566k, False: 23.6k]
  ------------------
  190|   566k|        const auto digit = char_to_int(*begin);
  191|   566k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 182k, False: 383k]
  ------------------
  192|   182k|            break;
  193|   182k|        }
  194|   383k|        u64val =
  195|   383k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   383k|        ++begin;
  197|   383k|    }
  198|       |
  199|   206k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   206k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.43k, False: 204k]
  |  |  ------------------
  ------------------
  201|   206k|                                               is_negative))) {
  202|  2.43k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.43k|                                     "Integer overflow");
  204|  2.43k|    }
  205|       |
  206|   204k|    val = store_result<T>(u64val, is_negative);
  207|   204k|    return begin;
  208|   206k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   534k|{
  185|   534k|    uint64_t u64val{};
  186|   534k|    const CharT* begin = input.data();
  187|   534k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.47M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.37M, False: 100k]
  ------------------
  190|  1.37M|        const auto digit = char_to_int(*begin);
  191|  1.37M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 434k, False: 938k]
  ------------------
  192|   434k|            break;
  193|   434k|        }
  194|   938k|        u64val =
  195|   938k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   938k|        ++begin;
  197|   938k|    }
  198|       |
  199|   534k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   534k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.52k, False: 530k]
  |  |  ------------------
  ------------------
  201|   534k|                                               is_negative))) {
  202|  3.52k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.52k|                                     "Integer overflow");
  204|  3.52k|    }
  205|       |
  206|   530k|    val = store_result<T>(u64val, is_negative);
  207|   530k|    return begin;
  208|   534k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   455k|{
  164|   455k|    uint64_t u64val{};
  165|   455k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   455k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   455k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   455k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 998, False: 454k]
  |  |  ------------------
  ------------------
  170|   455k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    998|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    998|                                     "Integer overflow");
  173|    998|    }
  174|       |
  175|   454k|    val = store_result<T>(u64val, is_negative);
  176|   454k|    return ptr;
  177|   455k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   219k|{
  185|   219k|    uint64_t u64val{};
  186|   219k|    const CharT* begin = input.data();
  187|   219k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   657k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 631k, False: 25.8k]
  ------------------
  190|   631k|        const auto digit = char_to_int(*begin);
  191|   631k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 193k, False: 437k]
  ------------------
  192|   193k|            break;
  193|   193k|        }
  194|   437k|        u64val =
  195|   437k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   437k|        ++begin;
  197|   437k|    }
  198|       |
  199|   219k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   219k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.06k, False: 218k]
  |  |  ------------------
  ------------------
  201|   219k|                                               is_negative))) {
  202|  1.06k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.06k|                                     "Integer overflow");
  204|  1.06k|    }
  205|       |
  206|   218k|    val = store_result<T>(u64val, is_negative);
  207|   218k|    return begin;
  208|   219k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   578k|{
  185|   578k|    uint64_t u64val{};
  186|   578k|    const CharT* begin = input.data();
  187|   578k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.68M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.57M, False: 109k]
  ------------------
  190|  1.57M|        const auto digit = char_to_int(*begin);
  191|  1.57M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 469k, False: 1.10M]
  ------------------
  192|   469k|            break;
  193|   469k|        }
  194|  1.10M|        u64val =
  195|  1.10M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.10M|        ++begin;
  197|  1.10M|    }
  198|       |
  199|   578k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   578k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52k, False: 577k]
  |  |  ------------------
  ------------------
  201|   578k|                                               is_negative))) {
  202|  1.52k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.52k|                                     "Integer overflow");
  204|  1.52k|    }
  205|       |
  206|   577k|    val = store_result<T>(u64val, is_negative);
  207|   577k|    return begin;
  208|   578k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   239k|{
  164|   239k|    uint64_t u64val{};
  165|   239k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   239k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   239k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   239k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.86k, False: 235k]
  |  |  ------------------
  ------------------
  170|   239k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.86k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.86k|                                     "Integer overflow");
  173|  3.86k|    }
  174|       |
  175|   235k|    val = store_result<T>(u64val, is_negative);
  176|   235k|    return ptr;
  177|   239k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   108k|{
  185|   108k|    uint64_t u64val{};
  186|   108k|    const CharT* begin = input.data();
  187|   108k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   292k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 276k, False: 15.9k]
  ------------------
  190|   276k|        const auto digit = char_to_int(*begin);
  191|   276k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 92.1k, False: 184k]
  ------------------
  192|  92.1k|            break;
  193|  92.1k|        }
  194|   184k|        u64val =
  195|   184k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   184k|        ++begin;
  197|   184k|    }
  198|       |
  199|   108k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   108k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.13k, False: 104k]
  |  |  ------------------
  ------------------
  201|   108k|                                               is_negative))) {
  202|  3.13k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.13k|                                     "Integer overflow");
  204|  3.13k|    }
  205|       |
  206|   104k|    val = store_result<T>(u64val, is_negative);
  207|   104k|    return begin;
  208|   108k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   309k|{
  185|   309k|    uint64_t u64val{};
  186|   309k|    const CharT* begin = input.data();
  187|   309k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   797k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 732k, False: 65.1k]
  ------------------
  190|   732k|        const auto digit = char_to_int(*begin);
  191|   732k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 244k, False: 488k]
  ------------------
  192|   244k|            break;
  193|   244k|        }
  194|   488k|        u64val =
  195|   488k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   488k|        ++begin;
  197|   488k|    }
  198|       |
  199|   309k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   309k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.87k, False: 303k]
  |  |  ------------------
  ------------------
  201|   309k|                                               is_negative))) {
  202|  5.87k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.87k|                                     "Integer overflow");
  204|  5.87k|    }
  205|       |
  206|   303k|    val = store_result<T>(u64val, is_negative);
  207|   303k|    return begin;
  208|   309k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   316k|{
  164|   316k|    uint64_t u64val{};
  165|   316k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   316k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   316k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   316k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.31k, False: 315k]
  |  |  ------------------
  ------------------
  170|   316k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.31k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.31k|                                     "Integer overflow");
  173|  1.31k|    }
  174|       |
  175|   315k|    val = store_result<T>(u64val, is_negative);
  176|   315k|    return ptr;
  177|   316k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   151k|{
  185|   151k|    uint64_t u64val{};
  186|   151k|    const CharT* begin = input.data();
  187|   151k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   418k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 399k, False: 19.3k]
  ------------------
  190|   399k|        const auto digit = char_to_int(*begin);
  191|   399k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 131k, False: 267k]
  ------------------
  192|   131k|            break;
  193|   131k|        }
  194|   267k|        u64val =
  195|   267k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   267k|        ++begin;
  197|   267k|    }
  198|       |
  199|   151k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   151k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.19k, False: 149k]
  |  |  ------------------
  ------------------
  201|   151k|                                               is_negative))) {
  202|  1.19k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.19k|                                     "Integer overflow");
  204|  1.19k|    }
  205|       |
  206|   149k|    val = store_result<T>(u64val, is_negative);
  207|   149k|    return begin;
  208|   151k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   416k|{
  185|   416k|    uint64_t u64val{};
  186|   416k|    const CharT* begin = input.data();
  187|   416k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.12M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.04M, False: 80.5k]
  ------------------
  190|  1.04M|        const auto digit = char_to_int(*begin);
  191|  1.04M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 335k, False: 712k]
  ------------------
  192|   335k|            break;
  193|   335k|        }
  194|   712k|        u64val =
  195|   712k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   712k|        ++begin;
  197|   712k|    }
  198|       |
  199|   416k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   416k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.83k, False: 414k]
  |  |  ------------------
  ------------------
  201|   416k|                                               is_negative))) {
  202|  1.83k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.83k|                                     "Integer overflow");
  204|  1.83k|    }
  205|       |
  206|   414k|    val = store_result<T>(u64val, is_negative);
  207|   414k|    return begin;
  208|   416k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   336k|{
  164|   336k|    uint64_t u64val{};
  165|   336k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   336k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   336k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   336k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 517, False: 335k]
  |  |  ------------------
  ------------------
  170|   336k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    517|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    517|                                     "Integer overflow");
  173|    517|    }
  174|       |
  175|   335k|    val = store_result<T>(u64val, is_negative);
  176|   335k|    return ptr;
  177|   336k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   158k|{
  185|   158k|    uint64_t u64val{};
  186|   158k|    const CharT* begin = input.data();
  187|   158k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   456k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 436k, False: 20.3k]
  ------------------
  190|   436k|        const auto digit = char_to_int(*begin);
  191|   436k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 138k, False: 298k]
  ------------------
  192|   138k|            break;
  193|   138k|        }
  194|   298k|        u64val =
  195|   298k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   298k|        ++begin;
  197|   298k|    }
  198|       |
  199|   158k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   158k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 463, False: 158k]
  |  |  ------------------
  ------------------
  201|   158k|                                               is_negative))) {
  202|    463|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    463|                                     "Integer overflow");
  204|    463|    }
  205|       |
  206|   158k|    val = store_result<T>(u64val, is_negative);
  207|   158k|    return begin;
  208|   158k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   439k|{
  185|   439k|    uint64_t u64val{};
  186|   439k|    const CharT* begin = input.data();
  187|   439k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.23M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.15M, False: 84.1k]
  ------------------
  190|  1.15M|        const auto digit = char_to_int(*begin);
  191|  1.15M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 355k, False: 798k]
  ------------------
  192|   355k|            break;
  193|   355k|        }
  194|   798k|        u64val =
  195|   798k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   798k|        ++begin;
  197|   798k|    }
  198|       |
  199|   439k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   439k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 742, False: 439k]
  |  |  ------------------
  ------------------
  201|   439k|                                               is_negative))) {
  202|    742|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    742|                                     "Integer overflow");
  204|    742|    }
  205|       |
  206|   439k|    val = store_result<T>(u64val, is_negative);
  207|   439k|    return begin;
  208|   439k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   250k|    {
  324|   250k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   250k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   250k|        return read_default_with_base(range, value, 0);
  326|   250k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   250k|    {
  287|   250k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   250k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   250k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   250k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   250k|                return unexpected_scan_error(
  293|   250k|                    scan_error::invalid_scanned_value,
  294|   250k|                    "Unexpected '-' sign when parsing an "
  295|   250k|                    "unsigned value");
  296|   250k|            }
  297|   250k|        }
  298|       |
  299|   250k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 92.6k, False: 157k]
  ------------------
  300|  92.6k|            value = T{0};
  301|  92.6k|            return std::next(prefix_result.iterator);
  302|  92.6k|        }
  303|       |
  304|   314k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 87, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     87|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   314k|                                     ranges::subrange{prefix_result.iterator,
  306|   314k|                                                      ranges::end(range)},
  307|   314k|                                     prefix_result.parsed_base));
  308|       |
  309|   314k|        auto buf = make_contiguous_buffer(
  310|   314k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   314k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.12k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.12k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   151k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   151k|                                    prefix_result.parsed_base));
  314|       |
  315|   151k|        return ranges_polyfill::batch_next(
  316|   151k|            prefix_result.iterator,
  317|   151k|            ranges::distance(buf.view().begin(), result_it));
  318|   314k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  6.05M|{
  121|  6.05M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  6.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  6.05M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  6.05M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  6.05M|        parse_integer_base_prefix(
  126|  6.05M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  6.05M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.48M, False: 3.57M]
  ------------------
  129|  2.48M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.16k, False: 2.48M]
  ------------------
  130|  2.48M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.60M, False: 879k]
  ------------------
  131|  1.60M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.60M|                digits_begin_it, ranges::begin(range));
  133|  1.60M|        }
  134|   879k|        else {
  135|   879k|            parsed_zero = false;
  136|   879k|        }
  137|  2.48M|    }
  138|  3.57M|    else {
  139|  3.57M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.99k, False: 3.56M]
  ------------------
  140|  3.57M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 122k, False: 3.44M]
  ------------------
  141|   128k|            digits_begin_it = base_prefix_begin_it;
  142|   128k|        }
  143|  3.57M|    }
  144|       |
  145|  6.05M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 5.71M, False: 340k]
  ------------------
  146|  5.71M|        sign = sign_type::plus_sign;
  147|  5.71M|    }
  148|  6.05M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  6.05M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  6.05M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  6.05M|{
   88|  6.05M|    switch (base) {
   89|   107k|        case 2:
  ------------------
  |  Branch (89:9): [True: 107k, False: 5.95M]
  ------------------
   90|       |            // allow 0b/0B
   91|   107k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   107k|                    false};
   93|       |
   94|   243k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 243k, False: 5.81M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   243k|            bool zero_parsed = false;
   97|   243k|            auto it = apply_opt(
   98|   243k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   243k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   829k|        case 16:
  ------------------
  |  Branch (102:9): [True: 829k, False: 5.22M]
  ------------------
  103|       |            // allow 0x/0X
  104|   829k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   829k|                    false};
  106|       |
  107|  4.05M|        case 0:
  ------------------
  |  Branch (107:9): [True: 4.05M, False: 2.00M]
  ------------------
  108|       |            // detect base
  109|  4.05M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  4.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   821k|        default:
  ------------------
  |  Branch (111:9): [True: 821k, False: 5.23M]
  ------------------
  112|       |            // no base prefix allowed
  113|   821k|            return {ranges::begin(range), base, false};
  114|  6.05M|    }
  115|  6.05M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  4.12M|{
   38|  4.12M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  4.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  4.12M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  4.25M|{
   53|  4.25M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 35.4k, False: 4.22M]
  ------------------
   54|  35.4k|        return *r;
   55|  35.4k|    }
   56|       |
   57|  4.22M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.48M, False: 1.73M]
  ------------------
   58|  2.48M|        zero_parsed = true;
   59|  2.48M|        return *r;
   60|  2.48M|    }
   61|       |
   62|  1.73M|    return unexpected(parse_error::error);
   63|  4.22M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.88M|{
   45|  4.88M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.88M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  4.05M|{
   69|  4.05M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 38.6k, False: 4.01M]
  ------------------
   70|  38.6k|        return {*r, 16, false};
   71|  38.6k|    }
   72|  4.01M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.38k, False: 4.01M]
  ------------------
   73|  2.38k|        return {*r, 2, false};
   74|  2.38k|    }
   75|  4.01M|    {
   76|  4.01M|        bool zero_parsed{false};
   77|  4.01M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.37M, False: 1.64M]
  ------------------
   78|  2.37M|            return {*r, 8, zero_parsed};
   79|  2.37M|        }
   80|  4.01M|    }
   81|  1.64M|    return {ranges::begin(range), 10, false};
   82|  4.01M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.69M|{
  156|  3.69M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.69M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.69M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.70k, False: 3.69M]
  |  |  ------------------
  ------------------
  160|  1.70k|            return unexpected_scan_error(
  161|  1.70k|                scan_error::invalid_scanned_value,
  162|  1.70k|                "Failed to parse integer: No digits found");
  163|  1.70k|        }
  164|  3.69M|        return ranges::end(range);
  165|  3.69M|    }
  166|  3.69M|    else {
  167|  3.69M|        return read_while1_code_unit(
  168|  3.69M|                   range, [&](char_type ch)
  169|  3.69M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.69M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.69M|                scan_error::invalid_scanned_value,
  172|  3.69M|                "Failed to parse integer: No digits found"));
  173|  3.69M|    }
  174|  3.69M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   333k|    {
  324|   333k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   333k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   333k|        return read_default_with_base(range, value, 0);
  326|   333k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   333k|    {
  287|   333k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   333k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   333k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   333k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   333k|                return unexpected_scan_error(
  293|   333k|                    scan_error::invalid_scanned_value,
  294|   333k|                    "Unexpected '-' sign when parsing an "
  295|   333k|                    "unsigned value");
  296|   333k|            }
  297|   333k|        }
  298|       |
  299|   333k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 121k, False: 211k]
  ------------------
  300|   121k|            value = T{0};
  301|   121k|            return std::next(prefix_result.iterator);
  302|   121k|        }
  303|       |
  304|   423k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 132, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   423k|                                     ranges::subrange{prefix_result.iterator,
  306|   423k|                                                      ranges::end(range)},
  307|   423k|                                     prefix_result.parsed_base));
  308|       |
  309|   423k|        auto buf = make_contiguous_buffer(
  310|   423k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   423k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.34k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.34k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   206k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   206k|                                    prefix_result.parsed_base));
  314|       |
  315|   206k|        return ranges_polyfill::batch_next(
  316|   206k|            prefix_result.iterator,
  317|   206k|            ranges::distance(buf.view().begin(), result_it));
  318|   423k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   351k|    {
  324|   351k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   351k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   351k|        return read_default_with_base(range, value, 0);
  326|   351k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   351k|    {
  287|   351k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   351k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   351k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   351k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   351k|                return unexpected_scan_error(
  293|   351k|                    scan_error::invalid_scanned_value,
  294|   351k|                    "Unexpected '-' sign when parsing an "
  295|   351k|                    "unsigned value");
  296|   351k|            }
  297|   351k|        }
  298|       |
  299|   351k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 123k, False: 227k]
  ------------------
  300|   123k|            value = T{0};
  301|   123k|            return std::next(prefix_result.iterator);
  302|   123k|        }
  303|       |
  304|   454k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 147, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    147|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   454k|                                     ranges::subrange{prefix_result.iterator,
  306|   454k|                                                      ranges::end(range)},
  307|   454k|                                     prefix_result.parsed_base));
  308|       |
  309|   454k|        auto buf = make_contiguous_buffer(
  310|   454k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   454k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.16k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.16k|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   222k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   222k|                                    prefix_result.parsed_base));
  314|       |
  315|   222k|        return ranges_polyfill::batch_next(
  316|   222k|            prefix_result.iterator,
  317|   222k|            ranges::distance(buf.view().begin(), result_it));
  318|   454k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   237k|    {
  324|   237k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   237k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   237k|        return read_default_with_base(range, value, 0);
  326|   237k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   237k|    {
  287|   237k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   237k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   237k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   237k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.44k, False: 235k]
  ------------------
  292|  2.44k|                return unexpected_scan_error(
  293|  2.44k|                    scan_error::invalid_scanned_value,
  294|  2.44k|                    "Unexpected '-' sign when parsing an "
  295|  2.44k|                    "unsigned value");
  296|  2.44k|            }
  297|   237k|        }
  298|       |
  299|   235k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 94.6k, False: 140k]
  ------------------
  300|  94.6k|            value = T{0};
  301|  94.6k|            return std::next(prefix_result.iterator);
  302|  94.6k|        }
  303|       |
  304|   280k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   280k|                                     ranges::subrange{prefix_result.iterator,
  306|   280k|                                                      ranges::end(range)},
  307|   280k|                                     prefix_result.parsed_base));
  308|       |
  309|   280k|        auto buf = make_contiguous_buffer(
  310|   280k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   280k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.88k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.88k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   136k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   136k|                                    prefix_result.parsed_base));
  314|       |
  315|   136k|        return ranges_polyfill::batch_next(
  316|   136k|            prefix_result.iterator,
  317|   136k|            ranges::distance(buf.view().begin(), result_it));
  318|   280k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   279k|    {
  324|   279k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   279k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   279k|        return read_default_with_base(range, value, 0);
  326|   279k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   279k|    {
  287|   279k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   279k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   279k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   279k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.60k, False: 277k]
  ------------------
  292|  2.60k|                return unexpected_scan_error(
  293|  2.60k|                    scan_error::invalid_scanned_value,
  294|  2.60k|                    "Unexpected '-' sign when parsing an "
  295|  2.60k|                    "unsigned value");
  296|  2.60k|            }
  297|   279k|        }
  298|       |
  299|   277k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 107k, False: 169k]
  ------------------
  300|   107k|            value = T{0};
  301|   107k|            return std::next(prefix_result.iterator);
  302|   107k|        }
  303|       |
  304|   339k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     60|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   339k|                                     ranges::subrange{prefix_result.iterator,
  306|   339k|                                                      ranges::end(range)},
  307|   339k|                                     prefix_result.parsed_base));
  308|       |
  309|   339k|        auto buf = make_contiguous_buffer(
  310|   339k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   339k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.33k, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.33k|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   166k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   166k|                                    prefix_result.parsed_base));
  314|       |
  315|   166k|        return ranges_polyfill::batch_next(
  316|   166k|            prefix_result.iterator,
  317|   166k|            ranges::distance(buf.view().begin(), result_it));
  318|   339k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   287k|    {
  324|   287k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   287k|        return read_default_with_base(range, value, 0);
  326|   287k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   287k|    {
  287|   287k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   287k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   287k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   287k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.72k, False: 284k]
  ------------------
  292|  2.72k|                return unexpected_scan_error(
  293|  2.72k|                    scan_error::invalid_scanned_value,
  294|  2.72k|                    "Unexpected '-' sign when parsing an "
  295|  2.72k|                    "unsigned value");
  296|  2.72k|            }
  297|   287k|        }
  298|       |
  299|   284k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 107k, False: 176k]
  ------------------
  300|   107k|            value = T{0};
  301|   107k|            return std::next(prefix_result.iterator);
  302|   107k|        }
  303|       |
  304|   353k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     60|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   353k|                                     ranges::subrange{prefix_result.iterator,
  306|   353k|                                                      ranges::end(range)},
  307|   353k|                                     prefix_result.parsed_base));
  308|       |
  309|   353k|        auto buf = make_contiguous_buffer(
  310|   353k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   353k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.12k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.12k|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   173k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   173k|                                    prefix_result.parsed_base));
  314|       |
  315|   173k|        return ranges_polyfill::batch_next(
  316|   173k|            prefix_result.iterator,
  317|   173k|            ranges::distance(buf.view().begin(), result_it));
  318|   353k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   720k|{
  185|   720k|    std::basic_string<CharT> output;
  186|   720k|    std::string thsep_indices;
  187|   720k|    auto it = ranges::begin(range);
  188|   720k|    bool digit_matched = false;
  189|  2.31M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.30M, False: 5.93k]
  ------------------
  190|  2.30M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 29.3k, False: 2.27M]
  ------------------
  191|  29.3k|            thsep_indices.push_back(static_cast<char>(
  192|  29.3k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  29.3k|        }
  194|  2.27M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 714k, False: 1.56M]
  ------------------
  195|   714k|            break;
  196|   714k|        }
  197|  1.56M|        else {
  198|  1.56M|            output.push_back(*it);
  199|  1.56M|            digit_matched = true;
  200|  1.56M|        }
  201|  2.30M|    }
  202|   720k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.3k, False: 709k]
  |  |  ------------------
  ------------------
  203|  11.3k|        return unexpected_scan_error(
  204|  11.3k|            scan_error::invalid_scanned_value,
  205|  11.3k|            "Failed to parse integer: No digits found");
  206|  11.3k|    }
  207|   709k|    return std::tuple{it, output, thsep_indices};
  208|   720k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  7.11k|                return unexpected_scan_error(
  293|  7.11k|                    scan_error::invalid_scanned_value,
  294|  7.11k|                    "Unexpected '-' sign when parsing an "
  295|  7.11k|                    "unsigned value");
  296|  7.11k|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   213k|{
  121|   213k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   213k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   213k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   213k|        parse_integer_base_prefix(
  126|   213k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   213k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 213k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   213k|    else {
  139|   213k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 213k]
  ------------------
  140|   213k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 213k, False: 0]
  ------------------
  141|   213k|            digits_begin_it = base_prefix_begin_it;
  142|   213k|        }
  143|   213k|    }
  144|       |
  145|   213k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 213k, False: 0]
  ------------------
  146|   213k|        sign = sign_type::plus_sign;
  147|   213k|    }
  148|   213k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   213k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   213k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   213k|{
   88|   213k|    switch (base) {
   89|  28.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 28.4k, False: 185k]
  ------------------
   90|       |            // allow 0b/0B
   91|  28.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  28.4k|                    false};
   93|       |
   94|  28.4k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 28.4k, False: 185k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  28.4k|            bool zero_parsed = false;
   97|  28.4k|            auto it = apply_opt(
   98|  28.4k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  28.4k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  28.4k|        case 16:
  ------------------
  |  Branch (102:9): [True: 28.4k, False: 185k]
  ------------------
  103|       |            // allow 0x/0X
  104|  28.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  28.4k|                    false};
  106|       |
  107|  99.6k|        case 0:
  ------------------
  |  Branch (107:9): [True: 99.6k, False: 113k]
  ------------------
  108|       |            // detect base
  109|  99.6k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  28.4k|        default:
  ------------------
  |  Branch (111:9): [True: 28.4k, False: 185k]
  ------------------
  112|       |            // no base prefix allowed
  113|  28.4k|            return {ranges::begin(range), base, false};
  114|   213k|    }
  115|   213k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   128k|{
   38|   128k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   128k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   128k|{
   53|   128k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 128k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   128k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 128k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   128k|    return unexpected(parse_error::error);
   63|   128k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   128k|{
   45|   128k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   128k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  99.6k|{
   69|  99.6k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 99.6k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  99.6k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 99.6k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  99.6k|    {
   76|  99.6k|        bool zero_parsed{false};
   77|  99.6k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 99.6k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  99.6k|    }
   81|  99.6k|    return {ranges::begin(range), 10, false};
   82|  99.6k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   185k|{
  156|   185k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   185k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   185k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   185k|            return unexpected_scan_error(
  161|   185k|                scan_error::invalid_scanned_value,
  162|   185k|                "Failed to parse integer: No digits found");
  163|   185k|        }
  164|   185k|        return ranges::end(range);
  165|   185k|    }
  166|   185k|    else {
  167|   185k|        return read_while1_code_unit(
  168|   185k|                   range, [&](char_type ch)
  169|   185k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   185k|            .transform_error(map_parse_error_to_scan_error(
  171|   185k|                scan_error::invalid_scanned_value,
  172|   185k|                "Failed to parse integer: No digits found"));
  173|   185k|    }
  174|   185k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   185k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  7.11k|                return unexpected_scan_error(
  293|  7.11k|                    scan_error::invalid_scanned_value,
  294|  7.11k|                    "Unexpected '-' sign when parsing an "
  295|  7.11k|                    "unsigned value");
  296|  7.11k|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  7.11k|                return unexpected_scan_error(
  293|  7.11k|                    scan_error::invalid_scanned_value,
  294|  7.11k|                    "Unexpected '-' sign when parsing an "
  295|  7.11k|                    "unsigned value");
  296|  7.11k|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 7.11k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 7.11k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  7.11k|    {
  324|  7.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  7.11k|        return read_default_with_base(range, value, 0);
  326|  7.11k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  7.11k|    {
  287|  7.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  7.11k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  7.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  7.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 7.11k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  7.11k|        }
  298|       |
  299|  7.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 7.11k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  7.11k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.11k|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  7.11k|                                     ranges::subrange{prefix_result.iterator,
  306|  7.11k|                                                      ranges::end(range)},
  307|  7.11k|                                     prefix_result.parsed_base));
  308|       |
  309|  7.11k|        auto buf = make_contiguous_buffer(
  310|  7.11k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  7.11k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  7.11k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  28.4k|{
  185|  28.4k|    std::basic_string<CharT> output;
  186|  28.4k|    std::string thsep_indices;
  187|  28.4k|    auto it = ranges::begin(range);
  188|  28.4k|    bool digit_matched = false;
  189|  85.3k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 85.3k, False: 24]
  ------------------
  190|  85.3k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 28.4k, False: 56.8k]
  ------------------
  191|  28.4k|            thsep_indices.push_back(static_cast<char>(
  192|  28.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  28.4k|        }
  194|  56.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 28.4k, False: 28.4k]
  ------------------
  195|  28.4k|            break;
  196|  28.4k|        }
  197|  28.4k|        else {
  198|  28.4k|            output.push_back(*it);
  199|  28.4k|            digit_matched = true;
  200|  28.4k|        }
  201|  85.3k|    }
  202|  28.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 28.4k]
  |  |  ------------------
  ------------------
  203|     12|        return unexpected_scan_error(
  204|     12|            scan_error::invalid_scanned_value,
  205|     12|            "Failed to parse integer: No digits found");
  206|     12|    }
  207|  28.4k|    return std::tuple{it, output, thsep_indices};
  208|  28.4k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.50M|    {
  280|  4.50M|        detail::check_int_type_specs(specs, eh);
  281|  4.50M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   555k|    {
  335|   555k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   555k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   555k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 52.3k, False: 502k]
  ------------------
  339|  52.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  52.3k|                return unexpected_scan_error(
  341|  52.3k|                    scan_error::invalid_scanned_value,
  342|  52.3k|                    "Unexpected '-' sign when parsing an "
  343|  52.3k|                    "unsigned value");
  344|  52.3k|            }
  345|  52.3k|            else {
  346|  52.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 52.3k]
  ------------------
  347|  52.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  52.3k|            }
  353|  52.3k|        }
  354|       |
  355|   555k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 139k, False: 415k]
  ------------------
  356|   139k|            value = T{0};
  357|   139k|            return std::next(prefix_result.iterator);
  358|   139k|        }
  359|       |
  360|   415k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   415k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 310k, False: 104k]
  |  |  ------------------
  ------------------
  361|   310k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   310k|                    parse_integer_digits_without_thsep(
  363|   310k|                        ranges::subrange{prefix_result.iterator,
  364|   310k|                                         ranges::end(range)},
  365|   310k|                        prefix_result.parsed_base));
  366|       |
  367|   310k|            auto buf = make_contiguous_buffer(
  368|   310k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   310k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.7k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.7k|    }                                                  \
  |  |  |  |   70|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   288k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   288k|                                        prefix_result.parsed_base));
  372|       |
  373|   288k|            return ranges_polyfill::batch_next(
  374|   288k|                prefix_result.iterator,
  375|   288k|                ranges::distance(buf.view().begin(), result_it));
  376|   310k|        }
  377|       |
  378|   104k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   104k|            localized_number_formatting_options<CharT>{loc};
  383|   104k|#endif
  384|       |
  385|   104k|        SCN_TRY(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.68k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.68k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   103k|            parse_digits_result,
  387|   103k|            parse_integer_digits_with_thsep(
  388|   103k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   103k|                prefix_result.parsed_base, locale_options));
  390|   103k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   103k|            parse_digits_result;
  392|       |
  393|   103k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 430, False: 102k]
  ------------------
  394|    430|            if (auto e = check_thsep_grouping(
  395|    430|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    430|                    thsep_indices, locale_options.grouping);
  397|    430|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 408, False: 22]
  |  |  ------------------
  ------------------
  398|    408|                return unexpected(e);
  399|    408|            }
  400|    430|        }
  401|       |
  402|   102k|        auto nothsep_source_view =
  403|   102k|            std::basic_string_view<CharT>{nothsep_source};
  404|   102k|        SCN_TRY(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   100k|            nothsep_source_it,
  406|   100k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   100k|                                prefix_result.parsed_base));
  408|       |
  409|   100k|        return ranges_polyfill::batch_next(
  410|   100k|            prefix_result.iterator,
  411|   100k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   100k|                ranges::ssize(thsep_indices));
  413|   102k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   867k|    {
  335|   867k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   867k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   867k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   867k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   867k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 867k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   867k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   867k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   867k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   867k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 65.5k, False: 802k]
  ------------------
  339|  65.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  65.5k|                return unexpected_scan_error(
  341|  65.5k|                    scan_error::invalid_scanned_value,
  342|  65.5k|                    "Unexpected '-' sign when parsing an "
  343|  65.5k|                    "unsigned value");
  344|  65.5k|            }
  345|  65.5k|            else {
  346|  65.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 65.5k]
  ------------------
  347|  65.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  65.5k|            }
  353|  65.5k|        }
  354|       |
  355|   867k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 180k, False: 687k]
  ------------------
  356|   180k|            value = T{0};
  357|   180k|            return std::next(prefix_result.iterator);
  358|   180k|        }
  359|       |
  360|   687k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   687k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 546k, False: 140k]
  |  |  ------------------
  ------------------
  361|   546k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   546k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   546k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   546k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 300, False: 546k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|   546k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   546k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   546k|                    parse_integer_digits_without_thsep(
  363|   546k|                        ranges::subrange{prefix_result.iterator,
  364|   546k|                                         ranges::end(range)},
  365|   546k|                        prefix_result.parsed_base));
  366|       |
  367|   546k|            auto buf = make_contiguous_buffer(
  368|   546k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   546k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   546k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   546k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   546k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.8k, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.8k|    }                                                  \
  |  |  |  |   70|   546k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   526k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   526k|                                        prefix_result.parsed_base));
  372|       |
  373|   526k|            return ranges_polyfill::batch_next(
  374|   526k|                prefix_result.iterator,
  375|   526k|                ranges::distance(buf.view().begin(), result_it));
  376|   546k|        }
  377|       |
  378|   140k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   140k|            localized_number_formatting_options<CharT>{loc};
  383|   140k|#endif
  384|       |
  385|   140k|        SCN_TRY(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.44k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.44k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   138k|            parse_digits_result,
  387|   138k|            parse_integer_digits_with_thsep(
  388|   138k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   138k|                prefix_result.parsed_base, locale_options));
  390|   138k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   138k|            parse_digits_result;
  392|       |
  393|   138k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 540, False: 137k]
  ------------------
  394|    540|            if (auto e = check_thsep_grouping(
  395|    540|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    540|                    thsep_indices, locale_options.grouping);
  397|    540|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 518, False: 22]
  |  |  ------------------
  ------------------
  398|    518|                return unexpected(e);
  399|    518|            }
  400|    540|        }
  401|       |
  402|   137k|        auto nothsep_source_view =
  403|   137k|            std::basic_string_view<CharT>{nothsep_source};
  404|   137k|        SCN_TRY(
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 692, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    692|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    692|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    692|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    692|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    692|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   137k|            nothsep_source_it,
  406|   137k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   137k|                                prefix_result.parsed_base));
  408|       |
  409|   137k|        return ranges_polyfill::batch_next(
  410|   137k|            prefix_result.iterator,
  411|   137k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   137k|                ranges::ssize(thsep_indices));
  413|   137k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   908k|    {
  335|   908k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   908k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   908k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   908k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   908k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 908k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   908k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   908k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   908k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 66.2k, False: 842k]
  ------------------
  339|  66.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  66.2k|                return unexpected_scan_error(
  341|  66.2k|                    scan_error::invalid_scanned_value,
  342|  66.2k|                    "Unexpected '-' sign when parsing an "
  343|  66.2k|                    "unsigned value");
  344|  66.2k|            }
  345|  66.2k|            else {
  346|  66.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 66.2k]
  ------------------
  347|  66.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  66.2k|            }
  353|  66.2k|        }
  354|       |
  355|   908k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 182k, False: 726k]
  ------------------
  356|   182k|            value = T{0};
  357|   182k|            return std::next(prefix_result.iterator);
  358|   182k|        }
  359|       |
  360|   726k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   726k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 575k, False: 151k]
  |  |  ------------------
  ------------------
  361|   575k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   575k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   575k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   575k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 340, False: 574k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    340|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    340|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    340|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    340|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    340|    }                                                  \
  |  |  |  |   70|   575k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   574k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   574k|                    parse_integer_digits_without_thsep(
  363|   574k|                        ranges::subrange{prefix_result.iterator,
  364|   574k|                                         ranges::end(range)},
  365|   574k|                        prefix_result.parsed_base));
  366|       |
  367|   574k|            auto buf = make_contiguous_buffer(
  368|   574k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   574k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   574k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   574k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   574k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   574k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.3k, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|   574k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   555k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   555k|                                        prefix_result.parsed_base));
  372|       |
  373|   555k|            return ranges_polyfill::batch_next(
  374|   555k|                prefix_result.iterator,
  375|   555k|                ranges::distance(buf.view().begin(), result_it));
  376|   574k|        }
  377|       |
  378|   151k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   151k|            localized_number_formatting_options<CharT>{loc};
  383|   151k|#endif
  384|       |
  385|   151k|        SCN_TRY(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.69k, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   148k|            parse_digits_result,
  387|   148k|            parse_integer_digits_with_thsep(
  388|   148k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   148k|                prefix_result.parsed_base, locale_options));
  390|   148k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   148k|            parse_digits_result;
  392|       |
  393|   148k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 614, False: 147k]
  ------------------
  394|    614|            if (auto e = check_thsep_grouping(
  395|    614|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    614|                    thsep_indices, locale_options.grouping);
  397|    614|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    614|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 590, False: 24]
  |  |  ------------------
  ------------------
  398|    590|                return unexpected(e);
  399|    590|            }
  400|    614|        }
  401|       |
  402|   147k|        auto nothsep_source_view =
  403|   147k|            std::basic_string_view<CharT>{nothsep_source};
  404|   147k|        SCN_TRY(
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 258, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    258|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   147k|            nothsep_source_it,
  406|   147k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   147k|                                prefix_result.parsed_base));
  408|       |
  409|   147k|        return ranges_polyfill::batch_next(
  410|   147k|            prefix_result.iterator,
  411|   147k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   147k|                ranges::ssize(thsep_indices));
  413|   147k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   551k|    {
  335|   551k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   551k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 551k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   551k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   551k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   551k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.52k, False: 542k]
  ------------------
  339|  8.52k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.52k|                return unexpected_scan_error(
  341|  8.52k|                    scan_error::invalid_scanned_value,
  342|  8.52k|                    "Unexpected '-' sign when parsing an "
  343|  8.52k|                    "unsigned value");
  344|  8.52k|            }
  345|  8.52k|            else {
  346|  8.52k|                if (specs.type ==
  347|  8.52k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.52k|                    return unexpected_scan_error(
  349|  8.52k|                        scan_error::invalid_scanned_value,
  350|  8.52k|                        "'u'-option disallows negative values");
  351|  8.52k|                }
  352|  8.52k|            }
  353|  8.52k|        }
  354|       |
  355|   542k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 139k, False: 402k]
  ------------------
  356|   139k|            value = T{0};
  357|   139k|            return std::next(prefix_result.iterator);
  358|   139k|        }
  359|       |
  360|   402k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   402k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 309k, False: 93.4k]
  |  |  ------------------
  ------------------
  361|   309k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   309k|                    parse_integer_digits_without_thsep(
  363|   309k|                        ranges::subrange{prefix_result.iterator,
  364|   309k|                                         ranges::end(range)},
  365|   309k|                        prefix_result.parsed_base));
  366|       |
  367|   309k|            auto buf = make_contiguous_buffer(
  368|   309k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   309k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.2k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.2k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   293k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   293k|                                        prefix_result.parsed_base));
  372|       |
  373|   293k|            return ranges_polyfill::batch_next(
  374|   293k|                prefix_result.iterator,
  375|   293k|                ranges::distance(buf.view().begin(), result_it));
  376|   309k|        }
  377|       |
  378|  93.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  93.4k|            localized_number_formatting_options<CharT>{loc};
  383|  93.4k|#endif
  384|       |
  385|  93.4k|        SCN_TRY(
  ------------------
  |  |   71|  93.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.33k, False: 92.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.33k|    }                                                  \
  |  |  |  |   70|  93.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  92.0k|            parse_digits_result,
  387|  92.0k|            parse_integer_digits_with_thsep(
  388|  92.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  92.0k|                prefix_result.parsed_base, locale_options));
  390|  92.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  92.0k|            parse_digits_result;
  392|       |
  393|  92.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 290, False: 91.8k]
  ------------------
  394|    290|            if (auto e = check_thsep_grouping(
  395|    290|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    290|                    thsep_indices, locale_options.grouping);
  397|    290|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 278, False: 12]
  |  |  ------------------
  ------------------
  398|    278|                return unexpected(e);
  399|    278|            }
  400|    290|        }
  401|       |
  402|  91.8k|        auto nothsep_source_view =
  403|  91.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  91.8k|        SCN_TRY(
  ------------------
  |  |   71|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 90.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  90.8k|            nothsep_source_it,
  406|  90.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  90.8k|                                prefix_result.parsed_base));
  408|       |
  409|  90.8k|        return ranges_polyfill::batch_next(
  410|  90.8k|            prefix_result.iterator,
  411|  90.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  90.8k|                ranges::ssize(thsep_indices));
  413|  91.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   705k|    {
  335|   705k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   705k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   705k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   705k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 705k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   705k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   705k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   705k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.06k, False: 696k]
  ------------------
  339|  9.06k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.06k|                return unexpected_scan_error(
  341|  9.06k|                    scan_error::invalid_scanned_value,
  342|  9.06k|                    "Unexpected '-' sign when parsing an "
  343|  9.06k|                    "unsigned value");
  344|  9.06k|            }
  345|  9.06k|            else {
  346|  9.06k|                if (specs.type ==
  347|  9.06k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.06k|                    return unexpected_scan_error(
  349|  9.06k|                        scan_error::invalid_scanned_value,
  350|  9.06k|                        "'u'-option disallows negative values");
  351|  9.06k|                }
  352|  9.06k|            }
  353|  9.06k|        }
  354|       |
  355|   696k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 156k, False: 539k]
  ------------------
  356|   156k|            value = T{0};
  357|   156k|            return std::next(prefix_result.iterator);
  358|   156k|        }
  359|       |
  360|   539k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   539k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 426k, False: 113k]
  |  |  ------------------
  ------------------
  361|   426k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 128, False: 426k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    128|    }                                                  \
  |  |  |  |   70|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   426k|                    parse_integer_digits_without_thsep(
  363|   426k|                        ranges::subrange{prefix_result.iterator,
  364|   426k|                                         ranges::end(range)},
  365|   426k|                        prefix_result.parsed_base));
  366|       |
  367|   426k|            auto buf = make_contiguous_buffer(
  368|   426k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   426k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   412k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   412k|                                        prefix_result.parsed_base));
  372|       |
  373|   412k|            return ranges_polyfill::batch_next(
  374|   412k|                prefix_result.iterator,
  375|   412k|                ranges::distance(buf.view().begin(), result_it));
  376|   426k|        }
  377|       |
  378|   113k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   113k|            localized_number_formatting_options<CharT>{loc};
  383|   113k|#endif
  384|       |
  385|   113k|        SCN_TRY(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.58k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.58k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   111k|            parse_digits_result,
  387|   111k|            parse_integer_digits_with_thsep(
  388|   111k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   111k|                prefix_result.parsed_base, locale_options));
  390|   111k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   111k|            parse_digits_result;
  392|       |
  393|   111k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 332, False: 111k]
  ------------------
  394|    332|            if (auto e = check_thsep_grouping(
  395|    332|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    332|                    thsep_indices, locale_options.grouping);
  397|    332|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 320, False: 12]
  |  |  ------------------
  ------------------
  398|    320|                return unexpected(e);
  399|    320|            }
  400|    332|        }
  401|       |
  402|   111k|        auto nothsep_source_view =
  403|   111k|            std::basic_string_view<CharT>{nothsep_source};
  404|   111k|        SCN_TRY(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 356, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    356|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   110k|            nothsep_source_it,
  406|   110k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   110k|                                prefix_result.parsed_base));
  408|       |
  409|   110k|        return ranges_polyfill::batch_next(
  410|   110k|            prefix_result.iterator,
  411|   110k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   110k|                ranges::ssize(thsep_indices));
  413|   111k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   729k|    {
  335|   729k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   729k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   729k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   729k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 729k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   729k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   729k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   729k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.39k, False: 720k]
  ------------------
  339|  9.39k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.39k|                return unexpected_scan_error(
  341|  9.39k|                    scan_error::invalid_scanned_value,
  342|  9.39k|                    "Unexpected '-' sign when parsing an "
  343|  9.39k|                    "unsigned value");
  344|  9.39k|            }
  345|  9.39k|            else {
  346|  9.39k|                if (specs.type ==
  347|  9.39k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.39k|                    return unexpected_scan_error(
  349|  9.39k|                        scan_error::invalid_scanned_value,
  350|  9.39k|                        "'u'-option disallows negative values");
  351|  9.39k|                }
  352|  9.39k|            }
  353|  9.39k|        }
  354|       |
  355|   720k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 157k, False: 562k]
  ------------------
  356|   157k|            value = T{0};
  357|   157k|            return std::next(prefix_result.iterator);
  358|   157k|        }
  359|       |
  360|   562k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   562k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 445k, False: 117k]
  |  |  ------------------
  ------------------
  361|   445k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   445k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   445k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   445k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 128, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    128|    }                                                  \
  |  |  |  |   70|   445k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   445k|                    parse_integer_digits_without_thsep(
  363|   445k|                        ranges::subrange{prefix_result.iterator,
  364|   445k|                                         ranges::end(range)},
  365|   445k|                        prefix_result.parsed_base));
  366|       |
  367|   445k|            auto buf = make_contiguous_buffer(
  368|   445k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   445k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   445k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   445k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   445k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.4k, False: 431k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.4k|    }                                                  \
  |  |  |  |   70|   445k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   431k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   431k|                                        prefix_result.parsed_base));
  372|       |
  373|   431k|            return ranges_polyfill::batch_next(
  374|   431k|                prefix_result.iterator,
  375|   431k|                ranges::distance(buf.view().begin(), result_it));
  376|   445k|        }
  377|       |
  378|   117k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   117k|            localized_number_formatting_options<CharT>{loc};
  383|   117k|#endif
  384|       |
  385|   117k|        SCN_TRY(
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.65k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.65k|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   115k|            parse_digits_result,
  387|   115k|            parse_integer_digits_with_thsep(
  388|   115k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   115k|                prefix_result.parsed_base, locale_options));
  390|   115k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   115k|            parse_digits_result;
  392|       |
  393|   115k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 378, False: 115k]
  ------------------
  394|    378|            if (auto e = check_thsep_grouping(
  395|    378|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    378|                    thsep_indices, locale_options.grouping);
  397|    378|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    378|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 366, False: 12]
  |  |  ------------------
  ------------------
  398|    366|                return unexpected(e);
  399|    366|            }
  400|    378|        }
  401|       |
  402|   115k|        auto nothsep_source_view =
  403|   115k|            std::basic_string_view<CharT>{nothsep_source};
  404|   115k|        SCN_TRY(
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 98, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     98|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   115k|            nothsep_source_it,
  406|   115k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   115k|                                prefix_result.parsed_base));
  408|       |
  409|   115k|        return ranges_polyfill::batch_next(
  410|   115k|            prefix_result.iterator,
  411|   115k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   115k|                ranges::ssize(thsep_indices));
  413|   115k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  28.4k|    {
  335|  28.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  28.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  28.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 28.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  28.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 28.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  28.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 4.74k]
  |  |  ------------------
  ------------------
  361|  23.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.7k|    }                                                  \
  |  |  |  |   70|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.74k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.74k|            localized_number_formatting_options<CharT>{loc};
  383|  4.74k|#endif
  384|       |
  385|  4.74k|        SCN_TRY(
  ------------------
  |  |   71|  4.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 4.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  4.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.74k|            parse_digits_result,
  387|  4.74k|            parse_integer_digits_with_thsep(
  388|  4.74k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.74k|                prefix_result.parsed_base, locale_options));
  390|  4.74k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.74k|            parse_digits_result;
  392|       |
  393|  4.74k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 4.74k, False: 0]
  ------------------
  394|  4.74k|            if (auto e = check_thsep_grouping(
  395|  4.74k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  4.74k|                    thsep_indices, locale_options.grouping);
  397|  4.74k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 0]
  |  |  ------------------
  ------------------
  398|  4.74k|                return unexpected(e);
  399|  4.74k|            }
  400|  4.74k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   233k|    {
  324|   233k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   233k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   233k|        return read_default_with_base(range, value, 0);
  326|   233k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   233k|    {
  287|   233k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   233k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   233k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   233k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   233k|                return unexpected_scan_error(
  293|   233k|                    scan_error::invalid_scanned_value,
  294|   233k|                    "Unexpected '-' sign when parsing an "
  295|   233k|                    "unsigned value");
  296|   233k|            }
  297|   233k|        }
  298|       |
  299|   233k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 82.4k, False: 151k]
  ------------------
  300|  82.4k|            value = T{0};
  301|  82.4k|            return std::next(prefix_result.iterator);
  302|  82.4k|        }
  303|       |
  304|   302k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 156, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    156|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   302k|                                     ranges::subrange{prefix_result.iterator,
  306|   302k|                                                      ranges::end(range)},
  307|   302k|                                     prefix_result.parsed_base));
  308|       |
  309|   302k|        auto buf = make_contiguous_buffer(
  310|   302k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   302k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.0k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.0k|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   131k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   131k|                                    prefix_result.parsed_base));
  314|       |
  315|   131k|        return ranges_polyfill::batch_next(
  316|   131k|            prefix_result.iterator,
  317|   131k|            ranges::distance(buf.view().begin(), result_it));
  318|   302k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  5.77M|{
  121|  5.77M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  5.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.77M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  5.77M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  5.77M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  5.77M|        parse_integer_base_prefix(
  126|  5.77M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  5.77M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.20M, False: 3.56M]
  ------------------
  129|  2.20M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 3.13k, False: 2.20M]
  ------------------
  130|  2.20M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.42M, False: 775k]
  ------------------
  131|  1.42M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.42M|                digits_begin_it, ranges::begin(range));
  133|  1.42M|        }
  134|   775k|        else {
  135|   775k|            parsed_zero = false;
  136|   775k|        }
  137|  2.20M|    }
  138|  3.56M|    else {
  139|  3.56M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 8.13k, False: 3.55M]
  ------------------
  140|  3.56M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 553k, False: 3.00M]
  ------------------
  141|   561k|            digits_begin_it = base_prefix_begin_it;
  142|   561k|        }
  143|  3.56M|    }
  144|       |
  145|  5.77M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 5.49M, False: 277k]
  ------------------
  146|  5.49M|        sign = sign_type::plus_sign;
  147|  5.49M|    }
  148|  5.77M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  5.77M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  5.77M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  5.77M|{
   88|  5.77M|    switch (base) {
   89|   154k|        case 2:
  ------------------
  |  Branch (89:9): [True: 154k, False: 5.61M]
  ------------------
   90|       |            // allow 0b/0B
   91|   154k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   154k|                    false};
   93|       |
   94|   267k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 267k, False: 5.50M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   267k|            bool zero_parsed = false;
   97|   267k|            auto it = apply_opt(
   98|   267k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   267k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   784k|        case 16:
  ------------------
  |  Branch (102:9): [True: 784k, False: 4.98M]
  ------------------
  103|       |            // allow 0x/0X
  104|   784k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   784k|                    false};
  106|       |
  107|  3.79M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.79M, False: 1.97M]
  ------------------
  108|       |            // detect base
  109|  3.79M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   770k|        default:
  ------------------
  |  Branch (111:9): [True: 770k, False: 4.99M]
  ------------------
  112|       |            // no base prefix allowed
  113|   770k|            return {ranges::begin(range), base, false};
  114|  5.77M|    }
  115|  5.77M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.91M|{
   38|  3.91M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.91M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  4.02M|{
   53|  4.02M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 34.9k, False: 3.98M]
  ------------------
   54|  34.9k|        return *r;
   55|  34.9k|    }
   56|       |
   57|  3.98M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.20M, False: 1.78M]
  ------------------
   58|  2.20M|        zero_parsed = true;
   59|  2.20M|        return *r;
   60|  2.20M|    }
   61|       |
   62|  1.78M|    return unexpected(parse_error::error);
   63|  3.98M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.57M|{
   45|  4.57M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.57M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.79M|{
   69|  3.79M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 37.1k, False: 3.75M]
  ------------------
   70|  37.1k|        return {*r, 16, false};
   71|  37.1k|    }
   72|  3.75M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.31k, False: 3.75M]
  ------------------
   73|  2.31k|        return {*r, 2, false};
   74|  2.31k|    }
   75|  3.75M|    {
   76|  3.75M|        bool zero_parsed{false};
   77|  3.75M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.10M, False: 1.64M]
  ------------------
   78|  2.10M|            return {*r, 8, zero_parsed};
   79|  2.10M|        }
   80|  3.75M|    }
   81|  1.64M|    return {ranges::begin(range), 10, false};
   82|  3.75M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.62M|{
  156|  3.62M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.62M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.62M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.71k, False: 3.61M]
  |  |  ------------------
  ------------------
  160|  2.71k|            return unexpected_scan_error(
  161|  2.71k|                scan_error::invalid_scanned_value,
  162|  2.71k|                "Failed to parse integer: No digits found");
  163|  2.71k|        }
  164|  3.61M|        return ranges::end(range);
  165|  3.62M|    }
  166|  3.62M|    else {
  167|  3.62M|        return read_while1_code_unit(
  168|  3.62M|                   range, [&](char_type ch)
  169|  3.62M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.62M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.62M|                scan_error::invalid_scanned_value,
  172|  3.62M|                "Failed to parse integer: No digits found"));
  173|  3.62M|    }
  174|  3.62M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   306k|    {
  324|   306k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   306k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   306k|        return read_default_with_base(range, value, 0);
  326|   306k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   306k|    {
  287|   306k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   306k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   306k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   306k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   306k|                return unexpected_scan_error(
  293|   306k|                    scan_error::invalid_scanned_value,
  294|   306k|                    "Unexpected '-' sign when parsing an "
  295|   306k|                    "unsigned value");
  296|   306k|            }
  297|   306k|        }
  298|       |
  299|   306k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 108k, False: 198k]
  ------------------
  300|   108k|            value = T{0};
  301|   108k|            return std::next(prefix_result.iterator);
  302|   108k|        }
  303|       |
  304|   396k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 201, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    201|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    201|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    201|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    201|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    201|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   396k|                                     ranges::subrange{prefix_result.iterator,
  306|   396k|                                                      ranges::end(range)},
  307|   396k|                                     prefix_result.parsed_base));
  308|       |
  309|   396k|        auto buf = make_contiguous_buffer(
  310|   396k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   396k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.2k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.2k|    }                                                  \
  |  |  |  |   70|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   178k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   178k|                                    prefix_result.parsed_base));
  314|       |
  315|   178k|        return ranges_polyfill::batch_next(
  316|   178k|            prefix_result.iterator,
  317|   178k|            ranges::distance(buf.view().begin(), result_it));
  318|   396k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   321k|    {
  324|   321k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   321k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   321k|        return read_default_with_base(range, value, 0);
  326|   321k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   321k|    {
  287|   321k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   321k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   321k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   321k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   321k|                return unexpected_scan_error(
  293|   321k|                    scan_error::invalid_scanned_value,
  294|   321k|                    "Unexpected '-' sign when parsing an "
  295|   321k|                    "unsigned value");
  296|   321k|            }
  297|   321k|        }
  298|       |
  299|   321k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 109k, False: 212k]
  ------------------
  300|   109k|            value = T{0};
  301|   109k|            return std::next(prefix_result.iterator);
  302|   109k|        }
  303|       |
  304|   424k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   212k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   212k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   212k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 216, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    216|    }                                                  \
  |  |  |  |   70|   212k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   424k|                                     ranges::subrange{prefix_result.iterator,
  306|   424k|                                                      ranges::end(range)},
  307|   424k|                                     prefix_result.parsed_base));
  308|       |
  309|   424k|        auto buf = make_contiguous_buffer(
  310|   424k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   424k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.0k, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.0k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   192k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   192k|                                    prefix_result.parsed_base));
  314|       |
  315|   192k|        return ranges_polyfill::batch_next(
  316|   192k|            prefix_result.iterator,
  317|   192k|            ranges::distance(buf.view().begin(), result_it));
  318|   424k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   227k|    {
  324|   227k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   227k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   227k|        return read_default_with_base(range, value, 0);
  326|   227k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   227k|    {
  287|   227k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   227k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   227k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   227k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.97k, False: 225k]
  ------------------
  292|  1.97k|                return unexpected_scan_error(
  293|  1.97k|                    scan_error::invalid_scanned_value,
  294|  1.97k|                    "Unexpected '-' sign when parsing an "
  295|  1.97k|                    "unsigned value");
  296|  1.97k|            }
  297|   227k|        }
  298|       |
  299|   225k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 84.8k, False: 140k]
  ------------------
  300|  84.8k|            value = T{0};
  301|  84.8k|            return std::next(prefix_result.iterator);
  302|  84.8k|        }
  303|       |
  304|   281k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     51|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   281k|                                     ranges::subrange{prefix_result.iterator,
  306|   281k|                                                      ranges::end(range)},
  307|   281k|                                     prefix_result.parsed_base));
  308|       |
  309|   281k|        auto buf = make_contiguous_buffer(
  310|   281k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   281k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.3k, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.3k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   122k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   122k|                                    prefix_result.parsed_base));
  314|       |
  315|   122k|        return ranges_polyfill::batch_next(
  316|   122k|            prefix_result.iterator,
  317|   122k|            ranges::distance(buf.view().begin(), result_it));
  318|   281k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   265k|    {
  324|   265k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   265k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   265k|        return read_default_with_base(range, value, 0);
  326|   265k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   265k|    {
  287|   265k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   265k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   265k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   265k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   265k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.11k, False: 263k]
  ------------------
  292|  2.11k|                return unexpected_scan_error(
  293|  2.11k|                    scan_error::invalid_scanned_value,
  294|  2.11k|                    "Unexpected '-' sign when parsing an "
  295|  2.11k|                    "unsigned value");
  296|  2.11k|            }
  297|   265k|        }
  298|       |
  299|   263k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 96.0k, False: 167k]
  ------------------
  300|  96.0k|            value = T{0};
  301|  96.0k|            return std::next(prefix_result.iterator);
  302|  96.0k|        }
  303|       |
  304|   334k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     69|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   334k|                                     ranges::subrange{prefix_result.iterator,
  306|   334k|                                                      ranges::end(range)},
  307|   334k|                                     prefix_result.parsed_base));
  308|       |
  309|   334k|        auto buf = make_contiguous_buffer(
  310|   334k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   334k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.7k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.7k|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   149k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   149k|                                    prefix_result.parsed_base));
  314|       |
  315|   149k|        return ranges_polyfill::batch_next(
  316|   149k|            prefix_result.iterator,
  317|   149k|            ranges::distance(buf.view().begin(), result_it));
  318|   334k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   271k|    {
  324|   271k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   271k|        return read_default_with_base(range, value, 0);
  326|   271k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   271k|    {
  287|   271k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   271k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   271k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   271k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.19k, False: 269k]
  ------------------
  292|  2.19k|                return unexpected_scan_error(
  293|  2.19k|                    scan_error::invalid_scanned_value,
  294|  2.19k|                    "Unexpected '-' sign when parsing an "
  295|  2.19k|                    "unsigned value");
  296|  2.19k|            }
  297|   271k|        }
  298|       |
  299|   269k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 96.5k, False: 172k]
  ------------------
  300|  96.5k|            value = T{0};
  301|  96.5k|            return std::next(prefix_result.iterator);
  302|  96.5k|        }
  303|       |
  304|   345k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     69|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   345k|                                     ranges::subrange{prefix_result.iterator,
  306|   345k|                                                      ranges::end(range)},
  307|   345k|                                     prefix_result.parsed_base));
  308|       |
  309|   345k|        auto buf = make_contiguous_buffer(
  310|   345k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   345k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.6k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.6k|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   155k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   155k|                                    prefix_result.parsed_base));
  314|       |
  315|   155k|        return ranges_polyfill::batch_next(
  316|   155k|            prefix_result.iterator,
  317|   155k|            ranges::distance(buf.view().begin(), result_it));
  318|   345k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   693k|{
  185|   693k|    std::basic_string<CharT> output;
  186|   693k|    std::string thsep_indices;
  187|   693k|    auto it = ranges::begin(range);
  188|   693k|    bool digit_matched = false;
  189|  2.10M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.09M, False: 7.66k]
  ------------------
  190|  2.09M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 35.1k, False: 2.05M]
  ------------------
  191|  35.1k|            thsep_indices.push_back(static_cast<char>(
  192|  35.1k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  35.1k|        }
  194|  2.05M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 685k, False: 1.37M]
  ------------------
  195|   685k|            break;
  196|   685k|        }
  197|  1.37M|        else {
  198|  1.37M|            output.push_back(*it);
  199|  1.37M|            digit_matched = true;
  200|  1.37M|        }
  201|  2.09M|    }
  202|   693k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 68.8k, False: 624k]
  |  |  ------------------
  ------------------
  203|  68.8k|        return unexpected_scan_error(
  204|  68.8k|            scan_error::invalid_scanned_value,
  205|  68.8k|            "Failed to parse integer: No digits found");
  206|  68.8k|    }
  207|   624k|    return std::tuple{it, output, thsep_indices};
  208|   693k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.68M|    {
  280|  4.68M|        detail::check_int_type_specs(specs, eh);
  281|  4.68M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   540k|    {
  335|   540k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   540k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   540k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   540k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 540k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   540k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   540k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   540k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   540k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 41.1k, False: 499k]
  ------------------
  339|  41.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  41.1k|                return unexpected_scan_error(
  341|  41.1k|                    scan_error::invalid_scanned_value,
  342|  41.1k|                    "Unexpected '-' sign when parsing an "
  343|  41.1k|                    "unsigned value");
  344|  41.1k|            }
  345|  41.1k|            else {
  346|  41.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 41.1k]
  ------------------
  347|  41.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  41.1k|            }
  353|  41.1k|        }
  354|       |
  355|   540k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 123k, False: 417k]
  ------------------
  356|   123k|            value = T{0};
  357|   123k|            return std::next(prefix_result.iterator);
  358|   123k|        }
  359|       |
  360|   417k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   417k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 316k, False: 100k]
  |  |  ------------------
  ------------------
  361|   316k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 416, False: 315k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    416|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   315k|                    parse_integer_digits_without_thsep(
  363|   315k|                        ranges::subrange{prefix_result.iterator,
  364|   315k|                                         ranges::end(range)},
  365|   315k|                        prefix_result.parsed_base));
  366|       |
  367|   315k|            auto buf = make_contiguous_buffer(
  368|   315k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   315k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   315k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   315k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   315k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68.0k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  68.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  68.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  68.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  68.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  68.0k|    }                                                  \
  |  |  |  |   70|   315k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   247k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   247k|                                        prefix_result.parsed_base));
  372|       |
  373|   247k|            return ranges_polyfill::batch_next(
  374|   247k|                prefix_result.iterator,
  375|   247k|                ranges::distance(buf.view().begin(), result_it));
  376|   315k|        }
  377|       |
  378|   100k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   100k|            localized_number_formatting_options<CharT>{loc};
  383|   100k|#endif
  384|       |
  385|   100k|        SCN_TRY(
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 89.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  89.3k|            parse_digits_result,
  387|  89.3k|            parse_integer_digits_with_thsep(
  388|  89.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  89.3k|                prefix_result.parsed_base, locale_options));
  390|  89.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  89.3k|            parse_digits_result;
  392|       |
  393|  89.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 480, False: 88.8k]
  ------------------
  394|    480|            if (auto e = check_thsep_grouping(
  395|    480|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    480|                    thsep_indices, locale_options.grouping);
  397|    480|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    480|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 460, False: 20]
  |  |  ------------------
  ------------------
  398|    460|                return unexpected(e);
  399|    460|            }
  400|    480|        }
  401|       |
  402|  88.8k|        auto nothsep_source_view =
  403|  88.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  88.8k|        SCN_TRY(
  ------------------
  |  |   71|  88.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.64k, False: 87.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.64k|    }                                                  \
  |  |  |  |   70|  88.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  87.2k|            nothsep_source_it,
  406|  87.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  87.2k|                                prefix_result.parsed_base));
  408|       |
  409|  87.2k|        return ranges_polyfill::batch_next(
  410|  87.2k|            prefix_result.iterator,
  411|  87.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  87.2k|                ranges::ssize(thsep_indices));
  413|  88.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   811k|    {
  335|   811k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   811k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   811k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   811k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   811k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 811k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   811k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   811k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   811k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   811k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 51.1k, False: 760k]
  ------------------
  339|  51.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  51.1k|                return unexpected_scan_error(
  341|  51.1k|                    scan_error::invalid_scanned_value,
  342|  51.1k|                    "Unexpected '-' sign when parsing an "
  343|  51.1k|                    "unsigned value");
  344|  51.1k|            }
  345|  51.1k|            else {
  346|  51.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 51.1k]
  ------------------
  347|  51.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  51.1k|            }
  353|  51.1k|        }
  354|       |
  355|   811k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 159k, False: 652k]
  ------------------
  356|   159k|            value = T{0};
  357|   159k|            return std::next(prefix_result.iterator);
  358|   159k|        }
  359|       |
  360|   652k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   652k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 520k, False: 131k]
  |  |  ------------------
  ------------------
  361|   520k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   520k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   520k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   520k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 530, False: 520k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    530|    }                                                  \
  |  |  |  |   70|   520k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   520k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   520k|                    parse_integer_digits_without_thsep(
  363|   520k|                        ranges::subrange{prefix_result.iterator,
  364|   520k|                                         ranges::end(range)},
  365|   520k|                        prefix_result.parsed_base));
  366|       |
  367|   520k|            auto buf = make_contiguous_buffer(
  368|   520k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   520k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   520k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   520k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   520k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66.1k, False: 454k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  66.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  66.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  66.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  66.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  66.1k|    }                                                  \
  |  |  |  |   70|   520k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   454k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   454k|                                        prefix_result.parsed_base));
  372|       |
  373|   454k|            return ranges_polyfill::batch_next(
  374|   454k|                prefix_result.iterator,
  375|   454k|                ranges::distance(buf.view().begin(), result_it));
  376|   520k|        }
  377|       |
  378|   131k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   131k|            localized_number_formatting_options<CharT>{loc};
  383|   131k|#endif
  384|       |
  385|   131k|        SCN_TRY(
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   119k|            parse_digits_result,
  387|   119k|            parse_integer_digits_with_thsep(
  388|   119k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   119k|                prefix_result.parsed_base, locale_options));
  390|   119k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   119k|            parse_digits_result;
  392|       |
  393|   119k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 582, False: 119k]
  ------------------
  394|    582|            if (auto e = check_thsep_grouping(
  395|    582|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    582|                    thsep_indices, locale_options.grouping);
  397|    582|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 562, False: 20]
  |  |  ------------------
  ------------------
  398|    562|                return unexpected(e);
  399|    562|            }
  400|    582|        }
  401|       |
  402|   119k|        auto nothsep_source_view =
  403|   119k|            std::basic_string_view<CharT>{nothsep_source};
  404|   119k|        SCN_TRY(
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 510, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    510|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    510|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    510|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    510|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    510|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   118k|            nothsep_source_it,
  406|   118k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   118k|                                prefix_result.parsed_base));
  408|       |
  409|   118k|        return ranges_polyfill::batch_next(
  410|   118k|            prefix_result.iterator,
  411|   118k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   118k|                ranges::ssize(thsep_indices));
  413|   119k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   847k|    {
  335|   847k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   847k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   847k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   847k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   847k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 847k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   847k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   847k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   847k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 51.5k, False: 795k]
  ------------------
  339|  51.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  51.5k|                return unexpected_scan_error(
  341|  51.5k|                    scan_error::invalid_scanned_value,
  342|  51.5k|                    "Unexpected '-' sign when parsing an "
  343|  51.5k|                    "unsigned value");
  344|  51.5k|            }
  345|  51.5k|            else {
  346|  51.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 51.5k]
  ------------------
  347|  51.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  51.5k|            }
  353|  51.5k|        }
  354|       |
  355|   847k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 161k, False: 686k]
  ------------------
  356|   161k|            value = T{0};
  357|   161k|            return std::next(prefix_result.iterator);
  358|   161k|        }
  359|       |
  360|   686k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   686k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 545k, False: 140k]
  |  |  ------------------
  ------------------
  361|   545k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   545k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   545k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   545k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 570, False: 544k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    570|    }                                                  \
  |  |  |  |   70|   545k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   544k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   544k|                    parse_integer_digits_without_thsep(
  363|   544k|                        ranges::subrange{prefix_result.iterator,
  364|   544k|                                         ranges::end(range)},
  365|   544k|                        prefix_result.parsed_base));
  366|       |
  367|   544k|            auto buf = make_contiguous_buffer(
  368|   544k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   544k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   544k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   544k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   544k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.7k, False: 479k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.7k|    }                                                  \
  |  |  |  |   70|   544k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   479k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   479k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   479k|                                        prefix_result.parsed_base));
  372|       |
  373|   479k|            return ranges_polyfill::batch_next(
  374|   479k|                prefix_result.iterator,
  375|   479k|                ranges::distance(buf.view().begin(), result_it));
  376|   544k|        }
  377|       |
  378|   140k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   140k|            localized_number_formatting_options<CharT>{loc};
  383|   140k|#endif
  384|       |
  385|   140k|        SCN_TRY(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.0k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.0k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   128k|            parse_digits_result,
  387|   128k|            parse_integer_digits_with_thsep(
  388|   128k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   128k|                prefix_result.parsed_base, locale_options));
  390|   128k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   128k|            parse_digits_result;
  392|       |
  393|   128k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 630, False: 128k]
  ------------------
  394|    630|            if (auto e = check_thsep_grouping(
  395|    630|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    630|                    thsep_indices, locale_options.grouping);
  397|    630|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 608, False: 22]
  |  |  ------------------
  ------------------
  398|    608|                return unexpected(e);
  399|    608|            }
  400|    630|        }
  401|       |
  402|   128k|        auto nothsep_source_view =
  403|   128k|            std::basic_string_view<CharT>{nothsep_source};
  404|   128k|        SCN_TRY(
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 180, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    180|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   128k|            nothsep_source_it,
  406|   128k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   128k|                                prefix_result.parsed_base));
  408|       |
  409|   128k|        return ranges_polyfill::batch_next(
  410|   128k|            prefix_result.iterator,
  411|   128k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   128k|                ranges::ssize(thsep_indices));
  413|   128k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   549k|    {
  335|   549k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   549k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   549k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   549k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 549k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   549k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   549k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   549k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.00k, False: 542k]
  ------------------
  339|  7.00k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.00k|                return unexpected_scan_error(
  341|  7.00k|                    scan_error::invalid_scanned_value,
  342|  7.00k|                    "Unexpected '-' sign when parsing an "
  343|  7.00k|                    "unsigned value");
  344|  7.00k|            }
  345|  7.00k|            else {
  346|  7.00k|                if (specs.type ==
  347|  7.00k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.00k|                    return unexpected_scan_error(
  349|  7.00k|                        scan_error::invalid_scanned_value,
  350|  7.00k|                        "'u'-option disallows negative values");
  351|  7.00k|                }
  352|  7.00k|            }
  353|  7.00k|        }
  354|       |
  355|   542k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 124k, False: 417k]
  ------------------
  356|   124k|            value = T{0};
  357|   124k|            return std::next(prefix_result.iterator);
  358|   124k|        }
  359|       |
  360|   417k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   417k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 323k, False: 93.7k]
  |  |  ------------------
  ------------------
  361|   323k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 120, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   323k|                    parse_integer_digits_without_thsep(
  363|   323k|                        ranges::subrange{prefix_result.iterator,
  364|   323k|                                         ranges::end(range)},
  365|   323k|                        prefix_result.parsed_base));
  366|       |
  367|   323k|            auto buf = make_contiguous_buffer(
  368|   323k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   323k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 62.9k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  62.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  62.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  62.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  62.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  62.9k|    }                                                  \
  |  |  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   260k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   260k|                                        prefix_result.parsed_base));
  372|       |
  373|   260k|            return ranges_polyfill::batch_next(
  374|   260k|                prefix_result.iterator,
  375|   260k|                ranges::distance(buf.view().begin(), result_it));
  376|   323k|        }
  377|       |
  378|  93.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  93.7k|            localized_number_formatting_options<CharT>{loc};
  383|  93.7k|#endif
  384|       |
  385|  93.7k|        SCN_TRY(
  ------------------
  |  |   71|  93.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.0k, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.0k|    }                                                  \
  |  |  |  |   70|  93.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  82.7k|            parse_digits_result,
  387|  82.7k|            parse_integer_digits_with_thsep(
  388|  82.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  82.7k|                prefix_result.parsed_base, locale_options));
  390|  82.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  82.7k|            parse_digits_result;
  392|       |
  393|  82.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 370, False: 82.3k]
  ------------------
  394|    370|            if (auto e = check_thsep_grouping(
  395|    370|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    370|                    thsep_indices, locale_options.grouping);
  397|    370|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 360, False: 10]
  |  |  ------------------
  ------------------
  398|    360|                return unexpected(e);
  399|    360|            }
  400|    370|        }
  401|       |
  402|  82.3k|        auto nothsep_source_view =
  403|  82.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  82.3k|        SCN_TRY(
  ------------------
  |  |   71|  82.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 856, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    856|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    856|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    856|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    856|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    856|    }                                                  \
  |  |  |  |   70|  82.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  81.5k|            nothsep_source_it,
  406|  81.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  81.5k|                                prefix_result.parsed_base));
  408|       |
  409|  81.5k|        return ranges_polyfill::batch_next(
  410|  81.5k|            prefix_result.iterator,
  411|  81.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  81.5k|                ranges::ssize(thsep_indices));
  413|  82.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   687k|    {
  335|   687k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   687k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   687k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   687k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 687k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   687k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   687k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   687k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.43k, False: 679k]
  ------------------
  339|  7.43k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.43k|                return unexpected_scan_error(
  341|  7.43k|                    scan_error::invalid_scanned_value,
  342|  7.43k|                    "Unexpected '-' sign when parsing an "
  343|  7.43k|                    "unsigned value");
  344|  7.43k|            }
  345|  7.43k|            else {
  346|  7.43k|                if (specs.type ==
  347|  7.43k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.43k|                    return unexpected_scan_error(
  349|  7.43k|                        scan_error::invalid_scanned_value,
  350|  7.43k|                        "'u'-option disallows negative values");
  351|  7.43k|                }
  352|  7.43k|            }
  353|  7.43k|        }
  354|       |
  355|   679k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 140k, False: 539k]
  ------------------
  356|   140k|            value = T{0};
  357|   140k|            return std::next(prefix_result.iterator);
  358|   140k|        }
  359|       |
  360|   539k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   539k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 428k, False: 111k]
  |  |  ------------------
  ------------------
  361|   428k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   428k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   428k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   428k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 158, False: 428k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    158|    }                                                  \
  |  |  |  |   70|   428k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   428k|                    parse_integer_digits_without_thsep(
  363|   428k|                        ranges::subrange{prefix_result.iterator,
  364|   428k|                                         ranges::end(range)},
  365|   428k|                        prefix_result.parsed_base));
  366|       |
  367|   428k|            auto buf = make_contiguous_buffer(
  368|   428k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   428k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   428k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   428k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   428k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 61.6k, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.6k|    }                                                  \
  |  |  |  |   70|   428k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   366k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   366k|                                        prefix_result.parsed_base));
  372|       |
  373|   366k|            return ranges_polyfill::batch_next(
  374|   366k|                prefix_result.iterator,
  375|   366k|                ranges::distance(buf.view().begin(), result_it));
  376|   428k|        }
  377|       |
  378|   111k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   111k|            localized_number_formatting_options<CharT>{loc};
  383|   111k|#endif
  384|       |
  385|   111k|        SCN_TRY(
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.2k, False: 99.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.2k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  99.9k|            parse_digits_result,
  387|  99.9k|            parse_integer_digits_with_thsep(
  388|  99.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  99.9k|                prefix_result.parsed_base, locale_options));
  390|  99.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  99.9k|            parse_digits_result;
  392|       |
  393|  99.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 412, False: 99.5k]
  ------------------
  394|    412|            if (auto e = check_thsep_grouping(
  395|    412|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    412|                    thsep_indices, locale_options.grouping);
  397|    412|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 402, False: 10]
  |  |  ------------------
  ------------------
  398|    402|                return unexpected(e);
  399|    402|            }
  400|    412|        }
  401|       |
  402|  99.5k|        auto nothsep_source_view =
  403|  99.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  99.5k|        SCN_TRY(
  ------------------
  |  |   71|  99.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 252, False: 99.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    252|    }                                                  \
  |  |  |  |   70|  99.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  99.2k|            nothsep_source_it,
  406|  99.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  99.2k|                                prefix_result.parsed_base));
  408|       |
  409|  99.2k|        return ranges_polyfill::batch_next(
  410|  99.2k|            prefix_result.iterator,
  411|  99.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  99.2k|                ranges::ssize(thsep_indices));
  413|  99.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   707k|    {
  335|   707k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   707k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   707k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   707k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 707k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   707k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   707k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   707k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.64k, False: 700k]
  ------------------
  339|  7.64k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.64k|                return unexpected_scan_error(
  341|  7.64k|                    scan_error::invalid_scanned_value,
  342|  7.64k|                    "Unexpected '-' sign when parsing an "
  343|  7.64k|                    "unsigned value");
  344|  7.64k|            }
  345|  7.64k|            else {
  346|  7.64k|                if (specs.type ==
  347|  7.64k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.64k|                    return unexpected_scan_error(
  349|  7.64k|                        scan_error::invalid_scanned_value,
  350|  7.64k|                        "'u'-option disallows negative values");
  351|  7.64k|                }
  352|  7.64k|            }
  353|  7.64k|        }
  354|       |
  355|   700k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 140k, False: 559k]
  ------------------
  356|   140k|            value = T{0};
  357|   140k|            return std::next(prefix_result.iterator);
  358|   140k|        }
  359|       |
  360|   559k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   559k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 444k, False: 114k]
  |  |  ------------------
  ------------------
  361|   444k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   444k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   444k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   444k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 158, False: 444k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    158|    }                                                  \
  |  |  |  |   70|   444k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   444k|                    parse_integer_digits_without_thsep(
  363|   444k|                        ranges::subrange{prefix_result.iterator,
  364|   444k|                                         ranges::end(range)},
  365|   444k|                        prefix_result.parsed_base));
  366|       |
  367|   444k|            auto buf = make_contiguous_buffer(
  368|   444k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   444k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   444k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   444k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   444k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 61.3k, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.3k|    }                                                  \
  |  |  |  |   70|   444k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   382k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   382k|                                        prefix_result.parsed_base));
  372|       |
  373|   382k|            return ranges_polyfill::batch_next(
  374|   382k|                prefix_result.iterator,
  375|   382k|                ranges::distance(buf.view().begin(), result_it));
  376|   444k|        }
  377|       |
  378|   114k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   114k|            localized_number_formatting_options<CharT>{loc};
  383|   114k|#endif
  384|       |
  385|   114k|        SCN_TRY(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   103k|            parse_digits_result,
  387|   103k|            parse_integer_digits_with_thsep(
  388|   103k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   103k|                prefix_result.parsed_base, locale_options));
  390|   103k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   103k|            parse_digits_result;
  392|       |
  393|   103k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 422, False: 103k]
  ------------------
  394|    422|            if (auto e = check_thsep_grouping(
  395|    422|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    422|                    thsep_indices, locale_options.grouping);
  397|    422|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 412, False: 10]
  |  |  ------------------
  ------------------
  398|    412|                return unexpected(e);
  399|    412|            }
  400|    422|        }
  401|       |
  402|   103k|        auto nothsep_source_view =
  403|   103k|            std::basic_string_view<CharT>{nothsep_source};
  404|   103k|        SCN_TRY(
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 74, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     74|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   103k|            nothsep_source_it,
  406|   103k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   103k|                                prefix_result.parsed_base));
  408|       |
  409|   103k|        return ranges_polyfill::batch_next(
  410|   103k|            prefix_result.iterator,
  411|   103k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   103k|                ranges::ssize(thsep_indices));
  413|   103k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.3k|                return unexpected_scan_error(
  293|  21.3k|                    scan_error::invalid_scanned_value,
  294|  21.3k|                    "Unexpected '-' sign when parsing an "
  295|  21.3k|                    "unsigned value");
  296|  21.3k|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   640k|{
  121|   640k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   640k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   640k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   640k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 640k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   640k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   640k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   640k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   640k|        parse_integer_base_prefix(
  126|   640k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   640k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 640k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   640k|    else {
  139|   640k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 640k]
  ------------------
  140|   640k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 640k, False: 0]
  ------------------
  141|   640k|            digits_begin_it = base_prefix_begin_it;
  142|   640k|        }
  143|   640k|    }
  144|       |
  145|   640k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 640k, False: 0]
  ------------------
  146|   640k|        sign = sign_type::plus_sign;
  147|   640k|    }
  148|   640k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   640k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   640k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   640k|{
   88|   640k|    switch (base) {
   89|  85.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 85.3k, False: 555k]
  ------------------
   90|       |            // allow 0b/0B
   91|  85.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  85.3k|                    false};
   93|       |
   94|  85.3k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 85.3k, False: 555k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  85.3k|            bool zero_parsed = false;
   97|  85.3k|            auto it = apply_opt(
   98|  85.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  85.3k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  85.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 85.3k, False: 555k]
  ------------------
  103|       |            // allow 0x/0X
  104|  85.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  85.3k|                    false};
  106|       |
  107|   298k|        case 0:
  ------------------
  |  Branch (107:9): [True: 298k, False: 341k]
  ------------------
  108|       |            // detect base
  109|   298k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  85.3k|        default:
  ------------------
  |  Branch (111:9): [True: 85.3k, False: 555k]
  ------------------
  112|       |            // no base prefix allowed
  113|  85.3k|            return {ranges::begin(range), base, false};
  114|   640k|    }
  115|   640k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   384k|{
   38|   384k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   384k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   384k|{
   53|   384k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 384k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   384k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 384k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   384k|    return unexpected(parse_error::error);
   63|   384k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   384k|{
   45|   384k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   384k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   298k|{
   69|   298k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 298k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   298k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 298k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   298k|    {
   76|   298k|        bool zero_parsed{false};
   77|   298k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 298k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   298k|    }
   81|   298k|    return {ranges::begin(range), 10, false};
   82|   298k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   555k|{
  156|   555k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   555k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   555k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   555k|            return unexpected_scan_error(
  161|   555k|                scan_error::invalid_scanned_value,
  162|   555k|                "Failed to parse integer: No digits found");
  163|   555k|        }
  164|   555k|        return ranges::end(range);
  165|   555k|    }
  166|   555k|    else {
  167|   555k|        return read_while1_code_unit(
  168|   555k|                   range, [&](char_type ch)
  169|   555k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   555k|            .transform_error(map_parse_error_to_scan_error(
  171|   555k|                scan_error::invalid_scanned_value,
  172|   555k|                "Failed to parse integer: No digits found"));
  173|   555k|    }
  174|   555k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   555k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.3k|                return unexpected_scan_error(
  293|  21.3k|                    scan_error::invalid_scanned_value,
  294|  21.3k|                    "Unexpected '-' sign when parsing an "
  295|  21.3k|                    "unsigned value");
  296|  21.3k|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.3k|                return unexpected_scan_error(
  293|  21.3k|                    scan_error::invalid_scanned_value,
  294|  21.3k|                    "Unexpected '-' sign when parsing an "
  295|  21.3k|                    "unsigned value");
  296|  21.3k|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.3k|    {
  324|  21.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.3k|        return read_default_with_base(range, value, 0);
  326|  21.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.3k|    {
  287|  21.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.3k|        }
  298|       |
  299|  21.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.3k|                                                      ranges::end(range)},
  307|  21.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.3k|        auto buf = make_contiguous_buffer(
  310|  21.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  21.3k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  85.3k|{
  185|  85.3k|    std::basic_string<CharT> output;
  186|  85.3k|    std::string thsep_indices;
  187|  85.3k|    auto it = ranges::begin(range);
  188|  85.3k|    bool digit_matched = false;
  189|   597k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 597k, False: 72]
  ------------------
  190|   597k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 256k, False: 341k]
  ------------------
  191|   256k|            thsep_indices.push_back(static_cast<char>(
  192|   256k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|   256k|        }
  194|   341k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 85.3k, False: 256k]
  ------------------
  195|  85.3k|            break;
  196|  85.3k|        }
  197|   256k|        else {
  198|   256k|            output.push_back(*it);
  199|   256k|            digit_matched = true;
  200|   256k|        }
  201|   597k|    }
  202|  85.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 85.3k]
  |  |  ------------------
  ------------------
  203|     36|        return unexpected_scan_error(
  204|     36|            scan_error::invalid_scanned_value,
  205|     36|            "Failed to parse integer: No digits found");
  206|     36|    }
  207|  85.3k|    return std::tuple{it, output, thsep_indices};
  208|  85.3k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  85.3k|    {
  335|  85.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  85.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  85.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 85.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  85.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 85.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  85.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 71.1k, False: 14.2k]
  |  |  ------------------
  ------------------
  361|  71.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  71.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|  71.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  14.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.2k|            localized_number_formatting_options<CharT>{loc};
  383|  14.2k|#endif
  384|       |
  385|  14.2k|        SCN_TRY(
  ------------------
  |  |   71|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  14.2k|            parse_digits_result,
  387|  14.2k|            parse_integer_digits_with_thsep(
  388|  14.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  14.2k|                prefix_result.parsed_base, locale_options));
  390|  14.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  14.2k|            parse_digits_result;
  392|       |
  393|  14.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 14.2k, False: 0]
  ------------------
  394|  14.2k|            if (auto e = check_thsep_grouping(
  395|  14.2k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  14.2k|                    thsep_indices, locale_options.grouping);
  397|  14.2k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 0]
  |  |  ------------------
  ------------------
  398|  14.2k|                return unexpected(e);
  399|  14.2k|            }
  400|  14.2k|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  6.05M|{
   69|  6.05M|    auto r = read_one_of_code_unit(range, "+-");
   70|  6.05M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.71M, False: 340k]
  ------------------
   71|  5.71M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.71M, False: 0]
  ------------------
   72|  5.71M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.71M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.71M|    }
   76|       |
   77|   340k|    auto& it = *r;
   78|   340k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 276k, False: 64.4k]
  ------------------
   79|   276k|        return std::pair{it, sign_type::minus_sign};
   80|   276k|    }
   81|  64.4k|    return std::pair{it, sign_type::plus_sign};
   82|   340k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  47.7M|{
   51|  47.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  47.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.58k|{
  140|  2.58k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.58k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.48k, False: 104]
  ------------------
  143|  2.48k|        SCN_UNLIKELY_ATTR
  144|  2.48k|        return {scan_error::invalid_scanned_value,
  145|  2.48k|                "Invalid thousands separator grouping"};
  146|  2.48k|    }
  147|       |
  148|    104|    return {};
  149|  2.58k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.58k|{
  101|  2.58k|    transform_thsep_indices(
  102|  2.58k|        thsep_indices,
  103|  2.58k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.58k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.58k|    for (auto grouping_it = grouping.begin();
  107|  2.58k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.58k]
  |  Branch (107:10): [True: 0, False: 2.58k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.58k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.58k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.58k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  15.3k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 13.8k, False: 1.43k]
  ------------------
  119|  13.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.15k, False: 12.7k]
  ------------------
  120|  1.15k|            return false;
  121|  1.15k|        }
  122|  13.8k|    }
  123|       |
  124|  1.43k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.43k, False: 0]
  ------------------
  125|  1.43k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.32k, False: 104]
  ------------------
  126|  1.32k|            return false;
  127|  1.32k|        }
  128|  1.43k|    }
  129|       |
  130|    104|    SCN_CLANG_POP
  131|       |
  132|    104|    return true;
  133|  1.43k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|   119k|{
   87|   455k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 336k, False: 119k]
  ------------------
   88|   336k|         ++thsep_it) {
   89|   336k|        const auto tmp = *thsep_it;
   90|   336k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   336k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   336k|    }
   93|   119k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|   119k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   213k|{
   69|   213k|    auto r = read_one_of_code_unit(range, "+-");
   70|   213k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 213k, False: 0]
  ------------------
   71|   213k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 213k, False: 0]
  ------------------
   72|   213k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   213k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   213k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEENSH_17basic_string_viewIcSK_EE:
  139|  28.4k|{
  140|  28.4k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  28.4k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 28.4k, False: 0]
  ------------------
  143|  28.4k|        SCN_UNLIKELY_ATTR
  144|  28.4k|        return {scan_error::invalid_scanned_value,
  145|  28.4k|                "Invalid thousands separator grouping"};
  146|  28.4k|    }
  147|       |
  148|      0|    return {};
  149|  28.4k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEbRT_RNSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  100|  28.4k|{
  101|  28.4k|    transform_thsep_indices(
  102|  28.4k|        thsep_indices,
  103|  28.4k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  28.4k|    auto thsep_it = thsep_indices.rbegin();
  106|  28.4k|    for (auto grouping_it = grouping.begin();
  107|  28.4k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 28.4k]
  |  Branch (107:10): [True: 0, False: 28.4k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  28.4k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  28.4k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  28.4k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  28.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 28.4k, False: 0]
  ------------------
  119|  28.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 28.4k, False: 0]
  ------------------
  120|  28.4k|            return false;
  121|  28.4k|        }
  122|  28.4k|    }
  123|       |
  124|      0|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 0, False: 0]
  ------------------
  125|      0|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 0, False: 0]
  ------------------
  126|      0|            return false;
  127|      0|        }
  128|      0|    }
  129|       |
  130|      0|    SCN_CLANG_POP
  131|       |
  132|      0|    return true;
  133|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.77M|{
   69|  5.77M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.77M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.49M, False: 277k]
  ------------------
   71|  5.49M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.49M, False: 0]
  ------------------
   72|  5.49M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.49M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.49M|    }
   76|       |
   77|   277k|    auto& it = *r;
   78|   277k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 217k, False: 60.2k]
  ------------------
   79|   217k|        return std::pair{it, sign_type::minus_sign};
   80|   217k|    }
   81|  60.2k|    return std::pair{it, sign_type::plus_sign};
   82|   277k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  23.9M|{
   55|  23.9M|#if WCHAR_MIN < 0
   56|  23.9M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 23.9M, False: 48.9k]
  |  Branch (56:20): [True: 23.0M, False: 842k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  23.0M|        return char_to_int(static_cast<char>(ch));
   61|  23.0M|    }
   62|   891k|    return 255;
   63|  23.9M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.89k|{
  140|  2.89k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.89k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.80k, False: 92]
  ------------------
  143|  2.80k|        SCN_UNLIKELY_ATTR
  144|  2.80k|        return {scan_error::invalid_scanned_value,
  145|  2.80k|                "Invalid thousands separator grouping"};
  146|  2.80k|    }
  147|       |
  148|     92|    return {};
  149|  2.89k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.89k|{
  101|  2.89k|    transform_thsep_indices(
  102|  2.89k|        thsep_indices,
  103|  2.89k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.89k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.89k|    for (auto grouping_it = grouping.begin();
  107|  2.89k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.89k]
  |  Branch (107:10): [True: 0, False: 2.89k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.89k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.89k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.89k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  18.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 17.1k, False: 1.82k]
  ------------------
  119|  17.1k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.07k, False: 16.0k]
  ------------------
  120|  1.07k|            return false;
  121|  1.07k|        }
  122|  17.1k|    }
  123|       |
  124|  1.82k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.82k, False: 0]
  ------------------
  125|  1.82k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.73k, False: 92]
  ------------------
  126|  1.73k|            return false;
  127|  1.73k|        }
  128|  1.82k|    }
  129|       |
  130|     92|    SCN_CLANG_POP
  131|       |
  132|     92|    return true;
  133|  1.82k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   640k|{
   69|   640k|    auto r = read_one_of_code_unit(range, "+-");
   70|   640k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 640k, False: 0]
  ------------------
   71|   640k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 640k, False: 0]
  ------------------
   72|   640k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   640k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   640k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEENSH_17basic_string_viewIcSK_EE:
  139|  85.3k|{
  140|  85.3k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  85.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  85.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  85.3k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 85.3k, False: 0]
  ------------------
  143|  85.3k|        SCN_UNLIKELY_ATTR
  144|  85.3k|        return {scan_error::invalid_scanned_value,
  145|  85.3k|                "Invalid thousands separator grouping"};
  146|  85.3k|    }
  147|       |
  148|      0|    return {};
  149|  85.3k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEbRT_RNSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  100|  85.3k|{
  101|  85.3k|    transform_thsep_indices(
  102|  85.3k|        thsep_indices,
  103|  85.3k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  85.3k|    auto thsep_it = thsep_indices.rbegin();
  106|  85.3k|    for (auto grouping_it = grouping.begin();
  107|  85.3k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 85.3k]
  |  Branch (107:10): [True: 0, False: 85.3k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  85.3k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  85.3k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  85.3k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  85.3k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 85.3k, False: 0]
  ------------------
  119|  85.3k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 85.3k, False: 0]
  ------------------
  120|  85.3k|            return false;
  121|  85.3k|        }
  122|  85.3k|    }
  123|       |
  124|      0|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 0, False: 0]
  ------------------
  125|      0|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 0, False: 0]
  ------------------
  126|      0|            return false;
  127|      0|        }
  128|      0|    }
  129|       |
  130|      0|    SCN_CLANG_POP
  131|       |
  132|      0|    return true;
  133|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   250k|    {
  122|   250k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   250k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   250k|                          basic_contiguous_scan_context<char_type>>) {
  126|   250k|            auto rd = make_reader<T, char_type>();
  127|   250k|            return impl(rd, range, value);
  128|   250k|        }
  129|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   250k|            auto rd = make_reader<T, char_type>();
  131|   250k|            if (!is_segment_contiguous(range)) {
  132|   250k|                return impl(rd, range, value);
  133|   250k|            }
  134|   250k|            auto crange = get_as_contiguous(range);
  135|   250k|            SCN_TRY(it, impl(rd, crange, value));
  136|   250k|            return ranges_polyfill::batch_next(
  137|   250k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   250k|        }
  139|   250k|        else {
  140|   250k|            SCN_EXPECT(false);
  141|   250k|            SCN_UNREACHABLE;
  142|   250k|        }
  143|   250k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   250k|    {
  112|   250k|        SCN_TRY(it,
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 903, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    903|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    903|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    903|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    903|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    903|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   250k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   250k|                    .transform_error(make_eof_scan_error));
  115|   250k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   250k|                               loc);
  117|   250k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  6.08M|{
   43|  6.08M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.2k, False: 6.06M]
  |  |  ------------------
  ------------------
   44|  24.2k|        return unexpected(e);
   45|  24.2k|    }
   46|       |
   47|  6.06M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 6.06M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  6.06M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  6.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  6.06M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   335k|    {
  122|   335k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   335k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   335k|                          basic_contiguous_scan_context<char_type>>) {
  126|   335k|            auto rd = make_reader<T, char_type>();
  127|   335k|            return impl(rd, range, value);
  128|   335k|        }
  129|   335k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   335k|            auto rd = make_reader<T, char_type>();
  131|   335k|            if (!is_segment_contiguous(range)) {
  132|   335k|                return impl(rd, range, value);
  133|   335k|            }
  134|   335k|            auto crange = get_as_contiguous(range);
  135|   335k|            SCN_TRY(it, impl(rd, crange, value));
  136|   335k|            return ranges_polyfill::batch_next(
  137|   335k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   335k|        }
  139|   335k|        else {
  140|   335k|            SCN_EXPECT(false);
  141|   335k|            SCN_UNREACHABLE;
  142|   335k|        }
  143|   335k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   335k|    {
  112|   335k|        SCN_TRY(it,
  ------------------
  |  |   71|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.64k, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.64k|    }                                                  \
  |  |  |  |   70|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   333k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   333k|                    .transform_error(make_eof_scan_error));
  115|   333k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   333k|                               loc);
  117|   335k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   352k|    {
  122|   352k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   352k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   352k|                          basic_contiguous_scan_context<char_type>>) {
  126|   352k|            auto rd = make_reader<T, char_type>();
  127|   352k|            return impl(rd, range, value);
  128|   352k|        }
  129|   352k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   352k|            auto rd = make_reader<T, char_type>();
  131|   352k|            if (!is_segment_contiguous(range)) {
  132|   352k|                return impl(rd, range, value);
  133|   352k|            }
  134|   352k|            auto crange = get_as_contiguous(range);
  135|   352k|            SCN_TRY(it, impl(rd, crange, value));
  136|   352k|            return ranges_polyfill::batch_next(
  137|   352k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   352k|        }
  139|   352k|        else {
  140|   352k|            SCN_EXPECT(false);
  141|   352k|            SCN_UNREACHABLE;
  142|   352k|        }
  143|   352k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   352k|    {
  112|   352k|        SCN_TRY(it,
  ------------------
  |  |   71|   352k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   352k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   352k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.80k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.80k|    }                                                  \
  |  |  |  |   70|   352k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   351k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   351k|                    .transform_error(make_eof_scan_error));
  115|   351k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   351k|                               loc);
  117|   352k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   238k|    {
  122|   238k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   238k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   238k|                          basic_contiguous_scan_context<char_type>>) {
  126|   238k|            auto rd = make_reader<T, char_type>();
  127|   238k|            return impl(rd, range, value);
  128|   238k|        }
  129|   238k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   238k|            auto rd = make_reader<T, char_type>();
  131|   238k|            if (!is_segment_contiguous(range)) {
  132|   238k|                return impl(rd, range, value);
  133|   238k|            }
  134|   238k|            auto crange = get_as_contiguous(range);
  135|   238k|            SCN_TRY(it, impl(rd, crange, value));
  136|   238k|            return ranges_polyfill::batch_next(
  137|   238k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   238k|        }
  139|   238k|        else {
  140|   238k|            SCN_EXPECT(false);
  141|   238k|            SCN_UNREACHABLE;
  142|   238k|        }
  143|   238k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   238k|    {
  112|   238k|        SCN_TRY(it,
  ------------------
  |  |   71|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 738, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    738|    }                                                  \
  |  |  |  |   70|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   237k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   237k|                    .transform_error(make_eof_scan_error));
  115|   237k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   237k|                               loc);
  117|   238k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   280k|    {
  122|   280k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   280k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   280k|                          basic_contiguous_scan_context<char_type>>) {
  126|   280k|            auto rd = make_reader<T, char_type>();
  127|   280k|            return impl(rd, range, value);
  128|   280k|        }
  129|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   280k|            auto rd = make_reader<T, char_type>();
  131|   280k|            if (!is_segment_contiguous(range)) {
  132|   280k|                return impl(rd, range, value);
  133|   280k|            }
  134|   280k|            auto crange = get_as_contiguous(range);
  135|   280k|            SCN_TRY(it, impl(rd, crange, value));
  136|   280k|            return ranges_polyfill::batch_next(
  137|   280k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   280k|        }
  139|   280k|        else {
  140|   280k|            SCN_EXPECT(false);
  141|   280k|            SCN_UNREACHABLE;
  142|   280k|        }
  143|   280k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   280k|    {
  112|   280k|        SCN_TRY(it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   279k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   279k|                    .transform_error(make_eof_scan_error));
  115|   279k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   279k|                               loc);
  117|   280k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   288k|    {
  122|   288k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   288k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   288k|                          basic_contiguous_scan_context<char_type>>) {
  126|   288k|            auto rd = make_reader<T, char_type>();
  127|   288k|            return impl(rd, range, value);
  128|   288k|        }
  129|   288k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   288k|            auto rd = make_reader<T, char_type>();
  131|   288k|            if (!is_segment_contiguous(range)) {
  132|   288k|                return impl(rd, range, value);
  133|   288k|            }
  134|   288k|            auto crange = get_as_contiguous(range);
  135|   288k|            SCN_TRY(it, impl(rd, crange, value));
  136|   288k|            return ranges_polyfill::batch_next(
  137|   288k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   288k|        }
  139|   288k|        else {
  140|   288k|            SCN_EXPECT(false);
  141|   288k|            SCN_UNREACHABLE;
  142|   288k|        }
  143|   288k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   288k|    {
  112|   288k|        SCN_TRY(it,
  ------------------
  |  |   71|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.20k, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.20k|    }                                                  \
  |  |  |  |   70|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   287k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   287k|                    .transform_error(make_eof_scan_error));
  115|   287k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   287k|                               loc);
  117|   288k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   213k|{
   43|   213k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 213k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   213k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 213k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   213k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   213k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.11k|    {
  122|  7.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.11k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.11k|            auto rd = make_reader<T, char_type>();
  127|  7.11k|            return impl(rd, range, value);
  128|  7.11k|        }
  129|  7.11k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.11k|            auto rd = make_reader<T, char_type>();
  131|  7.11k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.11k, False: 0]
  ------------------
  132|  7.11k|                return impl(rd, range, value);
  133|  7.11k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.11k|        else {
  140|  7.11k|            SCN_EXPECT(false);
  141|  7.11k|            SCN_UNREACHABLE;
  142|  7.11k|        }
  143|  7.11k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.11k|    {
  112|  7.11k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.11k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.11k|                    .transform_error(make_eof_scan_error));
  115|  7.11k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.11k|                               loc);
  117|  7.11k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   557k|    {
  223|   557k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   557k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   557k|                          basic_contiguous_scan_context<char_type>>) {
  227|   557k|            auto rd = make_reader<T, char_type>();
  228|   557k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   557k|            return impl(rd, range, value);
  233|   557k|        }
  234|   557k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   557k|            auto rd = make_reader<T, char_type>();
  236|   557k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   557k|                return unexpected(e);
  238|   557k|            }
  239|       |
  240|   557k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   557k|                return impl(rd, range, value);
  242|   557k|            }
  243|       |
  244|   557k|            auto crange = get_as_contiguous(range);
  245|   557k|            SCN_TRY(it, impl(rd, crange, value));
  246|   557k|            return ranges_polyfill::batch_next(
  247|   557k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   557k|        }
  249|   557k|        else {
  250|   557k|            SCN_EXPECT(false);
  251|   557k|            SCN_UNREACHABLE;
  252|   557k|        }
  253|   557k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   557k|    {
  205|   557k|        SCN_TRY(it,
  ------------------
  |  |   71|   557k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   557k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   557k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.40k, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.40k|    }                                                  \
  |  |  |  |   70|   557k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   555k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   555k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   555k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   555k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 555k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   555k|        return rd.read_specs(subr, specs, value, loc);
  218|   555k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   872k|    {
  223|   872k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   872k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   872k|                          basic_contiguous_scan_context<char_type>>) {
  227|   872k|            auto rd = make_reader<T, char_type>();
  228|   872k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   872k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 872k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   872k|            return impl(rd, range, value);
  233|   872k|        }
  234|   872k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   872k|            auto rd = make_reader<T, char_type>();
  236|   872k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   872k|                return unexpected(e);
  238|   872k|            }
  239|       |
  240|   872k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   872k|                return impl(rd, range, value);
  242|   872k|            }
  243|       |
  244|   872k|            auto crange = get_as_contiguous(range);
  245|   872k|            SCN_TRY(it, impl(rd, crange, value));
  246|   872k|            return ranges_polyfill::batch_next(
  247|   872k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   872k|        }
  249|   872k|        else {
  250|   872k|            SCN_EXPECT(false);
  251|   872k|            SCN_UNREACHABLE;
  252|   872k|        }
  253|   872k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   872k|    {
  205|   872k|        SCN_TRY(it,
  ------------------
  |  |   71|   872k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   872k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   872k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   872k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.68k, False: 867k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.68k|    }                                                  \
  |  |  |  |   70|   872k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   867k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   867k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   867k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   867k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   867k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 867k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   867k|        return rd.read_specs(subr, specs, value, loc);
  218|   867k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   913k|    {
  223|   913k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   913k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   913k|                          basic_contiguous_scan_context<char_type>>) {
  227|   913k|            auto rd = make_reader<T, char_type>();
  228|   913k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   913k|            return impl(rd, range, value);
  233|   913k|        }
  234|   913k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   913k|            auto rd = make_reader<T, char_type>();
  236|   913k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   913k|                return unexpected(e);
  238|   913k|            }
  239|       |
  240|   913k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   913k|                return impl(rd, range, value);
  242|   913k|            }
  243|       |
  244|   913k|            auto crange = get_as_contiguous(range);
  245|   913k|            SCN_TRY(it, impl(rd, crange, value));
  246|   913k|            return ranges_polyfill::batch_next(
  247|   913k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   913k|        }
  249|   913k|        else {
  250|   913k|            SCN_EXPECT(false);
  251|   913k|            SCN_UNREACHABLE;
  252|   913k|        }
  253|   913k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   913k|    {
  205|   913k|        SCN_TRY(it,
  ------------------
  |  |   71|   913k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   913k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   913k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.18k, False: 908k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.18k|    }                                                  \
  |  |  |  |   70|   913k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   908k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   908k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   908k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   908k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 908k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   908k|        return rd.read_specs(subr, specs, value, loc);
  218|   908k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   553k|    {
  223|   553k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   553k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   553k|                          basic_contiguous_scan_context<char_type>>) {
  227|   553k|            auto rd = make_reader<T, char_type>();
  228|   553k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 553k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   553k|            return impl(rd, range, value);
  233|   553k|        }
  234|   553k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   553k|            auto rd = make_reader<T, char_type>();
  236|   553k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   553k|                return unexpected(e);
  238|   553k|            }
  239|       |
  240|   553k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   553k|                return impl(rd, range, value);
  242|   553k|            }
  243|       |
  244|   553k|            auto crange = get_as_contiguous(range);
  245|   553k|            SCN_TRY(it, impl(rd, crange, value));
  246|   553k|            return ranges_polyfill::batch_next(
  247|   553k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   553k|        }
  249|   553k|        else {
  250|   553k|            SCN_EXPECT(false);
  251|   553k|            SCN_UNREACHABLE;
  252|   553k|        }
  253|   553k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   553k|    {
  205|   553k|        SCN_TRY(it,
  ------------------
  |  |   71|   553k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.01k, False: 551k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.01k|    }                                                  \
  |  |  |  |   70|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   551k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   551k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   551k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   551k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 551k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   551k|        return rd.read_specs(subr, specs, value, loc);
  218|   551k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   708k|    {
  223|   708k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   708k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   708k|                          basic_contiguous_scan_context<char_type>>) {
  227|   708k|            auto rd = make_reader<T, char_type>();
  228|   708k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   708k|            return impl(rd, range, value);
  233|   708k|        }
  234|   708k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   708k|            auto rd = make_reader<T, char_type>();
  236|   708k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   708k|                return unexpected(e);
  238|   708k|            }
  239|       |
  240|   708k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   708k|                return impl(rd, range, value);
  242|   708k|            }
  243|       |
  244|   708k|            auto crange = get_as_contiguous(range);
  245|   708k|            SCN_TRY(it, impl(rd, crange, value));
  246|   708k|            return ranges_polyfill::batch_next(
  247|   708k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   708k|        }
  249|   708k|        else {
  250|   708k|            SCN_EXPECT(false);
  251|   708k|            SCN_UNREACHABLE;
  252|   708k|        }
  253|   708k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   708k|    {
  205|   708k|        SCN_TRY(it,
  ------------------
  |  |   71|   708k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   708k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   708k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.16k, False: 705k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.16k|    }                                                  \
  |  |  |  |   70|   708k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   705k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   705k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   705k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   705k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 705k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   705k|        return rd.read_specs(subr, specs, value, loc);
  218|   705k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   733k|    {
  223|   733k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   733k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   733k|                          basic_contiguous_scan_context<char_type>>) {
  227|   733k|            auto rd = make_reader<T, char_type>();
  228|   733k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 733k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   733k|            return impl(rd, range, value);
  233|   733k|        }
  234|   733k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   733k|            auto rd = make_reader<T, char_type>();
  236|   733k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   733k|                return unexpected(e);
  238|   733k|            }
  239|       |
  240|   733k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   733k|                return impl(rd, range, value);
  242|   733k|            }
  243|       |
  244|   733k|            auto crange = get_as_contiguous(range);
  245|   733k|            SCN_TRY(it, impl(rd, crange, value));
  246|   733k|            return ranges_polyfill::batch_next(
  247|   733k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   733k|        }
  249|   733k|        else {
  250|   733k|            SCN_EXPECT(false);
  251|   733k|            SCN_UNREACHABLE;
  252|   733k|        }
  253|   733k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   733k|    {
  205|   733k|        SCN_TRY(it,
  ------------------
  |  |   71|   733k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   733k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   733k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.41k, False: 729k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.41k|    }                                                  \
  |  |  |  |   70|   733k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   729k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   729k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   729k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   729k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 729k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   729k|        return rd.read_specs(subr, specs, value, loc);
  218|   729k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  28.4k|    {
  223|  28.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  28.4k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  28.4k|            auto rd = make_reader<T, char_type>();
  228|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  28.4k|                return unexpected(e);
  230|  28.4k|            }
  231|       |
  232|  28.4k|            return impl(rd, range, value);
  233|  28.4k|        }
  234|  28.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  28.4k|            auto rd = make_reader<T, char_type>();
  236|  28.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  28.4k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 28.4k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  28.4k|                return impl(rd, range, value);
  242|  28.4k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  28.4k|        else {
  250|  28.4k|            SCN_EXPECT(false);
  251|  28.4k|            SCN_UNREACHABLE;
  252|  28.4k|        }
  253|  28.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  28.4k|    {
  205|  28.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  28.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  28.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  28.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  28.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  28.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 28.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  28.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  28.4k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   235k|    {
  122|   235k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   235k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   235k|                          basic_contiguous_scan_context<char_type>>) {
  126|   235k|            auto rd = make_reader<T, char_type>();
  127|   235k|            return impl(rd, range, value);
  128|   235k|        }
  129|   235k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   235k|            auto rd = make_reader<T, char_type>();
  131|   235k|            if (!is_segment_contiguous(range)) {
  132|   235k|                return impl(rd, range, value);
  133|   235k|            }
  134|   235k|            auto crange = get_as_contiguous(range);
  135|   235k|            SCN_TRY(it, impl(rd, crange, value));
  136|   235k|            return ranges_polyfill::batch_next(
  137|   235k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   235k|        }
  139|   235k|        else {
  140|   235k|            SCN_EXPECT(false);
  141|   235k|            SCN_UNREACHABLE;
  142|   235k|        }
  143|   235k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   235k|    {
  112|   235k|        SCN_TRY(it,
  ------------------
  |  |   71|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.17k, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.17k|    }                                                  \
  |  |  |  |   70|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   233k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   233k|                    .transform_error(make_eof_scan_error));
  115|   233k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   233k|                               loc);
  117|   235k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.80M|{
   43|  5.80M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.9k, False: 5.77M]
  |  |  ------------------
  ------------------
   44|  28.9k|        return unexpected(e);
   45|  28.9k|    }
   46|       |
   47|  5.77M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.77M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.77M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.77M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   308k|    {
  122|   308k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   308k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   308k|                          basic_contiguous_scan_context<char_type>>) {
  126|   308k|            auto rd = make_reader<T, char_type>();
  127|   308k|            return impl(rd, range, value);
  128|   308k|        }
  129|   308k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   308k|            auto rd = make_reader<T, char_type>();
  131|   308k|            if (!is_segment_contiguous(range)) {
  132|   308k|                return impl(rd, range, value);
  133|   308k|            }
  134|   308k|            auto crange = get_as_contiguous(range);
  135|   308k|            SCN_TRY(it, impl(rd, crange, value));
  136|   308k|            return ranges_polyfill::batch_next(
  137|   308k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   308k|        }
  139|   308k|        else {
  140|   308k|            SCN_EXPECT(false);
  141|   308k|            SCN_UNREACHABLE;
  142|   308k|        }
  143|   308k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   308k|    {
  112|   308k|        SCN_TRY(it,
  ------------------
  |  |   71|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.91k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   306k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   306k|                    .transform_error(make_eof_scan_error));
  115|   306k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   306k|                               loc);
  117|   308k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   323k|    {
  122|   323k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   323k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   323k|                          basic_contiguous_scan_context<char_type>>) {
  126|   323k|            auto rd = make_reader<T, char_type>();
  127|   323k|            return impl(rd, range, value);
  128|   323k|        }
  129|   323k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   323k|            auto rd = make_reader<T, char_type>();
  131|   323k|            if (!is_segment_contiguous(range)) {
  132|   323k|                return impl(rd, range, value);
  133|   323k|            }
  134|   323k|            auto crange = get_as_contiguous(range);
  135|   323k|            SCN_TRY(it, impl(rd, crange, value));
  136|   323k|            return ranges_polyfill::batch_next(
  137|   323k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   323k|        }
  139|   323k|        else {
  140|   323k|            SCN_EXPECT(false);
  141|   323k|            SCN_UNREACHABLE;
  142|   323k|        }
  143|   323k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   323k|    {
  112|   323k|        SCN_TRY(it,
  ------------------
  |  |   71|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   321k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   321k|                    .transform_error(make_eof_scan_error));
  115|   321k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   321k|                               loc);
  117|   323k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   228k|    {
  122|   228k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   228k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   228k|                          basic_contiguous_scan_context<char_type>>) {
  126|   228k|            auto rd = make_reader<T, char_type>();
  127|   228k|            return impl(rd, range, value);
  128|   228k|        }
  129|   228k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   228k|            auto rd = make_reader<T, char_type>();
  131|   228k|            if (!is_segment_contiguous(range)) {
  132|   228k|                return impl(rd, range, value);
  133|   228k|            }
  134|   228k|            auto crange = get_as_contiguous(range);
  135|   228k|            SCN_TRY(it, impl(rd, crange, value));
  136|   228k|            return ranges_polyfill::batch_next(
  137|   228k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   228k|        }
  139|   228k|        else {
  140|   228k|            SCN_EXPECT(false);
  141|   228k|            SCN_UNREACHABLE;
  142|   228k|        }
  143|   228k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   228k|    {
  112|   228k|        SCN_TRY(it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.00k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.00k|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   227k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   227k|                    .transform_error(make_eof_scan_error));
  115|   227k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   227k|                               loc);
  117|   228k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   266k|    {
  122|   266k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   266k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   266k|                          basic_contiguous_scan_context<char_type>>) {
  126|   266k|            auto rd = make_reader<T, char_type>();
  127|   266k|            return impl(rd, range, value);
  128|   266k|        }
  129|   266k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   266k|            auto rd = make_reader<T, char_type>();
  131|   266k|            if (!is_segment_contiguous(range)) {
  132|   266k|                return impl(rd, range, value);
  133|   266k|            }
  134|   266k|            auto crange = get_as_contiguous(range);
  135|   266k|            SCN_TRY(it, impl(rd, crange, value));
  136|   266k|            return ranges_polyfill::batch_next(
  137|   266k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   266k|        }
  139|   266k|        else {
  140|   266k|            SCN_EXPECT(false);
  141|   266k|            SCN_UNREACHABLE;
  142|   266k|        }
  143|   266k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   266k|    {
  112|   266k|        SCN_TRY(it,
  ------------------
  |  |   71|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.38k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.38k|    }                                                  \
  |  |  |  |   70|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   265k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   265k|                    .transform_error(make_eof_scan_error));
  115|   265k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   265k|                               loc);
  117|   266k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   273k|    {
  122|   273k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   273k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   273k|                          basic_contiguous_scan_context<char_type>>) {
  126|   273k|            auto rd = make_reader<T, char_type>();
  127|   273k|            return impl(rd, range, value);
  128|   273k|        }
  129|   273k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   273k|            auto rd = make_reader<T, char_type>();
  131|   273k|            if (!is_segment_contiguous(range)) {
  132|   273k|                return impl(rd, range, value);
  133|   273k|            }
  134|   273k|            auto crange = get_as_contiguous(range);
  135|   273k|            SCN_TRY(it, impl(rd, crange, value));
  136|   273k|            return ranges_polyfill::batch_next(
  137|   273k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   273k|        }
  139|   273k|        else {
  140|   273k|            SCN_EXPECT(false);
  141|   273k|            SCN_UNREACHABLE;
  142|   273k|        }
  143|   273k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   273k|    {
  112|   273k|        SCN_TRY(it,
  ------------------
  |  |   71|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.47k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   271k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   271k|                    .transform_error(make_eof_scan_error));
  115|   271k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   271k|                               loc);
  117|   273k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   543k|    {
  223|   543k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   543k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   543k|                          basic_contiguous_scan_context<char_type>>) {
  227|   543k|            auto rd = make_reader<T, char_type>();
  228|   543k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 543k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   543k|            return impl(rd, range, value);
  233|   543k|        }
  234|   543k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   543k|            auto rd = make_reader<T, char_type>();
  236|   543k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   543k|                return unexpected(e);
  238|   543k|            }
  239|       |
  240|   543k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   543k|                return impl(rd, range, value);
  242|   543k|            }
  243|       |
  244|   543k|            auto crange = get_as_contiguous(range);
  245|   543k|            SCN_TRY(it, impl(rd, crange, value));
  246|   543k|            return ranges_polyfill::batch_next(
  247|   543k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   543k|        }
  249|   543k|        else {
  250|   543k|            SCN_EXPECT(false);
  251|   543k|            SCN_UNREACHABLE;
  252|   543k|        }
  253|   543k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   543k|    {
  205|   543k|        SCN_TRY(it,
  ------------------
  |  |   71|   543k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   543k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   543k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.45k, False: 540k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.45k|    }                                                  \
  |  |  |  |   70|   543k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   540k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   540k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   540k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   540k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   540k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 540k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   540k|        return rd.read_specs(subr, specs, value, loc);
  218|   540k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   817k|    {
  223|   817k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   817k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   817k|                          basic_contiguous_scan_context<char_type>>) {
  227|   817k|            auto rd = make_reader<T, char_type>();
  228|   817k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   817k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 817k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   817k|            return impl(rd, range, value);
  233|   817k|        }
  234|   817k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   817k|            auto rd = make_reader<T, char_type>();
  236|   817k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   817k|                return unexpected(e);
  238|   817k|            }
  239|       |
  240|   817k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   817k|                return impl(rd, range, value);
  242|   817k|            }
  243|       |
  244|   817k|            auto crange = get_as_contiguous(range);
  245|   817k|            SCN_TRY(it, impl(rd, crange, value));
  246|   817k|            return ranges_polyfill::batch_next(
  247|   817k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   817k|        }
  249|   817k|        else {
  250|   817k|            SCN_EXPECT(false);
  251|   817k|            SCN_UNREACHABLE;
  252|   817k|        }
  253|   817k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   817k|    {
  205|   817k|        SCN_TRY(it,
  ------------------
  |  |   71|   817k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   817k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   817k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   817k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.75k, False: 811k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.75k|    }                                                  \
  |  |  |  |   70|   817k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   811k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   811k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   811k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   811k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   811k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 811k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   811k|        return rd.read_specs(subr, specs, value, loc);
  218|   811k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   853k|    {
  223|   853k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   853k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   853k|                          basic_contiguous_scan_context<char_type>>) {
  227|   853k|            auto rd = make_reader<T, char_type>();
  228|   853k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 853k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   853k|            return impl(rd, range, value);
  233|   853k|        }
  234|   853k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   853k|            auto rd = make_reader<T, char_type>();
  236|   853k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   853k|                return unexpected(e);
  238|   853k|            }
  239|       |
  240|   853k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   853k|                return impl(rd, range, value);
  242|   853k|            }
  243|       |
  244|   853k|            auto crange = get_as_contiguous(range);
  245|   853k|            SCN_TRY(it, impl(rd, crange, value));
  246|   853k|            return ranges_polyfill::batch_next(
  247|   853k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   853k|        }
  249|   853k|        else {
  250|   853k|            SCN_EXPECT(false);
  251|   853k|            SCN_UNREACHABLE;
  252|   853k|        }
  253|   853k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   853k|    {
  205|   853k|        SCN_TRY(it,
  ------------------
  |  |   71|   853k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   853k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   853k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.26k, False: 847k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.26k|    }                                                  \
  |  |  |  |   70|   853k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   847k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   847k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   847k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   847k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 847k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   847k|        return rd.read_specs(subr, specs, value, loc);
  218|   847k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   552k|    {
  223|   552k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   552k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   552k|                          basic_contiguous_scan_context<char_type>>) {
  227|   552k|            auto rd = make_reader<T, char_type>();
  228|   552k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 552k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   552k|            return impl(rd, range, value);
  233|   552k|        }
  234|   552k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   552k|            auto rd = make_reader<T, char_type>();
  236|   552k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   552k|                return unexpected(e);
  238|   552k|            }
  239|       |
  240|   552k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   552k|                return impl(rd, range, value);
  242|   552k|            }
  243|       |
  244|   552k|            auto crange = get_as_contiguous(range);
  245|   552k|            SCN_TRY(it, impl(rd, crange, value));
  246|   552k|            return ranges_polyfill::batch_next(
  247|   552k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   552k|        }
  249|   552k|        else {
  250|   552k|            SCN_EXPECT(false);
  251|   552k|            SCN_UNREACHABLE;
  252|   552k|        }
  253|   552k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   552k|    {
  205|   552k|        SCN_TRY(it,
  ------------------
  |  |   71|   552k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   552k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   552k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.04k, False: 549k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.04k|    }                                                  \
  |  |  |  |   70|   552k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   549k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   549k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   549k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   549k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 549k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   549k|        return rd.read_specs(subr, specs, value, loc);
  218|   549k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   691k|    {
  223|   691k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   691k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   691k|                          basic_contiguous_scan_context<char_type>>) {
  227|   691k|            auto rd = make_reader<T, char_type>();
  228|   691k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 691k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   691k|            return impl(rd, range, value);
  233|   691k|        }
  234|   691k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   691k|            auto rd = make_reader<T, char_type>();
  236|   691k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   691k|                return unexpected(e);
  238|   691k|            }
  239|       |
  240|   691k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   691k|                return impl(rd, range, value);
  242|   691k|            }
  243|       |
  244|   691k|            auto crange = get_as_contiguous(range);
  245|   691k|            SCN_TRY(it, impl(rd, crange, value));
  246|   691k|            return ranges_polyfill::batch_next(
  247|   691k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   691k|        }
  249|   691k|        else {
  250|   691k|            SCN_EXPECT(false);
  251|   691k|            SCN_UNREACHABLE;
  252|   691k|        }
  253|   691k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   691k|    {
  205|   691k|        SCN_TRY(it,
  ------------------
  |  |   71|   691k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   691k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   691k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.22k, False: 687k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.22k|    }                                                  \
  |  |  |  |   70|   691k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   687k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   687k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   687k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   687k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 687k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   687k|        return rd.read_specs(subr, specs, value, loc);
  218|   687k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   712k|    {
  223|   712k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   712k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   712k|                          basic_contiguous_scan_context<char_type>>) {
  227|   712k|            auto rd = make_reader<T, char_type>();
  228|   712k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 712k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   712k|            return impl(rd, range, value);
  233|   712k|        }
  234|   712k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   712k|            auto rd = make_reader<T, char_type>();
  236|   712k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   712k|                return unexpected(e);
  238|   712k|            }
  239|       |
  240|   712k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   712k|                return impl(rd, range, value);
  242|   712k|            }
  243|       |
  244|   712k|            auto crange = get_as_contiguous(range);
  245|   712k|            SCN_TRY(it, impl(rd, crange, value));
  246|   712k|            return ranges_polyfill::batch_next(
  247|   712k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   712k|        }
  249|   712k|        else {
  250|   712k|            SCN_EXPECT(false);
  251|   712k|            SCN_UNREACHABLE;
  252|   712k|        }
  253|   712k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   712k|    {
  205|   712k|        SCN_TRY(it,
  ------------------
  |  |   71|   712k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   712k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   712k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.47k, False: 707k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.47k|    }                                                  \
  |  |  |  |   70|   712k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   707k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   707k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   707k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   707k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 707k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   707k|        return rd.read_specs(subr, specs, value, loc);
  218|   707k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   640k|{
   43|   640k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 640k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   640k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 640k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   640k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   640k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.3k|    {
  122|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.3k|            auto rd = make_reader<T, char_type>();
  127|  21.3k|            return impl(rd, range, value);
  128|  21.3k|        }
  129|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.3k|            auto rd = make_reader<T, char_type>();
  131|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.3k, False: 0]
  ------------------
  132|  21.3k|                return impl(rd, range, value);
  133|  21.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.3k|        else {
  140|  21.3k|            SCN_EXPECT(false);
  141|  21.3k|            SCN_UNREACHABLE;
  142|  21.3k|        }
  143|  21.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.3k|    {
  112|  21.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.3k|                    .transform_error(make_eof_scan_error));
  115|  21.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.3k|                               loc);
  117|  21.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.3k|    {
  223|  85.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.3k|            auto rd = make_reader<T, char_type>();
  228|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.3k|                return unexpected(e);
  230|  85.3k|            }
  231|       |
  232|  85.3k|            return impl(rd, range, value);
  233|  85.3k|        }
  234|  85.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.3k|            auto rd = make_reader<T, char_type>();
  236|  85.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.3k|                return impl(rd, range, value);
  242|  85.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.3k|        else {
  250|  85.3k|            SCN_EXPECT(false);
  251|  85.3k|            SCN_UNREACHABLE;
  252|  85.3k|        }
  253|  85.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.3k|    {
  205|  85.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  85.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.3k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   189k|{
  110|   189k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   189k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  91.8k|{
  263|  91.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  91.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.22k, False: 85.6k]
  |  |  ------------------
  ------------------
  267|  6.22k|        return {get_start_of_next_code_point(input),
  268|  6.22k|                detail::invalid_code_point};
  269|  6.22k|    }
  270|  85.6k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 644, False: 84.9k]
  |  |  ------------------
  ------------------
  271|    644|        return {input.end(), detail::invalid_code_point};
  272|    644|    }
  273|       |
  274|  84.9k|    constexpr auto enc = get_encoding<CharT>();
  275|  84.9k|    std::size_t result{1};
  276|  84.9k|    char32_t output{};
  277|  84.9k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  84.9k|        result = simdutf::convert_utf8_to_utf32(
  279|  84.9k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  84.9k|    }
  281|  84.9k|    else if constexpr (enc == encoding::utf16) {
  282|  84.9k|        result = simdutf::convert_utf16_to_utf32(
  283|  84.9k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  84.9k|    }
  285|  84.9k|    else if constexpr (enc == encoding::utf32) {
  286|  84.9k|        SCN_EXPECT(len == 1);
  287|  84.9k|        output = static_cast<char32_t>(input[0]);
  288|  84.9k|    }
  289|       |
  290|  84.9k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  84.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.70k, False: 80.2k]
  |  |  ------------------
  ------------------
  291|  4.70k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.70k|                detail::invalid_code_point};
  293|  4.70k|    }
  294|       |
  295|  80.2k|    return {input.begin() + len, output};
  296|  84.9k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  10.9k|{
  248|  10.9k|    auto it = input.begin();
  249|  99.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 97.8k, False: 2.10k]
  ------------------
  250|  97.8k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 8.82k, False: 89.0k]
  ------------------
  251|  8.82k|            break;
  252|  8.82k|        }
  253|  97.8k|    }
  254|       |
  255|  10.9k|    return it;
  256|  10.9k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  89.0M|{
  110|  89.0M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  89.0M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  6.44M|{
  449|  6.44M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 6.44M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  6.44M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  6.44M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  6.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  6.44M|                    input.size() * sizeof(SourceCharT));
  457|  6.44M|        return input.size();
  458|  6.44M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  12.9M|{
   29|       |    // Pattern_White_Space property
   30|  12.9M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 12.2M, False: 664k]
  |  Branch (30:27): [True: 6.38M, False: 5.87M]
  ------------------
   31|  12.9M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 54.0k, False: 6.48M]
  ------------------
   32|  12.9M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 3.91k, False: 6.48M]
  ------------------
   33|  12.9M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 2.91k, False: 6.48M]
  ------------------
   34|  12.9M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 2.44k, False: 6.47M]
  ------------------
   35|  12.9M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 3.24k, False: 6.47M]
  ------------------
   36|  12.9M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 6.47M]
  ------------------
   37|  12.9M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  13.4M|{
   58|  13.4M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  13.4M|        static_cast<unsigned char>(ch))];
   60|  13.4M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  6.39M|{
   92|  6.39M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  6.39M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  4.42M|    {
   57|  4.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  12.9M|    {
   61|  12.9M|        return m_current;
   62|  12.9M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  8.50M|    {
   66|  8.50M|        return m_range.end();
   67|  8.50M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  4.16M|    {
   81|  4.16M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.16M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.16M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.16M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.16M|        }
   87|  4.16M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.16M|    static_cast<    \
  |  |  247|  4.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.16M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  4.33M|    {
   71|  4.33M|        return ranges::subrange{begin(), end()};
   72|  4.33M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  4.42M|    {
   57|  4.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  12.2M|    {
   61|  12.2M|        return m_current;
   62|  12.2M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  7.82M|    {
   66|  7.82M|        return m_range.end();
   67|  7.82M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  3.65M|    {
   81|  3.65M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.65M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.65M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.65M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.65M|        }
   87|  3.65M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.65M|    static_cast<    \
  |  |  247|  3.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.65M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  4.17M|    {
   71|  4.17M|        return ranges::subrange{begin(), end()};
   72|  4.17M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   370k|    {
  205|   370k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   370k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   185k|    {
  196|   185k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   185k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   185k|              cvref<T> obj = *get<T>(fn);
  187|   185k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   185k|                  obj(static_cast<decltype(args)>(args)...);
  189|   185k|              }
  190|   185k|              else {
  191|   185k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   185k|              }
  193|   185k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   185k|    {
  126|   185k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   185k|            return static_cast<T*>(s.m_cp);
  128|   185k|        }
  129|   185k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   185k|            return static_cast<T*>(s.m_p);
  131|   185k|        }
  132|   185k|        else {
  133|   185k|            return reinterpret_cast<T*>(s.m_fp);
  134|   185k|        }
  135|   185k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   185k|        {
  104|   185k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  25.6M|    {
  205|  25.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  25.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  25.6M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  6.41M|    {
  196|  6.41M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  12.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.8M|              cvref<T> obj = *get<T>(fn);
  187|  12.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.8M|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.8M|              }
  190|  12.8M|              else {
  191|  12.8M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.8M|              }
  193|  12.8M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  12.8M|    {
  126|  12.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.8M|            return static_cast<T*>(s.m_cp);
  128|  12.8M|        }
  129|  12.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.8M|            return static_cast<T*>(s.m_p);
  131|  12.8M|        }
  132|  12.8M|        else {
  133|  12.8M|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.8M|        }
  135|  12.8M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  6.41M|        {
  104|  6.41M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   185k|    {
  196|   185k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   185k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   185k|              cvref<T> obj = *get<T>(fn);
  187|   185k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   185k|                  obj(static_cast<decltype(args)>(args)...);
  189|   185k|              }
  190|   185k|              else {
  191|   185k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   185k|              }
  193|   185k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   185k|    {
  126|   185k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   185k|            return static_cast<T*>(s.m_cp);
  128|   185k|        }
  129|   185k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   185k|            return static_cast<T*>(s.m_p);
  131|   185k|        }
  132|   185k|        else {
  133|   185k|            return reinterpret_cast<T*>(s.m_fp);
  134|   185k|        }
  135|   185k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   185k|        {
  104|   185k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  5.77M|    {
  196|  5.77M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  12.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.1M|              cvref<T> obj = *get<T>(fn);
  187|  12.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.1M|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.1M|              }
  190|  12.1M|              else {
  191|  12.1M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.1M|              }
  193|  12.1M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  12.1M|    {
  126|  12.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.1M|            return static_cast<T*>(s.m_cp);
  128|  12.1M|        }
  129|  12.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1M|            return static_cast<T*>(s.m_p);
  131|  12.1M|        }
  132|  12.1M|        else {
  133|  12.1M|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.1M|        }
  135|  12.1M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  5.77M|        {
  104|  5.77M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.11M|    {
  205|  1.11M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.11M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   555k|    {
  196|   555k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   555k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   555k|              cvref<T> obj = *get<T>(fn);
  187|   555k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   555k|                  obj(static_cast<decltype(args)>(args)...);
  189|   555k|              }
  190|   555k|              else {
  191|   555k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   555k|              }
  193|   555k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   555k|    {
  126|   555k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   555k|            return static_cast<T*>(s.m_cp);
  128|   555k|        }
  129|   555k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   555k|            return static_cast<T*>(s.m_p);
  131|   555k|        }
  132|   555k|        else {
  133|   555k|            return reinterpret_cast<T*>(s.m_fp);
  134|   555k|        }
  135|   555k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   555k|        {
  104|   555k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   640k|    {
  196|   640k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   640k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   640k|              cvref<T> obj = *get<T>(fn);
  187|   640k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   640k|                  obj(static_cast<decltype(args)>(args)...);
  189|   640k|              }
  190|   640k|              else {
  191|   640k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   640k|              }
  193|   640k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   640k|    {
  126|   640k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   640k|            return static_cast<T*>(s.m_cp);
  128|   640k|        }
  129|   640k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   640k|            return static_cast<T*>(s.m_p);
  131|   640k|        }
  132|   640k|        else {
  133|   640k|            return reinterpret_cast<T*>(s.m_fp);
  134|   640k|        }
  135|   640k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   640k|        {
  104|   640k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   555k|    {
  196|   555k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   555k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   555k|              cvref<T> obj = *get<T>(fn);
  187|   555k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   555k|                  obj(static_cast<decltype(args)>(args)...);
  189|   555k|              }
  190|   555k|              else {
  191|   555k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   555k|              }
  193|   555k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   555k|    {
  126|   555k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   555k|            return static_cast<T*>(s.m_cp);
  128|   555k|        }
  129|   555k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   555k|            return static_cast<T*>(s.m_p);
  131|   555k|        }
  132|   555k|        else {
  133|   555k|            return reinterpret_cast<T*>(s.m_fp);
  134|   555k|        }
  135|   555k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   555k|        {
  104|   555k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  64.5k|{
   44|  64.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  64.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  64.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  64.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  54.1M|{
   30|  54.1M|    return e != eof_error::good;
   31|  54.1M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   174k|{
   91|   174k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   174k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  13.5M|    {
   69|  13.5M|        return a.m_code == b.m_code;
   70|  13.5M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  61.5M|    {
   55|  61.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  61.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  61.5M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   740k|    return [code, msg](parse_error err) {
  115|   740k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   740k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   740k|{
  100|   740k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 740k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   740k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 740k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   740k|    return scan_error{code, msg};
  109|   740k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   740k|{
  114|   740k|    return [code, msg](parse_error err) {
  115|   740k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   740k|    };
  117|   740k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.79M|{
  587|  2.79M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.79M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   142k|{
  595|   142k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   142k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   142k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|   142k|    else {
  600|   142k|        source.sync_all();
  601|   142k|    }
  602|   142k|    return n;
  603|   142k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.75M|{
  611|  2.75M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.75M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   426k|{
  619|   426k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   426k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   426k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 426k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   426k|    else {
  624|   426k|        source.sync_all();
  625|   426k|    }
  626|   426k|    return n;
  627|   426k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.79M|{
  544|  2.79M|    return vscan_internal(source, format, args);
  545|  2.79M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   142k|{
  550|   142k|    auto n = vscan_internal(source, format, args);
  551|   142k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   142k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|   142k|    else {
  555|   142k|        source.sync_all();
  556|   142k|    }
  557|   142k|    return n;
  558|   142k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.75M|{
  564|  2.75M|    return vscan_internal(source, format, args);
  565|  2.75M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   426k|{
  570|   426k|    auto n = vscan_internal(source, format, args);
  571|   426k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   426k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 426k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   426k|    else {
  575|   426k|        source.sync_all();
  576|   426k|    }
  577|   426k|    return n;
  578|   426k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   582k|{
  654|   582k|    return vscan_value_internal(source, arg);
  655|   582k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  14.2k|{
  659|  14.2k|    auto n = vscan_value_internal(source, arg);
  660|  14.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  14.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  14.2k|    else {
  664|  14.2k|        source.sync_all();
  665|  14.2k|    }
  666|  14.2k|    return n;
  667|  14.2k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   545k|{
  673|   545k|    return vscan_value_internal(source, arg);
  674|   545k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  42.6k|{
  679|  42.6k|    auto n = vscan_value_internal(source, arg);
  680|  42.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  42.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 42.6k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  42.6k|    else {
  684|  42.6k|        source.sync_all();
  685|  42.6k|    }
  686|  42.6k|    return n;
  687|  42.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   284k|{
  476|   284k|    const auto argcount = args.size();
  477|   284k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 28.4k, False: 256k]
  |  Branch (477:60): [True: 28.4k, False: 0]
  ------------------
  478|  28.4k|        auto arg = args.get(0);
  479|  28.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  28.4k|    static_cast<    \
  |  |  247|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  28.4k|    }
  481|       |
  482|   256k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 256k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   256k|    SCN_UNLIKELY_ATTR
  490|   256k|    {
  491|   256k|        auto handler = format_handler<false, CharT>{
  492|   256k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   256k|        return vscan_parse_format_string(format, handler);
  494|   256k|    }
  495|   256k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  5.87M|{
   36|  5.87M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 4.68M, False: 1.19M]
  ------------------
   37|  4.68M|        return false;
   38|  4.68M|    }
   39|  1.19M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.19M, False: 0]
  |  Branch (39:39): [True: 1.19M, False: 0]
  ------------------
   40|  5.87M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  42.6k|{
   69|  42.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  42.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  42.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 42.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  42.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  42.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  42.6k|    static_cast<    \
  |  |  247|  42.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  42.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.6k|    }                                                  \
  |  |  |  |   70|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  42.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  4.42M|    {
  314|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  9.87M|    {
  133|  9.87M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  9.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.87M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  9.87M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  4.42M|    {
  264|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.42M|{
  441|  4.42M|    const auto beg = handler.get_ctx().begin();
  442|  4.42M|    detail::parse_format_string<false>(format, handler);
  443|  4.42M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 4.16M]
  |  |  ------------------
  ------------------
  444|   256k|        return unexpected(handler.error);
  445|   256k|    }
  446|  4.16M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  30.2M|    {
  425|  30.2M|        return ctx.get();
  426|  30.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  30.2M|    {
  268|  30.2M|        return contiguous_ctx;
  269|  30.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  8.59M|    {
  318|  8.59M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 8.59M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  8.59M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.42M|{
   92|  4.42M|    auto arg = ctx.arg(id);
   93|  4.42M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.42M|    return arg;
   97|  4.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  9.87M|    {
  208|  9.87M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.87M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  9.87M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  9.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.87M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  9.87M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.87M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.87M, False: 0]
  |  |  ------------------
  ------------------
  218|  9.87M|            visited_args_lower64 |= (1ull << id);
  219|  9.87M|            return;
  220|  9.87M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  9.87M|    {
  193|  9.87M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.87M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  9.87M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.87M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.87M, False: 0]
  |  |  ------------------
  ------------------
  199|  9.87M|            return (visited_args_lower64 >> id) & 1ull;
  200|  9.87M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  9.87M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.36M|    {
  177|  1.36M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.36M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.36M|            error = err;
  179|  1.36M|        }
  180|  1.36M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  4.42M|    {
  347|  4.42M|        return parse_ctx.next_arg_id();
  348|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  4.42M|    {
  388|  4.42M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.42M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.42M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.42M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.42M|        auto specs = detail::format_specs{};
  401|  4.42M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.42M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.42M|            arg.type()};
  404|       |
  405|  4.42M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.42M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.42M]
  |  Branch (406:29): [True: 56.9k, False: 4.36M]
  ------------------
  407|  56.9k|            SCN_UNLIKELY_ATTR
  408|  56.9k|            on_error("Missing '}' in format string");
  409|  56.9k|            return parse_ctx.begin();
  410|  56.9k|        }
  411|  4.36M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.4k, False: 4.33M]
  |  |  ------------------
  ------------------
  412|  28.4k|            return parse_ctx.begin();
  413|  28.4k|        }
  414|  4.33M|        parse_ctx.advance_to(begin);
  415|       |
  416|  4.33M|        on_visit_scan_arg(
  417|  4.33M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  4.33M|                                           get_ctx().locale()},
  419|  4.33M|            arg);
  420|  4.33M|        return parse_ctx.begin();
  421|  4.36M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  4.42M|    {
  112|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  4.33M|    {
  359|  4.33M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 4.33M]
  |  Branch (359:23): [True: 0, False: 4.33M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  4.33M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  4.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  4.33M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 4.16M]
  |  |  ------------------
  ------------------
  366|   170k|            on_error(r.error());
  367|   170k|        }
  368|  4.16M|        else {
  369|  4.16M|            get_ctx().advance_to(*r);
  370|  4.16M|        }
  371|  4.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  1.13M|    {
  172|  1.13M|        SCN_UNLIKELY_ATTR
  173|  1.13M|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  1.13M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  9.87M|    {
  140|  9.87M|        {
  141|  9.87M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 9.87M]
  ------------------
  142|  9.87M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 9.87M]
  ------------------
  143|  9.87M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  9.87M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  9.87M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 9.87M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  9.87M|        }
  150|       |
  151|  9.87M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 9.87M, False: 0]
  ------------------
  152|  9.87M|            return;
  153|  9.87M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  9.87M|    {
  188|  9.87M|        return error;
  189|  9.87M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  28.9M|    {
  184|  28.9M|        return static_cast<bool>(error);
  185|  28.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   256k|    {
  314|   256k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   256k|    {
  241|   256k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   256k|{
  441|   256k|    const auto beg = handler.get_ctx().begin();
  442|   256k|    detail::parse_format_string<false>(format, handler);
  443|   256k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256k, False: 0]
  |  |  ------------------
  ------------------
  444|   256k|        return unexpected(handler.error);
  445|   256k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   256k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.11M|    {
  425|  1.11M|        return ctx.get();
  426|  1.11M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.11M|    {
  245|  1.11M|        return ctx;
  246|  1.11M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   256k|    {
  318|   256k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 256k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   256k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   256k|{
   92|   256k|    auto arg = ctx.arg(id);
   93|   256k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   256k|    return arg;
   97|   256k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   256k|    {
  347|   256k|        return parse_ctx.next_arg_id();
  348|   256k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   256k|    {
  388|   256k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   256k|        set_arg_as_visited(arg_id);
  390|       |
  391|   256k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 256k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   256k|        auto specs = detail::format_specs{};
  401|   256k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   256k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   256k|            arg.type()};
  404|       |
  405|   256k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   256k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 256k]
  |  Branch (406:29): [True: 56.9k, False: 199k]
  ------------------
  407|  56.9k|            SCN_UNLIKELY_ATTR
  408|  56.9k|            on_error("Missing '}' in format string");
  409|  56.9k|            return parse_ctx.begin();
  410|  56.9k|        }
  411|   199k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.4k, False: 170k]
  |  |  ------------------
  ------------------
  412|  28.4k|            return parse_ctx.begin();
  413|  28.4k|        }
  414|   170k|        parse_ctx.advance_to(begin);
  415|       |
  416|   170k|        on_visit_scan_arg(
  417|   170k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   170k|                                           get_ctx().locale()},
  419|   170k|            arg);
  420|   170k|        return parse_ctx.begin();
  421|   199k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   256k|    {
  112|   256k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   170k|    {
  359|   170k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 170k]
  |  Branch (359:23): [True: 0, False: 170k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   170k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   170k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 0]
  |  |  ------------------
  ------------------
  366|   170k|            on_error(r.error());
  367|   170k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   170k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  5.58M|{
  456|  5.58M|    const auto argcount = args.size();
  457|  5.58M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.16M, False: 4.42M]
  |  Branch (457:60): [True: 1.16M, False: 0]
  ------------------
  458|  1.16M|        auto arg = args.get(0);
  459|  1.16M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.16M|    static_cast<    \
  |  |  247|  1.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.16M|    }
  461|       |
  462|  4.42M|    auto handler = format_handler<true, CharT>{
  463|  4.42M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.42M|                                       source.data() + source.size()},
  465|  4.42M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.42M|    static_cast<    \
  |  |  247|  4.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.42M|    static_cast<    \
  |  |  247|  4.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.42M|    return vscan_parse_format_string(format, handler);
  467|  5.58M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.74M|{
   49|  1.74M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.74M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.74M|    auto reader =
   55|  1.74M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.74M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.74M|                                           source.data() + source.size()},
   58|  1.74M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.74M|    static_cast<    \
  |  |  247|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.74M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.74M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.6k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.6k|    }                                                  \
  |  |  |  |   70|  1.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.70M|    return ranges::distance(source.data(), it);
   61|  1.74M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  5.51M|{
  456|  5.51M|    const auto argcount = args.size();
  457|  5.51M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.09M, False: 4.42M]
  |  Branch (457:60): [True: 1.09M, False: 0]
  ------------------
  458|  1.09M|        auto arg = args.get(0);
  459|  1.09M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.09M|    static_cast<    \
  |  |  247|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.09M|    }
  461|       |
  462|  4.42M|    auto handler = format_handler<true, CharT>{
  463|  4.42M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.42M|                                       source.data() + source.size()},
  465|  4.42M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.42M|    static_cast<    \
  |  |  247|  4.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.42M|    static_cast<    \
  |  |  247|  4.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.42M|    return vscan_parse_format_string(format, handler);
  467|  5.51M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  6.37M|{
   36|  6.37M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 5.19M, False: 1.17M]
  ------------------
   37|  5.19M|        return false;
   38|  5.19M|    }
   39|  1.17M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.17M, False: 0]
  |  Branch (39:39): [True: 1.17M, False: 0]
  ------------------
   40|  6.37M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.63M|{
   49|  1.63M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.63M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.63M|    auto reader =
   55|  1.63M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.63M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.63M|                                           source.data() + source.size()},
   58|  1.63M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.63M|    static_cast<    \
  |  |  247|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.63M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.63M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 128k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   128k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   128k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   128k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   128k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   128k|    }                                                  \
  |  |  |  |   70|  1.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.50M|    return ranges::distance(source.data(), it);
   61|  1.63M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  4.42M|    {
  314|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  4.42M|    {
  264|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.42M|{
  441|  4.42M|    const auto beg = handler.get_ctx().begin();
  442|  4.42M|    detail::parse_format_string<false>(format, handler);
  443|  4.42M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 768k, False: 3.65M]
  |  |  ------------------
  ------------------
  444|   768k|        return unexpected(handler.error);
  445|   768k|    }
  446|  3.65M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  28.9M|    {
  425|  28.9M|        return ctx.get();
  426|  28.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  28.9M|    {
  268|  28.9M|        return contiguous_ctx;
  269|  28.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  8.08M|    {
  318|  8.08M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 8.08M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  8.08M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.42M|{
   92|  4.42M|    auto arg = ctx.arg(id);
   93|  4.42M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.42M|    return arg;
   97|  4.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  4.42M|    {
  347|  4.42M|        return parse_ctx.next_arg_id();
  348|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  4.42M|    {
  388|  4.42M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.42M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.42M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.42M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.42M|        auto specs = detail::format_specs{};
  401|  4.42M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.42M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.42M|            arg.type()};
  404|       |
  405|  4.42M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.42M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.42M]
  |  Branch (406:29): [True: 170k, False: 4.25M]
  ------------------
  407|   170k|            SCN_UNLIKELY_ATTR
  408|   170k|            on_error("Missing '}' in format string");
  409|   170k|            return parse_ctx.begin();
  410|   170k|        }
  411|  4.25M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 4.17M]
  |  |  ------------------
  ------------------
  412|  85.3k|            return parse_ctx.begin();
  413|  85.3k|        }
  414|  4.17M|        parse_ctx.advance_to(begin);
  415|       |
  416|  4.17M|        on_visit_scan_arg(
  417|  4.17M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  4.17M|                                           get_ctx().locale()},
  419|  4.17M|            arg);
  420|  4.17M|        return parse_ctx.begin();
  421|  4.25M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  4.42M|    {
  112|  4.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  4.17M|    {
  359|  4.17M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 4.17M]
  |  Branch (359:23): [True: 0, False: 4.17M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  4.17M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  4.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  4.17M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  4.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 512k, False: 3.65M]
  |  |  ------------------
  ------------------
  366|   512k|            on_error(r.error());
  367|   512k|        }
  368|  3.65M|        else {
  369|  3.65M|            get_ctx().advance_to(*r);
  370|  3.65M|        }
  371|  4.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   853k|{
  476|   853k|    const auto argcount = args.size();
  477|   853k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 85.3k, False: 768k]
  |  Branch (477:60): [True: 85.3k, False: 0]
  ------------------
  478|  85.3k|        auto arg = args.get(0);
  479|  85.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  85.3k|    static_cast<    \
  |  |  247|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  85.3k|    }
  481|       |
  482|   768k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 768k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   768k|    SCN_UNLIKELY_ATTR
  490|   768k|    {
  491|   768k|        auto handler = format_handler<false, CharT>{
  492|   768k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   768k|    static_cast<    \
  |  |  247|   768k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   768k|    static_cast<    \
  |  |  247|   768k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   768k|        return vscan_parse_format_string(format, handler);
  494|   768k|    }
  495|   768k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   128k|{
   69|   128k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   128k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   128k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   128k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   128k|    static_cast<    \
  |  |  247|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   128k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 128k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   128k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   128k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   128k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   128k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   128k|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|   128k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   768k|    {
  314|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   768k|    {
  241|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   768k|{
  441|   768k|    const auto beg = handler.get_ctx().begin();
  442|   768k|    detail::parse_format_string<false>(format, handler);
  443|   768k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 768k, False: 0]
  |  |  ------------------
  ------------------
  444|   768k|        return unexpected(handler.error);
  445|   768k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   768k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  3.33M|    {
  425|  3.33M|        return ctx.get();
  426|  3.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  3.33M|    {
  245|  3.33M|        return ctx;
  246|  3.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   768k|    {
  318|   768k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 768k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   768k|{
   92|   768k|    auto arg = ctx.arg(id);
   93|   768k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   768k|    return arg;
   97|   768k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   768k|    {
  347|   768k|        return parse_ctx.next_arg_id();
  348|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   768k|    {
  388|   768k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   768k|        set_arg_as_visited(arg_id);
  390|       |
  391|   768k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 768k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   768k|        auto specs = detail::format_specs{};
  401|   768k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   768k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   768k|            arg.type()};
  404|       |
  405|   768k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   768k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 768k]
  |  Branch (406:29): [True: 170k, False: 597k]
  ------------------
  407|   170k|            SCN_UNLIKELY_ATTR
  408|   170k|            on_error("Missing '}' in format string");
  409|   170k|            return parse_ctx.begin();
  410|   170k|        }
  411|   597k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 512k]
  |  |  ------------------
  ------------------
  412|  85.3k|            return parse_ctx.begin();
  413|  85.3k|        }
  414|   512k|        parse_ctx.advance_to(begin);
  415|       |
  416|   512k|        on_visit_scan_arg(
  417|   512k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   512k|                                           get_ctx().locale()},
  419|   512k|            arg);
  420|   512k|        return parse_ctx.begin();
  421|   597k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   768k|    {
  112|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   512k|    {
  359|   512k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 512k]
  |  Branch (359:23): [True: 0, False: 512k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   512k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   512k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 512k, False: 0]
  |  |  ------------------
  ------------------
  366|   512k|            on_error(r.error());
  367|   512k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   512k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   582k|{
  502|   582k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   582k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  14.2k|{
  502|  14.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  14.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   545k|{
  502|   545k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   545k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  42.6k|{
  502|  42.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  42.6k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  2.37k|{
   54|  2.37k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  2.37k|    std::copy(data.begin(), data.end(),
   59|  2.37k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  2.37k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  2.37k|    wstring_buffer_direct.resize(data.size());
   64|  2.37k|    std::copy(data.begin(), data.end(),
   65|  2.37k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  2.37k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  2.37k|    const auto wsv_reinterpret_size =
   70|  2.37k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 124, False: 2.24k]
  ------------------
   71|  2.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  2.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  2.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  2.37k|    std::wstring_view wsv_transcoded;
   77|  2.37k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 518, False: 1.85k]
  ------------------
   78|    518|        wsv_transcoded = {wstring_buffer_direct};
   79|    518|    }
   80|  1.85k|    else {
   81|  1.85k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  1.85k|        else {
   90|  1.85k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  1.85k|            wstring_buffer_transcoded_wide.resize(size);
   92|  1.85k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  1.85k|                sv.data(), sv.size(),
   94|  1.85k|                reinterpret_cast<char32_t*>(
   95|  1.85k|                    wstring_buffer_transcoded_wide.data()));
   96|  1.85k|        }
   97|  1.85k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  1.85k|    }
   99|       |
  100|  2.37k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.37k|{
  151|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.37k|    buf.resize(sizeof...(Args));
  154|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.37k|    return {buf.data(), buf.size()};
  156|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  2.37k|{
  137|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.37k|        return format_string_view_buffer;
  139|  2.37k|    }
  140|  2.37k|    else {
  141|  2.37k|        return wformat_string_view_buffer;
  142|  2.37k|    }
  143|  2.37k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  2.37k|{
  211|  2.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  2.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  2.37k|                                   format_strings);
  214|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   369k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   369k|            auto result = scn::scan<T>(
  167|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   369k|                scn::runtime_format(f));
  169|   369k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 345k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   345k|            it = result->begin();
  173|   345k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   369k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   369k|            auto result = scn::scan<T>(
  181|   369k|                global_locale,
  182|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   369k|                scn::runtime_format(f));
  184|   369k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 345k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   345k|            it = result->begin();
  188|   345k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  83.6k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  83.6k|            auto result = scn::scan_value<T>(
  196|  83.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  83.6k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 81.2k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|  81.2k|            it = result->begin();
  201|  81.2k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   363k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   363k|            auto result = scn::scan<T>(
  167|   363k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   363k|                scn::runtime_format(f));
  169|   363k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 339k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   339k|            it = result->begin();
  173|   339k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   363k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   363k|            auto result = scn::scan<T>(
  181|   363k|                global_locale,
  182|   363k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   363k|                scn::runtime_format(f));
  184|   363k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 339k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   339k|            it = result->begin();
  188|   339k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  79.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  79.4k|            auto result = scn::scan_value<T>(
  196|  79.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  79.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 77.0k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|  77.0k|            it = result->begin();
  201|  77.0k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   555k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   555k|            auto result = scn::scan<T>(
  167|   555k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   555k|                scn::runtime_format(f));
  169|   555k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 531k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   531k|            it = result->begin();
  173|   531k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   555k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   555k|            auto result = scn::scan<T>(
  181|   555k|                global_locale,
  182|   555k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   555k|                scn::runtime_format(f));
  184|   555k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 531k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   531k|            it = result->begin();
  188|   531k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|   111k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   111k|            auto result = scn::scan_value<T>(
  196|   111k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   111k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 109k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|   109k|            it = result->begin();
  201|   109k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   455k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   455k|            auto result = scn::scan<T>(
  167|   455k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   455k|                scn::runtime_format(f));
  169|   455k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 431k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   431k|            it = result->begin();
  173|   431k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   455k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   455k|            auto result = scn::scan<T>(
  181|   455k|                global_locale,
  182|   455k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   455k|                scn::runtime_format(f));
  184|   455k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 431k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   431k|            it = result->begin();
  188|   431k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  93.5k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  93.5k|            auto result = scn::scan_value<T>(
  196|  93.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  93.5k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 91.2k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|  91.2k|            it = result->begin();
  201|  91.2k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   581k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   581k|            auto result = scn::scan<T>(
  167|   581k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   581k|                scn::runtime_format(f));
  169|   581k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 558k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   558k|            it = result->begin();
  173|   558k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   581k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   581k|            auto result = scn::scan<T>(
  181|   581k|                global_locale,
  182|   581k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   581k|                scn::runtime_format(f));
  184|   581k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 558k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   558k|            it = result->begin();
  188|   558k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|   117k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   117k|            auto result = scn::scan_value<T>(
  196|   117k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   117k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 115k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|   115k|            it = result->begin();
  201|   115k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|   470k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   470k|            auto result = scn::scan<T>(
  167|   470k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   470k|                scn::runtime_format(f));
  169|   470k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 446k]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|   446k|            it = result->begin();
  173|   446k|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|   470k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   470k|            auto result = scn::scan<T>(
  181|   470k|                global_locale,
  182|   470k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   470k|                scn::runtime_format(f));
  184|   470k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 446k]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|   446k|            it = result->begin();
  188|   446k|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  96.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  96.1k|            auto result = scn::scan_value<T>(
  196|  96.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  96.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 93.8k]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|  93.8k|            it = result->begin();
  201|  93.8k|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.37k|{
  162|       |    // Regular scan
  163|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.7k, False: 2.37k]
  ------------------
  164|  23.7k|        auto it = scn::ranges::begin(source);
  165|  23.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  23.7k|            auto result = scn::scan<T>(
  167|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  23.7k|                scn::runtime_format(f));
  169|  23.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.7k, False: 0]
  ------------------
  170|  23.7k|                break;
  171|  23.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  23.7k|    }
  175|       |
  176|       |    // scan localized
  177|  23.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.7k, False: 2.37k]
  ------------------
  178|  23.7k|        auto it = scn::ranges::begin(source);
  179|  23.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  23.7k|            auto result = scn::scan<T>(
  181|  23.7k|                global_locale,
  182|  23.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  23.7k|                scn::runtime_format(f));
  184|  23.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.7k, False: 0]
  ------------------
  185|  23.7k|                break;
  186|  23.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  23.7k|    }
  190|       |
  191|       |    // scan_value
  192|  2.37k|    {
  193|  2.37k|        auto it = scn::ranges::begin(source);
  194|  2.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.37k|            auto result = scn::scan_value<T>(
  196|  2.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.37k, False: 0]
  ------------------
  198|  2.37k|                break;
  199|  2.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.37k|    }
  203|  2.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  2.37k|{
  120|  2.37k|    using char_type = ranges::range_value_t<Source>;
  121|  2.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  2.37k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  2.37k|              std::back_inserter(deque));
  124|  2.37k|    return deque;
  125|  2.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  2.37k|{
  109|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  2.37k|        return noncontiguous_buffer;
  111|  2.37k|    }
  112|  2.37k|    else {
  113|  2.37k|        return wnoncontiguous_buffer;
  114|  2.37k|    }
  115|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.37k|{
  151|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.37k|    buf.resize(sizeof...(Args));
  154|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.37k|    return {buf.data(), buf.size()};
  156|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  2.37k|{
  137|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.37k|        return format_string_view_buffer;
  139|  2.37k|    }
  140|  2.37k|    else {
  141|  2.37k|        return wformat_string_view_buffer;
  142|  2.37k|    }
  143|  2.37k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  7.11k|{
  211|  7.11k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  7.11k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  7.11k|                                   format_strings);
  214|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   371k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   371k|            auto result = scn::scan<T>(
  167|   371k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   371k|                scn::runtime_format(f));
  169|   371k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 300k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   300k|            it = result->begin();
  173|   300k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   371k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   371k|            auto result = scn::scan<T>(
  181|   371k|                global_locale,
  182|   371k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   371k|                scn::runtime_format(f));
  184|   371k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 300k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   300k|            it = result->begin();
  188|   300k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  78.3k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  78.3k|            auto result = scn::scan_value<T>(
  196|  78.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  78.3k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 71.2k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|  71.2k|            it = result->begin();
  201|  71.2k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   373k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   373k|            auto result = scn::scan<T>(
  167|   373k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   373k|                scn::runtime_format(f));
  169|   373k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 302k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   302k|            it = result->begin();
  173|   302k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   373k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   373k|            auto result = scn::scan<T>(
  181|   373k|                global_locale,
  182|   373k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   373k|                scn::runtime_format(f));
  184|   373k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 302k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   302k|            it = result->begin();
  188|   302k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  76.2k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  76.2k|            auto result = scn::scan_value<T>(
  196|  76.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  76.2k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 69.1k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|  69.1k|            it = result->begin();
  201|  69.1k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   532k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   532k|            auto result = scn::scan<T>(
  167|   532k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   532k|                scn::runtime_format(f));
  169|   532k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 461k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   461k|            it = result->begin();
  173|   461k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   532k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   532k|            auto result = scn::scan<T>(
  181|   532k|                global_locale,
  182|   532k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   532k|                scn::runtime_format(f));
  184|   532k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 461k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   461k|            it = result->begin();
  188|   461k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|   102k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   102k|            auto result = scn::scan_value<T>(
  196|   102k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   102k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 95.5k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|  95.5k|            it = result->begin();
  201|  95.5k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   455k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   455k|            auto result = scn::scan<T>(
  167|   455k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   455k|                scn::runtime_format(f));
  169|   455k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 384k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   384k|            it = result->begin();
  173|   384k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   455k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   455k|            auto result = scn::scan<T>(
  181|   455k|                global_locale,
  182|   455k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   455k|                scn::runtime_format(f));
  184|   455k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 384k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   384k|            it = result->begin();
  188|   384k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  88.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  88.9k|            auto result = scn::scan_value<T>(
  196|  88.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  88.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 81.7k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|  81.7k|            it = result->begin();
  201|  81.7k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   556k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   556k|            auto result = scn::scan<T>(
  167|   556k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   556k|                scn::runtime_format(f));
  169|   556k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 484k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   484k|            it = result->begin();
  173|   484k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   556k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   556k|            auto result = scn::scan<T>(
  181|   556k|                global_locale,
  182|   556k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   556k|                scn::runtime_format(f));
  184|   556k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 484k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   484k|            it = result->begin();
  188|   484k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|   107k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   107k|            auto result = scn::scan_value<T>(
  196|   107k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   107k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 100k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|   100k|            it = result->begin();
  201|   100k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|   468k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   468k|            auto result = scn::scan<T>(
  167|   468k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   468k|                scn::runtime_format(f));
  169|   468k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 397k]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|   397k|            it = result->begin();
  173|   397k|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|   468k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   468k|            auto result = scn::scan<T>(
  181|   468k|                global_locale,
  182|   468k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   468k|                scn::runtime_format(f));
  184|   468k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 397k]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|   397k|            it = result->begin();
  188|   397k|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  91.0k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  91.0k|            auto result = scn::scan_value<T>(
  196|  91.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  91.0k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 83.9k]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|  83.9k|            it = result->begin();
  201|  83.9k|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  7.11k|{
  162|       |    // Regular scan
  163|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 71.1k, False: 7.11k]
  ------------------
  164|  71.1k|        auto it = scn::ranges::begin(source);
  165|  71.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.1k|            auto result = scn::scan<T>(
  167|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  71.1k|                scn::runtime_format(f));
  169|  71.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 71.1k, False: 0]
  ------------------
  170|  71.1k|                break;
  171|  71.1k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  71.1k|    }
  175|       |
  176|       |    // scan localized
  177|  71.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 71.1k, False: 7.11k]
  ------------------
  178|  71.1k|        auto it = scn::ranges::begin(source);
  179|  71.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  71.1k|            auto result = scn::scan<T>(
  181|  71.1k|                global_locale,
  182|  71.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  71.1k|                scn::runtime_format(f));
  184|  71.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 71.1k, False: 0]
  ------------------
  185|  71.1k|                break;
  186|  71.1k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  71.1k|    }
  190|       |
  191|       |    // scan_value
  192|  7.11k|    {
  193|  7.11k|        auto it = scn::ranges::begin(source);
  194|  7.11k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  7.11k|            auto result = scn::scan_value<T>(
  196|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  7.11k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 7.11k, False: 0]
  ------------------
  198|  7.11k|                break;
  199|  7.11k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  7.11k|    }
  203|  7.11k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  7.11k|{
  120|  7.11k|    using char_type = ranges::range_value_t<Source>;
  121|  7.11k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  7.11k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  7.11k|              std::back_inserter(deque));
  124|  7.11k|    return deque;
  125|  7.11k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  7.11k|{
  109|  7.11k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  7.11k|        return noncontiguous_buffer;
  111|  7.11k|    }
  112|  7.11k|    else {
  113|  7.11k|        return wnoncontiguous_buffer;
  114|  7.11k|    }
  115|  7.11k|}

LLVMFuzzerTestOneInput:
   59|  2.37k|{
   60|  2.37k|    scn::fuzz::run({data, size});
   61|  2.37k|    return 0;
   62|  2.37k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.37k|{
   36|  2.37k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.37k]
  |  Branch (36:42): [True: 0, False: 2.37k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.37k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   41|  2.37k|        make_input_views(data);
   42|       |
   43|  2.37k|    auto f =
   44|  2.37k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   45|  2.37k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   46|  2.37k|    do_basic_run(sv, f);
   47|       |
   48|  2.37k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   49|  2.37k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   50|  2.37k|                                          L"{:'}", L"{:'L}");
   51|  2.37k|    do_basic_run(wsv_direct, wf);
   52|  2.37k|    do_basic_run(wsv_reinterpret, wf);
   53|  2.37k|    do_basic_run(wsv_transcode, wf);
   54|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  7.11k|{
   25|  7.11k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  7.11k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  7.11k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  7.11k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  7.11k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  7.11k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  7.11k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  7.11k|{
   25|  7.11k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  7.11k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  7.11k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  7.11k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  7.11k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  7.11k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  7.11k|}

