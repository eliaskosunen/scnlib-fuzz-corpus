_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   918k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   277k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   279k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   285k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   285k|  return idx < lenminusstep;
   70|   285k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  5.52k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  5.52k|  return &buf[idx];
   75|  5.52k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   285k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   285k|  idx += STEP_SIZE;
   88|   285k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   279k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   279k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 279k]
  ------------------
   80|   279k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   279k|  std::memcpy(dst, buf + idx, len - idx);
   82|   279k|  return len - idx;
   83|   279k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   140k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   140k|    size_t pos = 0;
   12|   140k|    size_t count = 0;
   13|   144k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 4.23k, False: 140k]
  ------------------
   14|  4.23k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  4.23k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  4.23k|      count += count_ones(utf8_continuation_mask);
   17|  4.23k|    }
   18|   140k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   140k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   496k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   357k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   357k|      size_t pos = 0;
  131|   357k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   357k|      size_t leading_byte = 0;
  139|   357k|      size_t margin = size;
  140|  1.14M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 788k, False: 357k]
  |  Branch (140:27): [True: 788k, False: 0]
  ------------------
  141|   788k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   788k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   357k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   357k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 357k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   357k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 357k]
  ------------------
  195|   357k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 357k, False: 0]
  ------------------
  196|   357k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   357k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 142k, False: 215k]
  ------------------
  198|   215k|        utf32_output += howmany;
  199|   215k|      }
  200|   215k|      return utf32_output - start;
  201|   357k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   496k|    simdutf_really_inline bool errors() const {
  291|   496k|      return this->error.any_bits_set_anywhere();
  292|   496k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|   138k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|   138k|      size_t pos = 0;
  205|   138k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|   138k|      size_t leading_byte = 0;
  213|   138k|      size_t margin = size;
  214|   277k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 138k, False: 138k]
  |  Branch (214:27): [True: 138k, False: 0]
  ------------------
  215|   138k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   138k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|   138k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|   138k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 138k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|   138k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 138k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|   138k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 138k, False: 0]
  ------------------
  279|   138k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|   138k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 138k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|   138k|        } else {    // In case of success, we want the number of word written
  284|   138k|          utf32_output += res.count;
  285|   138k|        }
  286|   138k|      }
  287|   138k|      return result(error_code::SUCCESS, utf32_output - start);
  288|   138k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.56k|    char32_t* utf32_output) noexcept {
   13|  1.56k|  size_t pos = 0;
   14|  1.56k|  char32_t* start{utf32_output};
   15|  1.56k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  5.71k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.15k, False: 1.56k]
  ------------------
   17|  4.15k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.15k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 3.37k, False: 776]
  ------------------
   19|  3.37k|      in.store_ascii_as_utf32(utf32_output);
   20|  3.37k|      utf32_output += 64;
   21|  3.37k|      pos += 64;
   22|  3.37k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    776|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    776|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    776|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    776|    size_t max_starting_point = (pos + 64) - 12;
   28|  5.63k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 4.85k, False: 776]
  ------------------
   29|  4.85k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  4.85k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  4.85k|      pos += consumed;
   32|  4.85k|      utf8_end_of_code_point_mask >>= consumed;
   33|  4.85k|      }
   34|    776|    }
   35|  4.15k|  }
   36|  1.56k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.56k|  return utf32_output - start;
   38|  1.56k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   285k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   285k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   285k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 144k, False: 140k]
  |  |  ------------------
  ------------------
  154|   144k|        this->error |= this->prev_incomplete;
  155|   144k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|   140k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|   140k|            "We support either two or four chunks per 64-byte block.");
  159|   140k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|   140k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|   140k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|   140k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|   140k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|   140k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|   140k|      }
  172|   285k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|   280k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|   280k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|   280k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|   280k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|   280k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|   280k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|   280k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|   280k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|   280k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|   280k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|   280k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|   280k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|   280k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|   280k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|   280k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|   280k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|   280k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|   280k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|   280k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|   280k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|   280k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|   280k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|   280k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|   280k|    );
   51|   280k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|   280k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|   280k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|   280k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|   280k|      CARRY,
   59|   280k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|   280k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|   280k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|   280k|    );
   80|   280k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|   280k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|   280k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|   280k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|   280k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|   280k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|   280k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|   280k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|   280k|    );
   96|   280k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|   280k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|   280k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|   280k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|   280k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|   280k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|   280k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|   280k|    return must23_80 ^ sc;
  105|   280k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|   140k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|   140k|    static const uint8_t max_array[32] = {
  115|   140k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|   140k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|   140k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|   140k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|   140k|    };
  120|   140k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|   140k|    return input.gt_bits(max_value);
  122|   140k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   279k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   279k|      this->error |= this->prev_incomplete;
  150|   279k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   279k|    simdutf_really_inline bool errors() const {
  176|   279k|      return this->error.any_bits_set_anywhere();
  177|   279k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   279k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   279k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   279k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   279k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   279k|    checker c{};
   12|   279k|    buf_block_reader<64> reader(input, length);
   13|   285k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 5.52k, False: 279k]
  ------------------
   14|  5.52k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  5.52k|      c.check_next_input(in);
   16|  5.52k|      reader.advance();
   17|  5.52k|    }
   18|   279k|    uint8_t block[64]{};
   19|   279k|    reader.get_remainder(block);
   20|   279k|    simd::simd8x64<uint8_t> in(block);
   21|   279k|    c.check_next_input(in);
   22|   279k|    reader.advance();
   23|   279k|    c.check_eof();
   24|   279k|    return !c.errors();
   25|   279k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  4.85k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  4.85k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  4.85k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  4.85k|      utf8_end_of_code_point_mask & 0xfff;
   24|  4.85k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.20k, False: 3.65k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.20k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.20k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.20k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.20k|    return 16; // We consumed 16 bytes.
   30|  1.20k|  }
   31|  3.65k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 114, False: 3.54k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    114|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    114|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    114|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    114|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    114|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    114|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    114|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    114|    return 16;
   42|    114|  }
   43|  3.54k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 3.47k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.47k|  const uint8_t idx =
   65|  3.47k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.47k|  const uint8_t consumed =
   67|  3.47k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.47k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.08k, False: 1.38k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.08k|    const __m128i sh =
   75|  2.08k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.08k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.08k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.08k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.08k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.08k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.08k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.08k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.23k, False: 155]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.23k|    const __m128i sh =
   86|  1.23k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.23k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.23k|    const __m128i ascii =
   89|  1.23k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.23k|    const __m128i middlebyte =
   91|  1.23k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.23k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.23k|    const __m128i highbyte =
   94|  1.23k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.23k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.23k|    const __m128i composed =
   97|  1.23k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.23k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.23k|    utf32_output += 4;
  100|  1.23k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 155, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    155|    const __m128i sh =
  103|    155|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    155|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    155|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    155|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    155|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    155|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    155|    const __m128i correct =
  111|    155|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    155|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    155|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    155|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    155|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    155|    const __m128i composed =
  117|    155|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    155|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    155|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    155|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    155|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.47k|  return consumed;
  125|  3.54k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   279k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   279k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   279k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   357k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   357k|  utf8_to_utf32::validating_transcoder converter;
  276|   357k|  return converter.convert(buf, len, utf32_output);
  277|   357k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|   138k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|   138k|  utf8_to_utf32::validating_transcoder converter;
  281|   138k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|   138k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.56k|    char32_t* utf32_output) const noexcept {
  286|  1.56k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.56k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   140k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   140k|  return utf8::count_code_points(input, length);
  778|   140k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   285k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   285k|  return input.reduce_or().is_ascii();
   25|   285k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|   280k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|   280k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|   280k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|   280k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|   280k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   918k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   918k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   918k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   918k|    return active_implementation;
  815|   918k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   279k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   279k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   279k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   357k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   357k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   357k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|   138k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|   138k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|   138k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.56k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.56k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.56k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   140k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   140k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   140k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   140k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   140k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   140k|    size_t counter{0};
  171|   315k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 175k, False: 140k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   175k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 175k, False: 469]
  ------------------
  174|   175k|    }
  175|   140k|    return counter;
  176|   140k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   357k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   357k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   357k|  size_t pos = 0;
   12|   357k|  char32_t* start{utf32_output};
   13|   573k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 357k, False: 215k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   357k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 357k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   357k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   357k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 209k, False: 148k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   209k|      *utf32_output++ = char32_t(leading_byte);
   34|   209k|      pos++;
   35|   209k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.69k, False: 142k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.69k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.69k]
  ------------------
   38|  5.69k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.92k, False: 3.76k]
  ------------------
   39|       |      // range check
   40|  3.76k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.76k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 3.62k]
  |  Branch (41:32): [True: 0, False: 3.62k]
  ------------------
   42|  3.62k|      *utf32_output++ = char32_t(code_point);
   43|  3.62k|      pos += 2;
   44|   142k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.15k, False: 140k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.15k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.15k]
  ------------------
   47|       |
   48|  2.15k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 523, False: 1.63k]
  ------------------
   49|  1.63k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.49k]
  ------------------
   50|       |      // range check
   51|  1.49k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.49k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.49k|                   (data[pos + 2] & 0b00111111);
   54|  1.49k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.35k]
  |  Branch (54:33): [True: 0, False: 1.35k]
  ------------------
   55|  1.49k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 298, False: 1.05k]
  |  Branch (55:35): [True: 141, False: 157]
  ------------------
   56|    282|        return 0;
   57|    282|      }
   58|  1.21k|      *utf32_output++ = char32_t(code_point);
   59|  1.21k|      pos += 3;
   60|   140k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 140k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|   140k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 140k]
  ------------------
   63|   140k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 138k, False: 1.57k]
  ------------------
   64|  1.57k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.43k]
  ------------------
   65|  1.43k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 171, False: 1.25k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.25k|      uint32_t code_point =
   69|  1.25k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.25k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.25k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 992]
  |  Branch (71:35): [True: 141, False: 851]
  ------------------
   72|    851|      *utf32_output++ = char32_t(code_point);
   73|    851|      pos += 4;
   74|    851|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   357k|  }
   78|   215k|  return utf32_output - start;
   79|   357k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|   138k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|   138k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|   138k|  size_t pos = 0;
   84|   138k|  char32_t* start{utf32_output};
   85|   277k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 138k, False: 138k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   138k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 138k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|   138k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   138k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 138k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   138k|      *utf32_output++ = char32_t(leading_byte);
  106|   138k|      pos++;
  107|   138k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|   138k|  }
  151|   138k|  return result(error_code::SUCCESS, utf32_output - start);
  152|   138k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|   138k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|   138k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|   138k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|   138k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 138k, False: 0]
  ------------------
  172|   138k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|   138k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 138k, False: 0]
  ------------------
  175|   138k|    unsigned char byte = buf[0-i];
  176|   138k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|   138k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 138k, False: 0]
  ------------------
  178|   138k|      buf -= i;
  179|   138k|      extra_len = i;
  180|   138k|      break;
  181|   138k|    }
  182|   138k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|   138k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 138k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|   138k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|   138k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 138k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|   138k|  return res;
  202|   138k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.56k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.56k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.56k|  size_t pos = 0;
   12|  1.56k|  char32_t* start{utf32_output};
   13|  12.6k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 11.0k, False: 1.56k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  11.0k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.80k, False: 5.23k]
  ------------------
   16|  5.80k|      uint64_t v;
   17|  5.80k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.80k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 5.40k, False: 406]
  ------------------
   19|  5.40k|        size_t final_pos = pos + 8;
   20|  48.6k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 43.2k, False: 5.40k]
  ------------------
   21|  43.2k|          *utf32_output++ = char32_t(buf[pos]);
   22|  43.2k|          pos++;
   23|  43.2k|        }
   24|  5.40k|        continue;
   25|  5.40k|      }
   26|  5.80k|    }
   27|  5.63k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.63k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.35k, False: 280]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.35k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.35k|      pos++;
   32|  5.35k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 152, False: 128]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    152|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 152]
  ------------------
   35|    152|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    152|      pos += 2;
   37|    152|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 62, False: 66]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     62|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 62]
  ------------------
   40|     62|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     62|      pos += 3;
   42|     66|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 66, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     66|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 66]
  ------------------
   45|     66|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     66|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     66|      *utf32_output++ = char32_t(code_word);
   48|     66|      pos += 4;
   49|     66|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.63k|  }
   54|  1.56k|  return utf32_output - start;
   55|  1.56k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  4.23k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  4.23k|  return _popcnt64(input_num);
   16|  4.23k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   838k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   838k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   838k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   838k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   285k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   710k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   710k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   710k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  10.2M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  10.2M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  10.2M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  10.2M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   285k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   285k|      return this->chunks[0] | this->chunks[1];
  297|   285k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.27M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  13.6M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   285k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   704k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|   280k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   280k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   280k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|   561k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|   842k|        L replace12, L replace13, L replace14, L replace15) const {
  139|   842k|      return lookup_16(simd8<L>::repeat_16(
  140|   842k|        replace0,  replace1,  replace2,  replace3,
  141|   842k|        replace4,  replace5,  replace6,  replace7,
  142|   842k|        replace8,  replace9,  replace10, replace11,
  143|   842k|        replace12, replace13, replace14, replace15
  144|   842k|      ));
  145|   842k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|   842k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|   842k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|   842k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  1.12M|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|   842k|    ) {
  218|   842k|      return simd8<uint8_t>(
  219|   842k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|   842k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|   842k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|   842k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|   842k|      );
  224|   842k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|   842k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  1.68M|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  2.18M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  2.18M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|   280k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   280k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   280k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|   280k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   280k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   280k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|   702k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|   587k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|   587k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|   587k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|   587k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|   289k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   621k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|   290k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|   290k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|   290k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|   280k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|   285k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|   280k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|   280k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|   140k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|   140k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   776k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   776k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  8.38k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  16.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  16.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  16.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.15k|    simdutf_really_inline bool is_ascii() const {
  300|  4.15k|      return this->reduce_or().is_ascii();
  301|  4.15k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.15k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.15k|      return this->chunks[0] | this->chunks[1];
  297|  4.15k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.15k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.15k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    776|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    776|      const simd8<T> mask = simd8<T>::splat(m);
  364|    776|      return  simd8x64<bool>(
  365|    776|        this->chunks[0] < mask,
  366|    776|        this->chunks[1] < mask
  367|    776|      ).to_bitmask();
  368|    776|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.55k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  5.00k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  5.00k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  5.00k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  5.00k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  5.00k|      return r_lo | (r_hi << 32);
  287|  5.00k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  10.0k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  10.0k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  3.37k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  3.37k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  3.37k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  3.37k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  6.74k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  6.74k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  6.74k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  6.74k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  6.74k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  6.74k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  4.23k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  4.23k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  4.23k|      return  simd8x64<bool>(
  373|  4.23k|        this->chunks[0] > mask,
  374|  4.23k|        this->chunks[1] > mask
  375|  4.23k|      ).to_bitmask();
  376|  4.23k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   507k|{
  619|   507k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   507k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   507k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.11M|{
  387|  1.11M|    static_assert(
  388|  1.11M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.11M|        "Scan argument types must be default constructible");
  390|  1.11M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.11M|                  "Scan argument types must be Destructible");
  392|  1.11M|    static_assert(
  393|  1.11M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.11M|        "Scan argument types must not be references");
  395|  1.11M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   507k|    {
  564|   507k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   507k|    {
  574|   507k|        return {
  575|   507k|            detail::make_arg<base::is_packed, Context,
  576|   507k|                             detail::mapped_type_constant<
  577|   507k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   507k|                args)...};
  579|   507k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   507k|{
  415|   507k|    return make_value<Context>(value);
  416|   507k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   559k|{
  372|   559k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   559k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   559k|                                  needs_context_tag>) {
  376|   559k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   559k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   559k|    }
  378|   559k|    else {
  379|   559k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   559k|            value, context_tag<Context>{}));
  381|   559k|    }
  382|   559k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   559k|    {                                                                        \
  217|   559k|        return val;                                                          \
  218|   559k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.11M|{
  341|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.11M|    constexpr bool scannable_char =
  345|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.11M|    static_assert(scannable_char,
  347|  1.11M|                  "Cannot scan an argument of an unsupported character "
  348|  1.11M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.11M|    constexpr bool scannable_const =
  351|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.11M|    constexpr bool scannable_disabled =
  355|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.11M|    static_assert(scannable_disabled,
  357|  1.11M|                  "Cannot scan an argument that has been disabled by "
  358|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.11M|    static_assert(
  362|  1.11M|        scannable,
  363|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.11M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.11M|    return arg_value{arg};
  367|  1.11M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.11M|    {
  160|  1.11M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   507k|    {
  647|   507k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.49M|    {
  694|  3.49M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   423k|    {
  554|   423k|        return m_args;
  555|   423k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  52.2k|{
  400|  52.2k|    check_scan_arg_types<T>();
  401|       |
  402|  52.2k|    basic_scan_arg<Context> arg;
  403|  52.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.2k|    arg.m_value = make_value<Context>(value);
  405|  52.2k|    return arg;
  406|  52.2k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  3.82M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  7.61M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   481k|{
  619|   481k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   481k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   481k|    static_cast<    \
  |  |  247|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   481k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.07M|{
  387|  1.07M|    static_assert(
  388|  1.07M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.07M|        "Scan argument types must be default constructible");
  390|  1.07M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.07M|                  "Scan argument types must be Destructible");
  392|  1.07M|    static_assert(
  393|  1.07M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.07M|        "Scan argument types must not be references");
  395|  1.07M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   481k|    {
  564|   481k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   481k|    {
  574|   481k|        return {
  575|   481k|            detail::make_arg<base::is_packed, Context,
  576|   481k|                             detail::mapped_type_constant<
  577|   481k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   481k|                args)...};
  579|   481k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   481k|{
  415|   481k|    return make_value<Context>(value);
  416|   481k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   528k|{
  372|   528k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   528k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   528k|                                  needs_context_tag>) {
  376|   528k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   528k|    }
  378|   528k|    else {
  379|   528k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   528k|            value, context_tag<Context>{}));
  381|   528k|    }
  382|   528k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   528k|    {                                                                        \
  217|   528k|        return val;                                                          \
  218|   528k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.07M|{
  341|  1.07M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.07M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.07M|    constexpr bool scannable_char =
  345|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.07M|    static_assert(scannable_char,
  347|  1.07M|                  "Cannot scan an argument of an unsupported character "
  348|  1.07M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.07M|    constexpr bool scannable_const =
  351|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.07M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.07M|    constexpr bool scannable_disabled =
  355|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.07M|    static_assert(scannable_disabled,
  357|  1.07M|                  "Cannot scan an argument that has been disabled by "
  358|  1.07M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.07M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.07M|    static_assert(
  362|  1.07M|        scannable,
  363|  1.07M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.07M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.07M|    return arg_value{arg};
  367|  1.07M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.07M|    {
  160|  1.07M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   481k|    {
  647|   481k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   397k|    {
  554|   397k|        return m_args;
  555|   397k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  47.4k|{
  400|  47.4k|    check_scan_arg_types<T>();
  401|       |
  402|  47.4k|    basic_scan_arg<Context> arg;
  403|  47.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  47.4k|    arg.m_value = make_value<Context>(value);
  405|  47.4k|    return arg;
  406|  47.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   687k|{
  619|   687k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   687k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   687k|    static_cast<    \
  |  |  247|   687k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   687k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.47M|{
  387|  1.47M|    static_assert(
  388|  1.47M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.47M|        "Scan argument types must be default constructible");
  390|  1.47M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.47M|                  "Scan argument types must be Destructible");
  392|  1.47M|    static_assert(
  393|  1.47M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.47M|        "Scan argument types must not be references");
  395|  1.47M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   687k|    {
  564|   687k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   687k|    {
  574|   687k|        return {
  575|   687k|            detail::make_arg<base::is_packed, Context,
  576|   687k|                             detail::mapped_type_constant<
  577|   687k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   687k|                args)...};
  579|   687k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   687k|{
  415|   687k|    return make_value<Context>(value);
  416|   687k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   753k|{
  372|   753k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   753k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   753k|                                  needs_context_tag>) {
  376|   753k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   753k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   753k|    }
  378|   753k|    else {
  379|   753k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   753k|            value, context_tag<Context>{}));
  381|   753k|    }
  382|   753k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   753k|    {                                                                        \
  217|   753k|        return val;                                                          \
  218|   753k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.47M|{
  341|  1.47M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.47M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.47M|    constexpr bool scannable_char =
  345|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.47M|    static_assert(scannable_char,
  347|  1.47M|                  "Cannot scan an argument of an unsupported character "
  348|  1.47M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.47M|    constexpr bool scannable_const =
  351|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.47M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.47M|    constexpr bool scannable_disabled =
  355|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.47M|    static_assert(scannable_disabled,
  357|  1.47M|                  "Cannot scan an argument that has been disabled by "
  358|  1.47M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.47M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.47M|    static_assert(
  362|  1.47M|        scannable,
  363|  1.47M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.47M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.47M|    return arg_value{arg};
  367|  1.47M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.47M|    {
  160|  1.47M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   687k|    {
  647|   687k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   603k|    {
  554|   603k|        return m_args;
  555|   603k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  65.2k|{
  400|  65.2k|    check_scan_arg_types<T>();
  401|       |
  402|  65.2k|    basic_scan_arg<Context> arg;
  403|  65.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  65.2k|    arg.m_value = make_value<Context>(value);
  405|  65.2k|    return arg;
  406|  65.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   556k|{
  619|   556k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   556k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   556k|    static_cast<    \
  |  |  247|   556k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   556k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.22M|{
  387|  1.22M|    static_assert(
  388|  1.22M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.22M|        "Scan argument types must be default constructible");
  390|  1.22M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.22M|                  "Scan argument types must be Destructible");
  392|  1.22M|    static_assert(
  393|  1.22M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.22M|        "Scan argument types must not be references");
  395|  1.22M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   556k|    {
  564|   556k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   556k|    {
  574|   556k|        return {
  575|   556k|            detail::make_arg<base::is_packed, Context,
  576|   556k|                             detail::mapped_type_constant<
  577|   556k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   556k|                args)...};
  579|   556k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   556k|{
  415|   556k|    return make_value<Context>(value);
  416|   556k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   608k|{
  372|   608k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   608k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   608k|                                  needs_context_tag>) {
  376|   608k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   608k|    }
  378|   608k|    else {
  379|   608k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   608k|            value, context_tag<Context>{}));
  381|   608k|    }
  382|   608k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   608k|    {                                                                        \
  217|   608k|        return val;                                                          \
  218|   608k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.22M|{
  341|  1.22M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.22M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.22M|    constexpr bool scannable_char =
  345|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.22M|    static_assert(scannable_char,
  347|  1.22M|                  "Cannot scan an argument of an unsupported character "
  348|  1.22M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.22M|    constexpr bool scannable_const =
  351|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.22M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.22M|    constexpr bool scannable_disabled =
  355|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.22M|    static_assert(scannable_disabled,
  357|  1.22M|                  "Cannot scan an argument that has been disabled by "
  358|  1.22M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.22M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.22M|    static_assert(
  362|  1.22M|        scannable,
  363|  1.22M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.22M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.22M|    return arg_value{arg};
  367|  1.22M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.22M|    {
  160|  1.22M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   556k|    {
  647|   556k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   472k|    {
  554|   472k|        return m_args;
  555|   472k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  51.8k|{
  400|  51.8k|    check_scan_arg_types<T>();
  401|       |
  402|  51.8k|    basic_scan_arg<Context> arg;
  403|  51.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  51.8k|    arg.m_value = make_value<Context>(value);
  405|  51.8k|    return arg;
  406|  51.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   696k|{
  619|   696k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   696k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   696k|    static_cast<    \
  |  |  247|   696k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   696k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.49M|{
  387|  1.49M|    static_assert(
  388|  1.49M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.49M|        "Scan argument types must be default constructible");
  390|  1.49M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.49M|                  "Scan argument types must be Destructible");
  392|  1.49M|    static_assert(
  393|  1.49M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.49M|        "Scan argument types must not be references");
  395|  1.49M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   696k|    {
  564|   696k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   696k|    {
  574|   696k|        return {
  575|   696k|            detail::make_arg<base::is_packed, Context,
  576|   696k|                             detail::mapped_type_constant<
  577|   696k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   696k|                args)...};
  579|   696k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   696k|{
  415|   696k|    return make_value<Context>(value);
  416|   696k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   762k|{
  372|   762k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   762k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   762k|                                  needs_context_tag>) {
  376|   762k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   762k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   762k|    }
  378|   762k|    else {
  379|   762k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   762k|            value, context_tag<Context>{}));
  381|   762k|    }
  382|   762k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   762k|    {                                                                        \
  217|   762k|        return val;                                                          \
  218|   762k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.49M|{
  341|  1.49M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.49M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.49M|    constexpr bool scannable_char =
  345|  1.49M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.49M|    static_assert(scannable_char,
  347|  1.49M|                  "Cannot scan an argument of an unsupported character "
  348|  1.49M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.49M|    constexpr bool scannable_const =
  351|  1.49M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.49M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.49M|    constexpr bool scannable_disabled =
  355|  1.49M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.49M|    static_assert(scannable_disabled,
  357|  1.49M|                  "Cannot scan an argument that has been disabled by "
  358|  1.49M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.49M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.49M|    static_assert(
  362|  1.49M|        scannable,
  363|  1.49M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.49M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.49M|    return arg_value{arg};
  367|  1.49M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.49M|    {
  160|  1.49M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   696k|    {
  647|   696k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   612k|    {
  554|   612k|        return m_args;
  555|   612k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  66.0k|{
  400|  66.0k|    check_scan_arg_types<T>();
  401|       |
  402|  66.0k|    basic_scan_arg<Context> arg;
  403|  66.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  66.0k|    arg.m_value = make_value<Context>(value);
  405|  66.0k|    return arg;
  406|  66.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   560k|{
  619|   560k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   560k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   560k|    static_cast<    \
  |  |  247|   560k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   560k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.22M|{
  387|  1.22M|    static_assert(
  388|  1.22M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.22M|        "Scan argument types must be default constructible");
  390|  1.22M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.22M|                  "Scan argument types must be Destructible");
  392|  1.22M|    static_assert(
  393|  1.22M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.22M|        "Scan argument types must not be references");
  395|  1.22M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   560k|    {
  564|   560k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   560k|    {
  574|   560k|        return {
  575|   560k|            detail::make_arg<base::is_packed, Context,
  576|   560k|                             detail::mapped_type_constant<
  577|   560k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   560k|                args)...};
  579|   560k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   560k|{
  415|   560k|    return make_value<Context>(value);
  416|   560k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   612k|{
  372|   612k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   612k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   612k|                                  needs_context_tag>) {
  376|   612k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   612k|    }
  378|   612k|    else {
  379|   612k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   612k|            value, context_tag<Context>{}));
  381|   612k|    }
  382|   612k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   612k|    {                                                                        \
  217|   612k|        return val;                                                          \
  218|   612k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.22M|{
  341|  1.22M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.22M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.22M|    constexpr bool scannable_char =
  345|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.22M|    static_assert(scannable_char,
  347|  1.22M|                  "Cannot scan an argument of an unsupported character "
  348|  1.22M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.22M|    constexpr bool scannable_const =
  351|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.22M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.22M|    constexpr bool scannable_disabled =
  355|  1.22M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.22M|    static_assert(scannable_disabled,
  357|  1.22M|                  "Cannot scan an argument that has been disabled by "
  358|  1.22M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.22M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.22M|    static_assert(
  362|  1.22M|        scannable,
  363|  1.22M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.22M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.22M|    return arg_value{arg};
  367|  1.22M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.22M|    {
  160|  1.22M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   560k|    {
  647|   560k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   476k|    {
  554|   476k|        return m_args;
  555|   476k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  52.1k|{
  400|  52.1k|    check_scan_arg_types<T>();
  401|       |
  402|  52.1k|    basic_scan_arg<Context> arg;
  403|  52.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.1k|    arg.m_value = make_value<Context>(value);
  405|  52.1k|    return arg;
  406|  52.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   510k|{
  619|   510k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   510k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   510k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   510k|    {
  564|   510k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   510k|    {
  574|   510k|        return {
  575|   510k|            detail::make_arg<base::is_packed, Context,
  576|   510k|                             detail::mapped_type_constant<
  577|   510k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   510k|                args)...};
  579|   510k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   510k|{
  415|   510k|    return make_value<Context>(value);
  416|   510k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   559k|{
  372|   559k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   559k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   559k|                                  needs_context_tag>) {
  376|   559k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   559k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   559k|    }
  378|   559k|    else {
  379|   559k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   559k|            value, context_tag<Context>{}));
  381|   559k|    }
  382|   559k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   559k|    {                                                                        \
  217|   559k|        return val;                                                          \
  218|   559k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   510k|    {
  647|   510k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.47M|    {
  694|  3.47M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   363k|    {
  554|   363k|        return m_args;
  555|   363k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  49.3k|{
  400|  49.3k|    check_scan_arg_types<T>();
  401|       |
  402|  49.3k|    basic_scan_arg<Context> arg;
  403|  49.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.3k|    arg.m_value = make_value<Context>(value);
  405|  49.3k|    return arg;
  406|  49.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  3.79M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   502k|{
  619|   502k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   502k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   502k|    static_cast<    \
  |  |  247|   502k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   502k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   502k|    {
  564|   502k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   502k|    {
  574|   502k|        return {
  575|   502k|            detail::make_arg<base::is_packed, Context,
  576|   502k|                             detail::mapped_type_constant<
  577|   502k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   502k|                args)...};
  579|   502k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   502k|{
  415|   502k|    return make_value<Context>(value);
  416|   502k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   548k|{
  372|   548k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   548k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   548k|                                  needs_context_tag>) {
  376|   548k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   548k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   548k|    }
  378|   548k|    else {
  379|   548k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   548k|            value, context_tag<Context>{}));
  381|   548k|    }
  382|   548k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   548k|    {                                                                        \
  217|   548k|        return val;                                                          \
  218|   548k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   502k|    {
  647|   502k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   355k|    {
  554|   355k|        return m_args;
  555|   355k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  45.8k|{
  400|  45.8k|    check_scan_arg_types<T>();
  401|       |
  402|  45.8k|    basic_scan_arg<Context> arg;
  403|  45.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  45.8k|    arg.m_value = make_value<Context>(value);
  405|  45.8k|    return arg;
  406|  45.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   665k|{
  619|   665k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   665k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   665k|    static_cast<    \
  |  |  247|   665k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   665k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   665k|    {
  564|   665k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   665k|    {
  574|   665k|        return {
  575|   665k|            detail::make_arg<base::is_packed, Context,
  576|   665k|                             detail::mapped_type_constant<
  577|   665k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   665k|                args)...};
  579|   665k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   665k|{
  415|   665k|    return make_value<Context>(value);
  416|   665k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   725k|{
  372|   725k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   725k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   725k|                                  needs_context_tag>) {
  376|   725k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   725k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   725k|    }
  378|   725k|    else {
  379|   725k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   725k|            value, context_tag<Context>{}));
  381|   725k|    }
  382|   725k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   725k|    {                                                                        \
  217|   725k|        return val;                                                          \
  218|   725k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   665k|    {
  647|   665k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   518k|    {
  554|   518k|        return m_args;
  555|   518k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  59.8k|{
  400|  59.8k|    check_scan_arg_types<T>();
  401|       |
  402|  59.8k|    basic_scan_arg<Context> arg;
  403|  59.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  59.8k|    arg.m_value = make_value<Context>(value);
  405|  59.8k|    return arg;
  406|  59.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   562k|{
  619|   562k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   562k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   562k|    static_cast<    \
  |  |  247|   562k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   562k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   562k|    {
  564|   562k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   562k|    {
  574|   562k|        return {
  575|   562k|            detail::make_arg<base::is_packed, Context,
  576|   562k|                             detail::mapped_type_constant<
  577|   562k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   562k|                args)...};
  579|   562k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   562k|{
  415|   562k|    return make_value<Context>(value);
  416|   562k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   611k|{
  372|   611k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   611k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   611k|                                  needs_context_tag>) {
  376|   611k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   611k|    }
  378|   611k|    else {
  379|   611k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   611k|            value, context_tag<Context>{}));
  381|   611k|    }
  382|   611k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   611k|    {                                                                        \
  217|   611k|        return val;                                                          \
  218|   611k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   562k|    {
  647|   562k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   416k|    {
  554|   416k|        return m_args;
  555|   416k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  49.1k|{
  400|  49.1k|    check_scan_arg_types<T>();
  401|       |
  402|  49.1k|    basic_scan_arg<Context> arg;
  403|  49.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.1k|    arg.m_value = make_value<Context>(value);
  405|  49.1k|    return arg;
  406|  49.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   671k|{
  619|   671k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   671k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   671k|    static_cast<    \
  |  |  247|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   671k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   671k|    {
  564|   671k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   671k|    {
  574|   671k|        return {
  575|   671k|            detail::make_arg<base::is_packed, Context,
  576|   671k|                             detail::mapped_type_constant<
  577|   671k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   671k|                args)...};
  579|   671k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   671k|{
  415|   671k|    return make_value<Context>(value);
  416|   671k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   731k|{
  372|   731k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   731k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   731k|                                  needs_context_tag>) {
  376|   731k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   731k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   731k|    }
  378|   731k|    else {
  379|   731k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   731k|            value, context_tag<Context>{}));
  381|   731k|    }
  382|   731k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   731k|    {                                                                        \
  217|   731k|        return val;                                                          \
  218|   731k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   671k|    {
  647|   671k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   524k|    {
  554|   524k|        return m_args;
  555|   524k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  60.4k|{
  400|  60.4k|    check_scan_arg_types<T>();
  401|       |
  402|  60.4k|    basic_scan_arg<Context> arg;
  403|  60.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  60.4k|    arg.m_value = make_value<Context>(value);
  405|  60.4k|    return arg;
  406|  60.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   565k|{
  619|   565k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   565k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   565k|    static_cast<    \
  |  |  247|   565k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   565k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   565k|    {
  564|   565k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   565k|    {
  574|   565k|        return {
  575|   565k|            detail::make_arg<base::is_packed, Context,
  576|   565k|                             detail::mapped_type_constant<
  577|   565k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   565k|                args)...};
  579|   565k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   565k|{
  415|   565k|    return make_value<Context>(value);
  416|   565k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   615k|{
  372|   615k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   615k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   615k|                                  needs_context_tag>) {
  376|   615k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   615k|    }
  378|   615k|    else {
  379|   615k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   615k|            value, context_tag<Context>{}));
  381|   615k|    }
  382|   615k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   615k|    {                                                                        \
  217|   615k|        return val;                                                          \
  218|   615k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   565k|    {
  647|   565k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   419k|    {
  554|   419k|        return m_args;
  555|   419k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  49.3k|{
  400|  49.3k|    check_scan_arg_types<T>();
  401|       |
  402|  49.3k|    basic_scan_arg<Context> arg;
  403|  49.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.3k|    arg.m_value = make_value<Context>(value);
  405|  49.3k|    return arg;
  406|  49.3k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  3.49M|    {
  682|  3.49M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.49M|        return static_cast<std::size_t>(m_desc &
  687|  3.49M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.49M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  6.98M|    {
  702|  6.98M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.98M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  3.49M|    {
  655|  3.49M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.49M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.49M|        const auto t = type(id);
  667|  3.49M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.49M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.49M|        basic_scan_arg<Context> arg;
  672|  3.49M|        arg.m_type = t;
  673|  3.49M|        arg.m_value = m_values[id];
  674|  3.49M|        return arg;
  675|  3.49M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  3.49M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.49M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.49M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.49M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.49M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  6.49M|    {
  483|  6.49M|        return m_type != detail::arg_type::none_type;
  484|  6.49M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  5.64M|    {
  488|  5.64M|        return m_type;
  489|  5.64M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  3.47M|    {
  682|  3.47M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.47M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.47M|        return static_cast<std::size_t>(m_desc &
  687|  3.47M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.47M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  6.95M|    {
  702|  6.95M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.95M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  3.47M|    {
  655|  3.47M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.47M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.47M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.47M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.47M|        const auto t = type(id);
  667|  3.47M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.47M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.47M|        basic_scan_arg<Context> arg;
  672|  3.47M|        arg.m_type = t;
  673|  3.47M|        arg.m_value = m_values[id];
  674|  3.47M|        return arg;
  675|  3.47M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  3.47M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.47M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.47M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.47M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.47M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  6.37M|    {
  483|  6.37M|        return m_type != detail::arg_type::none_type;
  484|  6.37M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  5.69M|    {
  488|  5.69M|        return m_type;
  489|  5.69M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   335k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   313k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   328k|    {
  109|   328k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.82M|    {
   60|  2.82M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   681k|    {
  124|   681k|        return m_current;
  125|   681k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.82M|    {
   43|  2.82M|        return m_args.get(id);
   44|  2.82M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.66M|    {
   53|  2.66M|        return m_locale;
   54|  2.66M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   252k|    {
  132|   252k|        return ranges_std::default_sentinel;
  133|   252k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   100k|    {
  146|   100k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   100k|    static_cast<    \
  |  |  247|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   100k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   252k|    {
  140|   252k|        return ranges::subrange{begin(), end()};
  141|   252k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   565k|    {
  109|   565k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.84M|    {
   60|  2.84M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.16M|    {
  124|  1.16M|        return m_current;
  125|  1.16M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.84M|    {
   43|  2.84M|        return m_args.get(id);
   44|  2.84M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.58M|    {
   53|  2.58M|        return m_locale;
   54|  2.58M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   432k|    {
  132|   432k|        return ranges_std::default_sentinel;
  133|   432k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   168k|    {
  146|   168k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   168k|    static_cast<    \
  |  |  247|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   168k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   432k|    {
  140|   432k|        return ranges::subrange{begin(), end()};
  141|   432k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  2.00M|    {
   69|  2.00M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  2.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  2.00M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  27.2M|    {
   75|  27.2M|        return m_code == good;
   76|  27.2M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   831k|    {
   86|   831k|        return m_code;
   87|   831k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   831k|{
  111|   831k|    return a.code() == b;
  112|   831k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   831k|{
  116|   831k|    return !(a == b);
  117|   831k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  16.6M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   444k|    {
  675|   444k|        return m_str;
  676|   444k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  3.49M|{
  385|  3.49M|    return s;
  386|  3.49M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  3.49M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   444k|    {
  671|   444k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   418k|    {
  675|   418k|        return m_str;
  676|   418k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   418k|    {
  671|   418k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   624k|    {
  675|   624k|        return m_str;
  676|   624k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   624k|    {
  671|   624k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   493k|    {
  675|   493k|        return m_str;
  676|   493k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   493k|    {
  671|   493k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   633k|    {
  675|   633k|        return m_str;
  676|   633k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   633k|    {
  671|   633k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   497k|    {
  675|   497k|        return m_str;
  676|   497k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   497k|    {
  671|   497k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  63.0k|    {
  675|  63.0k|        return m_str;
  676|  63.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  63.0k|    {
  671|  63.0k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   407k|    {
  675|   407k|        return m_str;
  676|   407k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  3.47M|{
  390|  3.47M|    return s;
  391|  3.47M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  3.47M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   407k|    {
  671|   407k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   392k|    {
  675|   392k|        return m_str;
  676|   392k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   392k|    {
  671|   392k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   555k|    {
  675|   555k|        return m_str;
  676|   555k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   555k|    {
  671|   555k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   452k|    {
  675|   452k|        return m_str;
  676|   452k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   452k|    {
  671|   452k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   561k|    {
  675|   561k|        return m_str;
  676|   561k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   561k|    {
  671|   561k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   455k|    {
  675|   455k|        return m_str;
  676|   455k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   455k|    {
  671|   455k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   102k|    {
  675|   102k|        return m_str;
  676|   102k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   102k|    {
  671|   102k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   110k|    {
  675|   110k|        return m_str;
  676|   110k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   110k|    {
  671|   110k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   110k|    {
  675|   110k|        return m_str;
  676|   110k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   110k|    {
  671|   110k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   110k|    {
  675|   110k|        return m_str;
  676|   110k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   110k|    {
  671|   110k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   110k|    {
  675|   110k|        return m_str;
  676|   110k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   110k|    {
  671|   110k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   110k|    {
  675|   110k|        return m_str;
  676|   110k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   110k|    {
  671|   110k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.21M|    {
  196|  5.21M|        SCN_GCC_COMPAT_PUSH
  197|  5.21M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.21M|        switch (type) {
  199|  1.29M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.29M, False: 3.92M]
  ------------------
  200|  2.58M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.28M, False: 3.92M]
  ------------------
  201|  2.58M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.21M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   221k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 221k, False: 4.99M]
  ------------------
  206|   221k|                return 2;
  207|   409k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 409k, False: 4.80M]
  ------------------
  208|   409k|                return 8;
  209|   965k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 965k, False: 4.24M]
  ------------------
  210|   965k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 5.21M]
  ------------------
  211|   965k|                return 10;
  212|  1.03M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.03M, False: 4.17M]
  ------------------
  213|  1.03M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.21M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.21M|        }
  219|  5.21M|        SCN_GCC_COMPAT_POP
  220|  5.21M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  5.67M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.30M|    {
  245|  1.30M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.30M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.30M|            m_specs.localized = true;
  247|  1.30M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.30M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  4.09M|    {
  260|  4.09M|        m_specs.type = type;
  261|  4.09M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   277k|    {
  322|   277k|        SCN_UNLIKELY_ATTR
  323|   277k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   277k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  5.39M|    {
  333|  5.39M|        return static_cast<bool>(m_error);
  334|  5.39M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.30M|{
  987|  1.30M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.30M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   203k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 203k, False: 1.09M]
  ------------------
  992|   203k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.30M]
  ------------------
  993|   454k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 250k, False: 1.05M]
  ------------------
  994|   454k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.30M]
  ------------------
  995|   708k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 253k, False: 1.04M]
  ------------------
  996|   708k|            return arg_type_category::integer;
  997|       |
  998|   187k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 187k, False: 1.11M]
  ------------------
  999|   187k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.30M]
  ------------------
 1000|   390k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 202k, False: 1.09M]
  ------------------
 1001|   390k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.30M]
  ------------------
 1002|   593k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 203k, False: 1.09M]
  ------------------
 1003|   593k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.30M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.30M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.30M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.30M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.30M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.30M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.30M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.30M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.30M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.30M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.30M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.30M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.30M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.30M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.30M|            SCN_CLANG_POP
 1034|  1.30M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.30M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.49M|{
  968|  2.49M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.49M|    handler.check_args_exhausted();
  970|  2.49M|    return handler.get_error();
  971|  2.49M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.49M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.49M|    auto begin = format.data();
  937|  2.49M|    auto it = begin;
  938|  2.49M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.75M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.49M, False: 2.26M]
  ------------------
  941|  2.49M|        const auto ch = *it++;
  942|  2.49M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.49M, False: 0]
  ------------------
  943|  2.49M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.49M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.49M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 227k, False: 2.26M]
  ------------------
  947|   227k|                return;
  948|   227k|            }
  949|  2.49M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.49M|    }
  960|       |
  961|  2.26M|    handler.on_literal_text(begin, end);
  962|  2.26M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  2.49M|{
  866|  2.49M|    struct id_adapter {
  867|  2.49M|        constexpr void operator()()
  868|  2.49M|        {
  869|  2.49M|            arg_id = handler.on_arg_id();
  870|  2.49M|        }
  871|  2.49M|        constexpr void operator()(std::size_t id)
  872|  2.49M|        {
  873|  2.49M|            arg_id = handler.on_arg_id(id);
  874|  2.49M|        }
  875|       |
  876|  2.49M|        constexpr void on_error(const char* msg)
  877|  2.49M|        {
  878|  2.49M|            SCN_UNLIKELY_ATTR
  879|  2.49M|            handler.on_error(msg);
  880|  2.49M|        }
  881|       |
  882|  2.49M|        Handler& handler;
  883|  2.49M|        std::size_t arg_id;
  884|  2.49M|    };
  885|       |
  886|  2.49M|    ++begin;
  887|  2.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.49M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.49M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.49M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.49M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.49M|    else {
  899|  2.49M|        auto adapter = id_adapter{handler, 0};
  900|  2.49M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.49M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.49M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.49M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.49M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.49M, False: 0]
  ------------------
  911|  2.49M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.49M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.49M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.7k, False: 2.41M]
  |  |  |  Branch (153:45): [True: 0, False: 2.49M]
  |  |  |  Branch (153:45): [True: 75.7k, False: 2.41M]
  |  |  ------------------
  ------------------
  917|  75.7k|                handler.on_error("Unknown format specifier");
  918|  75.7k|                return begin;
  919|  75.7k|            }
  920|  2.49M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.49M|    }
  927|  2.41M|    return begin + 1;
  928|  2.49M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.49M|{
  400|  2.49M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.49M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.49M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.49M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.49M|    handler();
  406|  2.49M|    return begin;
  407|  2.49M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.49M|        {
  869|  2.49M|            arg_id = handler.on_arg_id();
  870|  2.49M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.49M|    {
 1046|  2.49M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.49M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.49M|{
  795|  2.49M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.49M|        if (*begin == CharT{'['}) {
  797|  2.49M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.49M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.49M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.49M|                return begin;
  803|  2.49M|            }
  804|  2.49M|            handler.on_character_set_string(set);
  805|  2.49M|            return begin;
  806|  2.49M|        }
  807|  2.49M|        if (*begin == CharT{'/'}) {
  808|  2.49M|            return parse_presentation_regex(begin, end, handler);
  809|  2.49M|        }
  810|  2.49M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.49M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.49M|            handler.on_error("Invalid type specifier in format string");
  813|  2.49M|            return begin;
  814|  2.49M|        }
  815|  2.49M|        handler.on_type(type);
  816|  2.49M|        return begin;
  817|  2.49M|    };
  818|       |
  819|  2.49M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.49M, False: 0]
  |  Branch (819:28): [True: 2.44M, False: 50.4k]
  ------------------
  820|  2.49M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.41M, False: 25.2k]
  |  Branch (820:36): [True: 1.79M, False: 621k]
  ------------------
  821|  1.79M|        return do_presentation();
  822|  1.79M|    }
  823|       |
  824|   697k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   697k|    begin = parse_align(begin, end, handler);
  830|   697k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   697k|    begin = parse_width(begin, end, handler);
  836|   697k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   697k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 621k, False: 75.7k]
  ------------------
  842|   621k|        handler.on_localized();
  843|   621k|        ++begin;
  844|   621k|    }
  845|   697k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   697k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 697k, False: 0]
  |  Branch (850:25): [True: 75.7k, False: 621k]
  ------------------
  851|  75.7k|        do_presentation();
  852|  75.7k|    }
  853|   697k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   697k|    return begin;
  859|   697k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.71M|{
  464|  2.71M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.99M, False: 722k]
  |  Branch (464:33): [True: 1.99M, False: 0]
  ------------------
  465|  2.71M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 672k, False: 50.4k]
  |  Branch (465:33): [True: 672k, False: 0]
  ------------------
  466|  2.71M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.87M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.87M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.87M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.87M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.87M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.87M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.87M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 50.4k, False: 1.81M]
  |  |  ------------------
  ------------------
  812|  50.4k|            handler.on_error("Invalid type specifier in format string");
  813|  50.4k|            return begin;
  814|  50.4k|        }
  815|  1.81M|        handler.on_type(type);
  816|  1.81M|        return begin;
  817|  1.87M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.14M|{
  412|  2.14M|    switch (type) {
  413|  95.3k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 95.3k, False: 2.05M]
  ------------------
  414|   145k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 50.4k, False: 2.09M]
  ------------------
  415|   145k|            return presentation_type::int_binary;
  416|   495k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 495k, False: 1.65M]
  ------------------
  417|   495k|            return presentation_type::int_decimal;
  418|   670k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 670k, False: 1.47M]
  ------------------
  419|   670k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.14M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   199k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 199k, False: 1.94M]
  ------------------
  423|   199k|            return presentation_type::int_octal;
  424|   536k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 536k, False: 1.61M]
  ------------------
  425|   536k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.14M]
  ------------------
  426|   536k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.14M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.14M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.14M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.14M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.14M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.14M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.14M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.14M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.14M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.14M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.14M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.14M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.14M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.14M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.14M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.14M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   100k|        default:
  ------------------
  |  Branch (456:9): [True: 100k, False: 2.04M]
  ------------------
  457|   100k|            return presentation_type::none;
  458|  2.14M|    }
  459|  2.14M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   697k|{
  489|   697k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   697k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   697k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   697k|        switch (ch) {
  493|   697k|            case L'<':
  494|   697k|                return align_type::left;
  495|   697k|            case L'>':
  496|   697k|                return align_type::right;
  497|   697k|            case L'^':
  498|   697k|                return align_type::center;
  499|   697k|            default:
  500|   697k|                return align_type::none;
  501|   697k|        }
  502|   697k|    };
  503|       |
  504|   697k|    auto potential_fill_len = code_point_length(begin, end);
  505|   697k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  |  Branch (153:45): [True: 0, False: 697k]
  |  |  |  Branch (153:45): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  506|   697k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   697k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   697k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   697k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   697k|    const auto begin_before_fill = begin;
  516|   697k|    begin += potential_fill_len;
  517|       |
  518|   697k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 697k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   697k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   697k|    const auto begin_after_fill = begin;
  524|   697k|    ++begin;
  525|       |
  526|   697k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 697k, False: 0]
  ------------------
  527|   697k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   697k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 697k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   697k|    }
  535|       |
  536|   697k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 697k, False: 0]
  ------------------
  537|   697k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 697k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   697k|        return begin_before_fill;
  542|   697k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   697k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   823k|{
  471|   823k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   823k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   823k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   823k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   823k|        return 1;
  474|   823k|    }
  475|   823k|    else {
  476|   823k|        const auto lengths =
  477|   823k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   823k|            "\3\4";
  479|   823k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   823k|        return len;
  481|   823k|    }
  482|   823k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.39M|    auto check_align = [](wchar_t ch) {
  492|  1.39M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.39M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.39M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.39M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.39M|            default:
  ------------------
  |  Branch (499:13): [True: 1.39M, False: 0]
  ------------------
  500|  1.39M|                return align_type::none;
  501|  1.39M|        }
  502|  1.39M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   697k|{
  554|   697k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   697k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   697k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   697k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 647k, False: 50.4k]
  |  Branch (556:33): [True: 0, False: 647k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   697k|    return begin;
  567|   697k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   621k|    {
 1051|   621k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   621k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 278k, False: 342k]
  ------------------
 1053|   621k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 278k]
  ------------------
 1054|   621k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   621k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   621k|        Handler::on_localized();
 1063|   621k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  5.25M|{
 1073|  5.25M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  5.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.25M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  5.25M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.30M, False: 3.95M]
  ------------------
 1077|  1.30M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.30M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.30M|    }
 1089|  5.25M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   328k|{
  968|   328k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   328k|    handler.check_args_exhausted();
  970|   328k|    return handler.get_error();
  971|   328k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   328k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   328k|    auto begin = format.data();
  937|   328k|    auto it = begin;
  938|   328k|    const auto end = format.data() + format.size();
  939|       |
  940|   429k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 328k, False: 100k]
  ------------------
  941|   328k|        const auto ch = *it++;
  942|   328k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 328k, False: 0]
  ------------------
  943|   328k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   328k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   328k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 227k, False: 100k]
  ------------------
  947|   227k|                return;
  948|   227k|            }
  949|   328k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   328k|    }
  960|       |
  961|   100k|    handler.on_literal_text(begin, end);
  962|   100k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   328k|{
  866|   328k|    struct id_adapter {
  867|   328k|        constexpr void operator()()
  868|   328k|        {
  869|   328k|            arg_id = handler.on_arg_id();
  870|   328k|        }
  871|   328k|        constexpr void operator()(std::size_t id)
  872|   328k|        {
  873|   328k|            arg_id = handler.on_arg_id(id);
  874|   328k|        }
  875|       |
  876|   328k|        constexpr void on_error(const char* msg)
  877|   328k|        {
  878|   328k|            SCN_UNLIKELY_ATTR
  879|   328k|            handler.on_error(msg);
  880|   328k|        }
  881|       |
  882|   328k|        Handler& handler;
  883|   328k|        std::size_t arg_id;
  884|   328k|    };
  885|       |
  886|   328k|    ++begin;
  887|   328k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   328k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 328k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   328k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 328k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   328k|    else {
  899|   328k|        auto adapter = id_adapter{handler, 0};
  900|   328k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   328k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   328k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 328k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   328k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 328k, False: 0]
  ------------------
  911|   328k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   328k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   328k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.7k, False: 252k]
  |  |  |  Branch (153:45): [True: 0, False: 328k]
  |  |  |  Branch (153:45): [True: 75.7k, False: 252k]
  |  |  ------------------
  ------------------
  917|  75.7k|                handler.on_error("Unknown format specifier");
  918|  75.7k|                return begin;
  919|  75.7k|            }
  920|   328k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   328k|    }
  927|   252k|    return begin + 1;
  928|   328k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   328k|{
  400|   328k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   328k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 328k, False: 0]
  |  Branch (401:26): [True: 0, False: 328k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   328k|    handler();
  406|   328k|    return begin;
  407|   328k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   328k|        {
  869|   328k|            arg_id = handler.on_arg_id();
  870|   328k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   328k|    {
 1046|   328k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   328k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   328k|{
  795|   328k|    auto do_presentation = [&]() -> const CharT* {
  796|   328k|        if (*begin == CharT{'['}) {
  797|   328k|            auto set = parse_presentation_set(begin, end, handler);
  798|   328k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   328k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   328k|                return begin;
  803|   328k|            }
  804|   328k|            handler.on_character_set_string(set);
  805|   328k|            return begin;
  806|   328k|        }
  807|   328k|        if (*begin == CharT{'/'}) {
  808|   328k|            return parse_presentation_regex(begin, end, handler);
  809|   328k|        }
  810|   328k|        presentation_type type = parse_presentation_type(*begin++);
  811|   328k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   328k|            handler.on_error("Invalid type specifier in format string");
  813|   328k|            return begin;
  814|   328k|        }
  815|   328k|        handler.on_type(type);
  816|   328k|        return begin;
  817|   328k|    };
  818|       |
  819|   328k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 328k, False: 0]
  |  Branch (819:28): [True: 277k, False: 50.4k]
  ------------------
  820|   328k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 252k, False: 25.2k]
  |  Branch (820:36): [True: 201k, False: 50.4k]
  ------------------
  821|   201k|        return do_presentation();
  822|   201k|    }
  823|       |
  824|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   126k|    begin = parse_align(begin, end, handler);
  830|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   126k|    begin = parse_width(begin, end, handler);
  836|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   126k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 50.4k, False: 75.7k]
  ------------------
  842|  50.4k|        handler.on_localized();
  843|  50.4k|        ++begin;
  844|  50.4k|    }
  845|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   126k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 126k, False: 0]
  |  Branch (850:25): [True: 75.7k, False: 50.4k]
  ------------------
  851|  75.7k|        do_presentation();
  852|  75.7k|    }
  853|   126k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   126k|    return begin;
  859|   126k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   277k|    auto do_presentation = [&]() -> const CharT* {
  796|   277k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 277k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   277k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 277k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   277k|        presentation_type type = parse_presentation_type(*begin++);
  811|   277k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 50.4k, False: 227k]
  |  |  ------------------
  ------------------
  812|  50.4k|            handler.on_error("Invalid type specifier in format string");
  813|  50.4k|            return begin;
  814|  50.4k|        }
  815|   227k|        handler.on_type(type);
  816|   227k|        return begin;
  817|   277k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   126k|{
  489|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   126k|        switch (ch) {
  493|   126k|            case L'<':
  494|   126k|                return align_type::left;
  495|   126k|            case L'>':
  496|   126k|                return align_type::right;
  497|   126k|            case L'^':
  498|   126k|                return align_type::center;
  499|   126k|            default:
  500|   126k|                return align_type::none;
  501|   126k|        }
  502|   126k|    };
  503|       |
  504|   126k|    auto potential_fill_len = code_point_length(begin, end);
  505|   126k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  |  Branch (153:45): [True: 0, False: 126k]
  |  |  |  Branch (153:45): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  506|   126k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   126k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   126k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   126k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   126k|    const auto begin_before_fill = begin;
  516|   126k|    begin += potential_fill_len;
  517|       |
  518|   126k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 126k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   126k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   126k|    const auto begin_after_fill = begin;
  524|   126k|    ++begin;
  525|       |
  526|   126k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 126k, False: 0]
  ------------------
  527|   126k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   126k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 126k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   126k|    }
  535|       |
  536|   126k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 126k, False: 0]
  ------------------
  537|   126k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 126k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   126k|        return begin_before_fill;
  542|   126k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   126k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   252k|    auto check_align = [](wchar_t ch) {
  492|   252k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 252k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 252k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 252k]
  ------------------
  498|      0|                return align_type::center;
  499|   252k|            default:
  ------------------
  |  Branch (499:13): [True: 252k, False: 0]
  ------------------
  500|   252k|                return align_type::none;
  501|   252k|        }
  502|   252k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   126k|{
  554|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   126k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 75.7k, False: 50.4k]
  |  Branch (556:33): [True: 0, False: 75.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   126k|    return begin;
  567|   126k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  50.4k|    {
 1051|  50.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  50.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 25.2k, False: 25.2k]
  ------------------
 1053|  50.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 25.2k]
  ------------------
 1054|  50.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  50.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  50.4k|        Handler::on_localized();
 1063|  50.4k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.28M|{
  968|  2.28M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.28M|    handler.check_args_exhausted();
  970|  2.28M|    return handler.get_error();
  971|  2.28M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.28M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.28M|    auto begin = format.data();
  937|  2.28M|    auto it = begin;
  938|  2.28M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.17M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.28M, False: 1.88M]
  ------------------
  941|  2.28M|        const auto ch = *it++;
  942|  2.28M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.28M, False: 0]
  ------------------
  943|  2.28M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.28M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.28M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 396k, False: 1.88M]
  ------------------
  947|   396k|                return;
  948|   396k|            }
  949|  2.28M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.28M|    }
  960|       |
  961|  1.88M|    handler.on_literal_text(begin, end);
  962|  1.88M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.28M|{
  866|  2.28M|    struct id_adapter {
  867|  2.28M|        constexpr void operator()()
  868|  2.28M|        {
  869|  2.28M|            arg_id = handler.on_arg_id();
  870|  2.28M|        }
  871|  2.28M|        constexpr void operator()(std::size_t id)
  872|  2.28M|        {
  873|  2.28M|            arg_id = handler.on_arg_id(id);
  874|  2.28M|        }
  875|       |
  876|  2.28M|        constexpr void on_error(const char* msg)
  877|  2.28M|        {
  878|  2.28M|            SCN_UNLIKELY_ATTR
  879|  2.28M|            handler.on_error(msg);
  880|  2.28M|        }
  881|       |
  882|  2.28M|        Handler& handler;
  883|  2.28M|        std::size_t arg_id;
  884|  2.28M|    };
  885|       |
  886|  2.28M|    ++begin;
  887|  2.28M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.28M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.28M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.28M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.28M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.28M|    else {
  899|  2.28M|        auto adapter = id_adapter{handler, 0};
  900|  2.28M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.28M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.28M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.28M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.28M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.28M, False: 0]
  ------------------
  911|  2.28M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.28M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.28M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 2.15M]
  |  |  |  Branch (153:45): [True: 0, False: 2.28M]
  |  |  |  Branch (153:45): [True: 132k, False: 2.15M]
  |  |  ------------------
  ------------------
  917|   132k|                handler.on_error("Unknown format specifier");
  918|   132k|                return begin;
  919|   132k|            }
  920|  2.28M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.28M|    }
  927|  2.15M|    return begin + 1;
  928|  2.28M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.28M|{
  400|  2.28M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.28M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.28M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.28M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.28M|    handler();
  406|  2.28M|    return begin;
  407|  2.28M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.28M|        {
  869|  2.28M|            arg_id = handler.on_arg_id();
  870|  2.28M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.28M|    {
 1046|  2.28M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.28M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.28M|{
  795|  2.28M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.28M|        if (*begin == CharT{'['}) {
  797|  2.28M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.28M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.28M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.28M|                return begin;
  803|  2.28M|            }
  804|  2.28M|            handler.on_character_set_string(set);
  805|  2.28M|            return begin;
  806|  2.28M|        }
  807|  2.28M|        if (*begin == CharT{'/'}) {
  808|  2.28M|            return parse_presentation_regex(begin, end, handler);
  809|  2.28M|        }
  810|  2.28M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.28M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.28M|            handler.on_error("Invalid type specifier in format string");
  813|  2.28M|            return begin;
  814|  2.28M|        }
  815|  2.28M|        handler.on_type(type);
  816|  2.28M|        return begin;
  817|  2.28M|    };
  818|       |
  819|  2.28M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.28M, False: 0]
  |  Branch (819:28): [True: 2.19M, False: 88.0k]
  ------------------
  820|  2.28M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.15M, False: 44.0k]
  |  Branch (820:36): [True: 1.61M, False: 542k]
  ------------------
  821|  1.61M|        return do_presentation();
  822|  1.61M|    }
  823|       |
  824|   674k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   674k|    begin = parse_align(begin, end, handler);
  830|   674k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   674k|    begin = parse_width(begin, end, handler);
  836|   674k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   674k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 542k, False: 132k]
  ------------------
  842|   542k|        handler.on_localized();
  843|   542k|        ++begin;
  844|   542k|    }
  845|   674k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   674k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 674k, False: 0]
  |  Branch (850:25): [True: 132k, False: 542k]
  ------------------
  851|   132k|        do_presentation();
  852|   132k|    }
  853|   674k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   674k|    return begin;
  859|   674k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.67M|{
  464|  2.67M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.95M, False: 718k]
  |  Branch (464:33): [True: 1.95M, False: 0]
  ------------------
  465|  2.67M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 630k, False: 88.0k]
  |  Branch (465:33): [True: 630k, False: 0]
  ------------------
  466|  2.67M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.74M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.74M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.74M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.74M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.74M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.74M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.74M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 88.0k, False: 1.65M]
  |  |  ------------------
  ------------------
  812|  88.0k|            handler.on_error("Invalid type specifier in format string");
  813|  88.0k|            return begin;
  814|  88.0k|        }
  815|  1.65M|        handler.on_type(type);
  816|  1.65M|        return begin;
  817|  1.74M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.21M|{
  412|  2.21M|    switch (type) {
  413|   127k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 127k, False: 2.09M]
  ------------------
  414|   215k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 88.0k, False: 2.13M]
  ------------------
  415|   215k|            return presentation_type::int_binary;
  416|   477k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 477k, False: 1.74M]
  ------------------
  417|   477k|            return presentation_type::int_decimal;
  418|   627k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 627k, False: 1.59M]
  ------------------
  419|   627k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.21M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   212k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 212k, False: 2.00M]
  ------------------
  423|   212k|            return presentation_type::int_octal;
  424|   509k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 509k, False: 1.71M]
  ------------------
  425|   509k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.21M]
  ------------------
  426|   509k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.21M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.21M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.21M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.21M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.21M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.21M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.21M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.21M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.21M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.21M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.21M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.21M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.21M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.21M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.21M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.21M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   176k|        default:
  ------------------
  |  Branch (456:9): [True: 176k, False: 2.04M]
  ------------------
  457|   176k|            return presentation_type::none;
  458|  2.21M|    }
  459|  2.21M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   674k|{
  489|   674k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   674k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   674k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   674k|        switch (ch) {
  493|   674k|            case L'<':
  494|   674k|                return align_type::left;
  495|   674k|            case L'>':
  496|   674k|                return align_type::right;
  497|   674k|            case L'^':
  498|   674k|                return align_type::center;
  499|   674k|            default:
  500|   674k|                return align_type::none;
  501|   674k|        }
  502|   674k|    };
  503|       |
  504|   674k|    auto potential_fill_len = code_point_length(begin, end);
  505|   674k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  |  Branch (153:45): [True: 0, False: 674k]
  |  |  |  Branch (153:45): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  506|   674k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   674k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   674k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   674k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   674k|    const auto begin_before_fill = begin;
  516|   674k|    begin += potential_fill_len;
  517|       |
  518|   674k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 674k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   674k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   674k|    const auto begin_after_fill = begin;
  524|   674k|    ++begin;
  525|       |
  526|   674k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 674k, False: 0]
  ------------------
  527|   674k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   674k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 674k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   674k|    }
  535|       |
  536|   674k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 674k, False: 0]
  ------------------
  537|   674k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 674k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   674k|        return begin_before_fill;
  542|   674k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   674k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   894k|{
  471|   894k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   894k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   894k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   894k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   894k|        return 1;
  474|   894k|    }
  475|   894k|    else {
  476|   894k|        const auto lengths =
  477|   894k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   894k|            "\3\4";
  479|   894k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   894k|        return len;
  481|   894k|    }
  482|   894k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.34M|    auto check_align = [](wchar_t ch) {
  492|  1.34M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.34M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.34M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.34M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.34M|            default:
  ------------------
  |  Branch (499:13): [True: 1.34M, False: 0]
  ------------------
  500|  1.34M|                return align_type::none;
  501|  1.34M|        }
  502|  1.34M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   674k|{
  554|   674k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   674k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   674k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   674k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 586k, False: 88.0k]
  |  Branch (556:33): [True: 0, False: 586k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   674k|    return begin;
  567|   674k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   542k|    {
 1051|   542k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   542k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 245k, False: 296k]
  ------------------
 1053|   542k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 245k]
  ------------------
 1054|   542k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   542k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   542k|        Handler::on_localized();
 1063|   542k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   565k|{
  968|   565k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   565k|    handler.check_args_exhausted();
  970|   565k|    return handler.get_error();
  971|   565k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   565k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   565k|    auto begin = format.data();
  937|   565k|    auto it = begin;
  938|   565k|    const auto end = format.data() + format.size();
  939|       |
  940|   733k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 565k, False: 168k]
  ------------------
  941|   565k|        const auto ch = *it++;
  942|   565k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 565k, False: 0]
  ------------------
  943|   565k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   565k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   565k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 396k, False: 168k]
  ------------------
  947|   396k|                return;
  948|   396k|            }
  949|   565k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   565k|    }
  960|       |
  961|   168k|    handler.on_literal_text(begin, end);
  962|   168k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   565k|{
  866|   565k|    struct id_adapter {
  867|   565k|        constexpr void operator()()
  868|   565k|        {
  869|   565k|            arg_id = handler.on_arg_id();
  870|   565k|        }
  871|   565k|        constexpr void operator()(std::size_t id)
  872|   565k|        {
  873|   565k|            arg_id = handler.on_arg_id(id);
  874|   565k|        }
  875|       |
  876|   565k|        constexpr void on_error(const char* msg)
  877|   565k|        {
  878|   565k|            SCN_UNLIKELY_ATTR
  879|   565k|            handler.on_error(msg);
  880|   565k|        }
  881|       |
  882|   565k|        Handler& handler;
  883|   565k|        std::size_t arg_id;
  884|   565k|    };
  885|       |
  886|   565k|    ++begin;
  887|   565k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   565k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 565k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   565k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 565k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   565k|    else {
  899|   565k|        auto adapter = id_adapter{handler, 0};
  900|   565k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   565k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   565k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 565k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   565k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 565k, False: 0]
  ------------------
  911|   565k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   565k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   565k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 432k]
  |  |  |  Branch (153:45): [True: 0, False: 565k]
  |  |  |  Branch (153:45): [True: 132k, False: 432k]
  |  |  ------------------
  ------------------
  917|   132k|                handler.on_error("Unknown format specifier");
  918|   132k|                return begin;
  919|   132k|            }
  920|   565k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   565k|    }
  927|   432k|    return begin + 1;
  928|   565k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   565k|{
  400|   565k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   565k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 565k, False: 0]
  |  Branch (401:26): [True: 0, False: 565k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   565k|    handler();
  406|   565k|    return begin;
  407|   565k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   565k|        {
  869|   565k|            arg_id = handler.on_arg_id();
  870|   565k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   565k|    {
 1046|   565k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   565k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   565k|{
  795|   565k|    auto do_presentation = [&]() -> const CharT* {
  796|   565k|        if (*begin == CharT{'['}) {
  797|   565k|            auto set = parse_presentation_set(begin, end, handler);
  798|   565k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   565k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   565k|                return begin;
  803|   565k|            }
  804|   565k|            handler.on_character_set_string(set);
  805|   565k|            return begin;
  806|   565k|        }
  807|   565k|        if (*begin == CharT{'/'}) {
  808|   565k|            return parse_presentation_regex(begin, end, handler);
  809|   565k|        }
  810|   565k|        presentation_type type = parse_presentation_type(*begin++);
  811|   565k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   565k|            handler.on_error("Invalid type specifier in format string");
  813|   565k|            return begin;
  814|   565k|        }
  815|   565k|        handler.on_type(type);
  816|   565k|        return begin;
  817|   565k|    };
  818|       |
  819|   565k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 565k, False: 0]
  |  Branch (819:28): [True: 476k, False: 88.0k]
  ------------------
  820|   565k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 432k, False: 44.0k]
  |  Branch (820:36): [True: 344k, False: 88.0k]
  ------------------
  821|   344k|        return do_presentation();
  822|   344k|    }
  823|       |
  824|   220k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   220k|    begin = parse_align(begin, end, handler);
  830|   220k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   220k|    begin = parse_width(begin, end, handler);
  836|   220k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   220k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 88.0k, False: 132k]
  ------------------
  842|  88.0k|        handler.on_localized();
  843|  88.0k|        ++begin;
  844|  88.0k|    }
  845|   220k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   220k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 220k, False: 0]
  |  Branch (850:25): [True: 132k, False: 88.0k]
  ------------------
  851|   132k|        do_presentation();
  852|   132k|    }
  853|   220k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   220k|    return begin;
  859|   220k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   476k|    auto do_presentation = [&]() -> const CharT* {
  796|   476k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 476k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   476k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 476k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   476k|        presentation_type type = parse_presentation_type(*begin++);
  811|   476k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 88.0k, False: 388k]
  |  |  ------------------
  ------------------
  812|  88.0k|            handler.on_error("Invalid type specifier in format string");
  813|  88.0k|            return begin;
  814|  88.0k|        }
  815|   388k|        handler.on_type(type);
  816|   388k|        return begin;
  817|   476k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   220k|{
  489|   220k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   220k|        switch (ch) {
  493|   220k|            case L'<':
  494|   220k|                return align_type::left;
  495|   220k|            case L'>':
  496|   220k|                return align_type::right;
  497|   220k|            case L'^':
  498|   220k|                return align_type::center;
  499|   220k|            default:
  500|   220k|                return align_type::none;
  501|   220k|        }
  502|   220k|    };
  503|       |
  504|   220k|    auto potential_fill_len = code_point_length(begin, end);
  505|   220k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  |  Branch (153:45): [True: 0, False: 220k]
  |  |  |  Branch (153:45): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  506|   220k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   220k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   220k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   220k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   220k|    const auto begin_before_fill = begin;
  516|   220k|    begin += potential_fill_len;
  517|       |
  518|   220k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 220k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   220k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   220k|    const auto begin_after_fill = begin;
  524|   220k|    ++begin;
  525|       |
  526|   220k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 220k, False: 0]
  ------------------
  527|   220k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   220k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 220k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   220k|    }
  535|       |
  536|   220k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 220k, False: 0]
  ------------------
  537|   220k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 220k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   220k|        return begin_before_fill;
  542|   220k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   220k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   440k|    auto check_align = [](wchar_t ch) {
  492|   440k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 440k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 440k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 440k]
  ------------------
  498|      0|                return align_type::center;
  499|   440k|            default:
  ------------------
  |  Branch (499:13): [True: 440k, False: 0]
  ------------------
  500|   440k|                return align_type::none;
  501|   440k|        }
  502|   440k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   220k|{
  554|   220k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   220k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 132k, False: 88.0k]
  |  Branch (556:33): [True: 0, False: 132k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   220k|    return begin;
  567|   220k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  88.0k|    {
 1051|  88.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  88.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 44.0k, False: 44.0k]
  ------------------
 1053|  88.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 44.0k]
  ------------------
 1054|  88.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  88.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  88.0k|        Handler::on_localized();
 1063|  88.0k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.42M|{
  226|  3.42M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.42M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.42M|                  "\n"
  230|  3.42M|                  "Unsupported range type given as input to a scanning "
  231|  3.42M|                  "function.\n"
  232|  3.42M|                  "A range needs to have a character type (value type) "
  233|  3.42M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.42M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.42M|                  "to be included.\n"
  236|  3.42M|                  "See the scnlib documentation for more details.");
  237|  3.42M|    static_assert(
  238|  3.42M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.42M|        "\n"
  240|  3.42M|        "Unsupported range type given as input to a scanning "
  241|  3.42M|        "function.\n"
  242|  3.42M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.42M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.42M|        "not supported.");
  245|  3.42M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.42M|                  "\n"
  247|  3.42M|                  "Unsupported range type given as input to a scanning "
  248|  3.42M|                  "function.\n"
  249|  3.42M|                  "file_marker_found cannot be used as an "
  250|  3.42M|                  "source range type to scn::scan.\n"
  251|  3.42M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.42M|                  "and do not provide an explicit source range, "
  253|  3.42M|                  "or use scn::scan with a FILE* directly.");
  254|  3.42M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.42M|                  "\n"
  256|  3.42M|                  "Unsupported range type given as input to a scanning "
  257|  3.42M|                  "function.\n"
  258|  3.42M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.42M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.42M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.42M|                  "\n"
  262|  3.42M|                  "Unsupported range type given as input to a scanning "
  263|  3.42M|                  "function.\n"
  264|  3.42M|                  "A range needs to model forward_range and have a valid "
  265|  3.42M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.42M|                  "Examples of scannable ranges are std::string, "
  267|  3.42M|                  "std::string_view, "
  268|  3.42M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.42M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.42M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.42M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.42M|{
  153|  3.42M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.42M|        return std::basic_string_view{ranges::data(r),
  155|  3.42M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.42M|    }
  162|  3.42M|    else {
  163|  3.42M|        return invalid_char_type{};
  164|  3.42M|    }
  165|  3.42M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   403k|{
  226|   403k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   403k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   403k|                  "\n"
  230|   403k|                  "Unsupported range type given as input to a scanning "
  231|   403k|                  "function.\n"
  232|   403k|                  "A range needs to have a character type (value type) "
  233|   403k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   403k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   403k|                  "to be included.\n"
  236|   403k|                  "See the scnlib documentation for more details.");
  237|   403k|    static_assert(
  238|   403k|        !std::is_same_v<T, custom_char_traits>,
  239|   403k|        "\n"
  240|   403k|        "Unsupported range type given as input to a scanning "
  241|   403k|        "function.\n"
  242|   403k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   403k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   403k|        "not supported.");
  245|   403k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   403k|                  "\n"
  247|   403k|                  "Unsupported range type given as input to a scanning "
  248|   403k|                  "function.\n"
  249|   403k|                  "file_marker_found cannot be used as an "
  250|   403k|                  "source range type to scn::scan.\n"
  251|   403k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   403k|                  "and do not provide an explicit source range, "
  253|   403k|                  "or use scn::scan with a FILE* directly.");
  254|   403k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   403k|                  "\n"
  256|   403k|                  "Unsupported range type given as input to a scanning "
  257|   403k|                  "function.\n"
  258|   403k|                  "In order to be scannable, a range needs to satisfy "
  259|   403k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   403k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   403k|                  "\n"
  262|   403k|                  "Unsupported range type given as input to a scanning "
  263|   403k|                  "function.\n"
  264|   403k|                  "A range needs to model forward_range and have a valid "
  265|   403k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   403k|                  "Examples of scannable ranges are std::string, "
  267|   403k|                  "std::string_view, "
  268|   403k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   403k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   403k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   403k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   403k|{
  196|   403k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   403k|        return file_marker_found{};
  198|   403k|    }
  199|   403k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   403k|        if constexpr (ranges::input_range<Range>) {
  201|   403k|            return insufficient_range{};
  202|   403k|        }
  203|   403k|        else {
  204|   403k|            return invalid_input_range{};
  205|   403k|        }
  206|   403k|    }
  207|   403k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   403k|        return invalid_char_type{};
  209|   403k|    }
  210|   403k|    else {
  211|   403k|        return make_forward_scan_buffer(r);
  212|   403k|    }
  213|   403k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.09M|{
  226|  3.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.09M|                  "\n"
  230|  3.09M|                  "Unsupported range type given as input to a scanning "
  231|  3.09M|                  "function.\n"
  232|  3.09M|                  "A range needs to have a character type (value type) "
  233|  3.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.09M|                  "to be included.\n"
  236|  3.09M|                  "See the scnlib documentation for more details.");
  237|  3.09M|    static_assert(
  238|  3.09M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.09M|        "\n"
  240|  3.09M|        "Unsupported range type given as input to a scanning "
  241|  3.09M|        "function.\n"
  242|  3.09M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.09M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.09M|        "not supported.");
  245|  3.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.09M|                  "\n"
  247|  3.09M|                  "Unsupported range type given as input to a scanning "
  248|  3.09M|                  "function.\n"
  249|  3.09M|                  "file_marker_found cannot be used as an "
  250|  3.09M|                  "source range type to scn::scan.\n"
  251|  3.09M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.09M|                  "and do not provide an explicit source range, "
  253|  3.09M|                  "or use scn::scan with a FILE* directly.");
  254|  3.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.09M|                  "\n"
  256|  3.09M|                  "Unsupported range type given as input to a scanning "
  257|  3.09M|                  "function.\n"
  258|  3.09M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.09M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.09M|                  "\n"
  262|  3.09M|                  "Unsupported range type given as input to a scanning "
  263|  3.09M|                  "function.\n"
  264|  3.09M|                  "A range needs to model forward_range and have a valid "
  265|  3.09M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.09M|                  "Examples of scannable ranges are std::string, "
  267|  3.09M|                  "std::string_view, "
  268|  3.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.09M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.09M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.09M|{
  153|  3.09M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.09M|        return std::basic_string_view{ranges::data(r),
  155|  3.09M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.09M|    }
  162|  3.09M|    else {
  163|  3.09M|        return invalid_char_type{};
  164|  3.09M|    }
  165|  3.09M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   697k|{
  226|   697k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   697k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   697k|                  "\n"
  230|   697k|                  "Unsupported range type given as input to a scanning "
  231|   697k|                  "function.\n"
  232|   697k|                  "A range needs to have a character type (value type) "
  233|   697k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   697k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   697k|                  "to be included.\n"
  236|   697k|                  "See the scnlib documentation for more details.");
  237|   697k|    static_assert(
  238|   697k|        !std::is_same_v<T, custom_char_traits>,
  239|   697k|        "\n"
  240|   697k|        "Unsupported range type given as input to a scanning "
  241|   697k|        "function.\n"
  242|   697k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   697k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   697k|        "not supported.");
  245|   697k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   697k|                  "\n"
  247|   697k|                  "Unsupported range type given as input to a scanning "
  248|   697k|                  "function.\n"
  249|   697k|                  "file_marker_found cannot be used as an "
  250|   697k|                  "source range type to scn::scan.\n"
  251|   697k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   697k|                  "and do not provide an explicit source range, "
  253|   697k|                  "or use scn::scan with a FILE* directly.");
  254|   697k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   697k|                  "\n"
  256|   697k|                  "Unsupported range type given as input to a scanning "
  257|   697k|                  "function.\n"
  258|   697k|                  "In order to be scannable, a range needs to satisfy "
  259|   697k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   697k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   697k|                  "\n"
  262|   697k|                  "Unsupported range type given as input to a scanning "
  263|   697k|                  "function.\n"
  264|   697k|                  "A range needs to model forward_range and have a valid "
  265|   697k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   697k|                  "Examples of scannable ranges are std::string, "
  267|   697k|                  "std::string_view, "
  268|   697k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   697k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   697k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   697k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   697k|{
  196|   697k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   697k|        return file_marker_found{};
  198|   697k|    }
  199|   697k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   697k|        if constexpr (ranges::input_range<Range>) {
  201|   697k|            return insufficient_range{};
  202|   697k|        }
  203|   697k|        else {
  204|   697k|            return invalid_input_range{};
  205|   697k|        }
  206|   697k|    }
  207|   697k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   697k|        return invalid_char_type{};
  209|   697k|    }
  210|   697k|    else {
  211|   697k|        return make_forward_scan_buffer(r);
  212|   697k|    }
  213|   697k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  5.43M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.82M|    {
   45|  2.82M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.82M|    {
   66|  2.82M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.82M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.82M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.82M|        do_check_arg_id(id);
   74|  2.82M|        return id;
   75|  2.82M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.82M|{
  210|  2.82M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.82M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.82M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.66M|    {
   61|  2.66M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.66M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  5.48M|    {
   50|  5.48M|        return m_format.data();
   51|  5.48M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.84M|    {
   45|  2.84M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.84M|    {
   66|  2.84M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.84M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.84M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.84M|        do_check_arg_id(id);
   74|  2.84M|        return id;
   75|  2.84M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.84M|{
  210|  2.84M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.84M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.84M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.58M|    {
   61|  2.58M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.58M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  5.43M|    {
   50|  5.43M|        return m_format.data();
   51|  5.43M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  9.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  6.74M|    {
  482|  6.74M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  6.74M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  6.74M|    {
  473|  6.74M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  6.74M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.09M|    {
  482|  3.09M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.09M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.09M|    {
  473|  3.09M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.09M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   614k|    {
  594|   614k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   614k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   614k|    {
  564|   614k|        return ranges::prev(it);
  565|   614k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.22M|    {
  482|  2.22M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.22M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.22M|    {
  473|  2.22M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.22M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.54M|    {
  513|  2.54M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.54M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.54M|    {
  505|  2.54M|        return ranges::next(it, n);
  506|  2.54M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.34M|    {
  549|  2.34M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.34M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.34M|    {
  541|  2.34M|        return ranges::distance(lhs, rhs);
  542|  2.34M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.09M|    {
  513|  1.09M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.09M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.09M|    {
  498|  1.09M|        it.batch_advance(n);
  499|  1.09M|        return it;
  500|  1.09M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   100k|    {
  549|   100k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   100k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   100k|    {
  534|   100k|        return rhs.position() - lhs.position();
  535|   100k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.99M|    {
  482|  1.99M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.99M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.99M|    {
  473|  1.99M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.99M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   513k|    {
  594|   513k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   513k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   513k|    {
  564|   513k|        return ranges::prev(it);
  565|   513k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.12M|    {
  513|  2.12M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.12M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.12M|    {
  505|  2.12M|        return ranges::next(it, n);
  506|  2.12M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.96M|    {
  549|  1.96M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.96M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.96M|    {
  541|  1.96M|        return ranges::distance(lhs, rhs);
  542|  1.96M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.65M|    {
  513|  1.65M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.65M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.65M|    {
  498|  1.65M|        it.batch_advance(n);
  499|  1.65M|        return it;
  500|  1.65M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   168k|    {
  549|   168k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   168k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   168k|    {
  534|   168k|        return rhs.position() - lhs.position();
  535|   168k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.15M|{
  343|  3.15M|    return {ranges::next(ranges::begin(source), n),
  344|  3.15M|            make_vscan_result_range_end(source)};
  345|  3.15M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.15M|{
  330|  3.15M|    return ranges::end(source);
  331|  3.15M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   448k|    {
  253|   448k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.15M|    {
  104|  3.15M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   876k|    {
   39|   876k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.15M|    {
  121|  3.15M|        return ranges::begin(m_range);
  122|  3.15M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   417k|    {
  253|   417k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   834k|    {
   39|   834k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   641k|    {
  253|   641k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.23M|    {
   39|  1.23M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   497k|    {
  253|   497k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   978k|    {
   39|   978k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   650k|    {
  253|   650k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.25M|    {
   39|  1.25M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   501k|    {
  253|   501k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   985k|    {
   39|   985k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   138k|{
  343|   138k|    return {ranges::next(ranges::begin(source), n),
  344|   138k|            make_vscan_result_range_end(source)};
  345|   138k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   138k|{
  330|   138k|    return ranges::end(source);
  331|   138k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   138k|    {
  104|   138k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   138k|    {
  121|   138k|        return ranges::begin(m_range);
  122|   138k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  23.1k|    {
  253|  23.1k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.63M|{
  343|  2.63M|    return {ranges::next(ranges::begin(source), n),
  344|  2.63M|            make_vscan_result_range_end(source)};
  345|  2.63M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.63M|{
  330|  2.63M|    return ranges::end(source);
  331|  2.63M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   372k|    {
  253|   372k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.63M|    {
  104|  2.63M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.63M|    {
  121|  2.63M|        return ranges::begin(m_range);
  122|  2.63M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   353k|    {
  253|   353k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   530k|    {
  253|   530k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   417k|    {
  253|   417k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   537k|    {
  253|   537k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   420k|    {
  253|   420k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   234k|{
  343|   234k|    return {ranges::next(ranges::begin(source), n),
  344|   234k|            make_vscan_result_range_end(source)};
  345|   234k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   234k|{
  330|   234k|    return ranges::end(source);
  331|   234k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  33.0k|    {
  253|  33.0k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   234k|    {
  104|   234k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   234k|    {
  121|   234k|        return ranges::begin(m_range);
  122|   234k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  40.3k|    {
  253|  40.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  40.3k|    {
  253|  40.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  40.3k|    {
  253|  40.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  40.3k|    {
  253|  40.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  40.3k|    {
  253|  40.3k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   222k|{
  117|   222k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   222k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   222k|{
   77|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   222k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   222k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   444k|{
   55|   444k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 402k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   402k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   402k|    static_cast<    \
  |  |  247|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   402k|    static_cast<    \
  |  |  247|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   444k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   222k|{
  201|   222k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   222k|                                                      format, {});
  203|   222k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   222k|{
  163|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   222k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   222k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  48.0k|{
  248|  48.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  48.0k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.0k|{
  229|  48.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  48.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.9k|    static_cast<    \
  |  |  247|  45.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.9k|    static_cast<    \
  |  |  247|  45.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.0k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   209k|{
  117|   209k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   209k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   209k|{
   77|   209k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   209k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   209k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   209k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   209k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   418k|{
   55|   418k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 376k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   376k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   376k|    static_cast<    \
  |  |  247|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   376k|    static_cast<    \
  |  |  247|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   418k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   209k|{
  201|   209k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   209k|                                                      format, {});
  203|   209k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   209k|{
  163|   209k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   209k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   209k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   209k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   209k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  43.2k|{
  248|  43.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  43.2k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  43.2k|{
  229|  43.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  43.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  43.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  43.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.1k|    static_cast<    \
  |  |  247|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.1k|    static_cast<    \
  |  |  247|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  43.2k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   312k|{
  117|   312k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   312k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   312k|{
   77|   312k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   312k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   312k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   312k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   312k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   624k|{
   55|   624k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 582k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   582k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   582k|    static_cast<    \
  |  |  247|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   582k|    static_cast<    \
  |  |  247|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   624k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   312k|{
  201|   312k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   312k|                                                      format, {});
  203|   312k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   312k|{
  163|   312k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   312k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   312k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   312k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   312k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  61.0k|{
  248|  61.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  61.0k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  61.0k|{
  229|  61.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  61.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  61.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  61.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  58.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.9k|    static_cast<    \
  |  |  247|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  58.9k|    static_cast<    \
  |  |  247|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  61.0k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   246k|{
  117|   246k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   246k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   246k|{
   77|   246k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   246k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   246k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   246k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   493k|{
   55|   493k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 451k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   451k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   451k|    static_cast<    \
  |  |  247|   451k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   451k|    static_cast<    \
  |  |  247|   451k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   493k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   246k|{
  201|   246k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   246k|                                                      format, {});
  203|   246k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   246k|{
  163|   246k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   246k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   246k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   246k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  47.6k|{
  248|  47.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  47.6k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  47.6k|{
  229|  47.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  47.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.5k|    static_cast<    \
  |  |  247|  45.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.5k|    static_cast<    \
  |  |  247|  45.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  47.6k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   316k|{
  117|   316k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   316k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   316k|{
   77|   316k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   316k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   316k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   316k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   316k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   633k|{
   55|   633k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 591k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   591k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   591k|    static_cast<    \
  |  |  247|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   591k|    static_cast<    \
  |  |  247|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   633k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   316k|{
  201|   316k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   316k|                                                      format, {});
  203|   316k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   316k|{
  163|   316k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   316k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   316k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   316k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   316k|    static_cast<    \
  |  |  247|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   316k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  61.8k|{
  248|  61.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  61.8k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  61.8k|{
  229|  61.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  61.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  59.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.7k|    static_cast<    \
  |  |  247|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.7k|    static_cast<    \
  |  |  247|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  61.8k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   248k|{
  117|   248k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   248k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   248k|{
   77|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   248k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   248k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   497k|{
   55|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 455k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|   455k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   455k|    static_cast<    \
  |  |  247|   455k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   497k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   248k|{
  201|   248k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   248k|                                                      format, {});
  203|   248k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   248k|{
  163|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   248k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   248k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  47.9k|{
  248|  47.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  47.9k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  47.9k|{
  229|  47.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  47.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.8k|    static_cast<    \
  |  |  247|  45.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.8k|    static_cast<    \
  |  |  247|  45.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  47.9k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  31.5k|{
  117|  31.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  31.5k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  31.5k|{
   77|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  31.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  31.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  63.0k|{
   55|  63.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.0k, False: 21.0k]
  |  |  ------------------
  ------------------
   56|  42.0k|        return unexpected(result.error());
   57|  42.0k|    }
   58|  21.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  21.0k|    static_cast<    \
  |  |  247|  21.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  63.0k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  31.5k|{
  201|  31.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  31.5k|                                                      format, {});
  203|  31.5k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  31.5k|{
  163|  31.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  31.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  31.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  31.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  31.5k|    static_cast<    \
  |  |  247|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  31.5k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.20k|{
  248|  4.20k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.20k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.20k|{
  229|  4.20k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.10k, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.10k|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.10k|    static_cast<    \
  |  |  247|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.20k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   203k|{
   77|   203k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   203k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   203k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   203k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   203k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   407k|{
   55|   407k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 334k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   334k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   407k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   203k|{
  163|   203k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   203k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   203k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   203k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   203k|    static_cast<    \
  |  |  247|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   203k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  41.9k|{
  229|  41.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  41.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  38.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  41.9k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   196k|{
   77|   196k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   196k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   196k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   196k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   392k|{
   55|   392k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 318k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   318k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   318k|    static_cast<    \
  |  |  247|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   392k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   196k|{
  163|   196k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   196k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   196k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   196k|    static_cast<    \
  |  |  247|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   196k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  38.4k|{
  229|  38.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  38.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  38.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 34.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  38.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  34.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  34.8k|    static_cast<    \
  |  |  247|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  34.8k|    static_cast<    \
  |  |  247|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  38.4k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   277k|{
   77|   277k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   277k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   277k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   277k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   277k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   555k|{
   55|   555k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 481k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   481k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   481k|    static_cast<    \
  |  |  247|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   481k|    static_cast<    \
  |  |  247|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   555k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   277k|{
  163|   277k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   277k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   277k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   277k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   277k|    static_cast<    \
  |  |  247|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   277k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  52.5k|{
  229|  52.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  52.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  48.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  48.8k|    static_cast<    \
  |  |  247|  48.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  48.8k|    static_cast<    \
  |  |  247|  48.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  52.5k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   226k|{
   77|   226k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   226k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   226k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   226k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   452k|{
   55|   452k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 379k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   379k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   379k|    static_cast<    \
  |  |  247|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   379k|    static_cast<    \
  |  |  247|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   452k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   226k|{
  163|   226k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   226k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   226k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   226k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  41.7k|{
  229|  41.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  41.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  38.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.1k|    static_cast<    \
  |  |  247|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.1k|    static_cast<    \
  |  |  247|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  41.7k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   280k|{
   77|   280k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   280k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   280k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   280k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   280k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   561k|{
   55|   561k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 488k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   488k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   488k|    static_cast<    \
  |  |  247|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   561k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   280k|{
  163|   280k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   280k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   280k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   280k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   280k|    static_cast<    \
  |  |  247|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   280k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  53.1k|{
  229|  53.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  53.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  53.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  53.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  53.1k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   227k|{
   77|   227k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   227k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   227k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   227k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   227k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   455k|{
   55|   455k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 382k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|   382k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   455k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   227k|{
  163|   227k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   227k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   227k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   227k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   227k|    static_cast<    \
  |  |  247|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   227k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  42.0k|{
  229|  42.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  42.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  38.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  38.3k|    static_cast<    \
  |  |  247|  38.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  42.0k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  51.3k|{
   77|  51.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  51.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  51.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  51.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   102k|{
   55|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 29.3k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  29.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  29.3k|    static_cast<    \
  |  |  247|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  29.3k|    static_cast<    \
  |  |  247|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   102k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  51.3k|{
  163|  51.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  51.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  51.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.3k|    static_cast<    \
  |  |  247|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  51.3k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  55.0k|{
   77|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  55.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  55.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   110k|{
   55|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 36.6k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  36.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   110k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  55.0k|{
  163|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  55.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  55.0k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  55.0k|{
   77|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  55.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  55.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   110k|{
   55|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 36.6k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  36.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   110k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  55.0k|{
  163|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  55.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  55.0k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  55.0k|{
   77|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  55.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  55.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   110k|{
   55|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 36.6k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  36.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   110k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  55.0k|{
  163|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  55.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  55.0k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  55.0k|{
   77|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  55.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  55.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   110k|{
   55|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 36.6k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  36.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   110k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  55.0k|{
  163|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  55.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  55.0k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  55.0k|{
   77|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  55.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  55.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   110k|{
   55|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.3k, False: 36.6k]
  |  |  ------------------
  ------------------
   56|  73.3k|        return unexpected(result.error());
   57|  73.3k|    }
   58|  36.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  36.6k|    static_cast<    \
  |  |  247|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   110k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  55.0k|{
  163|  55.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  55.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  55.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  55.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  55.0k|    static_cast<    \
  |  |  247|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  55.0k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.33k|{
  229|  7.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.66k, False: 3.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.66k|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.66k|    static_cast<    \
  |  |  247|  3.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.33k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   403k|{
  486|   403k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   403k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   403k|    {
  378|   403k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   403k|    {
  360|   403k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   403k|    {
  129|   403k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   403k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.21M|    {
  382|  1.21M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.90k, False: 1.20M]
  ------------------
  383|  1.90k|            return false;
  384|  1.90k|        }
  385|  1.20M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 881k, False: 328k]
  ------------------
  386|   881k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   881k|                                          this->m_current_view.begin(),
  388|   881k|                                          this->m_current_view.end());
  389|   881k|        }
  390|  1.20M|        m_latest = *m_cursor;
  391|  1.20M|        ++m_cursor;
  392|  1.20M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.20M|        return true;
  394|  1.21M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   403k|    {
   49|   403k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   403k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   403k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   697k|{
  486|   697k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   697k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   697k|    {
  378|   697k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   697k|    {
  360|   697k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   697k|    {
  129|   697k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   697k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.84M|    {
  382|  1.84M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.74k, False: 1.84M]
  ------------------
  383|  1.74k|            return false;
  384|  1.74k|        }
  385|  1.84M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.27M, False: 564k]
  ------------------
  386|  1.27M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.27M|                                          this->m_current_view.begin(),
  388|  1.27M|                                          this->m_current_view.end());
  389|  1.27M|        }
  390|  1.84M|        m_latest = *m_cursor;
  391|  1.84M|        ++m_cursor;
  392|  1.84M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.84M|        return true;
  394|  1.84M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   697k|    {
   49|   697k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   697k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   697k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  32.4M|    {
  173|  32.4M|        return m_end == nullptr;
  174|  32.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  1.57M|    {
  189|  1.57M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.57M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.57M|        return parent()->get_segment_starting_at(position());
  195|  1.57M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  17.4M|    {
  183|  17.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  17.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  17.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  1.57M|    {
   79|  1.57M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 390k, False: 1.18M]
  |  |  ------------------
  ------------------
   80|  1.57M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   390k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   390k|        }
   83|  1.18M|        const auto start = pos - m_putback_buffer.size();
   84|  1.18M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.57M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   630k|    {
  178|   630k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   630k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  3.22M|    {
  168|  3.22M|        return m_position;
  169|  3.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.21M|    {
  101|  1.21M|        return m_is_contiguous;
  102|  1.21M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  55.1M|    {
  173|  55.1M|        return m_end == nullptr;
  174|  55.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  2.93M|    {
  189|  2.93M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 2.93M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  2.93M|        return parent()->get_segment_starting_at(position());
  195|  2.93M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  29.2M|    {
  183|  29.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  29.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  29.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  29.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  2.93M|    {
   79|  2.93M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 901k, False: 2.03M]
  |  |  ------------------
  ------------------
   80|  2.93M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   901k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   901k|        }
   83|  2.03M|        const auto start = pos - m_putback_buffer.size();
   84|  2.03M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  2.93M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.09M|    {
  178|  1.09M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  6.23M|    {
  168|  6.23M|        return m_position;
  169|  6.23M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.09M|    {
  101|  2.09M|        return m_is_contiguous;
  102|  2.09M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   403k|{
  322|   403k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 403k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   403k|    return ranges::subrange{forward_iterator{this, 0},
  327|   403k|                            ranges_std::default_sentinel};
  328|   403k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   403k|    {
  155|   403k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   403k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   403k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.51M|    {
  258|  1.51M|        return x.is_at_end();
  259|  1.51M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  3.09M|    {
  302|  3.09M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 3.09M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  3.09M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 3.09M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  3.09M|        return !read_at_position();
  309|  3.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  8.72M|    {
  282|  8.72M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  8.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  8.72M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 8.72M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  8.72M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  8.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.51M, False: 1.21M]
  |  |  ------------------
  ------------------
  289|  7.51M|            return true;
  290|  7.51M|        }
  291|       |
  292|  2.42M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.21M, False: 1.20M]
  ------------------
  293|  1.21M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.90k, False: 1.20M]
  ------------------
  294|  1.90k|                return false;
  295|  1.90k|            }
  296|  1.21M|        }
  297|  1.20M|        return true;
  298|  1.21M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  11.7M|    {
   59|  11.7M|        return m_putback_buffer.size() + m_current_view.size();
   60|  11.7M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.57M|    {
  269|  1.57M|        return !x.is_at_end();
  270|  1.57M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  3.46M|    {
  217|  3.46M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  3.46M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 3.46M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  3.46M|        auto res = read_at_position();
  226|  3.46M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  3.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  3.46M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  3.46M|    {
   90|  3.46M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.02M, False: 442k]
  |  |  ------------------
  ------------------
   91|  3.46M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  3.02M|            return m_putback_buffer[pos];
   93|  3.02M|        }
   94|   442k|        const auto start = pos - m_putback_buffer.size();
   95|   442k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  3.46M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  2.16M|    {
  203|  2.16M|        ++m_position;
  204|  2.16M|        std::ignore = read_at_position();
  205|  2.16M|        return *this;
  206|  2.16M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  1.82M|    {
  252|  1.82M|        return !(lhs == rhs);
  253|  1.82M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  2.10M|    {
  247|  2.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.10M, False: 0]
  |  Branch (247:46): [True: 554k, False: 1.55M]
  ------------------
  248|  2.10M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  1.09M|    {
  232|  1.09M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.09M|        return *this;
  235|  1.09M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   264k|    {
   54|   264k|        sync(0);
   55|   264k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   697k|{
  322|   697k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 697k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   697k|    return ranges::subrange{forward_iterator{this, 0},
  327|   697k|                            ranges_std::default_sentinel};
  328|   697k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   697k|    {
  155|   697k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   697k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   697k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   697k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   697k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   697k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   697k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.61M|    {
  258|  2.61M|        return x.is_at_end();
  259|  2.61M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  5.06M|    {
  302|  5.06M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 5.06M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  5.06M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 5.06M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  5.06M|        return !read_at_position();
  309|  5.06M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  14.5M|    {
  282|  14.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  14.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  14.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 14.5M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  14.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  14.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.6M, False: 1.84M]
  |  |  ------------------
  ------------------
  289|  12.6M|            return true;
  290|  12.6M|        }
  291|       |
  292|  3.68M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.84M, False: 1.84M]
  ------------------
  293|  1.84M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.74k, False: 1.84M]
  ------------------
  294|  1.74k|                return false;
  295|  1.74k|            }
  296|  1.84M|        }
  297|  1.84M|        return true;
  298|  1.84M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  19.3M|    {
   59|  19.3M|        return m_putback_buffer.size() + m_current_view.size();
   60|  19.3M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  2.45M|    {
  269|  2.45M|        return !x.is_at_end();
  270|  2.45M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  6.25M|    {
  217|  6.25M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  6.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  6.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 6.25M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  6.25M|        auto res = read_at_position();
  226|  6.25M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  6.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  6.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  6.25M|    {
   90|  6.25M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  6.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.93M, False: 1.32M]
  |  |  ------------------
  ------------------
   91|  6.25M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.93M|            return m_putback_buffer[pos];
   93|  4.93M|        }
   94|  1.32M|        const auto start = pos - m_putback_buffer.size();
   95|  1.32M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  6.25M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  3.20M|    {
  203|  3.20M|        ++m_position;
  204|  3.20M|        std::ignore = read_at_position();
  205|  3.20M|        return *this;
  206|  3.20M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  3.09M|    {
  252|  3.09M|        return !(lhs == rhs);
  253|  3.09M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  3.57M|    {
  247|  3.57M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 3.57M, False: 0]
  |  Branch (247:46): [True: 1.18M, False: 2.39M]
  ------------------
  248|  3.57M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.65M|    {
  232|  1.65M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.65M|        return *this;
  235|  1.65M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   462k|    {
   54|   462k|        sync(0);
   55|   462k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   833k|{
   72|   833k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   833k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   833k|    }
   75|   833k|    else if constexpr (sizeof(U) == 2) {
   76|   833k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   833k|    }
   78|   833k|    else {
   79|       |        // utf-32
   80|   833k|        static_assert(sizeof(U) == 4);
   81|   833k|        SCN_UNUSED(ch);
   82|   833k|        return 1;
   83|   833k|    }
   84|   833k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   833k|{
   36|   833k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   833k|    SCN_GCC_COMPAT_PUSH
   39|   833k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   833k|    constexpr char lengths[] =
   41|   833k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   833k|        "\1\1\1\1\1\1\1\1"
   43|   833k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   833k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   833k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   833k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   833k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   833k|    SCN_GCC_COMPAT_POP
   50|   833k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  45.7M|{
   72|  45.7M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  45.7M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  45.7M|    }
   75|  45.7M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  45.7M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  45.7M|    }
   78|  45.7M|    else {
   79|       |        // utf-32
   80|  45.7M|        static_assert(sizeof(U) == 4);
   81|  45.7M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  45.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  45.7M|        return 1;
   83|  45.7M|    }
   84|  45.7M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   929k|{
   36|   929k|#define SCN_VISIT(Type)                                         \
   37|   929k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   929k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   929k|    }                                                           \
   40|   929k|    else {                                                      \
   41|   929k|        return vis(monostate_val);                              \
   42|   929k|    }
   43|       |
   44|   929k|    monostate monostate_val{};
   45|       |
   46|   929k|    switch (arg.m_type) {
   47|   144k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 144k, False: 785k]
  ------------------
   48|   144k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   144k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   144k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   144k|    }                                                           \
  |  |   40|   144k|    else {                                                      \
  |  |   41|   144k|        return vis(monostate_val);                              \
  |  |   42|   144k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 929k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   183k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 183k, False: 746k]
  ------------------
   52|   183k|            SCN_VISIT(int);
  ------------------
  |  |   37|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   183k|    }                                                           \
  |  |   40|   183k|    else {                                                      \
  |  |   41|   183k|        return vis(monostate_val);                              \
  |  |   42|   183k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 929k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   185k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 185k, False: 743k]
  ------------------
   56|   185k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   185k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   185k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   185k|    }                                                           \
  |  |   40|   185k|    else {                                                      \
  |  |   41|   185k|        return vis(monostate_val);                              \
  |  |   42|   185k|    }
  ------------------
   57|   129k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 129k, False: 799k]
  ------------------
   58|   129k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   129k|    }                                                           \
  |  |   40|   129k|    else {                                                      \
  |  |   41|   129k|        return vis(monostate_val);                              \
  |  |   42|   129k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 929k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   143k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 143k, False: 786k]
  ------------------
   62|   143k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   143k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   143k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   143k|    }                                                           \
  |  |   40|   143k|    else {                                                      \
  |  |   41|   143k|        return vis(monostate_val);                              \
  |  |   42|   143k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 929k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   143k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 143k, False: 785k]
  ------------------
   66|   143k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   143k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   143k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   143k|    }                                                           \
  |  |   40|   143k|    else {                                                      \
  |  |   41|   143k|        return vis(monostate_val);                              \
  |  |   42|   143k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 929k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 929k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 929k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 929k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 929k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 929k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 929k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 929k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 929k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 929k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 929k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 929k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 929k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 929k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 929k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 929k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 929k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   929k|            SCN_CLANG_POP
  114|   929k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   929k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  75.7k|{
   36|  75.7k|#define SCN_VISIT(Type)                                         \
   37|  75.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  75.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  75.7k|    }                                                           \
   40|  75.7k|    else {                                                      \
   41|  75.7k|        return vis(monostate_val);                              \
   42|  75.7k|    }
   43|       |
   44|  75.7k|    monostate monostate_val{};
   45|       |
   46|  75.7k|    switch (arg.m_type) {
   47|  12.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 12.6k, False: 63.0k]
  ------------------
   48|  12.6k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 75.7k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  12.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 12.6k, False: 63.0k]
  ------------------
   52|  12.6k|            SCN_VISIT(int);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 75.7k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  12.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 12.6k, False: 63.0k]
  ------------------
   56|  12.6k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   57|  12.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 12.6k, False: 63.0k]
  ------------------
   58|  12.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 75.7k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  12.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 12.6k, False: 63.0k]
  ------------------
   62|  12.6k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 75.7k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  12.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 12.6k, False: 63.0k]
  ------------------
   66|  12.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.6k|    }                                                           \
  |  |   40|  12.6k|    else {                                                      \
  |  |   41|  12.6k|        return vis(monostate_val);                              \
  |  |   42|  12.6k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 75.7k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 75.7k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 75.7k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 75.7k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 75.7k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 75.7k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 75.7k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 75.7k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 75.7k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 75.7k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 75.7k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 75.7k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 75.7k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 75.7k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 75.7k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 75.7k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 75.7k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  75.7k|            SCN_CLANG_POP
  114|  75.7k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  75.7k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.41M|{
   36|  2.41M|#define SCN_VISIT(Type)                                         \
   37|  2.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.41M|    }                                                           \
   40|  2.41M|    else {                                                      \
   41|  2.41M|        return vis(monostate_val);                              \
   42|  2.41M|    }
   43|       |
   44|  2.41M|    monostate monostate_val{};
   45|       |
   46|  2.41M|    switch (arg.m_type) {
   47|   335k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 335k, False: 2.08M]
  ------------------
   48|   335k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   335k|    }                                                           \
  |  |   40|   335k|    else {                                                      \
  |  |   41|   335k|        return vis(monostate_val);                              \
  |  |   42|   335k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.41M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   490k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 490k, False: 1.92M]
  ------------------
   52|   490k|            SCN_VISIT(int);
  ------------------
  |  |   37|   490k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   490k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   490k|    }                                                           \
  |  |   40|   490k|    else {                                                      \
  |  |   41|   490k|        return vis(monostate_val);                              \
  |  |   42|   490k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.41M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   496k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 496k, False: 1.91M]
  ------------------
   56|   496k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   496k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   496k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   496k|    }                                                           \
  |  |   40|   496k|    else {                                                      \
  |  |   41|   496k|        return vis(monostate_val);                              \
  |  |   42|   496k|    }
  ------------------
   57|   319k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 319k, False: 2.09M]
  ------------------
   58|   319k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   319k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   319k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   319k|    }                                                           \
  |  |   40|   319k|    else {                                                      \
  |  |   41|   319k|        return vis(monostate_val);                              \
  |  |   42|   319k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.41M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   385k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 385k, False: 2.03M]
  ------------------
   62|   385k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   385k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   385k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   385k|    }                                                           \
  |  |   40|   385k|    else {                                                      \
  |  |   41|   385k|        return vis(monostate_val);                              \
  |  |   42|   385k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.41M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   388k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 388k, False: 2.02M]
  ------------------
   66|   388k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   388k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   388k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   388k|    }                                                           \
  |  |   40|   388k|    else {                                                      \
  |  |   41|   388k|        return vis(monostate_val);                              \
  |  |   42|   388k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.41M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.41M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.41M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.41M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.41M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.41M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.41M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.41M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.41M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.41M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.41M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.41M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.41M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.41M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.41M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.41M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.41M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.41M|            SCN_CLANG_POP
  114|  2.41M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.41M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   252k|{
   36|   252k|#define SCN_VISIT(Type)                                         \
   37|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   252k|    }                                                           \
   40|   252k|    else {                                                      \
   41|   252k|        return vis(monostate_val);                              \
   42|   252k|    }
   43|       |
   44|   252k|    monostate monostate_val{};
   45|       |
   46|   252k|    switch (arg.m_type) {
   47|  42.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 42.0k, False: 210k]
  ------------------
   48|  42.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 252k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  42.0k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 42.0k, False: 210k]
  ------------------
   52|  42.0k|            SCN_VISIT(int);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 252k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  42.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 42.0k, False: 210k]
  ------------------
   56|  42.0k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   57|  42.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 42.0k, False: 210k]
  ------------------
   58|  42.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 252k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  42.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 42.0k, False: 210k]
  ------------------
   62|  42.0k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 252k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  42.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 42.0k, False: 210k]
  ------------------
   66|  42.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  42.0k|    }                                                           \
  |  |   40|  42.0k|    else {                                                      \
  |  |   41|  42.0k|        return vis(monostate_val);                              \
  |  |   42|  42.0k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 252k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 252k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 252k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 252k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 252k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 252k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 252k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 252k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 252k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 252k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 252k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 252k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 252k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 252k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 252k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 252k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 252k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   252k|            SCN_CLANG_POP
  114|   252k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   252k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   809k|{
   36|   809k|#define SCN_VISIT(Type)                                         \
   37|   809k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   809k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   809k|    }                                                           \
   40|   809k|    else {                                                      \
   41|   809k|        return vis(monostate_val);                              \
   42|   809k|    }
   43|       |
   44|   809k|    monostate monostate_val{};
   45|       |
   46|   809k|    switch (arg.m_type) {
   47|   125k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 125k, False: 683k]
  ------------------
   48|   125k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   125k|    }                                                           \
  |  |   40|   125k|    else {                                                      \
  |  |   41|   125k|        return vis(monostate_val);                              \
  |  |   42|   125k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 809k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   157k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 157k, False: 652k]
  ------------------
   52|   157k|            SCN_VISIT(int);
  ------------------
  |  |   37|   157k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   157k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   157k|    }                                                           \
  |  |   40|   157k|    else {                                                      \
  |  |   41|   157k|        return vis(monostate_val);                              \
  |  |   42|   157k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 809k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   159k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 159k, False: 650k]
  ------------------
   56|   159k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   159k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   159k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   159k|    }                                                           \
  |  |   40|   159k|    else {                                                      \
  |  |   41|   159k|        return vis(monostate_val);                              \
  |  |   42|   159k|    }
  ------------------
   57|   115k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 115k, False: 694k]
  ------------------
   58|   115k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   115k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   115k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   115k|    }                                                           \
  |  |   40|   115k|    else {                                                      \
  |  |   41|   115k|        return vis(monostate_val);                              \
  |  |   42|   115k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 809k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   125k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 125k, False: 684k]
  ------------------
   62|   125k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   125k|    }                                                           \
  |  |   40|   125k|    else {                                                      \
  |  |   41|   125k|        return vis(monostate_val);                              \
  |  |   42|   125k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 809k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   126k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 126k, False: 683k]
  ------------------
   66|   126k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 809k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 809k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 809k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 809k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 809k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 809k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 809k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 809k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 809k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 809k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 809k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 809k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 809k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 809k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 809k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 809k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 809k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   809k|            SCN_CLANG_POP
  114|   809k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   809k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.15M|{
   36|  2.15M|#define SCN_VISIT(Type)                                         \
   37|  2.15M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.15M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.15M|    }                                                           \
   40|  2.15M|    else {                                                      \
   41|  2.15M|        return vis(monostate_val);                              \
   42|  2.15M|    }
   43|       |
   44|  2.15M|    monostate monostate_val{};
   45|       |
   46|  2.15M|    switch (arg.m_type) {
   47|   301k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 301k, False: 1.85M]
  ------------------
   48|   301k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   301k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   301k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   301k|    }                                                           \
  |  |   40|   301k|    else {                                                      \
  |  |   41|   301k|        return vis(monostate_val);                              \
  |  |   42|   301k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.15M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   427k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 427k, False: 1.72M]
  ------------------
   52|   427k|            SCN_VISIT(int);
  ------------------
  |  |   37|   427k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   427k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   427k|    }                                                           \
  |  |   40|   427k|    else {                                                      \
  |  |   41|   427k|        return vis(monostate_val);                              \
  |  |   42|   427k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.15M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   433k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 433k, False: 1.71M]
  ------------------
   56|   433k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   433k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   433k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   433k|    }                                                           \
  |  |   40|   433k|    else {                                                      \
  |  |   41|   433k|        return vis(monostate_val);                              \
  |  |   42|   433k|    }
  ------------------
   57|   293k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 293k, False: 1.85M]
  ------------------
   58|   293k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   293k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   293k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   293k|    }                                                           \
  |  |   40|   293k|    else {                                                      \
  |  |   41|   293k|        return vis(monostate_val);                              \
  |  |   42|   293k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.15M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   347k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 347k, False: 1.80M]
  ------------------
   62|   347k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   347k|    }                                                           \
  |  |   40|   347k|    else {                                                      \
  |  |   41|   347k|        return vis(monostate_val);                              \
  |  |   42|   347k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.15M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   349k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 349k, False: 1.80M]
  ------------------
   66|   349k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   349k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   349k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   349k|    }                                                           \
  |  |   40|   349k|    else {                                                      \
  |  |   41|   349k|        return vis(monostate_val);                              \
  |  |   42|   349k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.15M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.15M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.15M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.15M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.15M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.15M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.15M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.15M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.15M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.15M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.15M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.15M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.15M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.15M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.15M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.15M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.15M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.15M|            SCN_CLANG_POP
  114|  2.15M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.15M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   132k|{
   36|   132k|#define SCN_VISIT(Type)                                         \
   37|   132k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   132k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   132k|    }                                                           \
   40|   132k|    else {                                                      \
   41|   132k|        return vis(monostate_val);                              \
   42|   132k|    }
   43|       |
   44|   132k|    monostate monostate_val{};
   45|       |
   46|   132k|    switch (arg.m_type) {
   47|  22.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 22.0k, False: 110k]
  ------------------
   48|  22.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 132k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  22.0k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 22.0k, False: 110k]
  ------------------
   52|  22.0k|            SCN_VISIT(int);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 132k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  22.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 22.0k, False: 110k]
  ------------------
   56|  22.0k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   57|  22.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 22.0k, False: 110k]
  ------------------
   58|  22.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 132k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  22.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 22.0k, False: 110k]
  ------------------
   62|  22.0k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 132k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  22.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 22.0k, False: 110k]
  ------------------
   66|  22.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.0k|    }                                                           \
  |  |   40|  22.0k|    else {                                                      \
  |  |   41|  22.0k|        return vis(monostate_val);                              \
  |  |   42|  22.0k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 132k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 132k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 132k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 132k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 132k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 132k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 132k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 132k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 132k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 132k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 132k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 132k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 132k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 132k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 132k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 132k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 132k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   132k|            SCN_CLANG_POP
  114|   132k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   132k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   432k|{
   36|   432k|#define SCN_VISIT(Type)                                         \
   37|   432k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   432k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   432k|    }                                                           \
   40|   432k|    else {                                                      \
   41|   432k|        return vis(monostate_val);                              \
   42|   432k|    }
   43|       |
   44|   432k|    monostate monostate_val{};
   45|       |
   46|   432k|    switch (arg.m_type) {
   47|  66.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 66.0k, False: 366k]
  ------------------
   48|  66.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  66.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  66.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  66.0k|    }                                                           \
  |  |   40|  66.0k|    else {                                                      \
  |  |   41|  66.0k|        return vis(monostate_val);                              \
  |  |   42|  66.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 432k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  73.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 73.3k, False: 359k]
  ------------------
   52|  73.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  73.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  73.3k|    }                                                           \
  |  |   40|  73.3k|    else {                                                      \
  |  |   41|  73.3k|        return vis(monostate_val);                              \
  |  |   42|  73.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 432k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  73.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 73.3k, False: 359k]
  ------------------
   56|  73.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  73.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  73.3k|    }                                                           \
  |  |   40|  73.3k|    else {                                                      \
  |  |   41|  73.3k|        return vis(monostate_val);                              \
  |  |   42|  73.3k|    }
  ------------------
   57|  73.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 73.3k, False: 359k]
  ------------------
   58|  73.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  73.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  73.3k|    }                                                           \
  |  |   40|  73.3k|    else {                                                      \
  |  |   41|  73.3k|        return vis(monostate_val);                              \
  |  |   42|  73.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 432k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  73.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 73.3k, False: 359k]
  ------------------
   62|  73.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  73.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  73.3k|    }                                                           \
  |  |   40|  73.3k|    else {                                                      \
  |  |   41|  73.3k|        return vis(monostate_val);                              \
  |  |   42|  73.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 432k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  73.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 73.3k, False: 359k]
  ------------------
   66|  73.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  73.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  73.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  73.3k|    }                                                           \
  |  |   40|  73.3k|    else {                                                      \
  |  |   41|  73.3k|        return vis(monostate_val);                              \
  |  |   42|  73.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 432k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 432k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 432k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 432k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 432k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 432k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 432k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 432k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 432k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 432k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 432k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 432k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 432k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 432k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 432k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 432k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 432k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   432k|            SCN_CLANG_POP
  114|   432k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   432k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.55M|{
  174|  1.55M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.55M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.55M|{
  111|  1.55M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.55M|    auto result = vscan_impl(buffer, format, args);
  114|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 1.42M]
  |  |  ------------------
  ------------------
  115|   126k|        return unexpected(result.error());
  116|   126k|    }
  117|  1.42M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.55M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.55M|{
  192|  1.55M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.55M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.55M|{
  127|  1.55M|#if !SCN_DISABLE_LOCALE
  128|  1.55M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.55M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.55M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.55M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 1.42M]
  |  |  ------------------
  ------------------
  135|   126k|        return unexpected(result.error());
  136|   126k|    }
  137|  1.42M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.55M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   309k|{
  205|   309k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   309k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   309k|{
  151|   309k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   309k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   309k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.6k, False: 297k]
  |  |  ------------------
  ------------------
  155|  12.6k|        return unexpected(result.error());
  156|  12.6k|    }
  157|   297k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   309k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   189k|{
  174|   189k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   189k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   189k|{
  111|   189k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   189k|    auto result = vscan_impl(buffer, format, args);
  114|   189k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 63.0k]
  |  |  ------------------
  ------------------
  115|   126k|        return unexpected(result.error());
  116|   126k|    }
  117|  63.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   189k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   189k|{
  192|   189k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   189k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   189k|{
  127|   189k|#if !SCN_DISABLE_LOCALE
  128|   189k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   189k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   189k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   189k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   189k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 63.0k]
  |  |  ------------------
  ------------------
  135|   126k|        return unexpected(result.error());
  136|   126k|    }
  137|  63.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   189k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  25.2k|{
  205|  25.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  25.2k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  25.2k|{
  151|  25.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  25.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  25.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.6k, False: 12.6k]
  |  |  ------------------
  ------------------
  155|  12.6k|        return unexpected(result.error());
  156|  12.6k|    }
  157|  12.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  25.2k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.41M|{
  111|  1.41M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.41M|    auto result = vscan_impl(buffer, format, args);
  114|  1.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 1.19M]
  |  |  ------------------
  ------------------
  115|   220k|        return unexpected(result.error());
  116|   220k|    }
  117|  1.19M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.41M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.41M|{
  127|  1.41M|#if !SCN_DISABLE_LOCALE
  128|  1.41M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.41M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.41M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.41M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 1.19M]
  |  |  ------------------
  ------------------
  135|   220k|        return unexpected(result.error());
  136|   220k|    }
  137|  1.19M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.41M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   269k|{
  151|   269k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   269k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   269k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.0k, False: 247k]
  |  |  ------------------
  ------------------
  155|  22.0k|        return unexpected(result.error());
  156|  22.0k|    }
  157|   247k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   269k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   326k|{
  111|   326k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   326k|    auto result = vscan_impl(buffer, format, args);
  114|   326k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 106k]
  |  |  ------------------
  ------------------
  115|   220k|        return unexpected(result.error());
  116|   220k|    }
  117|   106k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   326k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   326k|{
  127|   326k|#if !SCN_DISABLE_LOCALE
  128|   326k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   326k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   326k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   326k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   326k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220k, False: 106k]
  |  |  ------------------
  ------------------
  135|   220k|        return unexpected(result.error());
  136|   220k|    }
  137|   106k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   326k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  44.0k|{
  151|  44.0k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  44.0k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  44.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.0k, False: 22.0k]
  |  |  ------------------
  ------------------
  155|  22.0k|        return unexpected(result.error());
  156|  22.0k|    }
  157|  22.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  44.0k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   203k|{
   90|   203k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   203k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.41M|{
   45|  1.41M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.41M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   203k|{
  125|   203k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   203k|                                                         format, {});
  127|   203k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.41M|{
   61|  1.41M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.41M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  41.9k|{
  159|  41.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  41.9k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   269k|{
   73|   269k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   269k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   196k|{
   90|   196k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   196k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   196k|{
  125|   196k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   196k|                                                         format, {});
  127|   196k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  38.4k|{
  159|  38.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  38.4k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   277k|{
   90|   277k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   277k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   277k|{
  125|   277k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   277k|                                                         format, {});
  127|   277k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  52.5k|{
  159|  52.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  52.5k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   226k|{
   90|   226k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   226k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   226k|{
  125|   226k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   226k|                                                         format, {});
  127|   226k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  41.7k|{
  159|  41.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  41.7k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   280k|{
   90|   280k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   280k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   280k|{
  125|   280k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   280k|                                                         format, {});
  127|   280k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  53.1k|{
  159|  53.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  53.1k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   227k|{
   90|   227k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   227k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   227k|{
  125|   227k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   227k|                                                         format, {});
  127|   227k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  42.0k|{
  159|  42.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  42.0k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  51.3k|{
   90|  51.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  51.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   326k|{
   45|   326k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   326k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  51.3k|{
  125|  51.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  51.3k|                                                         format, {});
  127|  51.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   326k|{
   61|   326k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   326k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  44.0k|{
   73|  44.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  44.0k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  55.0k|{
   90|  55.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  55.0k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  55.0k|{
  125|  55.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  55.0k|                                                         format, {});
  127|  55.0k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  55.0k|{
   90|  55.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  55.0k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  55.0k|{
  125|  55.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  55.0k|                                                         format, {});
  127|  55.0k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  55.0k|{
   90|  55.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  55.0k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  55.0k|{
  125|  55.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  55.0k|                                                         format, {});
  127|  55.0k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  55.0k|{
   90|  55.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  55.0k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  55.0k|{
  125|  55.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  55.0k|                                                         format, {});
  127|  55.0k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  55.0k|{
   90|  55.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  55.0k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  55.0k|{
  125|  55.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  55.0k|                                                         format, {});
  127|  55.0k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.33k|{
  159|  7.33k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.33k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  4.03M|            {
 2693|  4.03M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.03M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  4.03M|            {
 2672|  4.03M|                return decay_copy(t.begin());
 2673|  4.03M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   110M|    {
 2606|   110M|        return std::forward<T>(t);
 2607|   110M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  6.74M|            {
 3178|  6.74M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.74M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.74M|            {
 3158|  6.74M|                return t.data();
 3159|  6.74M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  6.74M|    {
 6095|  6.74M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.0k, False: 6.72M]
  ------------------
 6096|  6.74M|                   ? nullptr
 6097|  6.74M|                   : std::addressof(*ranges::begin(derived()));
 6098|  6.74M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  6.74M|            {
 3127|  6.74M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.74M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  6.74M|            {
 3098|  6.74M|                return bool((std::forward<T>(t).empty()));
 3099|  6.74M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  16.0M|        {
 6454|  16.0M|            return data_.begin_ == data_.end_;
 6455|  16.0M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  13.4M|    {
 6049|  13.4M|        return static_cast<const D&>(*this);
 6050|  13.4M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  27.6M|            {
 2693|  27.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  27.6M|            {
 2672|  27.6M|                return decay_copy(t.begin());
 2673|  27.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  63.7M|        {
 6444|  63.7M|            return data_.begin_;
 6445|  63.7M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.74M|            {
 3038|  6.74M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.74M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  6.74M|            {
 3000|  6.74M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.74M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  27.4M|    {
 2606|  27.4M|        return std::forward<T>(t);
 2607|  27.4M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  16.1M|        {
 6462|  16.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  16.1M|                return data_.size_;
 6464|  16.1M|            }
 6465|  16.1M|            else {
 6466|  16.1M|                return data_.end_ - data_.begin_;
 6467|  16.1M|            }
 6468|  16.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  11.7M|            {
 3788|  11.7M|                ranges::advance(x, n);
 3789|  11.7M|                return x;
 3790|  11.7M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  11.7M|            {
 3678|  11.7M|                fn::impl(i, n);
 3679|  11.7M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  11.7M|            {
 3562|  11.7M|                r += n;
 3563|  11.7M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  33.5M|            {
 2693|  33.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  33.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  33.5M|            {
 2672|  33.5M|                return decay_copy(t.begin());
 2673|  33.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  16.6M|            {
 2759|  16.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  16.6M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  16.6M|            {
 2739|  16.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  16.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  42.5M|        {
 6449|  42.5M|            return data_.end_;
 6450|  42.5M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  7.60M|            {
 2759|  7.60M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.60M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  7.60M|            {
 2739|  7.60M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.60M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  27.2M|        {
 6375|  27.2M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  27.2M|        {
 6294|  27.2M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   264k|            {
 2693|   264k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   264k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   264k|            {
 2672|   264k|                return decay_copy(t.begin());
 2673|   264k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.70M|    {
 2606|  2.70M|        return std::forward<T>(t);
 2607|  2.70M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   542k|            {
 2693|   542k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   542k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   542k|            {
 2672|   542k|                return decay_copy(t.begin());
 2673|   542k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   681k|        {
 6444|   681k|            return data_.begin_;
 6445|   681k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.35M|            {
 2759|  1.35M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.35M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.35M|            {
 2739|  1.35M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.35M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.35M|        {
 6449|  1.35M|            return data_.end_;
 6450|  1.35M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   138k|            {
 3788|   138k|                ranges::advance(x, n);
 3789|   138k|                return x;
 3790|   138k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   138k|            {
 3678|   138k|                fn::impl(i, n);
 3679|   138k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   138k|            {
 3562|   138k|                r += n;
 3563|   138k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   403k|            {
 2759|   403k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   403k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   403k|            {
 2739|   403k|                return decay_copy(std::forward<T>(t).end());
 2740|   403k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   542k|        {
 6375|   542k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   542k|        {
 6294|   542k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   138k|            {
 2693|   138k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   138k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   138k|            {
 2672|   138k|                return decay_copy(t.begin());
 2673|   138k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.03M|            {
 2693|  1.03M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.03M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.03M|            {
 2672|  1.03M|                return decay_copy(t.begin());
 2673|  1.03M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   146M|    {
 2606|   146M|        return std::forward<T>(t);
 2607|   146M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.09M|            {
 3178|  3.09M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.09M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.09M|            {
 3158|  3.09M|                return t.data();
 3159|  3.09M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.09M|    {
 6095|  3.09M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.1k, False: 3.07M]
  ------------------
 6096|  3.09M|                   ? nullptr
 6097|  3.09M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.09M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.09M|            {
 3127|  3.09M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.09M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.09M|            {
 3098|  3.09M|                return bool((std::forward<T>(t).empty()));
 3099|  3.09M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  5.09M|        {
 6454|  5.09M|            return data_.begin_ == data_.end_;
 6455|  5.09M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  6.16M|    {
 6049|  6.16M|        return static_cast<const D&>(*this);
 6050|  6.16M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  24.4M|            {
 2693|  24.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  24.4M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  24.4M|            {
 2672|  24.4M|                return decay_copy(t.begin());
 2673|  24.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  62.2M|        {
 6444|  62.2M|            return data_.begin_;
 6445|  62.2M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.09M|            {
 3038|  3.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.09M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.09M|            {
 3000|  3.09M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.09M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  11.3M|        {
 6462|  11.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  11.3M|                return data_.size_;
 6464|  11.3M|            }
 6465|  11.3M|            else {
 6466|  11.3M|                return data_.end_ - data_.begin_;
 6467|  11.3M|            }
 6468|  11.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  13.2M|            {
 3788|  13.2M|                ranges::advance(x, n);
 3789|  13.2M|                return x;
 3790|  13.2M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  13.2M|            {
 3678|  13.2M|                fn::impl(i, n);
 3679|  13.2M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  13.2M|            {
 3562|  13.2M|                r += n;
 3563|  13.2M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  35.5M|            {
 2693|  35.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  35.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  35.5M|            {
 2672|  35.5M|                return decay_copy(t.begin());
 2673|  35.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  14.6M|            {
 2759|  14.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  14.6M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  14.6M|            {
 2739|  14.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  14.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  84.4M|        {
 6449|  84.4M|            return data_.end_;
 6450|  84.4M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  5.02M|            {
 2759|  5.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.02M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  5.02M|            {
 2739|  5.02M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.02M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  24.1M|        {
 6375|  24.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  24.1M|        {
 6294|  24.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   462k|            {
 2693|   462k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   462k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   462k|            {
 2672|   462k|                return decay_copy(t.begin());
 2673|   462k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.40M|    {
 2606|  4.40M|        return std::forward<T>(t);
 2607|  4.40M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   931k|            {
 2693|   931k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   931k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   931k|            {
 2672|   931k|                return decay_copy(t.begin());
 2673|   931k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.16M|        {
 6444|  1.16M|            return data_.begin_;
 6445|  1.16M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.07M|            {
 2759|  2.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.07M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.07M|            {
 2739|  2.07M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.07M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  2.07M|        {
 6449|  2.07M|            return data_.end_;
 6450|  2.07M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   234k|            {
 3788|   234k|                ranges::advance(x, n);
 3789|   234k|                return x;
 3790|   234k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   234k|            {
 3678|   234k|                fn::impl(i, n);
 3679|   234k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   234k|            {
 3562|   234k|                r += n;
 3563|   234k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   697k|            {
 2759|   697k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   697k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   697k|            {
 2739|   697k|                return decay_copy(std::forward<T>(t).end());
 2740|   697k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   931k|        {
 6375|   931k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   931k|        {
 6294|   931k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   234k|            {
 2693|   234k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   234k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   234k|            {
 2672|   234k|                return decay_copy(t.begin());
 2673|   234k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  9.40M|        {
 6444|  9.40M|            return data_.begin_;
 6445|  9.40M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  17.0M|        {
 6444|  17.0M|            return data_.begin_;
 6445|  17.0M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  18.6M|    {
 6044|  18.6M|        return static_cast<D&>(*this);
 6045|  18.6M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  9.30M|            {
 3098|  9.30M|                return bool((std::forward<T>(t).empty()));
 3099|  9.30M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  9.30M|            {
 3127|  9.30M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.30M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  9.30M|    {
 6085|  9.30M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 9.30M]
  ------------------
 6086|  9.30M|                   ? nullptr
 6087|  9.30M|                   : std::addressof(*ranges::begin(derived()));
 6088|  9.30M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  21.1M|            {
 2739|  21.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  21.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  21.1M|            {
 2759|  21.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  21.1M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.99M|    {
 6044|  3.99M|        return static_cast<D&>(*this);
 6045|  3.99M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.99M|            {
 3098|  1.99M|                return bool((std::forward<T>(t).empty()));
 3099|  1.99M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.99M|            {
 3127|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.99M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.99M|    {
 6085|  1.99M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 1.99M]
  ------------------
 6086|  1.99M|                   ? nullptr
 6087|  1.99M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.99M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  65.7M|            {
 2739|  65.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  65.7M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  65.7M|            {
 2759|  65.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  65.7M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.58M|            {
 3780|  5.58M|                ++x;
 3781|  5.58M|                return x;
 3782|  5.58M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  9.35M|            {
 3038|  9.35M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.35M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.35M|            {
 3000|  9.35M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.35M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  9.30M|            {
 3178|  9.30M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.30M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.30M|            {
 3158|  9.30M|                return t.data();
 3159|  9.30M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   614k|            {
 3828|   614k|                --x;
 3829|   614k|                return x;
 3830|   614k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   867k|            {
 3077|   867k|                return fn::impl(std::forward<T>(t));
 3078|   867k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   867k|            {
 3067|   867k|                return static_cast<ssize_return_t<T>>(
 3068|   867k|                    ranges::size(std::forward<T>(t)));
 3069|   867k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   867k|            {
 3038|   867k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   867k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   867k|            {
 3000|   867k|                return decay_copy(std::forward<T>(t).size());
 3001|   867k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  8.83M|    {
 2606|  8.83M|        return std::forward<T>(t);
 2607|  8.83M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  7.96M|            {
 3077|  7.96M|                return fn::impl(std::forward<T>(t));
 3078|  7.96M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  7.96M|            {
 3067|  7.96M|                return static_cast<ssize_return_t<T>>(
 3068|  7.96M|                    ranges::size(std::forward<T>(t)));
 3069|  7.96M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  7.96M|            {
 3038|  7.96M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.96M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  7.96M|            {
 3000|  7.96M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.96M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  7.00M|            {
 1300|  7.00M|                return fn::impl(std::forward<F>(f),
 1301|  7.00M|                                std::forward<Args>(args)...);
 1302|  7.00M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  7.00M|            {
 1289|  7.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.00M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  7.00M|    {
 1142|  7.00M|        return std::forward<T>(t);
 1143|  7.00M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  12.1M|            {
 3756|  12.1M|                return fn::impl(std::move(first), std::move(last));
 3757|  12.1M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  12.1M|            {
 3716|  12.1M|                return s - i;
 3717|  12.1M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.24M|        {
 6375|  2.24M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.24M|        {
 6294|  2.24M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.33M|            {
 2693|  4.33M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.33M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.33M|            {
 2672|  4.33M|                return decay_copy(t.begin());
 2673|  4.33M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  9.08M|    {
 2606|  9.08M|        return std::forward<T>(t);
 2607|  9.08M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.75M|            {
 2759|  1.75M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.75M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.75M|            {
 2739|  1.75M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.75M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  11.7M|    {
 2606|  11.7M|        return std::forward<T>(t);
 2607|  11.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  4.15M|        {
 6449|  4.15M|            return data_.end_;
 6450|  4.15M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.17M|        {
 6444|  1.17M|            return data_.begin_;
 6445|  1.17M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.17M|        {
 6449|  1.17M|            return data_.end_;
 6450|  1.17M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   390k|        {
 6375|   390k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   390k|        {
 6294|   390k|        }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeERSE_SI_SF_:
 3696|   138k|            {
 3697|   138k|                return n - fn::impl(i, n, bound);
 3698|   138k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SE_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeERSE_SI_SF_:
 3661|   138k|            {
 3662|   138k|                constexpr iter_difference_t<I> zero{0};
 3663|   138k|                iter_difference_t<I> counter{0};
 3664|       |
 3665|   692k|                while (n-- > zero && i != bound) {
  ------------------
  |  Branch (3665:24): [True: 554k, False: 138k]
  |  Branch (3665:38): [True: 554k, False: 198]
  ------------------
 3666|   554k|                    ++i;
 3667|   554k|                    ++counter;
 3668|   554k|                }
 3669|       |
 3670|   138k|                return counter;
 3671|   138k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   529k|            {
 3780|   529k|                ++x;
 3781|   529k|                return x;
 3782|   529k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   277k|        {
 6793|   277k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   277k|                                    proj);
 6795|   277k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   277k|        {
 6761|   391k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 390k, False: 54]
  ------------------
 6762|   390k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 277k, False: 113k]
  ------------------
 6763|   277k|                    return first;
 6764|   277k|                }
 6765|   113k|                ++first;
 6766|   113k|            }
 6767|     54|            return first;
 6768|   277k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   390k|            {
 1300|   390k|                return fn::impl(std::forward<F>(f),
 1301|   390k|                                std::forward<Args>(args)...);
 1302|   390k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   390k|            {
 1289|   390k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   390k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   390k|            {
 1300|   390k|                return fn::impl(std::forward<F>(f),
 1301|   390k|                                std::forward<Args>(args)...);
 1302|   390k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   390k|            {
 1289|   390k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   390k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   390k|    {
 1142|   390k|        return std::forward<T>(t);
 1143|   390k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.39M|            {
 2759|  2.39M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.39M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.39M|            {
 2739|  2.39M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.39M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.74M|            {
 2693|  4.74M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.74M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.74M|            {
 2672|  4.74M|                return decay_copy(t.begin());
 2673|  4.74M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.99M|            {
 3178|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.99M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.99M|            {
 3158|  1.99M|                return t.data();
 3159|  1.99M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.24M|            {
 3038|  8.24M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.24M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.24M|            {
 3000|  8.24M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.24M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  4.92M|            {
 3780|  4.92M|                ++x;
 3781|  4.92M|                return x;
 3782|  4.92M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  6.24M|            {
 3077|  6.24M|                return fn::impl(std::forward<T>(t));
 3078|  6.24M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  6.24M|            {
 3067|  6.24M|                return static_cast<ssize_return_t<T>>(
 3068|  6.24M|                    ranges::size(std::forward<T>(t)));
 3069|  6.24M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   513k|            {
 3828|   513k|                --x;
 3829|   513k|                return x;
 3830|   513k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.75M|            {
 3756|  7.75M|                return fn::impl(std::move(first), std::move(last));
 3757|  7.75M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.75M|            {
 3716|  7.75M|                return s - i;
 3717|  7.75M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  4.09M|        {
 6375|  4.09M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  4.09M|        {
 6294|  4.09M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  7.58M|            {
 2693|  7.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.58M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  7.58M|            {
 2672|  7.58M|                return decay_copy(t.begin());
 2673|  7.58M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  16.4M|    {
 2606|  16.4M|        return std::forward<T>(t);
 2607|  16.4M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.05M|            {
 2759|  3.05M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.05M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.05M|            {
 2739|  3.05M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.05M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  7.63M|        {
 6449|  7.63M|            return data_.end_;
 6450|  7.63M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  2.70M|        {
 6444|  2.70M|            return data_.begin_;
 6445|  2.70M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  2.70M|        {
 6449|  2.70M|            return data_.end_;
 6450|  2.70M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   901k|        {
 6375|   901k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   901k|        {
 6294|   901k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   916k|            {
 3780|   916k|                ++x;
 3781|   916k|                return x;
 3782|   916k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   476k|        {
 6793|   476k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   476k|                                    proj);
 6795|   476k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   476k|        {
 6761|   872k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 872k, False: 108]
  ------------------
 6762|   872k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 476k, False: 396k]
  ------------------
 6763|   476k|                    return first;
 6764|   476k|                }
 6765|   396k|                ++first;
 6766|   396k|            }
 6767|    108|            return first;
 6768|   476k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   872k|            {
 1300|   872k|                return fn::impl(std::forward<F>(f),
 1301|   872k|                                std::forward<Args>(args)...);
 1302|   872k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   872k|            {
 1289|   872k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   872k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   872k|            {
 1300|   872k|                return fn::impl(std::forward<F>(f),
 1301|   872k|                                std::forward<Args>(args)...);
 1302|   872k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   872k|            {
 1289|   872k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   872k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   872k|    {
 1142|   872k|        return std::forward<T>(t);
 1143|   872k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.58M|            {
 2759|  4.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.58M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.58M|            {
 2739|  4.58M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.58M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  8.86M|            {
 2693|  8.86M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.86M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  8.86M|            {
 2672|  8.86M|                return decay_copy(t.begin());
 2673|  8.86M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  3.62M|        {
 6793|  3.62M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  3.62M|                                    proj);
 6795|  3.62M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  3.62M|        {
 6761|  7.18M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.00M, False: 176k]
  ------------------
 6762|  7.00M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 3.44M, False: 3.55M]
  ------------------
 6763|  3.44M|                    return first;
 6764|  3.44M|                }
 6765|  3.55M|                ++first;
 6766|  3.55M|            }
 6767|   176k|            return first;
 6768|  3.62M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  7.00M|            {
 1300|  7.00M|                return fn::impl(std::forward<F>(f),
 1301|  7.00M|                                std::forward<Args>(args)...);
 1302|  7.00M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  7.00M|            {
 1289|  7.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.00M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   313k|{
   50|   313k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   313k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   112k|{
   50|   112k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   112k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  57.6k|{
   50|  57.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  57.6k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   277k|    {
   44|   277k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   476k|    {
   44|   476k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  55.3k|{
   50|  55.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  55.3k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  8.71M|    {
 1191|  8.71M|        return has_value();
 1192|  8.71M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  16.7M|    {
  189|  16.7M|        return m_has_value;
  190|  16.7M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.45M|    {
 1197|  1.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.45M|    {
  172|  1.45M|        return m_unexpected;
  173|  1.45M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.9M|    {
   72|  10.9M|        return m_unexpected;
   73|  10.9M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.40M|    {
   58|  5.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.40M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   264k|    {
 1078|   264k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   264k|    {
  151|   264k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.43M|    {
   67|  6.43M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.43M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  6.53M|    {
 1251|  6.53M|        return value();
 1252|  6.53M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  6.53M|    {
 1221|  6.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.53M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.53M|    {
  155|  6.53M|        return m_value;
  156|  6.53M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.15M|    {
 1034|  3.15M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.15M|    {
  142|  3.15M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.42M|    {
 1191|  3.42M|        return has_value();
 1192|  3.42M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.84M|    {
  189|  6.84M|        return m_has_value;
  190|  6.84M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   264k|    {
 1197|   264k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   264k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   264k|    {
  172|   264k|        return m_unexpected;
  173|   264k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   492k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.85M|    {
 1251|  2.85M|        return value();
 1252|  2.85M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.15M|    {
 1221|  3.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.15M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.15M|    {
  155|  3.15M|        return m_value;
  156|  3.15M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   448k|    {
 1034|   448k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   448k|    {
  142|   448k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   492k|    {
 1191|   492k|        return has_value();
 1192|   492k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   940k|    {
  189|   940k|        return m_has_value;
  190|   940k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   448k|    {
 1274|   448k|        return std::addressof(value());
 1275|   448k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   448k|    {
 1221|   448k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   448k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   448k|    {
  155|   448k|        return m_value;
  156|   448k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   297k|    {
 1263|   297k|        return std::move(value());
 1264|   297k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   461k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   417k|    {
 1034|   417k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   417k|    {
  142|   417k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   461k|    {
 1191|   461k|        return has_value();
 1192|   461k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   879k|    {
  189|   879k|        return m_has_value;
  190|   879k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   417k|    {
 1274|   417k|        return std::addressof(value());
 1275|   417k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   417k|    {
 1221|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   417k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   417k|    {
  155|   417k|        return m_value;
  156|   417k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   685k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   641k|    {
 1034|   641k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   641k|    {
  142|   641k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   685k|    {
 1191|   685k|        return has_value();
 1192|   685k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.32M|    {
  189|  1.32M|        return m_has_value;
  190|  1.32M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   641k|    {
 1274|   641k|        return std::addressof(value());
 1275|   641k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   641k|    {
 1221|   641k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   641k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   641k|    {
  155|   641k|        return m_value;
  156|   641k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   541k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   497k|    {
 1034|   497k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   497k|    {
  142|   497k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   541k|    {
 1191|   541k|        return has_value();
 1192|   541k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.03M|    {
  189|  1.03M|        return m_has_value;
  190|  1.03M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   497k|    {
 1274|   497k|        return std::addressof(value());
 1275|   497k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   497k|    {
 1221|   497k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   497k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   497k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   497k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   497k|    {
  155|   497k|        return m_value;
  156|   497k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   695k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   650k|    {
 1034|   650k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   650k|    {
  142|   650k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   695k|    {
 1191|   695k|        return has_value();
 1192|   695k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   650k|    {
 1274|   650k|        return std::addressof(value());
 1275|   650k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   650k|    {
 1221|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   650k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   650k|    {
  155|   650k|        return m_value;
  156|   650k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   545k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   501k|    {
 1034|   501k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   501k|    {
  142|   501k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   545k|    {
 1191|   545k|        return has_value();
 1192|   545k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.04M|    {
  189|  1.04M|        return m_has_value;
  190|  1.04M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   501k|    {
 1274|   501k|        return std::addressof(value());
 1275|   501k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   501k|    {
 1221|   501k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   501k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   501k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   501k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   501k|    {
  155|   501k|        return m_value;
  156|   501k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   264k|    {
 1078|   264k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   264k|    {
  151|   264k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   403k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   138k|    {
 1034|   138k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   138k|    {
  142|   138k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   403k|    {
 1191|   403k|        return has_value();
 1192|   403k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   807k|    {
  189|   807k|        return m_has_value;
  190|   807k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   264k|    {
 1197|   264k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   264k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   264k|    {
  172|   264k|        return m_unexpected;
  173|   264k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   126k|    {
 1251|   126k|        return value();
 1252|   126k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   138k|    {
 1221|   138k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   138k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   138k|    {
  155|   138k|        return m_value;
  156|   138k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  12.6k|    {
 1263|  12.6k|        return std::move(value());
 1264|  12.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  44.1k|    {
 1078|  44.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  44.1k|    {
  151|  44.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  67.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  23.1k|    {
 1034|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  23.1k|    {
  142|  23.1k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  67.2k|    {
 1191|  67.2k|        return has_value();
 1192|  67.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  90.4k|    {
  189|  90.4k|        return m_has_value;
  190|  90.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  23.1k|    {
 1274|  23.1k|        return std::addressof(value());
 1275|  23.1k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  23.1k|    {
 1221|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  23.1k|    {
  155|  23.1k|        return m_value;
  156|  23.1k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   462k|    {
 1078|   462k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   462k|    {
  151|   462k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.09M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.63M|    {
 1034|  2.63M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.63M|    {
  142|  2.63M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.09M|    {
 1191|  3.09M|        return has_value();
 1192|  3.09M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.18M|    {
  189|  6.18M|        return m_has_value;
  190|  6.18M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   462k|    {
 1197|   462k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   462k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   462k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   462k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   462k|    {
  172|   462k|        return m_unexpected;
  173|   462k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   449k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.38M|    {
 1251|  2.38M|        return value();
 1252|  2.38M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.63M|    {
 1221|  2.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.63M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.63M|    {
  155|  2.63M|        return m_value;
  156|  2.63M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   372k|    {
 1034|   372k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   372k|    {
  142|   372k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   449k|    {
 1191|   449k|        return has_value();
 1192|   449k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   821k|    {
  189|   821k|        return m_has_value;
  190|   821k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   372k|    {
 1274|   372k|        return std::addressof(value());
 1275|   372k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   372k|    {
 1221|   372k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   372k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   372k|    {
  155|   372k|        return m_value;
  156|   372k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   247k|    {
 1263|   247k|        return std::move(value());
 1264|   247k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   430k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   353k|    {
 1034|   353k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   353k|    {
  142|   353k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   430k|    {
 1191|   430k|        return has_value();
 1192|   430k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   784k|    {
  189|   784k|        return m_has_value;
  190|   784k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   353k|    {
 1274|   353k|        return std::addressof(value());
 1275|   353k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   353k|    {
 1221|   353k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   353k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   353k|    {
  155|   353k|        return m_value;
  156|   353k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   607k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   530k|    {
 1034|   530k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   530k|    {
  142|   530k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   607k|    {
 1191|   607k|        return has_value();
 1192|   607k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.13M|    {
  189|  1.13M|        return m_has_value;
  190|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   530k|    {
 1274|   530k|        return std::addressof(value());
 1275|   530k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   530k|    {
 1221|   530k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   530k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   530k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   530k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   530k|    {
  155|   530k|        return m_value;
  156|   530k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   494k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   417k|    {
 1034|   417k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   417k|    {
  142|   417k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   494k|    {
 1191|   494k|        return has_value();
 1192|   494k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   911k|    {
  189|   911k|        return m_has_value;
  190|   911k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   417k|    {
 1274|   417k|        return std::addressof(value());
 1275|   417k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   417k|    {
 1221|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   417k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   417k|    {
  155|   417k|        return m_value;
  156|   417k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   614k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   537k|    {
 1034|   537k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   537k|    {
  142|   537k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   614k|    {
 1191|   614k|        return has_value();
 1192|   614k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.15M|    {
  189|  1.15M|        return m_has_value;
  190|  1.15M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   537k|    {
 1274|   537k|        return std::addressof(value());
 1275|   537k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   537k|    {
 1221|   537k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   537k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   537k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   537k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   537k|    {
  155|   537k|        return m_value;
  156|   537k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   497k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   420k|    {
 1034|   420k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   420k|    {
  142|   420k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   497k|    {
 1191|   497k|        return has_value();
 1192|   497k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   918k|    {
  189|   918k|        return m_has_value;
  190|   918k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   420k|    {
 1274|   420k|        return std::addressof(value());
 1275|   420k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   420k|    {
 1221|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   420k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   420k|    {
  155|   420k|        return m_value;
  156|   420k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   462k|    {
 1078|   462k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   462k|    {
  151|   462k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   697k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   234k|    {
 1034|   234k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   234k|    {
  142|   234k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   697k|    {
 1191|   697k|        return has_value();
 1192|   697k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.39M|    {
  189|  1.39M|        return m_has_value;
  190|  1.39M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   462k|    {
 1197|   462k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   462k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   462k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   462k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   462k|    {
  172|   462k|        return m_unexpected;
  173|   462k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   110k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   212k|    {
 1251|   212k|        return value();
 1252|   212k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   234k|    {
 1221|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   234k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   234k|    {
  155|   234k|        return m_value;
  156|   234k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  33.0k|    {
 1034|  33.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  33.0k|    {
  142|  33.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   110k|    {
 1191|   110k|        return has_value();
 1192|   110k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   143k|    {
  189|   143k|        return m_has_value;
  190|   143k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  33.0k|    {
 1274|  33.0k|        return std::addressof(value());
 1275|  33.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  33.0k|    {
 1221|  33.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  33.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  33.0k|    {
  155|  33.0k|        return m_value;
  156|  33.0k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  22.0k|    {
 1263|  22.0k|        return std::move(value());
 1264|  22.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   117k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  40.3k|    {
 1034|  40.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  40.3k|    {
  142|  40.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   117k|    {
 1191|   117k|        return has_value();
 1192|   117k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  40.3k|    {
 1274|  40.3k|        return std::addressof(value());
 1275|  40.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  40.3k|    {
 1221|  40.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  40.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  40.3k|    {
  155|  40.3k|        return m_value;
  156|  40.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   117k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  40.3k|    {
 1034|  40.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  40.3k|    {
  142|  40.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   117k|    {
 1191|   117k|        return has_value();
 1192|   117k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  40.3k|    {
 1274|  40.3k|        return std::addressof(value());
 1275|  40.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  40.3k|    {
 1221|  40.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  40.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  40.3k|    {
  155|  40.3k|        return m_value;
  156|  40.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   117k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  40.3k|    {
 1034|  40.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  40.3k|    {
  142|  40.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   117k|    {
 1191|   117k|        return has_value();
 1192|   117k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  40.3k|    {
 1274|  40.3k|        return std::addressof(value());
 1275|  40.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  40.3k|    {
 1221|  40.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  40.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  40.3k|    {
  155|  40.3k|        return m_value;
  156|  40.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   117k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  40.3k|    {
 1034|  40.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  40.3k|    {
  142|  40.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   117k|    {
 1191|   117k|        return has_value();
 1192|   117k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  40.3k|    {
 1274|  40.3k|        return std::addressof(value());
 1275|  40.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  40.3k|    {
 1221|  40.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  40.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  40.3k|    {
  155|  40.3k|        return m_value;
  156|  40.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  77.0k|    {
 1078|  77.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  77.0k|    {
  151|  77.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   117k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  40.3k|    {
 1034|  40.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  40.3k|    {
  142|  40.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   117k|    {
 1191|   117k|        return has_value();
 1192|   117k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  40.3k|    {
 1274|  40.3k|        return std::addressof(value());
 1275|  40.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  40.3k|    {
 1221|  40.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  40.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  40.3k|    {
  155|  40.3k|        return m_value;
  156|  40.3k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.34M|    {
 1405|  3.34M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.34M|                                            std::forward<F>(f));
 1407|  3.34M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.34M|{
  927|  3.34M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.34M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.34M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.34M|            return result(*std::forward<Exp>(exp));
  931|  3.34M|        }
  932|       |
  933|  3.34M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.34M|        return result(unexpect, monostate{});
  935|  3.34M|    }
  936|  3.34M|    else {
  937|  3.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.32M, False: 25.0k]
  |  |  ------------------
  ------------------
  939|  3.34M|                   ? result(*std::forward<Exp>(exp))
  940|  3.34M|                   : result(unexpect,
  941|  25.0k|                            std::invoke(std::forward<F>(f),
  942|  25.0k|                                        std::forward<Exp>(exp).error()));
  943|  3.34M|    }
  944|  3.34M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  13.6M|    {
  189|  13.6M|        return m_has_value;
  190|  13.6M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.32M|    {
 1263|  3.32M|        return std::move(value());
 1264|  3.32M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.66M|    {
 1221|  4.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.66M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  4.66M|    {
  155|  4.66M|        return m_value;
  156|  4.66M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  13.5M|    {
 1034|  13.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.5M|    {
  142|  13.5M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  25.0k|    {
 1207|  25.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  25.0k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  26.4k|    {
  172|  26.4k|        return m_unexpected;
  173|  26.4k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   323k|    {
   72|   323k|        return m_unexpected;
   73|   323k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  25.0k|    {
 1088|  25.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   361k|    {
  151|   361k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  13.8M|    {
 1191|  13.8M|        return has_value();
 1192|  13.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  27.7M|    {
  189|  27.7M|        return m_has_value;
  190|  27.7M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   361k|    {
 1197|   361k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   361k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   361k|    {
  172|   361k|        return m_unexpected;
  173|   361k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   336k|    {
 1078|   336k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.2M|    {
 1263|  11.2M|        return std::move(value());
 1264|  11.2M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.5M|    {
 1221|  13.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.5M|    {
  155|  13.5M|        return m_value;
  156|  13.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   539k|    {
   58|   539k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   539k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   539k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.45M|    {
 1078|  1.45M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.45M|    {
  151|  1.45M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.61M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  56.7k|    {
   58|  56.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  56.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  56.7k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  26.4k|    {
 1078|  26.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  26.4k|    {
  151|  26.4k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   161k|    {
   67|   161k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   161k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   161k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  8.91M|    {
 1034|  8.91M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.91M|    {
  142|  8.91M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  5.59M|    {
 1191|  5.59M|        return has_value();
 1192|  5.59M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.38k|    {
 1197|  1.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.38k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  54.1k|    {
   58|  54.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  54.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  54.1k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  52.3k|    {
 1078|  52.3k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  7.37M|    {
   72|  7.37M|        return m_unexpected;
   73|  7.37M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  52.3k|    {
  151|  52.3k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   264k|    {
   67|   264k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   264k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   264k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.34M|    {
 1251|  1.34M|        return value();
 1252|  1.34M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.44M|    {
 1034|  2.44M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.44M|    {
  142|  2.44M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  27.5M|    {
   58|  27.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  27.5M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  12.4M|    {
 1078|  12.4M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  27.5M|    {
   72|  27.5M|        return m_unexpected;
   73|  27.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  12.4M|    {
  151|  12.4M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  27.5M|    {
   67|  27.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  27.5M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  15.0M|    {
 1191|  15.0M|        return has_value();
 1192|  15.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  20.5M|    {
  189|  20.5M|        return m_has_value;
  190|  20.5M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  3.05M|    {
 1197|  3.05M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.05M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  3.05M|    {
  172|  3.05M|        return m_unexpected;
  173|  3.05M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.32M|    {
 1034|  3.32M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.32M|    {
  142|  3.32M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   105k|    {
   58|   105k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   105k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   105k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.51M|    {
 1251|  2.51M|        return value();
 1252|  2.51M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.51M|    {
 1221|  2.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.51M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.51M|    {
  155|  2.51M|        return m_value;
  156|  2.51M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.32M|    {
 1191|  3.32M|        return has_value();
 1192|  3.32M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.64M|    {
  189|  6.64M|        return m_has_value;
  190|  6.64M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.32M|    {
 1263|  3.32M|        return std::move(value());
 1264|  3.32M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.32M|    {
 1221|  3.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.32M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.32M|    {
  155|  3.32M|        return m_value;
  156|  3.32M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  65.6k|    {
 1034|  65.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  65.6k|    {
  142|  65.6k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.32M|    {
 1034|  3.32M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.32M|    {
  142|  3.32M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.32M|    {
 1405|  3.32M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.32M|                                            std::forward<F>(f));
 1407|  3.32M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.32M|{
  927|  3.32M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.32M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.32M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.32M|            return result(*std::forward<Exp>(exp));
  931|  3.32M|        }
  932|       |
  933|  3.32M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.32M|        return result(unexpect, monostate{});
  935|  3.32M|    }
  936|  3.32M|    else {
  937|  3.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.32M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.32M|                   ? result(*std::forward<Exp>(exp))
  940|  3.32M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.32M|    }
  944|  3.32M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.64M|    {
  189|  6.64M|        return m_has_value;
  190|  6.64M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.32M|    {
 1263|  3.32M|        return std::move(value());
 1264|  3.32M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.32M|    {
 1221|  3.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.32M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.32M|    {
  155|  3.32M|        return m_value;
  156|  3.32M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.32M|    {
 1034|  3.32M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.32M|    {
  142|  3.32M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  3.32M|    {
 1191|  3.32M|        return has_value();
 1192|  3.32M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.64M|    {
  189|  6.64M|        return m_has_value;
  190|  6.64M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.32M|    {
 1263|  3.32M|        return std::move(value());
 1264|  3.32M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.32M|    {
 1221|  3.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.32M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.32M|    {
  155|  3.32M|        return m_value;
  156|  3.32M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  9.59k|    {
 1078|  9.59k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  9.59k|    {
  312|  9.59k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  9.59k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  9.59k|    {
  373|  9.59k|        scn::detail::construct_at(unexpected_ptr(),
  374|  9.59k|                                  std::forward<Args>(args)...);
  375|  9.59k|        m_has_value = false;
  376|  9.59k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   109k|{
  102|   109k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   109k|        T(std::forward<Args>(args)...);
  104|   109k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  28.7k|    {
  403|  28.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  28.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  28.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  28.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   450k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   450k|    {
  317|   450k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 440k, False: 9.59k]
  ------------------
  318|   440k|            destroy_value();
  319|   440k|        }
  320|  9.59k|        else {
  321|  9.59k|            destroy_unexpected();
  322|  9.59k|        }
  323|   450k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.35M|    {
  361|  1.35M|        return m_has_value;
  362|  1.35M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   440k|    {
  380|   440k|        scn::detail::destroy_at(value_ptr());
  381|   440k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   440k|{
  108|   440k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   440k|        for (auto& elem : *p) {
  110|   440k|            scn::detail::destroy_at(std::addressof(elem));
  111|   440k|        }
  112|   440k|    }
  113|   440k|    else {
  114|   440k|        p->~T();
  115|   440k|    }
  116|   440k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.32M|    {
  390|  1.32M|        return reinterpret_cast<T*>(
  391|  1.32M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.32M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.32M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  9.59k|    {
  384|  9.59k|        scn::detail::destroy_at(unexpected_ptr());
  385|  9.59k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   109k|{
  108|   109k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   109k|        for (auto& elem : *p) {
  110|   109k|            scn::detail::destroy_at(std::addressof(elem));
  111|   109k|        }
  112|   109k|    }
  113|   109k|    else {
  114|   109k|        p->~T();
  115|   109k|    }
  116|   109k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   440k|    {
 1034|   440k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   440k|    {
  303|   440k|        construct(std::forward<Args>(args)...);
  304|   440k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   440k|    {
  367|   440k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   440k|        m_has_value = true;
  369|   440k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   440k|{
  102|   440k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   440k|        T(std::forward<Args>(args)...);
  104|   440k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   450k|    {
 1191|   450k|        return has_value();
 1192|   450k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  9.59k|    {
 1197|  9.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  9.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  9.59k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  9.59k|    {
  344|  9.59k|        return *unexpected_ptr();
  345|  9.59k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   440k|    {
 1263|   440k|        return std::move(value());
 1264|   440k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   440k|    {
 1221|   440k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   440k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   440k|    {
  327|   440k|        return *value_ptr();
  328|   440k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.26M|    {
 1251|  2.26M|        return value();
 1252|  2.26M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   105k|    {
   58|   105k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   105k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   105k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  6.16M|    {
 1034|  6.16M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  6.16M|    {
  142|  6.16M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    432|    {
 1078|    432|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    432|    {
  151|    432|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.48M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.48M|    {
 1034|  1.48M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.48M|    {
  142|  1.48M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   328k|    {
 1405|   328k|        return detail::transform_error_impl(std::move(*this),
 1406|   328k|                                            std::forward<F>(f));
 1407|   328k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   328k|{
  927|   328k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   328k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   328k|        if (SCN_LIKELY(exp.has_value())) {
  930|   328k|            return result(*std::forward<Exp>(exp));
  931|   328k|        }
  932|       |
  933|   328k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   328k|        return result(unexpect, monostate{});
  935|   328k|    }
  936|   328k|    else {
  937|   328k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   328k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   328k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 327k, False: 132]
  |  |  ------------------
  ------------------
  939|   328k|                   ? result(*std::forward<Exp>(exp))
  940|   328k|                   : result(unexpect,
  941|    132|                            std::invoke(std::forward<F>(f),
  942|    132|                                        std::forward<Exp>(exp).error()));
  943|   328k|    }
  944|   328k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.44M|    {
  189|  2.44M|        return m_has_value;
  190|  2.44M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   958k|    {
 1263|   958k|        return std::move(value());
 1264|   958k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   958k|    {
 1221|   958k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   958k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   958k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   958k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   958k|    {
  155|   958k|        return m_value;
  156|   958k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   580k|    {
 1034|   580k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   580k|    {
  142|   580k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   933k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    432|    {
 1207|    432|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    432|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    432|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    432|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    432|    {
  172|    432|        return m_unexpected;
  173|    432|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   164k|    {
 1088|   164k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   353k|    {
  151|   353k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   529k|    {
 1191|   529k|        return has_value();
 1192|   529k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    300|    {
 1078|    300|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    600|    {
  151|    600|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.27M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.52M|    {
 1078|  1.52M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.52M|    {
  151|  1.52M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.99M|    {
 1191|  1.99M|        return has_value();
 1192|  1.99M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.50M|    {
  189|  3.50M|        return m_has_value;
  190|  3.50M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   328k|    {
 1197|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   328k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   492k|    {
  172|   492k|        return m_unexpected;
  173|   492k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   327k|    {
 1034|   327k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   327k|    {
  142|   327k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   327k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   743k|    {
 1221|   743k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   743k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   743k|    {
  155|   743k|        return m_value;
  156|   743k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   327k|    {
 1191|   327k|        return has_value();
 1192|   327k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   655k|    {
  189|   655k|        return m_has_value;
  190|   655k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   327k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   327k|    {
 1263|   327k|        return std::move(value());
 1264|   327k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   327k|    {
 1221|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   327k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   327k|    {
  155|   327k|        return m_value;
  156|   327k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   630k|    {
 1405|   630k|        return detail::transform_error_impl(std::move(*this),
 1406|   630k|                                            std::forward<F>(f));
 1407|   630k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   630k|{
  927|   630k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   630k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   630k|        if (SCN_LIKELY(exp.has_value())) {
  930|   630k|            return result(*std::forward<Exp>(exp));
  931|   630k|        }
  932|       |
  933|   630k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   630k|        return result(unexpect, monostate{});
  935|   630k|    }
  936|   630k|    else {
  937|   630k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   630k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   630k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 630k, False: 300]
  |  |  ------------------
  ------------------
  939|   630k|                   ? result(*std::forward<Exp>(exp))
  940|   630k|                   : result(unexpect,
  941|    300|                            std::invoke(std::forward<F>(f),
  942|    300|                                        std::forward<Exp>(exp).error()));
  943|   630k|    }
  944|   630k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   743k|    {
 1034|   743k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   743k|    {
  142|   743k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    300|    {
 1088|    300|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   743k|    {
 1263|   743k|        return std::move(value());
 1264|   743k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   327k|    {
 1034|   327k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   327k|    {
  142|   327k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   327k|    {
 1405|   327k|        return detail::transform_error_impl(std::move(*this),
 1406|   327k|                                            std::forward<F>(f));
 1407|   327k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   327k|{
  927|   327k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   327k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   327k|        if (SCN_LIKELY(exp.has_value())) {
  930|   327k|            return result(*std::forward<Exp>(exp));
  931|   327k|        }
  932|       |
  933|   327k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   327k|        return result(unexpect, monostate{});
  935|   327k|    }
  936|   327k|    else {
  937|   327k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   327k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 327k, False: 0]
  |  |  ------------------
  ------------------
  939|   327k|                   ? result(*std::forward<Exp>(exp))
  940|   327k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   327k|    }
  944|   327k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   655k|    {
  189|   655k|        return m_has_value;
  190|   655k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   327k|    {
 1263|   327k|        return std::move(value());
 1264|   327k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   327k|    {
 1221|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   327k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   327k|    {
  155|   327k|        return m_value;
  156|   327k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   327k|    {
 1034|   327k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   327k|    {
  142|   327k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   327k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   327k|    {
 1191|   327k|        return has_value();
 1192|   327k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   655k|    {
  189|   655k|        return m_has_value;
  190|   655k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   327k|    {
 1263|   327k|        return std::move(value());
 1264|   327k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   327k|    {
 1221|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   327k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   327k|    {
  155|   327k|        return m_value;
  156|   327k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   277k|    {
 1405|   277k|        return detail::transform_error_impl(std::move(*this),
 1406|   277k|                                            std::forward<F>(f));
 1407|   277k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   277k|{
  927|   277k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   277k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   277k|        if (SCN_LIKELY(exp.has_value())) {
  930|   277k|            return result(*std::forward<Exp>(exp));
  931|   277k|        }
  932|       |
  933|   277k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   277k|        return result(unexpect, monostate{});
  935|   277k|    }
  936|   277k|    else {
  937|   277k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   277k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   277k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 113k, False: 163k]
  |  |  ------------------
  ------------------
  939|   277k|                   ? result(*std::forward<Exp>(exp))
  940|   277k|                   : result(unexpect,
  941|   163k|                            std::invoke(std::forward<F>(f),
  942|   163k|                                        std::forward<Exp>(exp).error()));
  943|   277k|    }
  944|   277k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   163k|    {
 1207|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   163k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   189k|    {
 1078|   189k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  25.2k|    {
 1078|  25.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  25.2k|    {
  312|  25.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  25.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  25.2k|    {
  373|  25.2k|        scn::detail::construct_at(unexpected_ptr(),
  374|  25.2k|                                  std::forward<Args>(args)...);
  375|  25.2k|        m_has_value = false;
  376|  25.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  75.6k|    {
  403|  75.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  75.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  75.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  75.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  50.4k|    {
  317|  50.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 25.2k, False: 25.2k]
  ------------------
  318|  25.2k|            destroy_value();
  319|  25.2k|        }
  320|  25.2k|        else {
  321|  25.2k|            destroy_unexpected();
  322|  25.2k|        }
  323|  50.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|   151k|    {
  361|   151k|        return m_has_value;
  362|   151k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  25.2k|    {
  380|  25.2k|        scn::detail::destroy_at(value_ptr());
  381|  25.2k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  25.2k|{
  108|  25.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  25.2k|        for (auto& elem : *p) {
  110|  25.2k|            scn::detail::destroy_at(std::addressof(elem));
  111|  25.2k|        }
  112|  25.2k|    }
  113|  25.2k|    else {
  114|  25.2k|        p->~T();
  115|  25.2k|    }
  116|  25.2k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  75.7k|    {
  390|  75.7k|        return reinterpret_cast<T*>(
  391|  75.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  75.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  75.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  25.2k|    {
  384|  25.2k|        scn::detail::destroy_at(unexpected_ptr());
  385|  25.2k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  25.2k|    {
 1034|  25.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  25.2k|    {
  303|  25.2k|        construct(std::forward<Args>(args)...);
  304|  25.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  25.2k|    {
  367|  25.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  25.2k|        m_has_value = true;
  369|  25.2k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  25.2k|{
  102|  25.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  25.2k|        T(std::forward<Args>(args)...);
  104|  25.2k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  50.4k|    {
 1191|  50.4k|        return has_value();
 1192|  50.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  25.2k|    {
 1197|  25.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  25.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  25.2k|    {
  344|  25.2k|        return *unexpected_ptr();
  345|  25.2k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  25.2k|    {
 1263|  25.2k|        return std::move(value());
 1264|  25.2k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  25.2k|    {
 1221|  25.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  25.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  25.2k|    {
  327|  25.2k|        return *value_ptr();
  328|  25.2k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   100k|    {
 1251|   100k|        return value();
 1252|   100k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   580k|    {
 1221|   580k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   580k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   580k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   580k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.86M|    {
  189|  1.86M|        return m_has_value;
  190|  1.86M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   580k|    {
  155|   580k|        return m_value;
  156|   580k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   933k|    {
 1191|   933k|        return has_value();
 1192|   933k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   353k|    {
 1197|   353k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   353k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   353k|    {
  172|   353k|        return m_unexpected;
  173|   353k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   479k|    {
 1263|   479k|        return std::move(value());
 1264|   479k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   134k|    {
 1078|   134k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   134k|    {
  151|   134k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  13.9M|    {
 1034|  13.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.9M|    {
  142|  13.9M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.96M|    {
 1405|  2.96M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.96M|                                            std::forward<F>(f));
 1407|  2.96M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.96M|{
  927|  2.96M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.96M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.96M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.96M|            return result(*std::forward<Exp>(exp));
  931|  2.96M|        }
  932|       |
  933|  2.96M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.96M|        return result(unexpect, monostate{});
  935|  2.96M|    }
  936|  2.96M|    else {
  937|  2.96M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.96M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.96M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.93M, False: 28.1k]
  |  |  ------------------
  ------------------
  939|  2.96M|                   ? result(*std::forward<Exp>(exp))
  940|  2.96M|                   : result(unexpect,
  941|  28.1k|                            std::invoke(std::forward<F>(f),
  942|  28.1k|                                        std::forward<Exp>(exp).error()));
  943|  2.96M|    }
  944|  2.96M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  24.4M|    {
  189|  24.4M|        return m_has_value;
  190|  24.4M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.07M|    {
 1263|  9.07M|        return std::move(value());
 1264|  9.07M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.1M|    {
 1221|  10.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  10.1M|    {
  155|  10.1M|        return m_value;
  156|  10.1M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  11.7M|    {
 1034|  11.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.7M|    {
  142|  11.7M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   132k|    {
 1207|   132k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   132k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   134k|    {
  172|   134k|        return m_unexpected;
  173|   134k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.1k|    {
 1088|  28.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   638k|    {
  151|   638k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   610k|    {
 1078|   610k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  4.92M|    {
 1191|  4.92M|        return has_value();
 1192|  4.92M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.71k|    {
 1197|  1.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.71k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   106k|    {
 1078|   106k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   211k|    {
  151|   211k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  19.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.11M|    {
 1251|  1.11M|        return value();
 1252|  1.11M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.04M|    {
 1034|  2.04M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.04M|    {
  142|  2.04M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  10.9M|    {
 1078|  10.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  10.9M|    {
  151|  10.9M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  19.4M|    {
 1191|  19.4M|        return has_value();
 1192|  19.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  30.5M|    {
  189|  30.5M|        return m_has_value;
  190|  30.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.82M|    {
 1197|  2.82M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.82M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.82M|    {
  172|  2.82M|        return m_unexpected;
  173|  2.82M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.93M|    {
 1034|  2.93M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.93M|    {
  142|  2.93M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.10M|    {
 1251|  2.10M|        return value();
 1252|  2.10M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.24M|    {
 1221|  8.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.24M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.24M|    {
  155|  8.24M|        return m_value;
  156|  8.24M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.93M|    {
 1191|  2.93M|        return has_value();
 1192|  2.93M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  5.86M|    {
  189|  5.86M|        return m_has_value;
  190|  5.86M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.93M|    {
 1263|  2.93M|        return std::move(value());
 1264|  2.93M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.93M|    {
 1221|  2.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.93M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.93M|    {
  155|  2.93M|        return m_value;
  156|  2.93M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  6.24M|    {
 1405|  6.24M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.24M|                                            std::forward<F>(f));
 1407|  6.24M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.24M|{
  927|  6.24M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.24M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.24M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.24M|            return result(*std::forward<Exp>(exp));
  931|  6.24M|        }
  932|       |
  933|  6.24M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.24M|        return result(unexpect, monostate{});
  935|  6.24M|    }
  936|  6.24M|    else {
  937|  6.24M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.24M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.14M, False: 104k]
  |  |  ------------------
  ------------------
  939|  6.24M|                   ? result(*std::forward<Exp>(exp))
  940|  6.24M|                   : result(unexpect,
  941|   104k|                            std::invoke(std::forward<F>(f),
  942|   104k|                                        std::forward<Exp>(exp).error()));
  943|  6.24M|    }
  944|  6.24M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.20M|    {
 1034|  6.20M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.20M|    {
  142|  6.20M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   104k|    {
 1088|   104k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.14M|    {
 1263|  6.14M|        return std::move(value());
 1264|  6.14M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.93M|    {
 1034|  2.93M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.93M|    {
  142|  2.93M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.93M|    {
 1405|  2.93M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.93M|                                            std::forward<F>(f));
 1407|  2.93M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.93M|{
  927|  2.93M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.93M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.93M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.93M|            return result(*std::forward<Exp>(exp));
  931|  2.93M|        }
  932|       |
  933|  2.93M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.93M|        return result(unexpect, monostate{});
  935|  2.93M|    }
  936|  2.93M|    else {
  937|  2.93M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.93M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.93M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.93M|                   ? result(*std::forward<Exp>(exp))
  940|  2.93M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.93M|    }
  944|  2.93M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  5.86M|    {
  189|  5.86M|        return m_has_value;
  190|  5.86M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.93M|    {
 1263|  2.93M|        return std::move(value());
 1264|  2.93M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.93M|    {
 1221|  2.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.93M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.93M|    {
  155|  2.93M|        return m_value;
  156|  2.93M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.93M|    {
 1034|  2.93M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.93M|    {
  142|  2.93M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  2.93M|    {
 1191|  2.93M|        return has_value();
 1192|  2.93M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.86M|    {
  189|  5.86M|        return m_has_value;
  190|  5.86M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.93M|    {
 1263|  2.93M|        return std::move(value());
 1264|  2.93M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.93M|    {
 1221|  2.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.93M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.93M|    {
  155|  2.93M|        return m_value;
  156|  2.93M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  30.8k|    {
 1078|  30.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  30.8k|    {
  312|  30.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  30.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  30.8k|    {
  373|  30.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  30.8k|                                  std::forward<Args>(args)...);
  375|  30.8k|        m_has_value = false;
  376|  30.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  92.6k|    {
  403|  92.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  92.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  92.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  92.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   399k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   399k|    {
  317|   399k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 368k, False: 30.8k]
  ------------------
  318|   368k|            destroy_value();
  319|   368k|        }
  320|  30.8k|        else {
  321|  30.8k|            destroy_unexpected();
  322|  30.8k|        }
  323|   399k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.19M|    {
  361|  1.19M|        return m_has_value;
  362|  1.19M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   368k|    {
  380|   368k|        scn::detail::destroy_at(value_ptr());
  381|   368k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   368k|{
  108|   368k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   368k|        for (auto& elem : *p) {
  110|   368k|            scn::detail::destroy_at(std::addressof(elem));
  111|   368k|        }
  112|   368k|    }
  113|   368k|    else {
  114|   368k|        p->~T();
  115|   368k|    }
  116|   368k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.10M|    {
  390|  1.10M|        return reinterpret_cast<T*>(
  391|  1.10M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.10M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.10M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  30.8k|    {
  384|  30.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  30.8k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   368k|    {
 1034|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   368k|    {
  303|   368k|        construct(std::forward<Args>(args)...);
  304|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   368k|    {
  367|   368k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   368k|        m_has_value = true;
  369|   368k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   368k|{
  102|   368k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   368k|        T(std::forward<Args>(args)...);
  104|   368k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   399k|    {
 1191|   399k|        return has_value();
 1192|   399k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  30.8k|    {
 1197|  30.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  30.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  30.8k|    {
  344|  30.8k|        return *unexpected_ptr();
  345|  30.8k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   368k|    {
 1263|   368k|        return std::move(value());
 1264|   368k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   368k|    {
 1221|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   368k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   368k|    {
  327|   368k|        return *value_ptr();
  328|   368k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.88M|    {
 1251|  1.88M|        return value();
 1252|  1.88M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  11.7M|    {
 1221|  11.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  24.8M|    {
  189|  24.8M|        return m_has_value;
  190|  24.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  11.7M|    {
  155|  11.7M|        return m_value;
  156|  11.7M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  12.4M|    {
 1191|  12.4M|        return has_value();
 1192|  12.4M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   638k|    {
 1197|   638k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   638k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   638k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   638k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   638k|    {
  172|   638k|        return m_unexpected;
  173|   638k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.90M|    {
 1263|  9.90M|        return std::move(value());
 1264|  9.90M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   330k|    {
 1078|   330k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   609k|    {
  151|   609k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.60M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   997k|    {
 1034|   997k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   997k|    {
  142|   997k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.60M|    {
 1191|  1.60M|        return has_value();
 1192|  1.60M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.21M|    {
  189|  3.21M|        return m_has_value;
  190|  3.21M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   609k|    {
 1197|   609k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   609k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   609k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   609k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   609k|    {
  172|   609k|        return m_unexpected;
  173|   609k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   168k|    {
 1251|   168k|        return value();
 1252|   168k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   997k|    {
 1221|   997k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   997k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   997k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   997k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   997k|    {
  155|   997k|        return m_value;
  156|   997k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    556|    {
 1078|    556|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    556|    {
  151|    556|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.57M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.57M|    {
 1034|  2.57M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.57M|    {
  142|  2.57M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   565k|    {
 1405|   565k|        return detail::transform_error_impl(std::move(*this),
 1406|   565k|                                            std::forward<F>(f));
 1407|   565k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   565k|{
  927|   565k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   565k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   565k|        if (SCN_LIKELY(exp.has_value())) {
  930|   565k|            return result(*std::forward<Exp>(exp));
  931|   565k|        }
  932|       |
  933|   565k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   565k|        return result(unexpect, monostate{});
  935|   565k|    }
  936|   565k|    else {
  937|   565k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   565k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   565k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 564k, False: 258]
  |  |  ------------------
  ------------------
  939|   565k|                   ? result(*std::forward<Exp>(exp))
  940|   565k|                   : result(unexpect,
  941|    258|                            std::invoke(std::forward<F>(f),
  942|    258|                                        std::forward<Exp>(exp).error()));
  943|   565k|    }
  944|   565k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.23M|    {
  189|  4.23M|        return m_has_value;
  190|  4.23M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.65M|    {
 1263|  1.65M|        return std::move(value());
 1264|  1.65M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.65M|    {
 1221|  1.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.65M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.65M|    {
  155|  1.65M|        return m_value;
  156|  1.65M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    556|    {
 1207|    556|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    556|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    556|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    556|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    556|    {
  172|    556|        return m_unexpected;
  173|    556|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   278k|    {
 1088|   278k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   916k|    {
 1191|   916k|        return has_value();
 1192|   916k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    298|    {
 1078|    298|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    596|    {
  151|    596|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.93M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.64M|    {
 1078|  2.64M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  2.64M|    {
  151|  2.64M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.45M|    {
 1191|  3.45M|        return has_value();
 1192|  3.45M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.06M|    {
  189|  6.06M|        return m_has_value;
  190|  6.06M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   565k|    {
 1197|   565k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   565k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   843k|    {
  172|   843k|        return m_unexpected;
  173|   843k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   564k|    {
 1034|   564k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   564k|    {
  142|   564k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   564k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.29M|    {
 1221|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.29M|    {
  155|  1.29M|        return m_value;
  156|  1.29M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   564k|    {
 1191|   564k|        return has_value();
 1192|   564k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.12M|    {
  189|  1.12M|        return m_has_value;
  190|  1.12M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   564k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   564k|    {
 1263|   564k|        return std::move(value());
 1264|   564k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   564k|    {
 1221|   564k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   564k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   564k|    {
  155|   564k|        return m_value;
  156|   564k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.09M|    {
 1405|  1.09M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.09M|                                            std::forward<F>(f));
 1407|  1.09M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.09M|{
  927|  1.09M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.09M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.09M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.09M|            return result(*std::forward<Exp>(exp));
  931|  1.09M|        }
  932|       |
  933|  1.09M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.09M|        return result(unexpect, monostate{});
  935|  1.09M|    }
  936|  1.09M|    else {
  937|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.09M, False: 298]
  |  |  ------------------
  ------------------
  939|  1.09M|                   ? result(*std::forward<Exp>(exp))
  940|  1.09M|                   : result(unexpect,
  941|    298|                            std::invoke(std::forward<F>(f),
  942|    298|                                        std::forward<Exp>(exp).error()));
  943|  1.09M|    }
  944|  1.09M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.29M|    {
 1034|  1.29M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.29M|    {
  142|  1.29M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    298|    {
 1088|    298|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.29M|    {
 1263|  1.29M|        return std::move(value());
 1264|  1.29M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   564k|    {
 1034|   564k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   564k|    {
  142|   564k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   564k|    {
 1405|   564k|        return detail::transform_error_impl(std::move(*this),
 1406|   564k|                                            std::forward<F>(f));
 1407|   564k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   564k|{
  927|   564k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   564k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   564k|        if (SCN_LIKELY(exp.has_value())) {
  930|   564k|            return result(*std::forward<Exp>(exp));
  931|   564k|        }
  932|       |
  933|   564k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   564k|        return result(unexpect, monostate{});
  935|   564k|    }
  936|   564k|    else {
  937|   564k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   564k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   564k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 564k, False: 0]
  |  |  ------------------
  ------------------
  939|   564k|                   ? result(*std::forward<Exp>(exp))
  940|   564k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   564k|    }
  944|   564k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.12M|    {
  189|  1.12M|        return m_has_value;
  190|  1.12M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   564k|    {
 1263|   564k|        return std::move(value());
 1264|   564k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   564k|    {
 1221|   564k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   564k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   564k|    {
  155|   564k|        return m_value;
  156|   564k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   564k|    {
 1034|   564k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   564k|    {
  142|   564k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   564k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   564k|    {
 1191|   564k|        return has_value();
 1192|   564k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.12M|    {
  189|  1.12M|        return m_has_value;
  190|  1.12M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   564k|    {
 1263|   564k|        return std::move(value());
 1264|   564k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   564k|    {
 1221|   564k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   564k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   564k|    {
  155|   564k|        return m_value;
  156|   564k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   476k|    {
 1405|   476k|        return detail::transform_error_impl(std::move(*this),
 1406|   476k|                                            std::forward<F>(f));
 1407|   476k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   476k|{
  927|   476k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   476k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   476k|        if (SCN_LIKELY(exp.has_value())) {
  930|   476k|            return result(*std::forward<Exp>(exp));
  931|   476k|        }
  932|       |
  933|   476k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   476k|        return result(unexpect, monostate{});
  935|   476k|    }
  936|   476k|    else {
  937|   476k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   476k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   476k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 198k, False: 278k]
  |  |  ------------------
  ------------------
  939|   476k|                   ? result(*std::forward<Exp>(exp))
  940|   476k|                   : result(unexpect,
  941|   278k|                            std::invoke(std::forward<F>(f),
  942|   278k|                                        std::forward<Exp>(exp).error()));
  943|   476k|    }
  944|   476k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   278k|    {
 1207|   278k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   278k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  43.9k|    {
  312|  43.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  43.9k|    {
  373|  43.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  43.9k|                                  std::forward<Args>(args)...);
  375|  43.9k|        m_has_value = false;
  376|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   131k|    {
  403|   131k|        return reinterpret_cast<unexpected<E>*>(
  404|   131k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   131k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  88.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  88.0k|    {
  317|  88.0k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 44.0k, False: 43.9k]
  ------------------
  318|  44.0k|            destroy_value();
  319|  44.0k|        }
  320|  43.9k|        else {
  321|  43.9k|            destroy_unexpected();
  322|  43.9k|        }
  323|  88.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   264k|    {
  361|   264k|        return m_has_value;
  362|   264k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  44.0k|    {
  380|  44.0k|        scn::detail::destroy_at(value_ptr());
  381|  44.0k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  44.0k|{
  108|  44.0k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  44.0k|        for (auto& elem : *p) {
  110|  44.0k|            scn::detail::destroy_at(std::addressof(elem));
  111|  44.0k|        }
  112|  44.0k|    }
  113|  44.0k|    else {
  114|  44.0k|        p->~T();
  115|  44.0k|    }
  116|  44.0k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   132k|    {
  390|   132k|        return reinterpret_cast<T*>(
  391|   132k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   132k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   132k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  43.9k|    {
  384|  43.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  43.9k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  44.0k|    {
 1034|  44.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  44.0k|    {
  303|  44.0k|        construct(std::forward<Args>(args)...);
  304|  44.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  44.0k|    {
  367|  44.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  44.0k|        m_has_value = true;
  369|  44.0k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  44.0k|{
  102|  44.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  44.0k|        T(std::forward<Args>(args)...);
  104|  44.0k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  88.0k|    {
 1191|  88.0k|        return has_value();
 1192|  88.0k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  43.9k|    {
 1197|  43.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  43.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  43.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  43.9k|    {
  344|  43.9k|        return *unexpected_ptr();
  345|  43.9k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  44.0k|    {
 1263|  44.0k|        return std::move(value());
 1264|  44.0k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  44.0k|    {
 1221|  44.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  44.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  44.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  44.0k|    {
  327|  44.0k|        return *value_ptr();
  328|  44.0k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   828k|    {
 1263|   828k|        return std::move(value());
 1264|   828k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.20k|{
  200|  4.20k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.20k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.20k|{
  180|  4.20k|    return p;
  181|  4.20k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.20k|{
  200|  4.20k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.20k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.20k|{
  180|  4.20k|    return p;
  181|  4.20k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.20k|{
  200|  4.20k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.20k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.20k|{
  180|  4.20k|    return p;
  181|  4.20k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.6M|{
  200|  11.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.6M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  12.4M|{
  180|  12.4M|    return p;
  181|  12.4M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  7.30M|{
  200|  7.30M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  7.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  7.30M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  7.30M|{
  180|  7.30M|    return p;
  181|  7.30M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   781k|{
  200|   781k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   781k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  7.02M|{
  200|  7.02M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  7.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  7.02M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  8.83M|{
  180|  8.83M|    return p;
  181|  8.83M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.80M|{
  200|  1.80M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.80M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  14.6k|    {
  242|  14.6k|        return static_cast<size_type>(m_end - m_ptr);
  243|  14.6k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.10k|    {
  181|  2.10k|        return m_ptr;
  182|  2.10k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.10k|    {
  185|  2.10k|        return m_end;
  186|  2.10k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.10k|    {
  238|  2.10k|        return m_ptr;
  239|  2.10k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.10k|    {
  120|  2.10k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  50.4k|    {
  181|  50.4k|        return m_ptr;
  182|  50.4k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  50.4k|    {
  185|  50.4k|        return m_end;
  186|  50.4k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.10k|    {
  120|  2.10k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  88.0k|    {
  181|  88.0k|        return m_ptr;
  182|  88.0k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  88.0k|    {
  185|  88.0k|        return m_end;
  186|  88.0k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.10k|    {
  120|  2.10k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  3.65M|    {
  120|  3.65M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  3.65M|    {
  238|  3.65M|        return m_ptr;
  239|  3.65M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  3.65M|    {
  242|  3.65M|        return static_cast<size_type>(m_end - m_ptr);
  243|  3.65M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.30M|{
   60|  2.30M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.30M|                                          const CharT*, const CharT*>) {
   62|  2.30M|        return {first, last};
   63|  2.30M|    }
   64|  2.30M|    else {
   65|  2.30M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.30M|    }
   67|  2.30M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  5.41M|{
   60|  5.41M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  5.41M|                                          const CharT*, const CharT*>) {
   62|  5.41M|        return {first, last};
   63|  5.41M|    }
   64|  5.41M|    else {
   65|  5.41M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  5.41M|    }
   67|  5.41M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.77M|{
   44|  3.77M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.77M|                                          decltype(first), decltype(last)> &&
   46|  3.77M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.77M|        return {first, last};
   48|  3.77M|    }
   49|  3.77M|    else {
   50|  3.77M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.77M|                                       to_address(first), to_address(last)))};
   52|  3.77M|    }
   53|  3.77M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  7.24M|{
   75|  7.24M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  7.24M|                      typename std::basic_string_view<CharT>::iterator,
   77|  7.24M|                      decltype(it)> &&
   78|  7.24M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  7.24M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  7.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  7.24M|        return it;
   81|  7.24M|    }
   82|  7.24M|    else {
   83|  7.24M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  7.24M|    }
   85|  7.24M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   328k|{
   54|   328k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   328k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   328k|        return true;
   57|   328k|    }
   58|   328k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   328k|                           ranges::iterator_t<Range>,
   60|   328k|                           typename detail::basic_scan_buffer<
   61|   328k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   328k|        auto beg = ranges::begin(r);
   63|   328k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 328k, False: 0]
  ------------------
   64|   328k|            return false;
   65|   328k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   328k|    else {
   79|   328k|        return false;
   80|   328k|    }
   81|   328k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   466k|{
  112|   466k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   466k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   466k|        return r;
  115|   466k|    }
  116|   466k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   466k|                           ranges::iterator_t<Range>,
  118|   466k|                           typename detail::basic_scan_buffer<
  119|   466k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   466k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   466k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   466k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   466k|                ranges::begin(r), ranges::end(r)));
  124|   466k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   466k|        }
  126|   466k|        else {
  127|   466k|            return ranges::begin(r).contiguous_segment();
  128|   466k|        }
  129|   466k|    }
  130|   466k|    else {
  131|   466k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   466k|    }
  133|   466k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   630k|{
  166|   630k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   630k|        return ranges_polyfill::usize(r);
  168|   630k|    }
  169|   630k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   630k|                           ranges::iterator_t<Range>,
  171|   630k|                           typename detail::basic_scan_buffer<
  172|   630k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   630k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   630k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   630k|                                       ranges::begin(r).position());
  176|   630k|        }
  177|   630k|        else {
  178|   630k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 630k, False: 0]
  ------------------
  179|   630k|                return static_cast<size_t>(
  180|   630k|                    ranges::begin(r).parent()->chars_available() -
  181|   630k|                    ranges::begin(r).position());
  182|   630k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   630k|        }
  185|   630k|    }
  186|   630k|    else {
  187|   630k|        return 0;
  188|   630k|    }
  189|   630k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   565k|{
   54|   565k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   565k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   565k|        return true;
   57|   565k|    }
   58|   565k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   565k|                           ranges::iterator_t<Range>,
   60|   565k|                           typename detail::basic_scan_buffer<
   61|   565k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   565k|        auto beg = ranges::begin(r);
   63|   565k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 565k, False: 0]
  ------------------
   64|   565k|            return false;
   65|   565k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   565k|    else {
   79|   565k|        return false;
   80|   565k|    }
   81|   565k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   564k|{
  112|   564k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   564k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   564k|        return r;
  115|   564k|    }
  116|   564k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   564k|                           ranges::iterator_t<Range>,
  118|   564k|                           typename detail::basic_scan_buffer<
  119|   564k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   564k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   564k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   564k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   564k|                ranges::begin(r), ranges::end(r)));
  124|   564k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   564k|        }
  126|   564k|        else {
  127|   564k|            return ranges::begin(r).contiguous_segment();
  128|   564k|        }
  129|   564k|    }
  130|   564k|    else {
  131|   564k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   564k|    }
  133|   564k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.09M|{
  166|  1.09M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.09M|        return ranges_polyfill::usize(r);
  168|  1.09M|    }
  169|  1.09M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.09M|                           ranges::iterator_t<Range>,
  171|  1.09M|                           typename detail::basic_scan_buffer<
  172|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.09M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.09M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.09M|                                       ranges::begin(r).position());
  176|  1.09M|        }
  177|  1.09M|        else {
  178|  1.09M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.09M, False: 0]
  ------------------
  179|  1.09M|                return static_cast<size_t>(
  180|  1.09M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.09M|                    ranges::begin(r).position());
  182|  1.09M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.09M|        }
  185|  1.09M|    }
  186|  1.09M|    else {
  187|  1.09M|        return 0;
  188|  1.09M|    }
  189|  1.09M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.32M|{
  235|  3.32M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.32M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.32M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.32M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.32M|    }
  240|  3.32M|    else {
  241|  3.32M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.32M|    }
  243|  3.32M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.32M|    {
   50|  3.32M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  10.9M|    {
   63|  10.9M|        return sv;
   64|  10.9M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.22M|{
  235|  2.22M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.22M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.22M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.22M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.22M|    }
  240|  2.22M|    else {
  241|  2.22M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.22M|    }
  243|  2.22M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.22M|    {
   50|  2.22M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   504k|    {
  142|   504k|        return m_view;
  143|   504k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   390k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   390k|{
  235|   390k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   390k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   390k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   390k|        return string_view_wrapper{SCN_FWD(range)};
  239|   390k|    }
  240|   390k|    else {
  241|   390k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   390k|    }
  243|   390k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   390k|    {
   97|   390k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   390k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   390k|    {
  181|   390k|        using value_t = ranges::range_value_t<Range>;
  182|   390k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   390k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   390k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   390k|            m_storage.reset();
  186|   390k|            m_view = string_view_type{ranges::data(range),
  187|   390k|                                      ranges_polyfill::usize(range)};
  188|   390k|        }
  189|   390k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   390k|                                          std::basic_string<CharT>>) {
  191|   390k|            m_storage.emplace(SCN_FWD(range));
  192|   390k|            m_view = string_view_type{*m_storage};
  193|   390k|        }
  194|   390k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   390k|                                          typename detail::basic_scan_buffer<
  196|   390k|                                              value_t>::forward_iterator> &&
  197|   390k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   390k|            auto beg_seg = range.begin().contiguous_segment();
  199|   390k|            auto end_seg = range.end().contiguous_segment();
  200|   390k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 390k, False: 186]
  |  |  ------------------
  ------------------
  201|   390k|                             detail::to_address(end_seg.end()))) {
  202|   390k|                auto& str = m_storage.emplace();
  203|   390k|                str.reserve(range.end().position() - range.begin().position());
  204|   390k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   390k|                m_view = string_view_type{str};
  206|   390k|                return;
  207|   390k|            }
  208|       |
  209|    186|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    186|                                                            end_seg.data());
  211|    186|            m_storage.reset();
  212|    186|        }
  213|   390k|        else {
  214|   390k|            auto& str = m_storage.emplace();
  215|   390k|            if constexpr (ranges::sized_range<Range>) {
  216|   390k|                str.reserve(ranges_polyfill::usize(range));
  217|   390k|            }
  218|   390k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   390k|                      std::back_inserter(str));
  220|   390k|            m_view = string_view_type{str};
  221|   390k|        }
  222|   390k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.99M|{
  235|  1.99M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.99M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.99M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.99M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.99M|    }
  240|  1.99M|    else {
  241|  1.99M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.99M|    }
  243|  1.99M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.99M|    {
   50|  1.99M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  3.75M|    {
   63|  3.75M|        return sv;
   64|  3.75M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  1.09M|    {
  142|  1.09M|        return m_view;
  143|  1.09M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   901k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   901k|{
  235|   901k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   901k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   901k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   901k|        return string_view_wrapper{SCN_FWD(range)};
  239|   901k|    }
  240|   901k|    else {
  241|   901k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   901k|    }
  243|   901k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   901k|    {
   97|   901k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   901k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   901k|    {
  181|   901k|        using value_t = ranges::range_value_t<Range>;
  182|   901k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   901k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   901k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   901k|            m_storage.reset();
  186|   901k|            m_view = string_view_type{ranges::data(range),
  187|   901k|                                      ranges_polyfill::usize(range)};
  188|   901k|        }
  189|   901k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   901k|                                          std::basic_string<CharT>>) {
  191|   901k|            m_storage.emplace(SCN_FWD(range));
  192|   901k|            m_view = string_view_type{*m_storage};
  193|   901k|        }
  194|   901k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   901k|                                          typename detail::basic_scan_buffer<
  196|   901k|                                              value_t>::forward_iterator> &&
  197|   901k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   901k|            auto beg_seg = range.begin().contiguous_segment();
  199|   901k|            auto end_seg = range.end().contiguous_segment();
  200|   901k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 901k, False: 246]
  |  |  ------------------
  ------------------
  201|   901k|                             detail::to_address(end_seg.end()))) {
  202|   901k|                auto& str = m_storage.emplace();
  203|   901k|                str.reserve(range.end().position() - range.begin().position());
  204|   901k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   901k|                m_view = string_view_type{str};
  206|   901k|                return;
  207|   901k|            }
  208|       |
  209|    246|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    246|                                                            end_seg.data());
  211|    246|            m_storage.reset();
  212|    246|        }
  213|   901k|        else {
  214|   901k|            auto& str = m_storage.emplace();
  215|   901k|            if constexpr (ranges::sized_range<Range>) {
  216|   901k|                str.reserve(ranges_polyfill::usize(range));
  217|   901k|            }
  218|   901k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   901k|                      std::back_inserter(str));
  220|   901k|            m_view = string_view_type{str};
  221|   901k|        }
  222|   901k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  14.4M|{
   97|  14.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  14.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.7k, False: 14.4M]
  |  |  ------------------
  ------------------
   98|  27.7k|        return eof_error::eof;
   99|  27.7k|    }
  100|  14.4M|    return eof_error::good;
  101|  14.4M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  14.4M|{
   91|  14.4M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  14.4M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  14.4M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  14.4M|    {
   84|  14.4M|        return begin == end;
   85|  14.4M|    }
   86|  14.4M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.18M|{
   97|  1.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132, False: 1.18M]
  |  |  ------------------
  ------------------
   98|    132|        return eof_error::eof;
   99|    132|    }
  100|  1.18M|    return eof_error::good;
  101|  1.18M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.18M|{
   91|  1.18M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.18M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.18M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.18M|    {
   84|  1.18M|        return begin == end;
   85|  1.18M|    }
   86|  1.18M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  12.8M|{
   97|  12.8M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.4k, False: 12.7M]
  |  |  ------------------
  ------------------
   98|  31.4k|        return eof_error::eof;
   99|  31.4k|    }
  100|  12.7M|    return eof_error::good;
  101|  12.8M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  12.8M|{
   91|  12.8M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  12.8M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  12.8M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  12.8M|    {
   84|  12.8M|        return begin == end;
   85|  12.8M|    }
   86|  12.8M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.04M|{
   97|  2.04M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 258, False: 2.04M]
  |  |  ------------------
  ------------------
   98|    258|        return eof_error::eof;
   99|    258|    }
  100|  2.04M|    return eof_error::good;
  101|  2.04M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.04M|{
   91|  2.04M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.04M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.04M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.04M|    {
   84|  2.04M|        return begin == end;
   85|  2.04M|    }
   86|  2.04M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  3.65M|{
  128|  3.65M|    return find_classic_impl(
  129|  3.65M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  3.65M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  3.65M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  3.68M|{
   31|  3.68M|    static_assert(sizeof(*source.data()) == 1);
   32|  3.68M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  3.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  3.68M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  3.68M|    return has_byte_greater(word, 127) != 0;
   37|  3.68M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  3.65M|{
   44|  3.65M|    auto it = source.begin();
   45|       |
   46|  3.83M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 3.68M, False: 143k]
  ------------------
   47|  3.68M|        auto sv =
   48|  3.68M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  3.68M|                .substr(0, 8);
   50|       |
   51|  3.68M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 3.62M, False: 62.2k]
  ------------------
   52|  3.62M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  3.62M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  3.62M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 3.44M, False: 176k]
  ------------------
   55|  3.44M|                break;
   56|  3.44M|            }
   57|   176k|            continue;
   58|  3.62M|        }
   59|       |
   60|  90.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 88.3k, False: 1.80k]
  ------------------
   61|  88.3k|            auto tmp =
   62|  88.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  88.3k|            auto res = get_next_code_point(tmp);
   64|  88.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 60.4k, False: 27.9k]
  ------------------
   65|  60.4k|                return it;
   66|  60.4k|            }
   67|  27.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  27.9k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  27.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  27.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  27.9k|        }
   71|  62.2k|    }
   72|       |
   73|  3.59M|    return detail::make_string_view_iterator(source, it);
   74|  3.65M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  7.00M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  88.3k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.32M|{
  300|  3.32M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.32M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.32M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.32M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  3.32M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.32M|        return ranges::next(ranges::begin(range),
  306|  3.32M|                            ranges::distance(buf.view().begin(), it));
  307|  3.32M|    }
  308|  3.32M|    else {
  309|  3.32M|        auto it = ranges::begin(range);
  310|       |
  311|  3.32M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  3.32M|            auto seg = get_contiguous_beginning(range);
  313|  3.32M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.32M|                seg_it != seg.end()) {
  315|  3.32M|                return ranges_polyfill::batch_next(
  316|  3.32M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.32M|            }
  318|  3.32M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.32M|        }
  320|       |
  321|  3.32M|        return read_while_code_point(
  322|  3.32M|            SCN_FWD(range),
  323|  3.32M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.32M|    }
  325|  3.32M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.32M|{
  459|  3.32M|    auto it = read_code_unit(range);
  460|  3.32M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.32M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  6.55M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 6.55M, False: 3.05M]
  ------------------
  465|  6.55M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 266k, False: 6.28M]
  ------------------
  466|   266k|            return *it;
  467|   266k|        }
  468|  6.55M|    }
  469|       |
  470|  3.05M|    return unexpected(parse_error::error);
  471|  3.32M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   724k|{
  482|   724k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 636k, False: 87.4k]
  ------------------
  483|   636k|        return ranges::begin(range);
  484|   636k|    }
  485|  87.4k|    return *result;
  486|   724k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  7.13M|{
  418|  7.13M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  7.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  7.13M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  7.13M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 51.0k, False: 7.08M]
  ------------------
  423|  51.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  51.0k|        }
  425|  7.08M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 7.01M, False: 65.6k]
  ------------------
  426|  7.01M|            return unexpected(parse_error::error);
  427|  7.01M|        }
  428|  65.6k|        return ranges::next(ranges::begin(range), str.size());
  429|  7.08M|    }
  430|  7.13M|    else {
  431|  7.13M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  7.13M|            if (ch < 'A' || ch > 'Z') {
  433|  7.13M|                return ch;
  434|  7.13M|            }
  435|  7.13M|            return static_cast<char_type>(ch +
  436|  7.13M|                                          static_cast<char_type>('a' - 'A'));
  437|  7.13M|        };
  438|       |
  439|  7.13M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  7.13M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  7.13M|        if (SCN_UNLIKELY(!std::equal(
  443|  7.13M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  7.13M|                    return ascii_tolower(a) ==
  445|  7.13M|                           static_cast<detail::char_t<Range>>(b);
  446|  7.13M|                }))) {
  447|  7.13M|            return unexpected(parse_error::error);
  448|  7.13M|        }
  449|       |
  450|  7.13M|        return it;
  451|  7.13M|    }
  452|  7.13M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  7.08M|{
  407|  7.08M|    unsigned char running_diff{0};
  408|  21.2M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 14.1M, False: 7.08M]
  ------------------
  409|  14.1M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  14.1M|    }
  411|  7.08M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 60.9k, False: 7.02M]
  |  Branch (411:33): [True: 4.73k, False: 7.01M]
  ------------------
  412|  7.08M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.26M|{
  332|  2.26M|    auto it = read_code_unit(range);
  333|  2.26M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.38k, False: 2.26M]
  |  |  ------------------
  ------------------
  334|  1.38k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.38k|    }
  336|       |
  337|  2.26M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.19M, False: 1.07M]
  |  |  ------------------
  ------------------
  338|  2.26M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.19M|        return unexpected(parse_error::error);
  340|  1.19M|    }
  341|       |
  342|  1.07M|    return *it;
  343|  2.26M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   328k|{
  300|   328k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   328k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   328k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   328k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   328k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   328k|        return ranges::next(ranges::begin(range),
  306|   328k|                            ranges::distance(buf.view().begin(), it));
  307|   328k|    }
  308|   328k|    else {
  309|   328k|        auto it = ranges::begin(range);
  310|       |
  311|   328k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   328k|            auto seg = get_contiguous_beginning(range);
  313|   328k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   328k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 189k, False: 138k]
  ------------------
  315|   189k|                return ranges_polyfill::batch_next(
  316|   189k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   189k|            }
  318|   138k|            ranges_polyfill::batch_next(it, seg.size());
  319|   138k|        }
  320|       |
  321|   138k|        return read_while_code_point(
  322|   138k|            SCN_FWD(range),
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   138k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   328k|    }
  325|   328k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   138k|{
  264|   138k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   138k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   138k|{
  231|   138k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   138k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   138k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   138k|    }
  235|   138k|    else {
  236|   138k|        auto it = ranges::begin(range);
  237|   138k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   138k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   138k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 138k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   277k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 277k, False: 66]
  ------------------
  246|   277k|            const auto [iter, value] =
  247|   277k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   277k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   277k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 138k, False: 138k]
  ------------------
  250|   138k|                return it;
  251|   138k|            }
  252|   138k|            it = iter;
  253|   138k|        }
  254|       |
  255|     66|        return it;
  256|   138k|    }
  257|   138k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   138k|{
  178|   138k|    static_assert(ranges::contiguous_range<Range> &&
  179|   138k|                  ranges::sized_range<Range>);
  180|       |
  181|   138k|    std::array<char32_t, 16> cp_buf{};
  182|   138k|    std::array<uint8_t, 16> idx_buf{};
  183|   138k|    auto it = ranges::begin(range);
  184|   277k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 138k, False: 138k]
  ------------------
  185|   138k|        auto chunk_begin = it;
  186|   138k|        size_t code_point_count = 0;
  187|   138k|        uint8_t code_unit_idx = 0;
  188|   277k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 277k, False: 0]
  |  Branch (188:52): [True: 138k, False: 138k]
  ------------------
  189|   138k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 138k, False: 0]
  ------------------
  190|   138k|                idx_buf[code_point_count] = code_unit_idx;
  191|   138k|                ++code_point_count;
  192|   138k|            }
  193|   138k|            ++it;
  194|   138k|            ++code_unit_idx;
  195|   138k|        }
  196|       |
  197|   138k|        auto input = detail::make_string_view_from_pointers(
  198|   138k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   138k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   138k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   138k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 138k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   277k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 138k, False: 138k]
  ------------------
  217|   138k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 138k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   138k|        }
  221|   138k|    }
  222|       |
  223|   138k|    return it;
  224|   138k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   277k|{
   42|   277k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   277k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   277k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   277k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 138k, False: 138k]
  ------------------
   59|   138k|        ++it;
   60|   138k|        return {it, make_contiguous_buffer(
   61|   138k|                        ranges::subrange{ranges::begin(range), it})};
   62|   138k|    }
   63|       |
   64|   138k|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|   138k|                    ranges::end(range));
   66|   138k|    return {it,
   67|   138k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   277k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   416k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   327k|{
  459|   327k|    auto it = read_code_unit(range);
  460|   327k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   655k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 655k, False: 327k]
  ------------------
  465|   655k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 655k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   655k|    }
  469|       |
  470|   327k|    return unexpected(parse_error::error);
  471|   327k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   100k|{
  482|   100k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 100k, False: 0]
  ------------------
  483|   100k|        return ranges::begin(range);
  484|   100k|    }
  485|      0|    return *result;
  486|   100k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   630k|{
  418|   630k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   630k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   630k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   630k|        if (ranges::size(range) < str.size()) {
  423|   630k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   630k|        }
  425|   630k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   630k|            return unexpected(parse_error::error);
  427|   630k|        }
  428|   630k|        return ranges::next(ranges::begin(range), str.size());
  429|   630k|    }
  430|   630k|    else {
  431|   630k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   630k|            if (ch < 'A' || ch > 'Z') {
  433|   630k|                return ch;
  434|   630k|            }
  435|   630k|            return static_cast<char_type>(ch +
  436|   630k|                                          static_cast<char_type>('a' - 'A'));
  437|   630k|        };
  438|       |
  439|   630k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   630k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 300, False: 630k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   630k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   630k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 630k, False: 0]
  |  |  ------------------
  ------------------
  443|   630k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   630k|                    return ascii_tolower(a) ==
  445|   630k|                           static_cast<detail::char_t<Range>>(b);
  446|   630k|                }))) {
  447|   630k|            return unexpected(parse_error::error);
  448|   630k|        }
  449|       |
  450|      0|        return it;
  451|   630k|    }
  452|   630k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   630k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   630k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 630k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   630k|                return ch;
  434|   630k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   630k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   201k|{
  332|   201k|    auto it = read_code_unit(range);
  333|   201k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   201k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 201k, False: 0]
  |  |  ------------------
  ------------------
  338|   201k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   201k|        return unexpected(parse_error::error);
  340|   201k|    }
  341|       |
  342|      0|    return *it;
  343|   201k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   277k|{
  159|   277k|    auto it = read_while_code_unit(range, pred);
  160|   277k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 163k, False: 113k]
  ------------------
  161|   163k|        return unexpected(parse_error::error);
  162|   163k|    }
  163|   113k|    return it;
  164|   277k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   277k|{
  139|   277k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   277k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   277k|{
  131|   277k|    return ranges::find_if(range, pred);
  132|   277k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.94M|{
  300|  2.94M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.94M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.94M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.94M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.94M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.94M|        return ranges::next(ranges::begin(range),
  306|  2.94M|                            ranges::distance(buf.view().begin(), it));
  307|  2.94M|    }
  308|  2.94M|    else {
  309|  2.94M|        auto it = ranges::begin(range);
  310|       |
  311|  2.94M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.94M|            auto seg = get_contiguous_beginning(range);
  313|  2.94M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.94M|                seg_it != seg.end()) {
  315|  2.94M|                return ranges_polyfill::batch_next(
  316|  2.94M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.94M|            }
  318|  2.94M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.94M|        }
  320|       |
  321|  2.94M|        return read_while_code_point(
  322|  2.94M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.94M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.94M|    }
  325|  2.94M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.94M|{
  264|  2.94M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.94M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.94M|{
  231|  2.94M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.94M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.94M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.94M|    }
  235|  2.94M|    else {
  236|  2.94M|        auto it = ranges::begin(range);
  237|  2.94M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.94M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.94M|            seg_it != seg.end()) {
  241|  2.94M|            return ranges_polyfill::batch_next(
  242|  2.94M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.94M|        }
  244|       |
  245|  2.94M|        while (it != ranges::end(range)) {
  246|  2.94M|            const auto [iter, value] =
  247|  2.94M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.94M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.94M|            if (pred(cp)) {
  250|  2.94M|                return it;
  251|  2.94M|            }
  252|  2.94M|            it = iter;
  253|  2.94M|        }
  254|       |
  255|  2.94M|        return it;
  256|  2.94M|    }
  257|  2.94M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.94M|{
  178|  2.94M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.94M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.94M|    std::array<char32_t, 16> cp_buf{};
  182|  2.94M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.94M|    auto it = ranges::begin(range);
  184|  2.95M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.94M, False: 6.97k]
  ------------------
  185|  2.94M|        auto chunk_begin = it;
  186|  2.94M|        size_t code_point_count = 0;
  187|  2.94M|        uint8_t code_unit_idx = 0;
  188|  46.7M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 44.1M, False: 2.57M]
  |  Branch (188:52): [True: 43.7M, False: 374k]
  ------------------
  189|  43.7M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 43.7M, False: 0]
  ------------------
  190|  43.7M|                idx_buf[code_point_count] = code_unit_idx;
  191|  43.7M|                ++code_point_count;
  192|  43.7M|            }
  193|  43.7M|            ++it;
  194|  43.7M|            ++code_unit_idx;
  195|  43.7M|        }
  196|       |
  197|  2.94M|        auto input = detail::make_string_view_from_pointers(
  198|  2.94M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.94M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.94M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.94M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.94M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  5.87M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 5.86M, False: 14.9k]
  ------------------
  217|  5.86M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.93M, False: 2.93M]
  ------------------
  218|  2.93M|                return chunk_begin + idx_buf[i];
  219|  2.93M|            }
  220|  5.86M|        }
  221|  2.94M|    }
  222|       |
  223|  6.97k|    return it;
  224|  2.94M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  5.86M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.93M|{
  459|  2.93M|    auto it = read_code_unit(range);
  460|  2.93M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.93M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  5.79M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.79M, False: 2.72M]
  ------------------
  465|  5.79M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 209k, False: 5.58M]
  ------------------
  466|   209k|            return *it;
  467|   209k|        }
  468|  5.79M|    }
  469|       |
  470|  2.72M|    return unexpected(parse_error::error);
  471|  2.93M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   673k|{
  482|   673k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 597k, False: 76.5k]
  ------------------
  483|   597k|        return ranges::begin(range);
  484|   597k|    }
  485|  76.5k|    return *result;
  486|   673k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.24M|{
  418|  6.24M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.24M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.24M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.24M|        if (ranges::size(range) < str.size()) {
  423|  6.24M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  6.24M|        }
  425|  6.24M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  6.24M|            return unexpected(parse_error::error);
  427|  6.24M|        }
  428|  6.24M|        return ranges::next(ranges::begin(range), str.size());
  429|  6.24M|    }
  430|  6.24M|    else {
  431|  6.24M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.24M|            if (ch < 'A' || ch > 'Z') {
  433|  6.24M|                return ch;
  434|  6.24M|            }
  435|  6.24M|            return static_cast<char_type>(ch +
  436|  6.24M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.24M|        };
  438|       |
  439|  6.24M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  6.24M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 104k, False: 6.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   104k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   104k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   104k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   104k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   104k|    }                                                  \
  |  |  |  |   70|  6.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  6.14M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.14M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  6.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.08M, False: 59.6k]
  |  |  ------------------
  ------------------
  443|  6.14M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.14M|                    return ascii_tolower(a) ==
  445|  6.14M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.14M|                }))) {
  447|  6.08M|            return unexpected(parse_error::error);
  448|  6.08M|        }
  449|       |
  450|  59.6k|        return it;
  451|  6.14M|    }
  452|  6.24M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  9.07M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.07M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 8.64M, False: 429k]
  |  Branch (432:29): [True: 395k, False: 33.9k]
  ------------------
  433|  9.03M|                return ch;
  434|  9.03M|            }
  435|  33.9k|            return static_cast<char_type>(ch +
  436|  33.9k|                                          static_cast<char_type>('a' - 'A'));
  437|  9.07M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  1.98M|{
  332|  1.98M|    auto it = read_code_unit(range);
  333|  1.98M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.71k, False: 1.98M]
  |  |  ------------------
  ------------------
  334|  1.71k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.71k|    }
  336|       |
  337|  1.98M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.08M, False: 906k]
  |  |  ------------------
  ------------------
  338|  1.98M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.08M|        return unexpected(parse_error::error);
  340|  1.08M|    }
  341|       |
  342|   906k|    return *it;
  343|  1.98M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   564k|{
  178|   564k|    static_assert(ranges::contiguous_range<Range> &&
  179|   564k|                  ranges::sized_range<Range>);
  180|       |
  181|   564k|    std::array<char32_t, 16> cp_buf{};
  182|   564k|    std::array<uint8_t, 16> idx_buf{};
  183|   564k|    auto it = ranges::begin(range);
  184|   799k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 564k, False: 234k]
  ------------------
  185|   564k|        auto chunk_begin = it;
  186|   564k|        size_t code_point_count = 0;
  187|   564k|        uint8_t code_unit_idx = 0;
  188|  1.12M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.12M, False: 0]
  |  Branch (188:52): [True: 564k, False: 564k]
  ------------------
  189|   564k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 564k, False: 0]
  ------------------
  190|   564k|                idx_buf[code_point_count] = code_unit_idx;
  191|   564k|                ++code_point_count;
  192|   564k|            }
  193|   564k|            ++it;
  194|   564k|            ++code_unit_idx;
  195|   564k|        }
  196|       |
  197|   564k|        auto input = detail::make_string_view_from_pointers(
  198|   564k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   564k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   564k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   564k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   799k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 564k, False: 234k]
  ------------------
  217|   564k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 330k, False: 234k]
  ------------------
  218|   330k|                return chunk_begin + idx_buf[i];
  219|   330k|            }
  220|   564k|        }
  221|   564k|    }
  222|       |
  223|   234k|    return it;
  224|   564k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   564k|{
  300|   564k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   564k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   564k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   564k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   564k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   564k|        return ranges::next(ranges::begin(range),
  306|   564k|                            ranges::distance(buf.view().begin(), it));
  307|   564k|    }
  308|   564k|    else {
  309|   564k|        auto it = ranges::begin(range);
  310|       |
  311|   564k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   564k|            auto seg = get_contiguous_beginning(range);
  313|   564k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   564k|                seg_it != seg.end()) {
  315|   564k|                return ranges_polyfill::batch_next(
  316|   564k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   564k|            }
  318|   564k|            ranges_polyfill::batch_next(it, seg.size());
  319|   564k|        }
  320|       |
  321|   564k|        return read_while_code_point(
  322|   564k|            SCN_FWD(range),
  ------------------
  |  |  248|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   564k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   564k|    }
  325|   564k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   564k|{
  264|   564k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   564k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   564k|{
  231|   564k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   564k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   564k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   564k|    }
  235|   564k|    else {
  236|   564k|        auto it = ranges::begin(range);
  237|   564k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   564k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   564k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 330k, False: 234k]
  ------------------
  241|   330k|            return ranges_polyfill::batch_next(
  242|   330k|                it, ranges::distance(seg.begin(), seg_it));
  243|   330k|        }
  244|       |
  245|   704k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 703k, False: 128]
  ------------------
  246|   703k|            const auto [iter, value] =
  247|   703k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   703k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   703k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 234k, False: 469k]
  ------------------
  250|   234k|                return it;
  251|   234k|            }
  252|   469k|            it = iter;
  253|   469k|        }
  254|       |
  255|    128|        return it;
  256|   234k|    }
  257|   564k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   703k|{
   42|   703k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   703k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   703k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   703k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   703k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   703k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 703k, False: 0]
  ------------------
   59|   703k|        ++it;
   60|   703k|        return {it, make_contiguous_buffer(
   61|   703k|                        ranges::subrange{ranges::begin(range), it})};
   62|   703k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   703k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  1.26M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   564k|{
  459|   564k|    auto it = read_code_unit(range);
  460|   564k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.12M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.12M, False: 564k]
  ------------------
  465|  1.12M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.12M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.12M|    }
  469|       |
  470|   564k|    return unexpected(parse_error::error);
  471|   564k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   168k|{
  482|   168k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 168k, False: 0]
  ------------------
  483|   168k|        return ranges::begin(range);
  484|   168k|    }
  485|      0|    return *result;
  486|   168k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.09M|{
  418|  1.09M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.09M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.09M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.09M|        if (ranges::size(range) < str.size()) {
  423|  1.09M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.09M|        }
  425|  1.09M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.09M|            return unexpected(parse_error::error);
  427|  1.09M|        }
  428|  1.09M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.09M|    }
  430|  1.09M|    else {
  431|  1.09M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.09M|            if (ch < 'A' || ch > 'Z') {
  433|  1.09M|                return ch;
  434|  1.09M|            }
  435|  1.09M|            return static_cast<char_type>(ch +
  436|  1.09M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.09M|        };
  438|       |
  439|  1.09M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.09M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.09M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 298, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    298|    }                                                  \
  |  |  |  |   70|  1.09M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.09M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.09M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.09M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.09M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.09M|                    return ascii_tolower(a) ==
  445|  1.09M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.09M|                }))) {
  447|  1.09M|            return unexpected(parse_error::error);
  448|  1.09M|        }
  449|       |
  450|      0|        return it;
  451|  1.09M|    }
  452|  1.09M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.09M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.09M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 594k, False: 498k]
  |  Branch (432:29): [True: 498k, False: 0]
  ------------------
  433|  1.09M|                return ch;
  434|  1.09M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.09M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   352k|{
  332|   352k|    auto it = read_code_unit(range);
  333|   352k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   352k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 352k, False: 0]
  |  |  ------------------
  ------------------
  338|   352k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   352k|        return unexpected(parse_error::error);
  340|   352k|    }
  341|       |
  342|      0|    return *it;
  343|   352k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   476k|{
  159|   476k|    auto it = read_while_code_unit(range, pred);
  160|   476k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 278k, False: 198k]
  ------------------
  161|   278k|        return unexpected(parse_error::error);
  162|   278k|    }
  163|   198k|    return it;
  164|   476k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   476k|{
  139|   476k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   476k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   476k|{
  131|   476k|    return ranges::find_if(range, pred);
  132|   476k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.59M|{
   36|  5.59M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.38k, False: 5.58M]
  |  |  ------------------
  ------------------
   37|  1.38k|        return unexpected(e);
   38|  1.38k|    }
   39|       |
   40|  5.58M|    return ranges::next(ranges::begin(range));
   41|  5.59M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   529k|{
   36|   529k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 529k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   529k|    return ranges::next(ranges::begin(range));
   41|   529k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   630k|{
   48|   630k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   630k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   630k|        const auto sz = ranges::ssize(range);
   52|   630k|        if (sz < count) {
   53|   630k|            return unexpected(eof_error::eof);
   54|   630k|        }
   55|       |
   56|   630k|        return ranges::next(ranges::begin(range), count);
   57|   630k|    }
   58|   630k|    else {
   59|   630k|        auto it = ranges::begin(range);
   60|   630k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 630k, False: 300]
  ------------------
   61|   630k|            return ranges_polyfill::batch_next(it, count);
   62|   630k|        }
   63|       |
   64|    600|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 600, False: 0]
  ------------------
   65|    600|             ++i, (void)++it) {
   66|    600|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 300, False: 300]
  ------------------
   67|    300|                return unexpected(eof_error::eof);
   68|    300|            }
   69|    600|        }
   70|       |
   71|      0|        return it;
   72|    300|    }
   73|   630k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  4.92M|{
   36|  4.92M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.71k, False: 4.92M]
  |  |  ------------------
  ------------------
   37|  1.71k|        return unexpected(e);
   38|  1.71k|    }
   39|       |
   40|  4.92M|    return ranges::next(ranges::begin(range));
   41|  4.92M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  6.24M|{
   48|  6.24M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  6.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  6.24M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  6.24M|        const auto sz = ranges::ssize(range);
   52|  6.24M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 104k, False: 6.14M]
  ------------------
   53|   104k|            return unexpected(eof_error::eof);
   54|   104k|        }
   55|       |
   56|  6.14M|        return ranges::next(ranges::begin(range), count);
   57|  6.24M|    }
   58|  6.24M|    else {
   59|  6.24M|        auto it = ranges::begin(range);
   60|  6.24M|        if (guaranteed_minimum_size(range) >= count) {
   61|  6.24M|            return ranges_polyfill::batch_next(it, count);
   62|  6.24M|        }
   63|       |
   64|  6.24M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  6.24M|             ++i, (void)++it) {
   66|  6.24M|            if (it == ranges::end(range)) {
   67|  6.24M|                return unexpected(eof_error::eof);
   68|  6.24M|            }
   69|  6.24M|        }
   70|       |
   71|  6.24M|        return it;
   72|  6.24M|    }
   73|  6.24M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   916k|{
   36|   916k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   916k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 916k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   916k|    return ranges::next(ranges::begin(range));
   41|   916k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.09M|{
   48|  1.09M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.09M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.09M|        const auto sz = ranges::ssize(range);
   52|  1.09M|        if (sz < count) {
   53|  1.09M|            return unexpected(eof_error::eof);
   54|  1.09M|        }
   55|       |
   56|  1.09M|        return ranges::next(ranges::begin(range), count);
   57|  1.09M|    }
   58|  1.09M|    else {
   59|  1.09M|        auto it = ranges::begin(range);
   60|  1.09M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.09M, False: 298]
  ------------------
   61|  1.09M|            return ranges_polyfill::batch_next(it, count);
   62|  1.09M|        }
   63|       |
   64|    596|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 596, False: 0]
  ------------------
   65|    596|             ++i, (void)++it) {
   66|    596|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 298, False: 298]
  ------------------
   67|    298|                return unexpected(eof_error::eof);
   68|    298|            }
   69|    596|        }
   70|       |
   71|      0|        return it;
   72|    298|    }
   73|  1.09M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.48M|{
   33|  3.48M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.48M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   987k|{
   39|   987k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   987k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 493k, False: 493k]
  ------------------
   41|   987k|                    : std::locale{};
   42|   987k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   500k|    {
  112|   500k|        auto stdloc = loc.get<std::locale>();
  113|   500k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   500k|        grouping = numpunct.grouping();
  115|   500k|        thousands_sep =
  116|   500k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 500k]
  ------------------
  117|   500k|        decimal_point = numpunct.decimal_point();
  118|   500k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   500k|{
   49|   500k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 500k, False: 0]
  ------------------
   50|   500k|        return std::use_facet<Facet>(stdloc);
   51|   500k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   500k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   487k|    {
  112|   487k|        auto stdloc = loc.get<std::locale>();
  113|   487k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   487k|        grouping = numpunct.grouping();
  115|   487k|        thousands_sep =
  116|   487k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 487k]
  ------------------
  117|   487k|        decimal_point = numpunct.decimal_point();
  118|   487k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   487k|{
   49|   487k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 487k, False: 0]
  ------------------
   50|   487k|        return std::use_facet<Facet>(stdloc);
   51|   487k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   487k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.32M|{
   46|  3.32M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.32M, False: 0]
  ------------------
   47|  3.32M|        auto it = read_while_classic_space(range);
   48|  3.32M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.32M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.01k, False: 3.32M]
  |  |  ------------------
  ------------------
   50|  5.01k|            return unexpected(e);
   51|  5.01k|        }
   52|       |
   53|  3.32M|        return it;
   54|  3.32M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.32M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.67M|    {
  126|  3.67M|        return true;
  127|  3.67M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   328k|{
   46|   328k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 328k, False: 0]
  ------------------
   47|   328k|        auto it = read_while_classic_space(range);
   48|   328k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   328k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 327k]
  |  |  ------------------
  ------------------
   50|     66|            return unexpected(e);
   51|     66|        }
   52|       |
   53|   327k|        return it;
   54|   328k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   328k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.66M|    {
  131|  2.66M|        reader_error_handler eh{};
  132|  2.66M|        get_derived().check_specs_impl(specs, eh);
  133|  2.66M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.66M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.66M|        return {};
  137|  2.66M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  2.66M|    {
  142|  2.66M|        return static_cast<Derived&>(*this);
  143|  2.66M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  5.25M|    {
   35|  5.25M|        return m_msg == nullptr;
   36|  5.25M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.94M|{
   46|  2.94M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.94M, False: 0]
  ------------------
   47|  2.94M|        auto it = read_while_classic_space(range);
   48|  2.94M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.94M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.97k, False: 2.93M]
  |  |  ------------------
  ------------------
   50|  6.97k|            return unexpected(e);
   51|  6.97k|        }
   52|       |
   53|  2.93M|        return it;
   54|  2.94M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.94M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  3.52M|    {
  126|  3.52M|        return true;
  127|  3.52M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.58M|    {
  131|  2.58M|        reader_error_handler eh{};
  132|  2.58M|        get_derived().check_specs_impl(specs, eh);
  133|  2.58M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.58M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.58M|        return {};
  137|  2.58M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.58M|    {
  142|  2.58M|        return static_cast<Derived&>(*this);
  143|  2.58M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   564k|{
   46|   564k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 564k, False: 0]
  ------------------
   47|   564k|        auto it = read_while_classic_space(range);
   48|   564k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   564k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 128, False: 564k]
  |  |  ------------------
  ------------------
   50|    128|            return unexpected(e);
   51|    128|        }
   52|       |
   53|   564k|        return it;
   54|   564k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   564k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   403k|{
  218|   403k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   403k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   403k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   403k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   403k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.7k, False: 388k]
  ------------------
  224|  14.7k|        SCN_UNLIKELY_ATTR
  225|  14.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.7k|                                     "Invalid integer value");
  227|  14.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   388k|    auto start = source.data();
  231|   388k|    const auto end = source.data() + source.size();
  232|   388k|    {
  233|   854k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 844k, False: 9.69k]
  ------------------
  234|   844k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 379k, False: 465k]
  ------------------
  235|   379k|                break;
  236|   379k|            }
  237|   844k|        }
  238|   388k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 68.7k, False: 320k]
  |  |  |  Branch (153:45): [True: 9.69k, False: 379k]
  |  |  |  Branch (153:45): [True: 59.0k, False: 320k]
  |  |  ------------------
  ------------------
  239|  68.7k|            value = 0;
  240|  68.7k|            return ranges::next(source.begin(),
  241|  68.7k|                                ranges::distance(source.data(), start));
  242|  68.7k|        }
  243|   388k|    }
  244|       |
  245|   320k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   320k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 231k, False: 88.9k]
  ------------------
  247|   231k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.48k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.48k|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   224k|                             detail::make_string_view_from_pointers(start, end),
  249|   224k|                             value, sign == sign_type::minus_sign));
  250|   224k|            return ranges::next(source.begin(),
  251|   224k|                                ranges::distance(source.data(), ptr));
  252|   231k|        }
  253|   320k|    }
  254|       |
  255|  88.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  88.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.15k, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.15k|    }                                                  \
  |  |  |  |   70|  88.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  83.8k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  83.8k|                     base, sign == sign_type::minus_sign));
  258|  83.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  88.9k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   380k|{
  218|   380k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   380k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   380k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   380k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   380k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 37.1k, False: 343k]
  ------------------
  224|  37.1k|        SCN_UNLIKELY_ATTR
  225|  37.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  37.1k|                                     "Invalid integer value");
  227|  37.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   343k|    auto start = source.data();
  231|   343k|    const auto end = source.data() + source.size();
  232|   343k|    {
  233|   761k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 752k, False: 8.91k]
  ------------------
  234|   752k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 334k, False: 418k]
  ------------------
  235|   334k|                break;
  236|   334k|            }
  237|   752k|        }
  238|   343k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.5k, False: 281k]
  |  |  |  Branch (153:45): [True: 8.91k, False: 334k]
  |  |  |  Branch (153:45): [True: 52.5k, False: 281k]
  |  |  ------------------
  ------------------
  239|  61.5k|            value = 0;
  240|  61.5k|            return ranges::next(source.begin(),
  241|  61.5k|                                ranges::distance(source.data(), start));
  242|  61.5k|        }
  243|   343k|    }
  244|       |
  245|   281k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   281k|        if (base == 10) {
  247|   281k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   281k|                             detail::make_string_view_from_pointers(start, end),
  249|   281k|                             value, sign == sign_type::minus_sign));
  250|   281k|            return ranges::next(source.begin(),
  251|   281k|                                ranges::distance(source.data(), ptr));
  252|   281k|        }
  253|   281k|    }
  254|       |
  255|   281k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.8k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.8k|    }                                                  \
  |  |  |  |   70|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   265k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   265k|                     base, sign == sign_type::minus_sign));
  258|   265k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   281k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   567k|{
  218|   567k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   567k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   567k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   567k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   567k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 18.3k, False: 549k]
  ------------------
  224|  18.3k|        SCN_UNLIKELY_ATTR
  225|  18.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  18.3k|                                     "Invalid integer value");
  227|  18.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   549k|    auto start = source.data();
  231|   549k|    const auto end = source.data() + source.size();
  232|   549k|    {
  233|  1.11M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 14.1k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 535k, False: 568k]
  ------------------
  235|   535k|                break;
  236|   535k|            }
  237|  1.10M|        }
  238|   549k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 112k, False: 436k]
  |  |  |  Branch (153:45): [True: 14.1k, False: 535k]
  |  |  |  Branch (153:45): [True: 98.4k, False: 436k]
  |  |  ------------------
  ------------------
  239|   112k|            value = 0;
  240|   112k|            return ranges::next(source.begin(),
  241|   112k|                                ranges::distance(source.data(), start));
  242|   112k|        }
  243|   549k|    }
  244|       |
  245|   436k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   436k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 291k, False: 144k]
  ------------------
  247|   291k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.68k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.68k|    }                                                  \
  |  |  |  |   70|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   289k|                             detail::make_string_view_from_pointers(start, end),
  249|   289k|                             value, sign == sign_type::minus_sign));
  250|   289k|            return ranges::next(source.begin(),
  251|   289k|                                ranges::distance(source.data(), ptr));
  252|   291k|        }
  253|   436k|    }
  254|       |
  255|   144k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   142k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   142k|                     base, sign == sign_type::minus_sign));
  258|   142k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   144k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   512k|{
  218|   512k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   512k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   512k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   512k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   512k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.6k, False: 472k]
  ------------------
  224|  39.6k|        SCN_UNLIKELY_ATTR
  225|  39.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.6k|                                     "Invalid integer value");
  227|  39.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   472k|    auto start = source.data();
  231|   472k|    const auto end = source.data() + source.size();
  232|   472k|    {
  233|   977k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 964k, False: 12.6k]
  ------------------
  234|   964k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 460k, False: 504k]
  ------------------
  235|   460k|                break;
  236|   460k|            }
  237|   964k|        }
  238|   472k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.4k, False: 374k]
  |  |  |  Branch (153:45): [True: 12.6k, False: 460k]
  |  |  |  Branch (153:45): [True: 85.8k, False: 374k]
  |  |  ------------------
  ------------------
  239|  98.4k|            value = 0;
  240|  98.4k|            return ranges::next(source.begin(),
  241|  98.4k|                                ranges::distance(source.data(), start));
  242|  98.4k|        }
  243|   472k|    }
  244|       |
  245|   374k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   374k|        if (base == 10) {
  247|   374k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   374k|                             detail::make_string_view_from_pointers(start, end),
  249|   374k|                             value, sign == sign_type::minus_sign));
  250|   374k|            return ranges::next(source.begin(),
  251|   374k|                                ranges::distance(source.data(), ptr));
  252|   374k|        }
  253|   374k|    }
  254|       |
  255|   374k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   374k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   374k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   374k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.19k, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.19k|    }                                                  \
  |  |  |  |   70|   374k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   371k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   371k|                     base, sign == sign_type::minus_sign));
  258|   371k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   374k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   575k|{
  218|   575k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   575k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   575k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   575k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   575k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   575k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   575k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   575k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   575k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   575k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   575k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   575k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   575k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.7k, False: 555k]
  ------------------
  224|  19.7k|        SCN_UNLIKELY_ATTR
  225|  19.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.7k|                                     "Invalid integer value");
  227|  19.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   555k|    auto start = source.data();
  231|   555k|    const auto end = source.data() + source.size();
  232|   555k|    {
  233|  1.13M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.12M, False: 14.4k]
  ------------------
  234|  1.12M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 540k, False: 579k]
  ------------------
  235|   540k|                break;
  236|   540k|            }
  237|  1.12M|        }
  238|   555k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 441k]
  |  |  |  Branch (153:45): [True: 14.4k, False: 540k]
  |  |  |  Branch (153:45): [True: 99.5k, False: 441k]
  |  |  ------------------
  ------------------
  239|   113k|            value = 0;
  240|   113k|            return ranges::next(source.begin(),
  241|   113k|                                ranges::distance(source.data(), start));
  242|   113k|        }
  243|   555k|    }
  244|       |
  245|   441k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   441k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 294k, False: 147k]
  ------------------
  247|   294k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   292k|                             detail::make_string_view_from_pointers(start, end),
  249|   292k|                             value, sign == sign_type::minus_sign));
  250|   292k|            return ranges::next(source.begin(),
  251|   292k|                                ranges::distance(source.data(), ptr));
  252|   294k|        }
  253|   441k|    }
  254|       |
  255|   147k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.26k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.26k|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   145k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   145k|                     base, sign == sign_type::minus_sign));
  258|   145k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   147k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   517k|{
  218|   517k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   517k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   517k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   517k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   517k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 40.3k, False: 477k]
  ------------------
  224|  40.3k|        SCN_UNLIKELY_ATTR
  225|  40.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  40.3k|                                     "Invalid integer value");
  227|  40.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   477k|    auto start = source.data();
  231|   477k|    const auto end = source.data() + source.size();
  232|   477k|    {
  233|   989k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 976k, False: 12.8k]
  ------------------
  234|   976k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 464k, False: 511k]
  ------------------
  235|   464k|                break;
  236|   464k|            }
  237|   976k|        }
  238|   477k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   942k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 99.7k, False: 377k]
  |  |  |  Branch (153:45): [True: 12.8k, False: 464k]
  |  |  |  Branch (153:45): [True: 86.8k, False: 377k]
  |  |  ------------------
  ------------------
  239|  99.7k|            value = 0;
  240|  99.7k|            return ranges::next(source.begin(),
  241|  99.7k|                                ranges::distance(source.data(), start));
  242|  99.7k|        }
  243|   477k|    }
  244|       |
  245|   377k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   377k|        if (base == 10) {
  247|   377k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   377k|                             detail::make_string_view_from_pointers(start, end),
  249|   377k|                             value, sign == sign_type::minus_sign));
  250|   377k|            return ranges::next(source.begin(),
  251|   377k|                                ranges::distance(source.data(), ptr));
  252|   377k|        }
  253|   377k|    }
  254|       |
  255|   377k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.65k, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.65k|    }                                                  \
  |  |  |  |   70|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   376k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   376k|                     base, sign == sign_type::minus_sign));
  258|   376k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   377k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   369k|{
  218|   369k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   369k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   369k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   369k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   369k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.3k, False: 357k]
  ------------------
  224|  11.3k|        SCN_UNLIKELY_ATTR
  225|  11.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.3k|                                     "Invalid integer value");
  227|  11.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   357k|    auto start = source.data();
  231|   357k|    const auto end = source.data() + source.size();
  232|   357k|    {
  233|   836k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 826k, False: 9.30k]
  ------------------
  234|   826k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 348k, False: 478k]
  ------------------
  235|   348k|                break;
  236|   348k|            }
  237|   826k|        }
  238|   357k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74.9k, False: 282k]
  |  |  |  Branch (153:45): [True: 9.30k, False: 348k]
  |  |  |  Branch (153:45): [True: 65.6k, False: 282k]
  |  |  ------------------
  ------------------
  239|  74.9k|            value = 0;
  240|  74.9k|            return ranges::next(source.begin(),
  241|  74.9k|                                ranges::distance(source.data(), start));
  242|  74.9k|        }
  243|   357k|    }
  244|       |
  245|   282k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   282k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 195k, False: 87.3k]
  ------------------
  247|   195k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   195k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.84k, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.84k|    }                                                  \
  |  |  |  |   70|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   192k|                             detail::make_string_view_from_pointers(start, end),
  249|   192k|                             value, sign == sign_type::minus_sign));
  250|   192k|            return ranges::next(source.begin(),
  251|   192k|                                ranges::distance(source.data(), ptr));
  252|   195k|        }
  253|   282k|    }
  254|       |
  255|  87.3k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  87.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.47k, False: 84.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.47k|    }                                                  \
  |  |  |  |   70|  87.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  84.8k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  84.8k|                     base, sign == sign_type::minus_sign));
  258|  84.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  87.3k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   359k|{
  218|   359k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   359k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   359k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   359k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   359k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 34.9k, False: 324k]
  ------------------
  224|  34.9k|        SCN_UNLIKELY_ATTR
  225|  34.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  34.9k|                                     "Invalid integer value");
  227|  34.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   324k|    auto start = source.data();
  231|   324k|    const auto end = source.data() + source.size();
  232|   324k|    {
  233|   752k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 744k, False: 8.56k]
  ------------------
  234|   744k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 315k, False: 428k]
  ------------------
  235|   315k|                break;
  236|   315k|            }
  237|   744k|        }
  238|   324k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66.7k, False: 257k]
  |  |  |  Branch (153:45): [True: 8.56k, False: 315k]
  |  |  |  Branch (153:45): [True: 58.1k, False: 257k]
  |  |  ------------------
  ------------------
  239|  66.7k|            value = 0;
  240|  66.7k|            return ranges::next(source.begin(),
  241|  66.7k|                                ranges::distance(source.data(), start));
  242|  66.7k|        }
  243|   324k|    }
  244|       |
  245|   257k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   257k|        if (base == 10) {
  247|   257k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   257k|                             detail::make_string_view_from_pointers(start, end),
  249|   257k|                             value, sign == sign_type::minus_sign));
  250|   257k|            return ranges::next(source.begin(),
  251|   257k|                                ranges::distance(source.data(), ptr));
  252|   257k|        }
  253|   257k|    }
  254|       |
  255|   257k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   253k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   253k|                     base, sign == sign_type::minus_sign));
  258|   253k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   257k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   441k|{
  218|   441k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   441k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   441k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   441k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   441k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.5k, False: 428k]
  ------------------
  224|  12.5k|        SCN_UNLIKELY_ATTR
  225|  12.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.5k|                                     "Invalid integer value");
  227|  12.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   428k|    auto start = source.data();
  231|   428k|    const auto end = source.data() + source.size();
  232|   428k|    {
  233|   941k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 931k, False: 10.3k]
  ------------------
  234|   931k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 418k, False: 513k]
  ------------------
  235|   418k|                break;
  236|   418k|            }
  237|   931k|        }
  238|   428k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.0k, False: 341k]
  |  |  |  Branch (153:45): [True: 10.3k, False: 418k]
  |  |  |  Branch (153:45): [True: 76.6k, False: 341k]
  |  |  ------------------
  ------------------
  239|  87.0k|            value = 0;
  240|  87.0k|            return ranges::next(source.begin(),
  241|  87.0k|                                ranges::distance(source.data(), start));
  242|  87.0k|        }
  243|   428k|    }
  244|       |
  245|   341k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   341k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 229k, False: 112k]
  ------------------
  247|   229k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.04k, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.04k|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   228k|                             detail::make_string_view_from_pointers(start, end),
  249|   228k|                             value, sign == sign_type::minus_sign));
  250|   228k|            return ranges::next(source.begin(),
  251|   228k|                                ranges::distance(source.data(), ptr));
  252|   229k|        }
  253|   341k|    }
  254|       |
  255|   112k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.23k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.23k|    }                                                  \
  |  |  |  |   70|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   110k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   110k|                     base, sign == sign_type::minus_sign));
  258|   110k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   112k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   417k|{
  218|   417k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   417k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   417k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   417k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   417k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.7k, False: 381k]
  ------------------
  224|  35.7k|        SCN_UNLIKELY_ATTR
  225|  35.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.7k|                                     "Invalid integer value");
  227|  35.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   381k|    auto start = source.data();
  231|   381k|    const auto end = source.data() + source.size();
  232|   381k|    {
  233|   836k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 827k, False: 9.16k]
  ------------------
  234|   827k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 372k, False: 455k]
  ------------------
  235|   372k|                break;
  236|   372k|            }
  237|   827k|        }
  238|   381k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.5k, False: 305k]
  |  |  |  Branch (153:45): [True: 9.16k, False: 372k]
  |  |  |  Branch (153:45): [True: 66.3k, False: 305k]
  |  |  ------------------
  ------------------
  239|  75.5k|            value = 0;
  240|  75.5k|            return ranges::next(source.begin(),
  241|  75.5k|                                ranges::distance(source.data(), start));
  242|  75.5k|        }
  243|   381k|    }
  244|       |
  245|   305k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   305k|        if (base == 10) {
  247|   305k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   305k|                             detail::make_string_view_from_pointers(start, end),
  249|   305k|                             value, sign == sign_type::minus_sign));
  250|   305k|            return ranges::next(source.begin(),
  251|   305k|                                ranges::distance(source.data(), ptr));
  252|   305k|        }
  253|   305k|    }
  254|       |
  255|   305k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.65k, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.65k|    }                                                  \
  |  |  |  |   70|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   304k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   304k|                     base, sign == sign_type::minus_sign));
  258|   304k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   305k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   443k|{
  218|   443k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   443k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   443k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   443k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   443k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.8k, False: 431k]
  ------------------
  224|  12.8k|        SCN_UNLIKELY_ATTR
  225|  12.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.8k|                                     "Invalid integer value");
  227|  12.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   431k|    auto start = source.data();
  231|   431k|    const auto end = source.data() + source.size();
  232|   431k|    {
  233|   947k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 937k, False: 10.4k]
  ------------------
  234|   937k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 420k, False: 516k]
  ------------------
  235|   420k|                break;
  236|   420k|            }
  237|   937k|        }
  238|   431k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.6k, False: 343k]
  |  |  |  Branch (153:45): [True: 10.4k, False: 420k]
  |  |  |  Branch (153:45): [True: 77.1k, False: 343k]
  |  |  ------------------
  ------------------
  239|  87.6k|            value = 0;
  240|  87.6k|            return ranges::next(source.begin(),
  241|  87.6k|                                ranges::distance(source.data(), start));
  242|  87.6k|        }
  243|   431k|    }
  244|       |
  245|   343k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   343k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 230k, False: 113k]
  ------------------
  247|   230k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 560, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    560|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    560|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    560|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    560|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    560|    }                                                  \
  |  |  |  |   70|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   229k|                             detail::make_string_view_from_pointers(start, end),
  249|   229k|                             value, sign == sign_type::minus_sign));
  250|   229k|            return ranges::next(source.begin(),
  251|   229k|                                ranges::distance(source.data(), ptr));
  252|   230k|        }
  253|   343k|    }
  254|       |
  255|   113k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 741, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    741|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    741|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    741|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    741|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    741|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   112k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   112k|                     base, sign == sign_type::minus_sign));
  258|   112k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   113k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   419k|{
  218|   419k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   419k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   419k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   419k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   419k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.0k, False: 383k]
  ------------------
  224|  36.0k|        SCN_UNLIKELY_ATTR
  225|  36.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.0k|                                     "Invalid integer value");
  227|  36.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   383k|    auto start = source.data();
  231|   383k|    const auto end = source.data() + source.size();
  232|   383k|    {
  233|   842k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 833k, False: 9.26k]
  ------------------
  234|   833k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 374k, False: 458k]
  ------------------
  235|   374k|                break;
  236|   374k|            }
  237|   833k|        }
  238|   383k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   757k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.1k, False: 307k]
  |  |  |  Branch (153:45): [True: 9.26k, False: 374k]
  |  |  |  Branch (153:45): [True: 66.8k, False: 307k]
  |  |  ------------------
  ------------------
  239|  76.1k|            value = 0;
  240|  76.1k|            return ranges::next(source.begin(),
  241|  76.1k|                                ranges::distance(source.data(), start));
  242|  76.1k|        }
  243|   383k|    }
  244|       |
  245|   307k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   307k|        if (base == 10) {
  247|   307k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   307k|                             detail::make_string_view_from_pointers(start, end),
  249|   307k|                             value, sign == sign_type::minus_sign));
  250|   307k|            return ranges::next(source.begin(),
  251|   307k|                                ranges::distance(source.data(), ptr));
  252|   307k|        }
  253|   307k|    }
  254|       |
  255|   307k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   307k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   307k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   307k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 859, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    859|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    859|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    859|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    859|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    859|    }                                                  \
  |  |  |  |   70|   307k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   306k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   306k|                     base, sign == sign_type::minus_sign));
  258|   306k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   307k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   601k|{
  126|   601k|    auto max_digits = maxdigits_u64(base);
  127|   601k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.96k, False: 598k]
  ------------------
  128|  2.96k|        return true;
  129|  2.96k|    }
  130|   598k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 562, False: 598k]
  |  Branch (130:39): [True: 151, False: 411]
  ------------------
  131|    151|        return true;
  132|    151|    }
  133|   598k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   598k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 24.3k, False: 574k]
  ------------------
  135|   598k|                      static_cast<uint64_t>(is_negative)) {
  136|  24.3k|            SCN_UNLIKELY_ATTR
  137|  24.3k|            return true;
  138|  24.3k|        }
  139|   598k|    }
  140|       |
  141|   574k|    return false;
  142|   598k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  4.07M|{
   96|  4.07M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  4.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  4.07M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.28k|{
  116|  3.28k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.28k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   574k|{
  147|   574k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 65.1k, False: 509k]
  ------------------
  148|  65.1k|        SCN_MSVC_PUSH
  149|  65.1k|        SCN_MSVC_IGNORE(4146)
  150|  65.1k|        return static_cast<T>(
  151|  65.1k|            -std::numeric_limits<T>::max() -
  152|  65.1k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  65.1k|        SCN_MSVC_POP
  154|  65.1k|    }
  155|       |
  156|   509k|    return static_cast<T>(u64val);
  157|   574k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   811k|{
  126|   811k|    auto max_digits = maxdigits_u64(base);
  127|   811k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.16k, False: 807k]
  ------------------
  128|  3.16k|        return true;
  129|  3.16k|    }
  130|   807k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 594, False: 807k]
  |  Branch (130:39): [True: 151, False: 443]
  ------------------
  131|    151|        return true;
  132|    151|    }
  133|   807k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   807k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.86k, False: 802k]
  ------------------
  135|   807k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.86k|            SCN_UNLIKELY_ATTR
  137|  4.86k|            return true;
  138|  4.86k|        }
  139|   807k|    }
  140|       |
  141|   802k|    return false;
  142|   807k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   802k|{
  147|   802k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 76.4k, False: 726k]
  ------------------
  148|  76.4k|        SCN_MSVC_PUSH
  149|  76.4k|        SCN_MSVC_IGNORE(4146)
  150|  76.4k|        return static_cast<T>(
  151|  76.4k|            -std::numeric_limits<T>::max() -
  152|  76.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  76.4k|        SCN_MSVC_POP
  154|  76.4k|    }
  155|       |
  156|   726k|    return static_cast<T>(u64val);
  157|   802k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   819k|{
  126|   819k|    auto max_digits = maxdigits_u64(base);
  127|   819k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.77k, False: 815k]
  ------------------
  128|  3.77k|        return true;
  129|  3.77k|    }
  130|   815k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 717, False: 814k]
  |  Branch (130:39): [True: 158, False: 559]
  ------------------
  131|    158|        return true;
  132|    158|    }
  133|   815k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   815k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 307, False: 814k]
  ------------------
  135|   815k|                      static_cast<uint64_t>(is_negative)) {
  136|    307|            SCN_UNLIKELY_ATTR
  137|    307|            return true;
  138|    307|        }
  139|   815k|    }
  140|       |
  141|   814k|    return false;
  142|   815k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   814k|{
  147|   814k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 79.2k, False: 735k]
  ------------------
  148|  79.2k|        SCN_MSVC_PUSH
  149|  79.2k|        SCN_MSVC_IGNORE(4146)
  150|  79.2k|        return static_cast<T>(
  151|  79.2k|            -std::numeric_limits<T>::max() -
  152|  79.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  79.2k|        SCN_MSVC_POP
  154|  79.2k|    }
  155|       |
  156|   735k|    return static_cast<T>(u64val);
  157|   814k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   540k|{
  126|   540k|    auto max_digits = maxdigits_u64(base);
  127|   540k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.90k, False: 538k]
  ------------------
  128|  1.90k|        return true;
  129|  1.90k|    }
  130|   538k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 394, False: 538k]
  |  Branch (130:39): [True: 125, False: 269]
  ------------------
  131|    125|        return true;
  132|    125|    }
  133|   538k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   538k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 7.31k, False: 531k]
  ------------------
  135|   538k|                      static_cast<uint64_t>(is_negative)) {
  136|  7.31k|            SCN_UNLIKELY_ATTR
  137|  7.31k|            return true;
  138|  7.31k|        }
  139|   538k|    }
  140|       |
  141|   531k|    return false;
  142|   538k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   531k|{
  147|   531k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 531k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   531k|    return static_cast<T>(u64val);
  157|   531k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   647k|{
  126|   647k|    auto max_digits = maxdigits_u64(base);
  127|   647k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.93k, False: 645k]
  ------------------
  128|  1.93k|        return true;
  129|  1.93k|    }
  130|   645k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 408, False: 644k]
  |  Branch (130:39): [True: 125, False: 283]
  ------------------
  131|    125|        return true;
  132|    125|    }
  133|   645k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   645k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.87k, False: 643k]
  ------------------
  135|   645k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.87k|            SCN_UNLIKELY_ATTR
  137|  1.87k|            return true;
  138|  1.87k|        }
  139|   645k|    }
  140|       |
  141|   643k|    return false;
  142|   645k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   643k|{
  147|   643k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 643k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   643k|    return static_cast<T>(u64val);
  157|   643k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   650k|{
  126|   650k|    auto max_digits = maxdigits_u64(base);
  127|   650k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.03k, False: 648k]
  ------------------
  128|  2.03k|        return true;
  129|  2.03k|    }
  130|   648k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 606, False: 648k]
  |  Branch (130:39): [True: 125, False: 481]
  ------------------
  131|    125|        return true;
  132|    125|    }
  133|   648k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   648k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 648k]
  ------------------
  135|   648k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   648k|    }
  140|       |
  141|   648k|    return false;
  142|   648k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   648k|{
  147|   648k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 648k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   648k|    return static_cast<T>(u64val);
  157|   648k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.17M|{
   34|  1.17M|    uint64_t val{};
   35|  1.17M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.17M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.17M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.17M|    return val;
   40|  1.17M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  79.9k|{
   44|  79.9k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  79.9k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  79.9k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  79.9k|    word -= 0x3030303030303030;
   48|  79.9k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  79.9k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  79.9k|    return static_cast<uint32_t>(word);
   51|  79.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.09M|{
   55|  1.09M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.09M|              0x8080808080808080));
   57|  1.09M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   231k|{
  164|   231k|    uint64_t u64val{};
  165|   231k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   231k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   231k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   231k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.48k, False: 224k]
  |  |  ------------------
  ------------------
  170|   231k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.48k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.48k|                                     "Integer overflow");
  173|  6.48k|    }
  174|       |
  175|   224k|    val = store_result<T>(u64val, is_negative);
  176|   224k|    return ptr;
  177|   231k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.47M|{
   76|  1.47M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  3.44M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 3.02M, False: 420k]
  ------------------
   79|  3.02M|        const auto digit = char_to_int(*begin);
   80|  3.02M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.05M, False: 1.97M]
  ------------------
   81|  1.05M|            break;
   82|  1.05M|        }
   83|  1.97M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.97M|        ++begin;
   85|  1.97M|    }
   86|       |
   87|  1.47M|    return begin;
   88|  1.47M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.47M|{
   63|  1.47M|    while (
   64|  1.55M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.09M, False: 454k]
  ------------------
   65|  1.55M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 79.9k, False: 1.01M]
  ------------------
   66|  79.9k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  79.9k|                                      get_eight_digits_word(p));
   68|  79.9k|        p += 8;
   69|  79.9k|    }
   70|  1.47M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  88.9k|{
  185|  88.9k|    uint64_t u64val{};
  186|  88.9k|    const CharT* begin = input.data();
  187|  88.9k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   288k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 271k, False: 16.5k]
  ------------------
  190|   271k|        const auto digit = char_to_int(*begin);
  191|   271k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 72.4k, False: 199k]
  ------------------
  192|  72.4k|            break;
  193|  72.4k|        }
  194|   199k|        u64val =
  195|   199k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   199k|        ++begin;
  197|   199k|    }
  198|       |
  199|  88.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  88.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.15k, False: 83.8k]
  |  |  ------------------
  ------------------
  201|  88.9k|                                               is_negative))) {
  202|  5.15k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.15k|                                     "Integer overflow");
  204|  5.15k|    }
  205|       |
  206|  83.8k|    val = store_result<T>(u64val, is_negative);
  207|  83.8k|    return begin;
  208|  88.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   281k|{
  185|   281k|    uint64_t u64val{};
  186|   281k|    const CharT* begin = input.data();
  187|   281k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   834k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 742k, False: 91.8k]
  ------------------
  190|   742k|        const auto digit = char_to_int(*begin);
  191|   742k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 189k, False: 552k]
  ------------------
  192|   189k|            break;
  193|   189k|        }
  194|   552k|        u64val =
  195|   552k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   552k|        ++begin;
  197|   552k|    }
  198|       |
  199|   281k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   281k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.8k, False: 265k]
  |  |  ------------------
  ------------------
  201|   281k|                                               is_negative))) {
  202|  15.8k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  15.8k|                                     "Integer overflow");
  204|  15.8k|    }
  205|       |
  206|   265k|    val = store_result<T>(u64val, is_negative);
  207|   265k|    return begin;
  208|   281k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   291k|{
  164|   291k|    uint64_t u64val{};
  165|   291k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   291k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   291k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   291k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.68k, False: 289k]
  |  |  ------------------
  ------------------
  170|   291k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.68k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.68k|                                     "Integer overflow");
  173|  2.68k|    }
  174|       |
  175|   289k|    val = store_result<T>(u64val, is_negative);
  176|   289k|    return ptr;
  177|   291k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   144k|{
  185|   144k|    uint64_t u64val{};
  186|   144k|    const CharT* begin = input.data();
  187|   144k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   438k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 419k, False: 19.7k]
  ------------------
  190|   419k|        const auto digit = char_to_int(*begin);
  191|   419k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 125k, False: 293k]
  ------------------
  192|   125k|            break;
  193|   125k|        }
  194|   293k|        u64val =
  195|   293k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   293k|        ++begin;
  197|   293k|    }
  198|       |
  199|   144k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   144k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.30k, False: 142k]
  |  |  ------------------
  ------------------
  201|   144k|                                               is_negative))) {
  202|  2.30k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.30k|                                     "Integer overflow");
  204|  2.30k|    }
  205|       |
  206|   142k|    val = store_result<T>(u64val, is_negative);
  207|   142k|    return begin;
  208|   144k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   374k|{
  185|   374k|    uint64_t u64val{};
  186|   374k|    const CharT* begin = input.data();
  187|   374k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.08M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 982k, False: 103k]
  ------------------
  190|   982k|        const auto digit = char_to_int(*begin);
  191|   982k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 271k, False: 711k]
  ------------------
  192|   271k|            break;
  193|   271k|        }
  194|   711k|        u64val =
  195|   711k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   711k|        ++begin;
  197|   711k|    }
  198|       |
  199|   374k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   374k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.19k, False: 371k]
  |  |  ------------------
  ------------------
  201|   374k|                                               is_negative))) {
  202|  3.19k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.19k|                                     "Integer overflow");
  204|  3.19k|    }
  205|       |
  206|   371k|    val = store_result<T>(u64val, is_negative);
  207|   371k|    return begin;
  208|   374k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   294k|{
  164|   294k|    uint64_t u64val{};
  165|   294k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   294k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   294k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   294k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.31k, False: 292k]
  |  |  ------------------
  ------------------
  170|   294k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.31k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.31k|                                     "Integer overflow");
  173|  1.31k|    }
  174|       |
  175|   292k|    val = store_result<T>(u64val, is_negative);
  176|   292k|    return ptr;
  177|   294k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   147k|{
  185|   147k|    uint64_t u64val{};
  186|   147k|    const CharT* begin = input.data();
  187|   147k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   456k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 436k, False: 20.1k]
  ------------------
  190|   436k|        const auto digit = char_to_int(*begin);
  191|   436k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 126k, False: 309k]
  ------------------
  192|   126k|            break;
  193|   126k|        }
  194|   309k|        u64val =
  195|   309k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   309k|        ++begin;
  197|   309k|    }
  198|       |
  199|   147k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   147k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 145k]
  |  |  ------------------
  ------------------
  201|   147k|                                               is_negative))) {
  202|  1.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.26k|                                     "Integer overflow");
  204|  1.26k|    }
  205|       |
  206|   145k|    val = store_result<T>(u64val, is_negative);
  207|   145k|    return begin;
  208|   147k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   377k|{
  185|   377k|    uint64_t u64val{};
  186|   377k|    const CharT* begin = input.data();
  187|   377k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.10M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.00M, False: 103k]
  ------------------
  190|  1.00M|        const auto digit = char_to_int(*begin);
  191|  1.00M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 273k, False: 731k]
  ------------------
  192|   273k|            break;
  193|   273k|        }
  194|   731k|        u64val =
  195|   731k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   731k|        ++begin;
  197|   731k|    }
  198|       |
  199|   377k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   377k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65k, False: 376k]
  |  |  ------------------
  ------------------
  201|   377k|                                               is_negative))) {
  202|  1.65k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.65k|                                     "Integer overflow");
  204|  1.65k|    }
  205|       |
  206|   376k|    val = store_result<T>(u64val, is_negative);
  207|   376k|    return begin;
  208|   377k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   195k|{
  164|   195k|    uint64_t u64val{};
  165|   195k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   195k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   195k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   195k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 192k]
  |  |  ------------------
  ------------------
  170|   195k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.84k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.84k|                                     "Integer overflow");
  173|  2.84k|    }
  174|       |
  175|   192k|    val = store_result<T>(u64val, is_negative);
  176|   192k|    return ptr;
  177|   195k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  87.3k|{
  185|  87.3k|    uint64_t u64val{};
  186|  87.3k|    const CharT* begin = input.data();
  187|  87.3k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   247k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 231k, False: 15.5k]
  ------------------
  190|   231k|        const auto digit = char_to_int(*begin);
  191|   231k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 71.7k, False: 159k]
  ------------------
  192|  71.7k|            break;
  193|  71.7k|        }
  194|   159k|        u64val =
  195|   159k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   159k|        ++begin;
  197|   159k|    }
  198|       |
  199|  87.3k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  87.3k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.47k, False: 84.8k]
  |  |  ------------------
  ------------------
  201|  87.3k|                                               is_negative))) {
  202|  2.47k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.47k|                                     "Integer overflow");
  204|  2.47k|    }
  205|       |
  206|  84.8k|    val = store_result<T>(u64val, is_negative);
  207|  84.8k|    return begin;
  208|  87.3k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   257k|{
  185|   257k|    uint64_t u64val{};
  186|   257k|    const CharT* begin = input.data();
  187|   257k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   685k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 599k, False: 85.3k]
  ------------------
  190|   599k|        const auto digit = char_to_int(*begin);
  191|   599k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 172k, False: 427k]
  ------------------
  192|   172k|            break;
  193|   172k|        }
  194|   427k|        u64val =
  195|   427k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   427k|        ++begin;
  197|   427k|    }
  198|       |
  199|   257k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   257k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.02k, False: 253k]
  |  |  ------------------
  ------------------
  201|   257k|                                               is_negative))) {
  202|  4.02k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.02k|                                     "Integer overflow");
  204|  4.02k|    }
  205|       |
  206|   253k|    val = store_result<T>(u64val, is_negative);
  207|   253k|    return begin;
  208|   257k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   229k|{
  164|   229k|    uint64_t u64val{};
  165|   229k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   229k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   229k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   229k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.04k, False: 228k]
  |  |  ------------------
  ------------------
  170|   229k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.04k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.04k|                                     "Integer overflow");
  173|  1.04k|    }
  174|       |
  175|   228k|    val = store_result<T>(u64val, is_negative);
  176|   228k|    return ptr;
  177|   229k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   112k|{
  185|   112k|    uint64_t u64val{};
  186|   112k|    const CharT* begin = input.data();
  187|   112k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   309k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 292k, False: 17.0k]
  ------------------
  190|   292k|        const auto digit = char_to_int(*begin);
  191|   292k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 95.0k, False: 197k]
  ------------------
  192|  95.0k|            break;
  193|  95.0k|        }
  194|   197k|        u64val =
  195|   197k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   197k|        ++begin;
  197|   197k|    }
  198|       |
  199|   112k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   112k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.23k, False: 110k]
  |  |  ------------------
  ------------------
  201|   112k|                                               is_negative))) {
  202|  1.23k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.23k|                                     "Integer overflow");
  204|  1.23k|    }
  205|       |
  206|   110k|    val = store_result<T>(u64val, is_negative);
  207|   110k|    return begin;
  208|   112k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   305k|{
  185|   305k|    uint64_t u64val{};
  186|   305k|    const CharT* begin = input.data();
  187|   305k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   816k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 726k, False: 90.1k]
  ------------------
  190|   726k|        const auto digit = char_to_int(*begin);
  191|   726k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 215k, False: 510k]
  ------------------
  192|   215k|            break;
  193|   215k|        }
  194|   510k|        u64val =
  195|   510k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   510k|        ++begin;
  197|   510k|    }
  198|       |
  199|   305k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   305k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65k, False: 304k]
  |  |  ------------------
  ------------------
  201|   305k|                                               is_negative))) {
  202|  1.65k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.65k|                                     "Integer overflow");
  204|  1.65k|    }
  205|       |
  206|   304k|    val = store_result<T>(u64val, is_negative);
  207|   304k|    return begin;
  208|   305k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   230k|{
  164|   230k|    uint64_t u64val{};
  165|   230k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   230k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   230k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   230k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 560, False: 229k]
  |  |  ------------------
  ------------------
  170|   230k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    560|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    560|                                     "Integer overflow");
  173|    560|    }
  174|       |
  175|   229k|    val = store_result<T>(u64val, is_negative);
  176|   229k|    return ptr;
  177|   230k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   113k|{
  185|   113k|    uint64_t u64val{};
  186|   113k|    const CharT* begin = input.data();
  187|   113k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   315k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 298k, False: 17.1k]
  ------------------
  190|   298k|        const auto digit = char_to_int(*begin);
  191|   298k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 95.8k, False: 202k]
  ------------------
  192|  95.8k|            break;
  193|  95.8k|        }
  194|   202k|        u64val =
  195|   202k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   202k|        ++begin;
  197|   202k|    }
  198|       |
  199|   113k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   113k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 741, False: 112k]
  |  |  ------------------
  ------------------
  201|   113k|                                               is_negative))) {
  202|    741|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    741|                                     "Integer overflow");
  204|    741|    }
  205|       |
  206|   112k|    val = store_result<T>(u64val, is_negative);
  207|   112k|    return begin;
  208|   113k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   307k|{
  185|   307k|    uint64_t u64val{};
  186|   307k|    const CharT* begin = input.data();
  187|   307k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   827k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 736k, False: 90.4k]
  ------------------
  190|   736k|        const auto digit = char_to_int(*begin);
  191|   736k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 216k, False: 519k]
  ------------------
  192|   216k|            break;
  193|   216k|        }
  194|   519k|        u64val =
  195|   519k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   519k|        ++begin;
  197|   519k|    }
  198|       |
  199|   307k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   307k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 859, False: 306k]
  |  |  ------------------
  ------------------
  201|   307k|                                               is_negative))) {
  202|    859|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    859|                                     "Integer overflow");
  204|    859|    }
  205|       |
  206|   306k|    val = store_result<T>(u64val, is_negative);
  207|   306k|    return begin;
  208|   307k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   143k|    {
  324|   143k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   143k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   143k|        return read_default_with_base(range, value, 0);
  326|   143k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   143k|    {
  287|   143k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   143k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   143k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   143k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   143k|                return unexpected_scan_error(
  293|   143k|                    scan_error::invalid_scanned_value,
  294|   143k|                    "Unexpected '-' sign when parsing an "
  295|   143k|                    "unsigned value");
  296|   143k|            }
  297|   143k|        }
  298|       |
  299|   143k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 36.9k, False: 106k]
  ------------------
  300|  36.9k|            value = T{0};
  301|  36.9k|            return std::next(prefix_result.iterator);
  302|  36.9k|        }
  303|       |
  304|   212k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 57, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     57|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   212k|                                     ranges::subrange{prefix_result.iterator,
  306|   212k|                                                      ranges::end(range)},
  307|   212k|                                     prefix_result.parsed_base));
  308|       |
  309|   212k|        auto buf = make_contiguous_buffer(
  310|   212k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   212k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.38k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.38k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   100k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   100k|                                    prefix_result.parsed_base));
  314|       |
  315|   100k|        return ranges_polyfill::batch_next(
  316|   100k|            prefix_result.iterator,
  317|   100k|            ranges::distance(buf.view().begin(), result_it));
  318|   212k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.32M|{
  121|  3.32M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.32M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.32M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.32M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.32M|        parse_integer_base_prefix(
  126|  3.32M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.32M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.07M, False: 2.24M]
  ------------------
  129|  1.07M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.02k, False: 1.07M]
  ------------------
  130|  1.07M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 612k, False: 461k]
  ------------------
  131|   614k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   614k|                digits_begin_it, ranges::begin(range));
  133|   614k|        }
  134|   461k|        else {
  135|   461k|            parsed_zero = false;
  136|   461k|        }
  137|  1.07M|    }
  138|  2.24M|    else {
  139|  2.24M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.53k, False: 2.23M]
  ------------------
  140|  2.24M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 106k, False: 2.13M]
  ------------------
  141|   111k|            digits_begin_it = base_prefix_begin_it;
  142|   111k|        }
  143|  2.24M|    }
  144|       |
  145|  3.32M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.05M, False: 266k]
  ------------------
  146|  3.05M|        sign = sign_type::plus_sign;
  147|  3.05M|    }
  148|  3.32M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.32M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.32M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.32M|{
   88|  3.32M|    switch (base) {
   89|  69.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 69.4k, False: 3.25M]
  ------------------
   90|       |            // allow 0b/0B
   91|  69.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  69.4k|                    false};
   93|       |
   94|   172k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 172k, False: 3.14M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   172k|            bool zero_parsed = false;
   97|   172k|            auto it = apply_opt(
   98|   172k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   172k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   482k|        case 16:
  ------------------
  |  Branch (102:9): [True: 482k, False: 2.83M]
  ------------------
  103|       |            // allow 0x/0X
  104|   482k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   482k|                    false};
  106|       |
  107|  2.15M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.15M, False: 1.16M]
  ------------------
  108|       |            // detect base
  109|  2.15M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   441k|        default:
  ------------------
  |  Branch (111:9): [True: 441k, False: 2.87M]
  ------------------
  112|       |            // no base prefix allowed
  113|   441k|            return {ranges::begin(range), base, false};
  114|  3.32M|    }
  115|  3.32M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.19M|{
   38|  2.19M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.19M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.29M|{
   53|  2.29M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 28.3k, False: 2.26M]
  ------------------
   54|  28.3k|        return *r;
   55|  28.3k|    }
   56|       |
   57|  2.26M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.07M, False: 1.19M]
  ------------------
   58|  1.07M|        zero_parsed = true;
   59|  1.07M|        return *r;
   60|  1.07M|    }
   61|       |
   62|  1.19M|    return unexpected(parse_error::error);
   63|  2.26M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.63M|{
   45|  2.63M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.63M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.15M|{
   69|  2.15M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 27.9k, False: 2.12M]
  ------------------
   70|  27.9k|        return {*r, 16, false};
   71|  27.9k|    }
   72|  2.12M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.81k, False: 2.12M]
  ------------------
   73|  1.81k|        return {*r, 2, false};
   74|  1.81k|    }
   75|  2.12M|    {
   76|  2.12M|        bool zero_parsed{false};
   77|  2.12M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.02M, False: 1.10M]
  ------------------
   78|  1.02M|            return {*r, 8, zero_parsed};
   79|  1.02M|        }
   80|  2.12M|    }
   81|  1.10M|    return {ranges::begin(range), 10, false};
   82|  2.12M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.22M|{
  156|  2.22M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.22M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.22M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.29k, False: 2.22M]
  |  |  ------------------
  ------------------
  160|  1.29k|            return unexpected_scan_error(
  161|  1.29k|                scan_error::invalid_scanned_value,
  162|  1.29k|                "Failed to parse integer: No digits found");
  163|  1.29k|        }
  164|  2.22M|        return ranges::end(range);
  165|  2.22M|    }
  166|  2.22M|    else {
  167|  2.22M|        return read_while1_code_unit(
  168|  2.22M|                   range, [&](char_type ch)
  169|  2.22M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.22M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.22M|                scan_error::invalid_scanned_value,
  172|  2.22M|                "Failed to parse integer: No digits found"));
  173|  2.22M|    }
  174|  2.22M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   181k|    {
  324|   181k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   181k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   181k|        return read_default_with_base(range, value, 0);
  326|   181k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   181k|    {
  287|   181k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   181k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   181k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   181k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   181k|                return unexpected_scan_error(
  293|   181k|                    scan_error::invalid_scanned_value,
  294|   181k|                    "Unexpected '-' sign when parsing an "
  295|   181k|                    "unsigned value");
  296|   181k|            }
  297|   181k|        }
  298|       |
  299|   181k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 48.0k, False: 133k]
  ------------------
  300|  48.0k|            value = T{0};
  301|  48.0k|            return std::next(prefix_result.iterator);
  302|  48.0k|        }
  303|       |
  304|   267k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 123, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    123|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   267k|                                     ranges::subrange{prefix_result.iterator,
  306|   267k|                                                      ranges::end(range)},
  307|   267k|                                     prefix_result.parsed_base));
  308|       |
  309|   267k|        auto buf = make_contiguous_buffer(
  310|   267k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   267k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.81k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.81k|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   128k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   128k|                                    prefix_result.parsed_base));
  314|       |
  315|   128k|        return ranges_polyfill::batch_next(
  316|   128k|            prefix_result.iterator,
  317|   128k|            ranges::distance(buf.view().begin(), result_it));
  318|   267k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   184k|    {
  324|   184k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   184k|        return read_default_with_base(range, value, 0);
  326|   184k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   184k|    {
  287|   184k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   184k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   184k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   184k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   184k|                return unexpected_scan_error(
  293|   184k|                    scan_error::invalid_scanned_value,
  294|   184k|                    "Unexpected '-' sign when parsing an "
  295|   184k|                    "unsigned value");
  296|   184k|            }
  297|   184k|        }
  298|       |
  299|   184k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 48.3k, False: 135k]
  ------------------
  300|  48.3k|            value = T{0};
  301|  48.3k|            return std::next(prefix_result.iterator);
  302|  48.3k|        }
  303|       |
  304|   271k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 138, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    138|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   271k|                                     ranges::subrange{prefix_result.iterator,
  306|   271k|                                                      ranges::end(range)},
  307|   271k|                                     prefix_result.parsed_base));
  308|       |
  309|   271k|        auto buf = make_contiguous_buffer(
  310|   271k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   271k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.64k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.64k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   130k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   130k|                                    prefix_result.parsed_base));
  314|       |
  315|   130k|        return ranges_polyfill::batch_next(
  316|   130k|            prefix_result.iterator,
  317|   130k|            ranges::distance(buf.view().begin(), result_it));
  318|   271k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   128k|    {
  324|   128k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   128k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   128k|        return read_default_with_base(range, value, 0);
  326|   128k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   128k|    {
  287|   128k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   128k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   128k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   128k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.34k, False: 126k]
  ------------------
  292|  2.34k|                return unexpected_scan_error(
  293|  2.34k|                    scan_error::invalid_scanned_value,
  294|  2.34k|                    "Unexpected '-' sign when parsing an "
  295|  2.34k|                    "unsigned value");
  296|  2.34k|            }
  297|   128k|        }
  298|       |
  299|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 34.6k, False: 91.9k]
  ------------------
  300|  34.6k|            value = T{0};
  301|  34.6k|            return std::next(prefix_result.iterator);
  302|  34.6k|        }
  303|       |
  304|   183k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15, False: 91.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   183k|                                     ranges::subrange{prefix_result.iterator,
  306|   183k|                                                      ranges::end(range)},
  307|   183k|                                     prefix_result.parsed_base));
  308|       |
  309|   183k|        auto buf = make_contiguous_buffer(
  310|   183k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   183k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.16k, False: 88.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.16k|    }                                                  \
  |  |  |  |   70|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  88.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  88.7k|                                    prefix_result.parsed_base));
  314|       |
  315|  88.7k|        return ranges_polyfill::batch_next(
  316|  88.7k|            prefix_result.iterator,
  317|  88.7k|            ranges::distance(buf.view().begin(), result_it));
  318|   183k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   142k|    {
  324|   142k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   142k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   142k|        return read_default_with_base(range, value, 0);
  326|   142k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   142k|    {
  287|   142k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   142k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   142k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   142k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.49k, False: 139k]
  ------------------
  292|  2.49k|                return unexpected_scan_error(
  293|  2.49k|                    scan_error::invalid_scanned_value,
  294|  2.49k|                    "Unexpected '-' sign when parsing an "
  295|  2.49k|                    "unsigned value");
  296|  2.49k|            }
  297|   142k|        }
  298|       |
  299|   139k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 37.3k, False: 102k]
  ------------------
  300|  37.3k|            value = T{0};
  301|  37.3k|            return std::next(prefix_result.iterator);
  302|  37.3k|        }
  303|       |
  304|   204k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   204k|                                     ranges::subrange{prefix_result.iterator,
  306|   204k|                                                      ranges::end(range)},
  307|   204k|                                     prefix_result.parsed_base));
  308|       |
  309|   204k|        auto buf = make_contiguous_buffer(
  310|   204k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   204k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.81k, False: 99.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.81k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  99.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  99.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  99.3k|        return ranges_polyfill::batch_next(
  316|  99.3k|            prefix_result.iterator,
  317|  99.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   204k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   142k|    {
  324|   142k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   142k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   142k|        return read_default_with_base(range, value, 0);
  326|   142k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   142k|    {
  287|   142k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   142k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   142k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   142k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.60k, False: 140k]
  ------------------
  292|  2.60k|                return unexpected_scan_error(
  293|  2.60k|                    scan_error::invalid_scanned_value,
  294|  2.60k|                    "Unexpected '-' sign when parsing an "
  295|  2.60k|                    "unsigned value");
  296|  2.60k|            }
  297|   142k|        }
  298|       |
  299|   140k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 37.4k, False: 102k]
  ------------------
  300|  37.4k|            value = T{0};
  301|  37.4k|            return std::next(prefix_result.iterator);
  302|  37.4k|        }
  303|       |
  304|   205k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   205k|                                     ranges::subrange{prefix_result.iterator,
  306|   205k|                                                      ranges::end(range)},
  307|   205k|                                     prefix_result.parsed_base));
  308|       |
  309|   205k|        auto buf = make_contiguous_buffer(
  310|   205k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   205k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.62k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.62k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   100k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   100k|                                    prefix_result.parsed_base));
  314|       |
  315|   100k|        return ranges_polyfill::batch_next(
  316|   100k|            prefix_result.iterator,
  317|   100k|            ranges::distance(buf.view().begin(), result_it));
  318|   205k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   450k|{
  185|   450k|    std::basic_string<CharT> output;
  186|   450k|    std::string thsep_indices;
  187|   450k|    auto it = ranges::begin(range);
  188|   450k|    bool digit_matched = false;
  189|  1.98M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.98M, False: 4.77k]
  ------------------
  190|  1.98M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 81.8k, False: 1.90M]
  ------------------
  191|  81.8k|            thsep_indices.push_back(static_cast<char>(
  192|  81.8k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  81.8k|        }
  194|  1.90M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 445k, False: 1.45M]
  ------------------
  195|   445k|            break;
  196|   445k|        }
  197|  1.45M|        else {
  198|  1.45M|            output.push_back(*it);
  199|  1.45M|            digit_matched = true;
  200|  1.45M|        }
  201|  1.98M|    }
  202|   450k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.59k, False: 440k]
  |  |  ------------------
  ------------------
  203|  9.59k|        return unexpected_scan_error(
  204|  9.59k|            scan_error::invalid_scanned_value,
  205|  9.59k|            "Failed to parse integer: No digits found");
  206|  9.59k|    }
  207|   440k|    return std::tuple{it, output, thsep_indices};
  208|   450k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.6k|                return unexpected_scan_error(
  293|  12.6k|                    scan_error::invalid_scanned_value,
  294|  12.6k|                    "Unexpected '-' sign when parsing an "
  295|  12.6k|                    "unsigned value");
  296|  12.6k|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   327k|{
  121|   327k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   327k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   327k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   327k|        parse_integer_base_prefix(
  126|   327k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   327k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 327k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   327k|    else {
  139|   327k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 327k]
  ------------------
  140|   327k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 189k, False: 138k]
  ------------------
  141|   189k|            digits_begin_it = base_prefix_begin_it;
  142|   189k|        }
  143|   327k|    }
  144|       |
  145|   327k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 327k, False: 0]
  ------------------
  146|   327k|        sign = sign_type::plus_sign;
  147|   327k|    }
  148|   327k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   327k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   327k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   327k|{
   88|   327k|    switch (base) {
   89|  25.2k|        case 2:
  ------------------
  |  Branch (89:9): [True: 25.2k, False: 302k]
  ------------------
   90|       |            // allow 0b/0B
   91|  25.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  25.2k|                    false};
   93|       |
   94|  25.2k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 25.2k, False: 302k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  25.2k|            bool zero_parsed = false;
   97|  25.2k|            auto it = apply_opt(
   98|  25.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  25.2k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  50.4k|        case 16:
  ------------------
  |  Branch (102:9): [True: 50.4k, False: 277k]
  ------------------
  103|       |            // allow 0x/0X
  104|  50.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  50.4k|                    false};
  106|       |
  107|   176k|        case 0:
  ------------------
  |  Branch (107:9): [True: 176k, False: 151k]
  ------------------
  108|       |            // detect base
  109|   176k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  50.4k|        default:
  ------------------
  |  Branch (111:9): [True: 50.4k, False: 277k]
  ------------------
  112|       |            // no base prefix allowed
  113|  50.4k|            return {ranges::begin(range), base, false};
  114|   327k|    }
  115|   327k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   201k|{
   38|   201k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   201k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   201k|{
   53|   201k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 201k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   201k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 201k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   201k|    return unexpected(parse_error::error);
   63|   201k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   227k|{
   45|   227k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   227k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   176k|{
   69|   176k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 176k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   176k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 176k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   176k|    {
   76|   176k|        bool zero_parsed{false};
   77|   176k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 176k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   176k|    }
   81|   176k|    return {ranges::begin(range), 10, false};
   82|   176k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   277k|{
  156|   277k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   277k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   277k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   277k|            return unexpected_scan_error(
  161|   277k|                scan_error::invalid_scanned_value,
  162|   277k|                "Failed to parse integer: No digits found");
  163|   277k|        }
  164|   277k|        return ranges::end(range);
  165|   277k|    }
  166|   277k|    else {
  167|   277k|        return read_while1_code_unit(
  168|   277k|                   range, [&](char_type ch)
  169|   277k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   277k|            .transform_error(map_parse_error_to_scan_error(
  171|   277k|                scan_error::invalid_scanned_value,
  172|   277k|                "Failed to parse integer: No digits found"));
  173|   277k|    }
  174|   277k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   390k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.6k|                return unexpected_scan_error(
  293|  12.6k|                    scan_error::invalid_scanned_value,
  294|  12.6k|                    "Unexpected '-' sign when parsing an "
  295|  12.6k|                    "unsigned value");
  296|  12.6k|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.6k|                return unexpected_scan_error(
  293|  12.6k|                    scan_error::invalid_scanned_value,
  294|  12.6k|                    "Unexpected '-' sign when parsing an "
  295|  12.6k|                    "unsigned value");
  296|  12.6k|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.6k|    {
  324|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.6k|        return read_default_with_base(range, value, 0);
  326|  12.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.6k|    {
  287|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.6k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.6k|        }
  298|       |
  299|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.6k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.30k, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.30k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.9k|                                                      ranges::end(range)},
  307|  18.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.9k|        auto buf = make_contiguous_buffer(
  310|  18.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.30k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.30k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.30k|        return ranges_polyfill::batch_next(
  316|  6.30k|            prefix_result.iterator,
  317|  6.30k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.9k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  50.4k|{
  185|  50.4k|    std::basic_string<CharT> output;
  186|  50.4k|    std::string thsep_indices;
  187|  50.4k|    auto it = ranges::begin(range);
  188|  50.4k|    bool digit_matched = false;
  189|  75.6k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 75.6k, False: 12]
  ------------------
  190|  75.6k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 75.6k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  75.6k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 50.4k, False: 25.2k]
  ------------------
  195|  50.4k|            break;
  196|  50.4k|        }
  197|  25.2k|        else {
  198|  25.2k|            output.push_back(*it);
  199|  25.2k|            digit_matched = true;
  200|  25.2k|        }
  201|  75.6k|    }
  202|  50.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.2k, False: 25.2k]
  |  |  ------------------
  ------------------
  203|  25.2k|        return unexpected_scan_error(
  204|  25.2k|            scan_error::invalid_scanned_value,
  205|  25.2k|            "Failed to parse integer: No digits found");
  206|  25.2k|    }
  207|  25.2k|    return std::tuple{it, output, thsep_indices};
  208|  50.4k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.66M|    {
  280|  2.66M|        detail::check_int_type_specs(specs, eh);
  281|  2.66M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   333k|    {
  335|   333k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   333k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   333k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 33.3k, False: 299k]
  ------------------
  339|  33.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  33.3k|                return unexpected_scan_error(
  341|  33.3k|                    scan_error::invalid_scanned_value,
  342|  33.3k|                    "Unexpected '-' sign when parsing an "
  343|  33.3k|                    "unsigned value");
  344|  33.3k|            }
  345|  33.3k|            else {
  346|  33.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 33.3k]
  ------------------
  347|  33.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  33.3k|            }
  353|  33.3k|        }
  354|       |
  355|   333k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 57.0k, False: 276k]
  ------------------
  356|  57.0k|            value = T{0};
  357|  57.0k|            return std::next(prefix_result.iterator);
  358|  57.0k|        }
  359|       |
  360|   276k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   276k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 205k, False: 71.2k]
  |  |  ------------------
  ------------------
  361|   205k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 136, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    136|    }                                                  \
  |  |  |  |   70|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   204k|                    parse_integer_digits_without_thsep(
  363|   204k|                        ranges::subrange{prefix_result.iterator,
  364|   204k|                                         ranges::end(range)},
  365|   204k|                        prefix_result.parsed_base));
  366|       |
  367|   204k|            auto buf = make_contiguous_buffer(
  368|   204k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   204k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.1k, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   185k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   185k|                                        prefix_result.parsed_base));
  372|       |
  373|   185k|            return ranges_polyfill::batch_next(
  374|   185k|                prefix_result.iterator,
  375|   185k|                ranges::distance(buf.view().begin(), result_it));
  376|   204k|        }
  377|       |
  378|  71.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  71.2k|            localized_number_formatting_options<CharT>{loc};
  383|  71.2k|#endif
  384|       |
  385|  71.2k|        SCN_TRY(
  ------------------
  |  |   71|  71.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.51k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.51k|    }                                                  \
  |  |  |  |   70|  71.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  69.7k|            parse_digits_result,
  387|  69.7k|            parse_integer_digits_with_thsep(
  388|  69.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  69.7k|                prefix_result.parsed_base, locale_options));
  390|  69.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  69.7k|            parse_digits_result;
  392|       |
  393|  69.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 956, False: 68.7k]
  ------------------
  394|    956|            if (auto e = check_thsep_grouping(
  395|    956|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    956|                    thsep_indices, locale_options.grouping);
  397|    956|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 320, False: 636]
  |  |  ------------------
  ------------------
  398|    320|                return unexpected(e);
  399|    320|            }
  400|    956|        }
  401|       |
  402|  69.4k|        auto nothsep_source_view =
  403|  69.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  69.4k|        SCN_TRY(
  ------------------
  |  |   71|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.78k, False: 67.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.78k|    }                                                  \
  |  |  |  |   70|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  67.6k|            nothsep_source_it,
  406|  67.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  67.6k|                                prefix_result.parsed_base));
  408|       |
  409|  67.6k|        return ranges_polyfill::batch_next(
  410|  67.6k|            prefix_result.iterator,
  411|  67.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  67.6k|                ranges::ssize(thsep_indices));
  413|  69.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   486k|    {
  335|   486k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   486k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   486k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   486k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 486k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   486k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   486k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   486k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 37.4k, False: 448k]
  ------------------
  339|  37.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  37.4k|                return unexpected_scan_error(
  341|  37.4k|                    scan_error::invalid_scanned_value,
  342|  37.4k|                    "Unexpected '-' sign when parsing an "
  343|  37.4k|                    "unsigned value");
  344|  37.4k|            }
  345|  37.4k|            else {
  346|  37.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 37.4k]
  ------------------
  347|  37.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  37.4k|            }
  353|  37.4k|        }
  354|       |
  355|   486k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 72.6k, False: 413k]
  ------------------
  356|  72.6k|            value = T{0};
  357|  72.6k|            return std::next(prefix_result.iterator);
  358|  72.6k|        }
  359|       |
  360|   413k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   413k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 324k, False: 89.5k]
  |  |  ------------------
  ------------------
  361|   324k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 278, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    278|    }                                                  \
  |  |  |  |   70|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   323k|                    parse_integer_digits_without_thsep(
  363|   323k|                        ranges::subrange{prefix_result.iterator,
  364|   323k|                                         ranges::end(range)},
  365|   323k|                        prefix_result.parsed_base));
  366|       |
  367|   323k|            auto buf = make_contiguous_buffer(
  368|   323k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   323k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.7k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.7k|    }                                                  \
  |  |  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   305k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   305k|                                        prefix_result.parsed_base));
  372|       |
  373|   305k|            return ranges_polyfill::batch_next(
  374|   305k|                prefix_result.iterator,
  375|   305k|                ranges::distance(buf.view().begin(), result_it));
  376|   323k|        }
  377|       |
  378|  89.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  89.5k|            localized_number_formatting_options<CharT>{loc};
  383|  89.5k|#endif
  384|       |
  385|  89.5k|        SCN_TRY(
  ------------------
  |  |   71|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.11k, False: 87.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.11k|    }                                                  \
  |  |  |  |   70|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  87.4k|            parse_digits_result,
  387|  87.4k|            parse_integer_digits_with_thsep(
  388|  87.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  87.4k|                prefix_result.parsed_base, locale_options));
  390|  87.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  87.4k|            parse_digits_result;
  392|       |
  393|  87.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.04k, False: 86.3k]
  ------------------
  394|  1.04k|            if (auto e = check_thsep_grouping(
  395|  1.04k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.04k|                    thsep_indices, locale_options.grouping);
  397|  1.04k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 406, False: 636]
  |  |  ------------------
  ------------------
  398|    406|                return unexpected(e);
  399|    406|            }
  400|  1.04k|        }
  401|       |
  402|  87.0k|        auto nothsep_source_view =
  403|  87.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  87.0k|        SCN_TRY(
  ------------------
  |  |   71|  87.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 756, False: 86.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    756|    }                                                  \
  |  |  |  |   70|  87.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  86.2k|            nothsep_source_it,
  406|  86.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  86.2k|                                prefix_result.parsed_base));
  408|       |
  409|  86.2k|        return ranges_polyfill::batch_next(
  410|  86.2k|            prefix_result.iterator,
  411|  86.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  86.2k|                ranges::ssize(thsep_indices));
  413|  87.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   492k|    {
  335|   492k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   492k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   492k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   492k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 492k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   492k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   492k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   492k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 38.2k, False: 454k]
  ------------------
  339|  38.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  38.2k|                return unexpected_scan_error(
  341|  38.2k|                    scan_error::invalid_scanned_value,
  342|  38.2k|                    "Unexpected '-' sign when parsing an "
  343|  38.2k|                    "unsigned value");
  344|  38.2k|            }
  345|  38.2k|            else {
  346|  38.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 38.2k]
  ------------------
  347|  38.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  38.2k|            }
  353|  38.2k|        }
  354|       |
  355|   492k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 73.0k, False: 419k]
  ------------------
  356|  73.0k|            value = T{0};
  357|  73.0k|            return std::next(prefix_result.iterator);
  358|  73.0k|        }
  359|       |
  360|   419k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   419k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 328k, False: 90.7k]
  |  |  ------------------
  ------------------
  361|   328k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   328k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   328k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   328k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 316, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    316|    }                                                  \
  |  |  |  |   70|   328k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   328k|                    parse_integer_digits_without_thsep(
  363|   328k|                        ranges::subrange{prefix_result.iterator,
  364|   328k|                                         ranges::end(range)},
  365|   328k|                        prefix_result.parsed_base));
  366|       |
  367|   328k|            auto buf = make_contiguous_buffer(
  368|   328k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   328k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   328k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   328k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   328k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.3k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.3k|    }                                                  \
  |  |  |  |   70|   328k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   311k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   311k|                                        prefix_result.parsed_base));
  372|       |
  373|   311k|            return ranges_polyfill::batch_next(
  374|   311k|                prefix_result.iterator,
  375|   311k|                ranges::distance(buf.view().begin(), result_it));
  376|   328k|        }
  377|       |
  378|  90.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  90.7k|            localized_number_formatting_options<CharT>{loc};
  383|  90.7k|#endif
  384|       |
  385|  90.7k|        SCN_TRY(
  ------------------
  |  |   71|  90.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 88.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  88.4k|            parse_digits_result,
  387|  88.4k|            parse_integer_digits_with_thsep(
  388|  88.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  88.4k|                prefix_result.parsed_base, locale_options));
  390|  88.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  88.4k|            parse_digits_result;
  392|       |
  393|  88.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.13k, False: 87.2k]
  ------------------
  394|  1.13k|            if (auto e = check_thsep_grouping(
  395|  1.13k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.13k|                    thsep_indices, locale_options.grouping);
  397|  1.13k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 488, False: 644]
  |  |  ------------------
  ------------------
  398|    488|                return unexpected(e);
  399|    488|            }
  400|  1.13k|        }
  401|       |
  402|  87.9k|        auto nothsep_source_view =
  403|  87.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  87.9k|        SCN_TRY(
  ------------------
  |  |   71|  87.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 374, False: 87.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    374|    }                                                  \
  |  |  |  |   70|  87.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  87.5k|            nothsep_source_it,
  406|  87.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  87.5k|                                prefix_result.parsed_base));
  408|       |
  409|  87.5k|        return ranges_polyfill::batch_next(
  410|  87.5k|            prefix_result.iterator,
  411|  87.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  87.5k|                ranges::ssize(thsep_indices));
  413|  87.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   317k|    {
  335|   317k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   317k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   317k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.32k, False: 308k]
  ------------------
  339|  8.32k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.32k|                return unexpected_scan_error(
  341|  8.32k|                    scan_error::invalid_scanned_value,
  342|  8.32k|                    "Unexpected '-' sign when parsing an "
  343|  8.32k|                    "unsigned value");
  344|  8.32k|            }
  345|  8.32k|            else {
  346|  8.32k|                if (specs.type ==
  347|  8.32k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.32k|                    return unexpected_scan_error(
  349|  8.32k|                        scan_error::invalid_scanned_value,
  350|  8.32k|                        "'u'-option disallows negative values");
  351|  8.32k|                }
  352|  8.32k|            }
  353|  8.32k|        }
  354|       |
  355|   308k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 53.3k, False: 255k]
  ------------------
  356|  53.3k|            value = T{0};
  357|  53.3k|            return std::next(prefix_result.iterator);
  358|  53.3k|        }
  359|       |
  360|   255k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   255k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 193k, False: 61.6k]
  |  |  ------------------
  ------------------
  361|   193k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     34|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   193k|                    parse_integer_digits_without_thsep(
  363|   193k|                        ranges::subrange{prefix_result.iterator,
  364|   193k|                                         ranges::end(range)},
  365|   193k|                        prefix_result.parsed_base));
  366|       |
  367|   193k|            auto buf = make_contiguous_buffer(
  368|   193k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   193k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.7k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.7k|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   181k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   181k|                                        prefix_result.parsed_base));
  372|       |
  373|   181k|            return ranges_polyfill::batch_next(
  374|   181k|                prefix_result.iterator,
  375|   181k|                ranges::distance(buf.view().begin(), result_it));
  376|   193k|        }
  377|       |
  378|  61.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  61.6k|            localized_number_formatting_options<CharT>{loc};
  383|  61.6k|#endif
  384|       |
  385|  61.6k|        SCN_TRY(
  ------------------
  |  |   71|  61.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|  61.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  60.5k|            parse_digits_result,
  387|  60.5k|            parse_integer_digits_with_thsep(
  388|  60.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  60.5k|                prefix_result.parsed_base, locale_options));
  390|  60.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  60.5k|            parse_digits_result;
  392|       |
  393|  60.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 850, False: 59.6k]
  ------------------
  394|    850|            if (auto e = check_thsep_grouping(
  395|    850|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    850|                    thsep_indices, locale_options.grouping);
  397|    850|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 236, False: 614]
  |  |  ------------------
  ------------------
  398|    236|                return unexpected(e);
  399|    236|            }
  400|    850|        }
  401|       |
  402|  60.3k|        auto nothsep_source_view =
  403|  60.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  60.3k|        SCN_TRY(
  ------------------
  |  |   71|  60.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 714, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    714|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    714|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    714|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    714|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    714|    }                                                  \
  |  |  |  |   70|  60.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  59.5k|            nothsep_source_it,
  406|  59.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  59.5k|                                prefix_result.parsed_base));
  408|       |
  409|  59.5k|        return ranges_polyfill::batch_next(
  410|  59.5k|            prefix_result.iterator,
  411|  59.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  59.5k|                ranges::ssize(thsep_indices));
  413|  60.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   383k|    {
  335|   383k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   383k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   383k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.80k, False: 374k]
  ------------------
  339|  8.80k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.80k|                return unexpected_scan_error(
  341|  8.80k|                    scan_error::invalid_scanned_value,
  342|  8.80k|                    "Unexpected '-' sign when parsing an "
  343|  8.80k|                    "unsigned value");
  344|  8.80k|            }
  345|  8.80k|            else {
  346|  8.80k|                if (specs.type ==
  347|  8.80k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.80k|                    return unexpected_scan_error(
  349|  8.80k|                        scan_error::invalid_scanned_value,
  350|  8.80k|                        "'u'-option disallows negative values");
  351|  8.80k|                }
  352|  8.80k|            }
  353|  8.80k|        }
  354|       |
  355|   374k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 56.9k, False: 317k]
  ------------------
  356|  56.9k|            value = T{0};
  357|  56.9k|            return std::next(prefix_result.iterator);
  358|  56.9k|        }
  359|       |
  360|   317k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   317k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 248k, False: 68.4k]
  |  |  ------------------
  ------------------
  361|   248k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   248k|                    parse_integer_digits_without_thsep(
  363|   248k|                        ranges::subrange{prefix_result.iterator,
  364|   248k|                                         ranges::end(range)},
  365|   248k|                        prefix_result.parsed_base));
  366|       |
  367|   248k|            auto buf = make_contiguous_buffer(
  368|   248k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   248k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   237k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   237k|                                        prefix_result.parsed_base));
  372|       |
  373|   237k|            return ranges_polyfill::batch_next(
  374|   237k|                prefix_result.iterator,
  375|   237k|                ranges::distance(buf.view().begin(), result_it));
  376|   248k|        }
  377|       |
  378|  68.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  68.4k|            localized_number_formatting_options<CharT>{loc};
  383|  68.4k|#endif
  384|       |
  385|  68.4k|        SCN_TRY(
  ------------------
  |  |   71|  68.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.25k, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.25k|    }                                                  \
  |  |  |  |   70|  68.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  67.2k|            parse_digits_result,
  387|  67.2k|            parse_integer_digits_with_thsep(
  388|  67.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  67.2k|                prefix_result.parsed_base, locale_options));
  390|  67.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  67.2k|            parse_digits_result;
  392|       |
  393|  67.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 888, False: 66.3k]
  ------------------
  394|    888|            if (auto e = check_thsep_grouping(
  395|    888|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    888|                    thsep_indices, locale_options.grouping);
  397|    888|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 274, False: 614]
  |  |  ------------------
  ------------------
  398|    274|                return unexpected(e);
  399|    274|            }
  400|    888|        }
  401|       |
  402|  66.9k|        auto nothsep_source_view =
  403|  66.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.9k|        SCN_TRY(
  ------------------
  |  |   71|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 328, False: 66.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    328|    }                                                  \
  |  |  |  |   70|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  66.6k|            nothsep_source_it,
  406|  66.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  66.6k|                                prefix_result.parsed_base));
  408|       |
  409|  66.6k|        return ranges_polyfill::batch_next(
  410|  66.6k|            prefix_result.iterator,
  411|  66.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  66.6k|                ranges::ssize(thsep_indices));
  413|  66.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   385k|    {
  335|   385k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 385k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   385k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   385k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.09k, False: 376k]
  ------------------
  339|  9.09k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.09k|                return unexpected_scan_error(
  341|  9.09k|                    scan_error::invalid_scanned_value,
  342|  9.09k|                    "Unexpected '-' sign when parsing an "
  343|  9.09k|                    "unsigned value");
  344|  9.09k|            }
  345|  9.09k|            else {
  346|  9.09k|                if (specs.type ==
  347|  9.09k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.09k|                    return unexpected_scan_error(
  349|  9.09k|                        scan_error::invalid_scanned_value,
  350|  9.09k|                        "'u'-option disallows negative values");
  351|  9.09k|                }
  352|  9.09k|            }
  353|  9.09k|        }
  354|       |
  355|   376k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 57.1k, False: 319k]
  ------------------
  356|  57.1k|            value = T{0};
  357|  57.1k|            return std::next(prefix_result.iterator);
  358|  57.1k|        }
  359|       |
  360|   319k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   319k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 250k, False: 68.8k]
  |  |  ------------------
  ------------------
  361|   250k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   250k|                    parse_integer_digits_without_thsep(
  363|   250k|                        ranges::subrange{prefix_result.iterator,
  364|   250k|                                         ranges::end(range)},
  365|   250k|                        prefix_result.parsed_base));
  366|       |
  367|   250k|            auto buf = make_contiguous_buffer(
  368|   250k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   250k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   239k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   239k|                                        prefix_result.parsed_base));
  372|       |
  373|   239k|            return ranges_polyfill::batch_next(
  374|   239k|                prefix_result.iterator,
  375|   239k|                ranges::distance(buf.view().begin(), result_it));
  376|   250k|        }
  377|       |
  378|  68.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  68.8k|            localized_number_formatting_options<CharT>{loc};
  383|  68.8k|#endif
  384|       |
  385|  68.8k|        SCN_TRY(
  ------------------
  |  |   71|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.28k, False: 67.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.28k|    }                                                  \
  |  |  |  |   70|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  67.5k|            parse_digits_result,
  387|  67.5k|            parse_integer_digits_with_thsep(
  388|  67.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  67.5k|                prefix_result.parsed_base, locale_options));
  390|  67.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  67.5k|            parse_digits_result;
  392|       |
  393|  67.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 888, False: 66.6k]
  ------------------
  394|    888|            if (auto e = check_thsep_grouping(
  395|    888|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    888|                    thsep_indices, locale_options.grouping);
  397|    888|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 274, False: 614]
  |  |  ------------------
  ------------------
  398|    274|                return unexpected(e);
  399|    274|            }
  400|    888|        }
  401|       |
  402|  67.2k|        auto nothsep_source_view =
  403|  67.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  67.2k|        SCN_TRY(
  ------------------
  |  |   71|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  67.1k|            nothsep_source_it,
  406|  67.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  67.1k|                                prefix_result.parsed_base));
  408|       |
  409|  67.1k|        return ranges_polyfill::batch_next(
  410|  67.1k|            prefix_result.iterator,
  411|  67.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  67.1k|                ranges::ssize(thsep_indices));
  413|  67.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  42.0k|    {
  335|  42.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  42.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  42.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 42.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  42.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 42.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 33.6k, False: 8.40k]
  |  |  ------------------
  ------------------
  361|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.0k, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.0k|    }                                                  \
  |  |  |  |   70|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  12.6k|                    parse_integer_digits_without_thsep(
  363|  12.6k|                        ranges::subrange{prefix_result.iterator,
  364|  12.6k|                                         ranges::end(range)},
  365|  12.6k|                        prefix_result.parsed_base));
  366|       |
  367|  12.6k|            auto buf = make_contiguous_buffer(
  368|  12.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  12.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  12.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  12.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  12.6k|            return ranges_polyfill::batch_next(
  374|  12.6k|                prefix_result.iterator,
  375|  12.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  12.6k|        }
  377|       |
  378|  8.40k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.40k|            localized_number_formatting_options<CharT>{loc};
  383|  8.40k|#endif
  384|       |
  385|  8.40k|        SCN_TRY(
  ------------------
  |  |   71|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.20k, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.20k|    }                                                  \
  |  |  |  |   70|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.20k|            parse_digits_result,
  387|  4.20k|            parse_integer_digits_with_thsep(
  388|  4.20k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.20k|                prefix_result.parsed_base, locale_options));
  390|  4.20k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.20k|            parse_digits_result;
  392|       |
  393|  4.20k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.20k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.20k|        auto nothsep_source_view =
  403|  4.20k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.20k|        SCN_TRY(
  ------------------
  |  |   71|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.20k|            nothsep_source_it,
  406|  4.20k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.20k|                                prefix_result.parsed_base));
  408|       |
  409|  4.20k|        return ranges_polyfill::batch_next(
  410|  4.20k|            prefix_result.iterator,
  411|  4.20k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.20k|                ranges::ssize(thsep_indices));
  413|  4.20k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   124k|    {
  324|   124k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   124k|        return read_default_with_base(range, value, 0);
  326|   124k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   124k|    {
  287|   124k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   124k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   124k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   124k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   124k|                return unexpected_scan_error(
  293|   124k|                    scan_error::invalid_scanned_value,
  294|   124k|                    "Unexpected '-' sign when parsing an "
  295|   124k|                    "unsigned value");
  296|   124k|            }
  297|   124k|        }
  298|       |
  299|   124k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.5k, False: 94.3k]
  ------------------
  300|  30.5k|            value = T{0};
  301|  30.5k|            return std::next(prefix_result.iterator);
  302|  30.5k|        }
  303|       |
  304|   188k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  94.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 75, False: 94.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     75|    }                                                  \
  |  |  |  |   70|  94.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   188k|                                     ranges::subrange{prefix_result.iterator,
  306|   188k|                                                      ranges::end(range)},
  307|   188k|                                     prefix_result.parsed_base));
  308|       |
  309|   188k|        auto buf = make_contiguous_buffer(
  310|   188k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   188k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.96k, False: 84.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.96k|    }                                                  \
  |  |  |  |   70|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  84.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  84.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  84.3k|        return ranges_polyfill::batch_next(
  316|  84.3k|            prefix_result.iterator,
  317|  84.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   188k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.93M|{
  121|  2.93M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.93M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.93M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.93M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.93M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.93M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.93M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.93M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.93M|        parse_integer_base_prefix(
  126|  2.93M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.93M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 906k, False: 2.02M]
  ------------------
  129|   906k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.18k, False: 903k]
  ------------------
  130|   906k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 511k, False: 392k]
  ------------------
  131|   513k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   513k|                digits_begin_it, ranges::begin(range));
  133|   513k|        }
  134|   392k|        else {
  135|   392k|            parsed_zero = false;
  136|   392k|        }
  137|   906k|    }
  138|  2.02M|    else {
  139|  2.02M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.07k, False: 2.02M]
  ------------------
  140|  2.02M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 260k, False: 1.76M]
  ------------------
  141|   265k|            digits_begin_it = base_prefix_begin_it;
  142|   265k|        }
  143|  2.02M|    }
  144|       |
  145|  2.93M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.72M, False: 209k]
  ------------------
  146|  2.72M|        sign = sign_type::plus_sign;
  147|  2.72M|    }
  148|  2.93M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.93M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.93M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.93M|{
   88|  2.93M|    switch (base) {
   89|  82.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 82.9k, False: 2.85M]
  ------------------
   90|       |            // allow 0b/0B
   91|  82.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  82.9k|                    false};
   93|       |
   94|   167k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 167k, False: 2.76M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   167k|            bool zero_parsed = false;
   97|   167k|            auto it = apply_opt(
   98|   167k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   167k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   423k|        case 16:
  ------------------
  |  Branch (102:9): [True: 423k, False: 2.51M]
  ------------------
  103|       |            // allow 0x/0X
  104|   423k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   423k|                    false};
  106|       |
  107|  1.87M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.87M, False: 1.05M]
  ------------------
  108|       |            // detect base
  109|  1.87M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   385k|        default:
  ------------------
  |  Branch (111:9): [True: 385k, False: 2.54M]
  ------------------
  112|       |            // no base prefix allowed
  113|   385k|            return {ranges::begin(range), base, false};
  114|  2.93M|    }
  115|  2.93M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.93M|{
   38|  1.93M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.93M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.01M|{
   53|  2.01M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 25.7k, False: 1.98M]
  ------------------
   54|  25.7k|        return *r;
   55|  25.7k|    }
   56|       |
   57|  1.98M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 906k, False: 1.08M]
  ------------------
   58|   906k|        zero_parsed = true;
   59|   906k|        return *r;
   60|   906k|    }
   61|       |
   62|  1.08M|    return unexpected(parse_error::error);
   63|  1.98M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.29M|{
   45|  2.29M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.29M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.87M|{
   69|  1.87M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 25.4k, False: 1.84M]
  ------------------
   70|  25.4k|        return {*r, 16, false};
   71|  25.4k|    }
   72|  1.84M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.66k, False: 1.84M]
  ------------------
   73|  1.66k|        return {*r, 2, false};
   74|  1.66k|    }
   75|  1.84M|    {
   76|  1.84M|        bool zero_parsed{false};
   77|  1.84M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 862k, False: 985k]
  ------------------
   78|   862k|            return {*r, 8, zero_parsed};
   79|   862k|        }
   80|  1.84M|    }
   81|   985k|    return {ranges::begin(range), 10, false};
   82|  1.84M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.99M|{
  156|  1.99M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.99M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.99M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.60k, False: 1.99M]
  |  |  ------------------
  ------------------
  160|  1.60k|            return unexpected_scan_error(
  161|  1.60k|                scan_error::invalid_scanned_value,
  162|  1.60k|                "Failed to parse integer: No digits found");
  163|  1.60k|        }
  164|  1.99M|        return ranges::end(range);
  165|  1.99M|    }
  166|  1.99M|    else {
  167|  1.99M|        return read_while1_code_unit(
  168|  1.99M|                   range, [&](char_type ch)
  169|  1.99M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.99M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.99M|                scan_error::invalid_scanned_value,
  172|  1.99M|                "Failed to parse integer: No digits found"));
  173|  1.99M|    }
  174|  1.99M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   156k|    {
  324|   156k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   156k|        return read_default_with_base(range, value, 0);
  326|   156k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   156k|    {
  287|   156k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   156k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   156k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   156k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   156k|                return unexpected_scan_error(
  293|   156k|                    scan_error::invalid_scanned_value,
  294|   156k|                    "Unexpected '-' sign when parsing an "
  295|   156k|                    "unsigned value");
  296|   156k|            }
  297|   156k|        }
  298|       |
  299|   156k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 40.1k, False: 115k]
  ------------------
  300|  40.1k|            value = T{0};
  301|  40.1k|            return std::next(prefix_result.iterator);
  302|  40.1k|        }
  303|       |
  304|   231k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 141, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    141|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    141|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    141|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    141|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    141|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   231k|                                     ranges::subrange{prefix_result.iterator,
  306|   231k|                                                      ranges::end(range)},
  307|   231k|                                     prefix_result.parsed_base));
  308|       |
  309|   231k|        auto buf = make_contiguous_buffer(
  310|   231k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   231k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.37k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.37k|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   106k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   106k|                                    prefix_result.parsed_base));
  314|       |
  315|   106k|        return ranges_polyfill::batch_next(
  316|   106k|            prefix_result.iterator,
  317|   106k|            ranges::distance(buf.view().begin(), result_it));
  318|   231k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   157k|    {
  324|   157k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   157k|        return read_default_with_base(range, value, 0);
  326|   157k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   157k|    {
  287|   157k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   157k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   157k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   157k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   157k|                return unexpected_scan_error(
  293|   157k|                    scan_error::invalid_scanned_value,
  294|   157k|                    "Unexpected '-' sign when parsing an "
  295|   157k|                    "unsigned value");
  296|   157k|            }
  297|   157k|        }
  298|       |
  299|   157k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 40.4k, False: 117k]
  ------------------
  300|  40.4k|            value = T{0};
  301|  40.4k|            return std::next(prefix_result.iterator);
  302|  40.4k|        }
  303|       |
  304|   234k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 156, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    156|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   234k|                                     ranges::subrange{prefix_result.iterator,
  306|   234k|                                                      ranges::end(range)},
  307|   234k|                                     prefix_result.parsed_base));
  308|       |
  309|   234k|        auto buf = make_contiguous_buffer(
  310|   234k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   234k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.21k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.21k|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   107k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   107k|                                    prefix_result.parsed_base));
  314|       |
  315|   107k|        return ranges_polyfill::batch_next(
  316|   107k|            prefix_result.iterator,
  317|   107k|            ranges::distance(buf.view().begin(), result_it));
  318|   234k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   114k|    {
  324|   114k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   114k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   114k|        return read_default_with_base(range, value, 0);
  326|   114k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   114k|    {
  287|   114k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   114k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   114k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   114k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.68k, False: 112k]
  ------------------
  292|  1.68k|                return unexpected_scan_error(
  293|  1.68k|                    scan_error::invalid_scanned_value,
  294|  1.68k|                    "Unexpected '-' sign when parsing an "
  295|  1.68k|                    "unsigned value");
  296|  1.68k|            }
  297|   114k|        }
  298|       |
  299|   112k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.8k, False: 84.0k]
  ------------------
  300|  28.8k|            value = T{0};
  301|  28.8k|            return std::next(prefix_result.iterator);
  302|  28.8k|        }
  303|       |
  304|   168k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  84.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 84.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  84.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   168k|                                     ranges::subrange{prefix_result.iterator,
  306|   168k|                                                      ranges::end(range)},
  307|   168k|                                     prefix_result.parsed_base));
  308|       |
  309|   168k|        auto buf = make_contiguous_buffer(
  310|   168k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   168k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  84.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.41k, False: 75.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.41k|    }                                                  \
  |  |  |  |   70|  84.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  75.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  75.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  75.6k|        return ranges_polyfill::batch_next(
  316|  75.6k|            prefix_result.iterator,
  317|  75.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   168k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   124k|    {
  324|   124k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   124k|        return read_default_with_base(range, value, 0);
  326|   124k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   124k|    {
  287|   124k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   124k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   124k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   124k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.79k, False: 122k]
  ------------------
  292|  1.79k|                return unexpected_scan_error(
  293|  1.79k|                    scan_error::invalid_scanned_value,
  294|  1.79k|                    "Unexpected '-' sign when parsing an "
  295|  1.79k|                    "unsigned value");
  296|  1.79k|            }
  297|   124k|        }
  298|       |
  299|   122k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.7k, False: 91.7k]
  ------------------
  300|  30.7k|            value = T{0};
  301|  30.7k|            return std::next(prefix_result.iterator);
  302|  30.7k|        }
  303|       |
  304|   183k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  91.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 91.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  91.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   183k|                                     ranges::subrange{prefix_result.iterator,
  306|   183k|                                                      ranges::end(range)},
  307|   183k|                                     prefix_result.parsed_base));
  308|       |
  309|   183k|        auto buf = make_contiguous_buffer(
  310|   183k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   183k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.11k, False: 83.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.11k|    }                                                  \
  |  |  |  |   70|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  83.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  83.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  83.5k|        return ranges_polyfill::batch_next(
  316|  83.5k|            prefix_result.iterator,
  317|  83.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   183k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   124k|    {
  324|   124k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   124k|        return read_default_with_base(range, value, 0);
  326|   124k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   124k|    {
  287|   124k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   124k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   124k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   124k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.86k, False: 123k]
  ------------------
  292|  1.86k|                return unexpected_scan_error(
  293|  1.86k|                    scan_error::invalid_scanned_value,
  294|  1.86k|                    "Unexpected '-' sign when parsing an "
  295|  1.86k|                    "unsigned value");
  296|  1.86k|            }
  297|   124k|        }
  298|       |
  299|   123k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.8k, False: 92.2k]
  ------------------
  300|  30.8k|            value = T{0};
  301|  30.8k|            return std::next(prefix_result.iterator);
  302|  30.8k|        }
  303|       |
  304|   184k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  92.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 92.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  92.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   184k|                                     ranges::subrange{prefix_result.iterator,
  306|   184k|                                                      ranges::end(range)},
  307|   184k|                                     prefix_result.parsed_base));
  308|       |
  309|   184k|        auto buf = make_contiguous_buffer(
  310|   184k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   184k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  92.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.96k, False: 84.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.96k|    }                                                  \
  |  |  |  |   70|  92.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  84.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  84.2k|                                    prefix_result.parsed_base));
  314|       |
  315|  84.2k|        return ranges_polyfill::batch_next(
  316|  84.2k|            prefix_result.iterator,
  317|  84.2k|            ranges::distance(buf.view().begin(), result_it));
  318|   184k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   399k|{
  185|   399k|    std::basic_string<CharT> output;
  186|   399k|    std::string thsep_indices;
  187|   399k|    auto it = ranges::begin(range);
  188|   399k|    bool digit_matched = false;
  189|  1.70M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.70M, False: 5.16k]
  ------------------
  190|  1.70M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 75.7k, False: 1.62M]
  ------------------
  191|  75.7k|            thsep_indices.push_back(static_cast<char>(
  192|  75.7k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  75.7k|        }
  194|  1.62M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 393k, False: 1.23M]
  ------------------
  195|   393k|            break;
  196|   393k|        }
  197|  1.23M|        else {
  198|  1.23M|            output.push_back(*it);
  199|  1.23M|            digit_matched = true;
  200|  1.23M|        }
  201|  1.70M|    }
  202|   399k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.8k, False: 368k]
  |  |  ------------------
  ------------------
  203|  30.8k|        return unexpected_scan_error(
  204|  30.8k|            scan_error::invalid_scanned_value,
  205|  30.8k|            "Failed to parse integer: No digits found");
  206|  30.8k|    }
  207|   368k|    return std::tuple{it, output, thsep_indices};
  208|   399k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.58M|    {
  280|  2.58M|        detail::check_int_type_specs(specs, eh);
  281|  2.58M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   298k|    {
  335|   298k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   298k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   298k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.8k, False: 273k]
  ------------------
  339|  24.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.8k|                return unexpected_scan_error(
  341|  24.8k|                    scan_error::invalid_scanned_value,
  342|  24.8k|                    "Unexpected '-' sign when parsing an "
  343|  24.8k|                    "unsigned value");
  344|  24.8k|            }
  345|  24.8k|            else {
  346|  24.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 24.8k]
  ------------------
  347|  24.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  24.8k|            }
  353|  24.8k|        }
  354|       |
  355|   298k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.6k, False: 251k]
  ------------------
  356|  47.6k|            value = T{0};
  357|  47.6k|            return std::next(prefix_result.iterator);
  358|  47.6k|        }
  359|       |
  360|   251k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 187k, False: 63.2k]
  |  |  ------------------
  ------------------
  361|   187k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 196, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    196|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   187k|                    parse_integer_digits_without_thsep(
  363|   187k|                        ranges::subrange{prefix_result.iterator,
  364|   187k|                                         ranges::end(range)},
  365|   187k|                        prefix_result.parsed_base));
  366|       |
  367|   187k|            auto buf = make_contiguous_buffer(
  368|   187k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   187k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.4k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.4k|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   153k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   153k|                                        prefix_result.parsed_base));
  372|       |
  373|   153k|            return ranges_polyfill::batch_next(
  374|   153k|                prefix_result.iterator,
  375|   153k|                ranges::distance(buf.view().begin(), result_it));
  376|   187k|        }
  377|       |
  378|  63.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  63.2k|            localized_number_formatting_options<CharT>{loc};
  383|  63.2k|#endif
  384|       |
  385|  63.2k|        SCN_TRY(
  ------------------
  |  |   71|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.07k, False: 58.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.07k|    }                                                  \
  |  |  |  |   70|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  58.1k|            parse_digits_result,
  387|  58.1k|            parse_integer_digits_with_thsep(
  388|  58.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  58.1k|                prefix_result.parsed_base, locale_options));
  390|  58.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  58.1k|            parse_digits_result;
  392|       |
  393|  58.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 866, False: 57.3k]
  ------------------
  394|    866|            if (auto e = check_thsep_grouping(
  395|    866|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    866|                    thsep_indices, locale_options.grouping);
  397|    866|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    866|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 282, False: 584]
  |  |  ------------------
  ------------------
  398|    282|                return unexpected(e);
  399|    282|            }
  400|    866|        }
  401|       |
  402|  57.9k|        auto nothsep_source_view =
  403|  57.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  57.9k|        SCN_TRY(
  ------------------
  |  |   71|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 56.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  56.5k|            nothsep_source_it,
  406|  56.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  56.5k|                                prefix_result.parsed_base));
  408|       |
  409|  56.5k|        return ranges_polyfill::batch_next(
  410|  56.5k|            prefix_result.iterator,
  411|  56.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  56.5k|                ranges::ssize(thsep_indices));
  413|  57.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   423k|    {
  335|   423k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   423k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   423k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 28.4k, False: 395k]
  ------------------
  339|  28.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  28.4k|                return unexpected_scan_error(
  341|  28.4k|                    scan_error::invalid_scanned_value,
  342|  28.4k|                    "Unexpected '-' sign when parsing an "
  343|  28.4k|                    "unsigned value");
  344|  28.4k|            }
  345|  28.4k|            else {
  346|  28.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 28.4k]
  ------------------
  347|  28.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  28.4k|            }
  353|  28.4k|        }
  354|       |
  355|   423k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 61.0k, False: 362k]
  ------------------
  356|  61.0k|            value = T{0};
  357|  61.0k|            return std::next(prefix_result.iterator);
  358|  61.0k|        }
  359|       |
  360|   362k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   362k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 284k, False: 77.6k]
  |  |  ------------------
  ------------------
  361|   284k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 338, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    338|    }                                                  \
  |  |  |  |   70|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   284k|                    parse_integer_digits_without_thsep(
  363|   284k|                        ranges::subrange{prefix_result.iterator,
  364|   284k|                                         ranges::end(range)},
  365|   284k|                        prefix_result.parsed_base));
  366|       |
  367|   284k|            auto buf = make_contiguous_buffer(
  368|   284k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   284k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.9k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.9k|    }                                                  \
  |  |  |  |   70|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   251k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   251k|                                        prefix_result.parsed_base));
  372|       |
  373|   251k|            return ranges_polyfill::batch_next(
  374|   251k|                prefix_result.iterator,
  375|   251k|                ranges::distance(buf.view().begin(), result_it));
  376|   284k|        }
  377|       |
  378|  77.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.6k|            localized_number_formatting_options<CharT>{loc};
  383|  77.6k|#endif
  384|       |
  385|  77.6k|        SCN_TRY(
  ------------------
  |  |   71|  77.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.49k, False: 72.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.49k|    }                                                  \
  |  |  |  |   70|  77.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.1k|            parse_digits_result,
  387|  72.1k|            parse_integer_digits_with_thsep(
  388|  72.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.1k|                prefix_result.parsed_base, locale_options));
  390|  72.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.1k|            parse_digits_result;
  392|       |
  393|  72.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 944, False: 71.1k]
  ------------------
  394|    944|            if (auto e = check_thsep_grouping(
  395|    944|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    944|                    thsep_indices, locale_options.grouping);
  397|    944|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 360, False: 584]
  |  |  ------------------
  ------------------
  398|    360|                return unexpected(e);
  399|    360|            }
  400|    944|        }
  401|       |
  402|  71.7k|        auto nothsep_source_view =
  403|  71.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.7k|        SCN_TRY(
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 470, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    470|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.2k|            nothsep_source_it,
  406|  71.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.2k|                                prefix_result.parsed_base));
  408|       |
  409|  71.2k|        return ranges_polyfill::batch_next(
  410|  71.2k|            prefix_result.iterator,
  411|  71.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.2k|                ranges::ssize(thsep_indices));
  413|  71.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   428k|    {
  335|   428k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   428k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   428k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   428k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 428k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   428k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   428k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   428k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 28.9k, False: 399k]
  ------------------
  339|  28.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  28.9k|                return unexpected_scan_error(
  341|  28.9k|                    scan_error::invalid_scanned_value,
  342|  28.9k|                    "Unexpected '-' sign when parsing an "
  343|  28.9k|                    "unsigned value");
  344|  28.9k|            }
  345|  28.9k|            else {
  346|  28.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 28.9k]
  ------------------
  347|  28.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  28.9k|            }
  353|  28.9k|        }
  354|       |
  355|   428k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 61.5k, False: 366k]
  ------------------
  356|  61.5k|            value = T{0};
  357|  61.5k|            return std::next(prefix_result.iterator);
  358|  61.5k|        }
  359|       |
  360|   366k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 288k, False: 78.4k]
  |  |  ------------------
  ------------------
  361|   288k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 376, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    376|    }                                                  \
  |  |  |  |   70|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   287k|                    parse_integer_digits_without_thsep(
  363|   287k|                        ranges::subrange{prefix_result.iterator,
  364|   287k|                                         ranges::end(range)},
  365|   287k|                        prefix_result.parsed_base));
  366|       |
  367|   287k|            auto buf = make_contiguous_buffer(
  368|   287k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   287k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.5k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.5k|    }                                                  \
  |  |  |  |   70|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   255k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   255k|                                        prefix_result.parsed_base));
  372|       |
  373|   255k|            return ranges_polyfill::batch_next(
  374|   255k|                prefix_result.iterator,
  375|   255k|                ranges::distance(buf.view().begin(), result_it));
  376|   287k|        }
  377|       |
  378|  78.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  78.4k|            localized_number_formatting_options<CharT>{loc};
  383|  78.4k|#endif
  384|       |
  385|  78.4k|        SCN_TRY(
  ------------------
  |  |   71|  78.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.60k, False: 72.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.60k|    }                                                  \
  |  |  |  |   70|  78.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.8k|            parse_digits_result,
  387|  72.8k|            parse_integer_digits_with_thsep(
  388|  72.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.8k|                prefix_result.parsed_base, locale_options));
  390|  72.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.8k|            parse_digits_result;
  392|       |
  393|  72.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 976, False: 71.8k]
  ------------------
  394|    976|            if (auto e = check_thsep_grouping(
  395|    976|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    976|                    thsep_indices, locale_options.grouping);
  397|    976|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 388, False: 588]
  |  |  ------------------
  ------------------
  398|    388|                return unexpected(e);
  399|    388|            }
  400|    976|        }
  401|       |
  402|  72.4k|        auto nothsep_source_view =
  403|  72.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  72.4k|        SCN_TRY(
  ------------------
  |  |   71|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 232, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    232|    }                                                  \
  |  |  |  |   70|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  72.2k|            nothsep_source_it,
  406|  72.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  72.2k|                                prefix_result.parsed_base));
  408|       |
  409|  72.2k|        return ranges_polyfill::batch_next(
  410|  72.2k|            prefix_result.iterator,
  411|  72.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  72.2k|                ranges::ssize(thsep_indices));
  413|  72.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   290k|    {
  335|   290k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   290k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   290k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 5.94k, False: 284k]
  ------------------
  339|  5.94k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  5.94k|                return unexpected_scan_error(
  341|  5.94k|                    scan_error::invalid_scanned_value,
  342|  5.94k|                    "Unexpected '-' sign when parsing an "
  343|  5.94k|                    "unsigned value");
  344|  5.94k|            }
  345|  5.94k|            else {
  346|  5.94k|                if (specs.type ==
  347|  5.94k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  5.94k|                    return unexpected_scan_error(
  349|  5.94k|                        scan_error::invalid_scanned_value,
  350|  5.94k|                        "'u'-option disallows negative values");
  351|  5.94k|                }
  352|  5.94k|            }
  353|  5.94k|        }
  354|       |
  355|   284k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 44.9k, False: 239k]
  ------------------
  356|  44.9k|            value = T{0};
  357|  44.9k|            return std::next(prefix_result.iterator);
  358|  44.9k|        }
  359|       |
  360|   239k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   239k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 183k, False: 56.3k]
  |  |  ------------------
  ------------------
  361|   183k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     54|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   183k|                    parse_integer_digits_without_thsep(
  363|   183k|                        ranges::subrange{prefix_result.iterator,
  364|   183k|                                         ranges::end(range)},
  365|   183k|                        prefix_result.parsed_base));
  366|       |
  367|   183k|            auto buf = make_contiguous_buffer(
  368|   183k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   183k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.0k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.0k|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   153k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   153k|                                        prefix_result.parsed_base));
  372|       |
  373|   153k|            return ranges_polyfill::batch_next(
  374|   153k|                prefix_result.iterator,
  375|   153k|                ranges::distance(buf.view().begin(), result_it));
  376|   183k|        }
  377|       |
  378|  56.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  56.3k|            localized_number_formatting_options<CharT>{loc};
  383|  56.3k|#endif
  384|       |
  385|  56.3k|        SCN_TRY(
  ------------------
  |  |   71|  56.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.84k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.84k|    }                                                  \
  |  |  |  |   70|  56.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  51.5k|            parse_digits_result,
  387|  51.5k|            parse_integer_digits_with_thsep(
  388|  51.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  51.5k|                prefix_result.parsed_base, locale_options));
  390|  51.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  51.5k|            parse_digits_result;
  392|       |
  393|  51.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 770, False: 50.7k]
  ------------------
  394|    770|            if (auto e = check_thsep_grouping(
  395|    770|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    770|                    thsep_indices, locale_options.grouping);
  397|    770|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 208, False: 562]
  |  |  ------------------
  ------------------
  398|    208|                return unexpected(e);
  399|    208|            }
  400|    770|        }
  401|       |
  402|  51.3k|        auto nothsep_source_view =
  403|  51.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  51.3k|        SCN_TRY(
  ------------------
  |  |   71|  51.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 536, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    536|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    536|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    536|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    536|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    536|    }                                                  \
  |  |  |  |   70|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  50.8k|            nothsep_source_it,
  406|  50.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  50.8k|                                prefix_result.parsed_base));
  408|       |
  409|  50.8k|        return ranges_polyfill::batch_next(
  410|  50.8k|            prefix_result.iterator,
  411|  50.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  50.8k|                ranges::ssize(thsep_indices));
  413|  51.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   343k|    {
  335|   343k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   343k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   343k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.27k, False: 337k]
  ------------------
  339|  6.27k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.27k|                return unexpected_scan_error(
  341|  6.27k|                    scan_error::invalid_scanned_value,
  342|  6.27k|                    "Unexpected '-' sign when parsing an "
  343|  6.27k|                    "unsigned value");
  344|  6.27k|            }
  345|  6.27k|            else {
  346|  6.27k|                if (specs.type ==
  347|  6.27k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.27k|                    return unexpected_scan_error(
  349|  6.27k|                        scan_error::invalid_scanned_value,
  350|  6.27k|                        "'u'-option disallows negative values");
  351|  6.27k|                }
  352|  6.27k|            }
  353|  6.27k|        }
  354|       |
  355|   337k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.4k, False: 290k]
  ------------------
  356|  47.4k|            value = T{0};
  357|  47.4k|            return std::next(prefix_result.iterator);
  358|  47.4k|        }
  359|       |
  360|   290k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   290k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 228k, False: 61.4k]
  |  |  ------------------
  ------------------
  361|   228k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   228k|                    parse_integer_digits_without_thsep(
  363|   228k|                        ranges::subrange{prefix_result.iterator,
  364|   228k|                                         ranges::end(range)},
  365|   228k|                        prefix_result.parsed_base));
  366|       |
  367|   228k|            auto buf = make_contiguous_buffer(
  368|   228k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   228k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 29.0k, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.0k|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   199k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   199k|                                        prefix_result.parsed_base));
  372|       |
  373|   199k|            return ranges_polyfill::batch_next(
  374|   199k|                prefix_result.iterator,
  375|   199k|                ranges::distance(buf.view().begin(), result_it));
  376|   228k|        }
  377|       |
  378|  61.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  61.4k|            localized_number_formatting_options<CharT>{loc};
  383|  61.4k|#endif
  384|       |
  385|  61.4k|        SCN_TRY(
  ------------------
  |  |   71|  61.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.91k, False: 56.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.91k|    }                                                  \
  |  |  |  |   70|  61.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  56.5k|            parse_digits_result,
  387|  56.5k|            parse_integer_digits_with_thsep(
  388|  56.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  56.5k|                prefix_result.parsed_base, locale_options));
  390|  56.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  56.5k|            parse_digits_result;
  392|       |
  393|  56.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 804, False: 55.7k]
  ------------------
  394|    804|            if (auto e = check_thsep_grouping(
  395|    804|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    804|                    thsep_indices, locale_options.grouping);
  397|    804|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 242, False: 562]
  |  |  ------------------
  ------------------
  398|    242|                return unexpected(e);
  399|    242|            }
  400|    804|        }
  401|       |
  402|  56.3k|        auto nothsep_source_view =
  403|  56.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  56.3k|        SCN_TRY(
  ------------------
  |  |   71|  56.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 238, False: 56.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    238|    }                                                  \
  |  |  |  |   70|  56.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  56.0k|            nothsep_source_it,
  406|  56.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  56.0k|                                prefix_result.parsed_base));
  408|       |
  409|  56.0k|        return ranges_polyfill::batch_next(
  410|  56.0k|            prefix_result.iterator,
  411|  56.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  56.0k|                ranges::ssize(thsep_indices));
  413|  56.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   346k|    {
  335|   346k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   346k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   346k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.46k, False: 339k]
  ------------------
  339|  6.46k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.46k|                return unexpected_scan_error(
  341|  6.46k|                    scan_error::invalid_scanned_value,
  342|  6.46k|                    "Unexpected '-' sign when parsing an "
  343|  6.46k|                    "unsigned value");
  344|  6.46k|            }
  345|  6.46k|            else {
  346|  6.46k|                if (specs.type ==
  347|  6.46k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.46k|                    return unexpected_scan_error(
  349|  6.46k|                        scan_error::invalid_scanned_value,
  350|  6.46k|                        "'u'-option disallows negative values");
  351|  6.46k|                }
  352|  6.46k|            }
  353|  6.46k|        }
  354|       |
  355|   339k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.6k, False: 292k]
  ------------------
  356|  47.6k|            value = T{0};
  357|  47.6k|            return std::next(prefix_result.iterator);
  358|  47.6k|        }
  359|       |
  360|   292k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 230k, False: 61.8k]
  |  |  ------------------
  ------------------
  361|   230k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   230k|                    parse_integer_digits_without_thsep(
  363|   230k|                        ranges::subrange{prefix_result.iterator,
  364|   230k|                                         ranges::end(range)},
  365|   230k|                        prefix_result.parsed_base));
  366|       |
  367|   230k|            auto buf = make_contiguous_buffer(
  368|   230k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   230k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28.7k, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.7k|    }                                                  \
  |  |  |  |   70|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   201k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   201k|                                        prefix_result.parsed_base));
  372|       |
  373|   201k|            return ranges_polyfill::batch_next(
  374|   201k|                prefix_result.iterator,
  375|   201k|                ranges::distance(buf.view().begin(), result_it));
  376|   230k|        }
  377|       |
  378|  61.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  61.8k|            localized_number_formatting_options<CharT>{loc};
  383|  61.8k|#endif
  384|       |
  385|  61.8k|        SCN_TRY(
  ------------------
  |  |   71|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.94k, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.94k|    }                                                  \
  |  |  |  |   70|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  56.8k|            parse_digits_result,
  387|  56.8k|            parse_integer_digits_with_thsep(
  388|  56.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  56.8k|                prefix_result.parsed_base, locale_options));
  390|  56.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  56.8k|            parse_digits_result;
  392|       |
  393|  56.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 804, False: 56.0k]
  ------------------
  394|    804|            if (auto e = check_thsep_grouping(
  395|    804|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    804|                    thsep_indices, locale_options.grouping);
  397|    804|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 242, False: 562]
  |  |  ------------------
  ------------------
  398|    242|                return unexpected(e);
  399|    242|            }
  400|    804|        }
  401|       |
  402|  56.6k|        auto nothsep_source_view =
  403|  56.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  56.6k|        SCN_TRY(
  ------------------
  |  |   71|  56.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 110, False: 56.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    110|    }                                                  \
  |  |  |  |   70|  56.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  56.5k|            nothsep_source_it,
  406|  56.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  56.5k|                                prefix_result.parsed_base));
  408|       |
  409|  56.5k|        return ranges_polyfill::batch_next(
  410|  56.5k|            prefix_result.iterator,
  411|  56.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  56.5k|                ranges::ssize(thsep_indices));
  413|  56.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  22.0k|                return unexpected_scan_error(
  293|  22.0k|                    scan_error::invalid_scanned_value,
  294|  22.0k|                    "Unexpected '-' sign when parsing an "
  295|  22.0k|                    "unsigned value");
  296|  22.0k|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   564k|{
  121|   564k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   564k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 564k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   564k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   564k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   564k|        parse_integer_base_prefix(
  126|   564k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   564k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 564k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   564k|    else {
  139|   564k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 564k]
  ------------------
  140|   564k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 322k, False: 242k]
  ------------------
  141|   322k|            digits_begin_it = base_prefix_begin_it;
  142|   322k|        }
  143|   564k|    }
  144|       |
  145|   564k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 564k, False: 0]
  ------------------
  146|   564k|        sign = sign_type::plus_sign;
  147|   564k|    }
  148|   564k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   564k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   564k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   564k|{
   88|   564k|    switch (base) {
   89|  44.0k|        case 2:
  ------------------
  |  Branch (89:9): [True: 44.0k, False: 520k]
  ------------------
   90|       |            // allow 0b/0B
   91|  44.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  44.0k|                    false};
   93|       |
   94|  44.0k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 44.0k, False: 520k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  44.0k|            bool zero_parsed = false;
   97|  44.0k|            auto it = apply_opt(
   98|  44.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  44.0k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  80.6k|        case 16:
  ------------------
  |  Branch (102:9): [True: 80.6k, False: 484k]
  ------------------
  103|       |            // allow 0x/0X
  104|  80.6k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  80.6k|                    false};
  106|       |
  107|   308k|        case 0:
  ------------------
  |  Branch (107:9): [True: 308k, False: 256k]
  ------------------
  108|       |            // detect base
  109|   308k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  88.0k|        default:
  ------------------
  |  Branch (111:9): [True: 88.0k, False: 476k]
  ------------------
  112|       |            // no base prefix allowed
  113|  88.0k|            return {ranges::begin(range), base, false};
  114|   564k|    }
  115|   564k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   352k|{
   38|   352k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   352k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   352k|{
   53|   352k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 352k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   352k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 352k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   352k|    return unexpected(parse_error::error);
   63|   352k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   388k|{
   45|   388k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   388k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   308k|{
   69|   308k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 308k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   308k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 308k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   308k|    {
   76|   308k|        bool zero_parsed{false};
   77|   308k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 308k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   308k|    }
   81|   308k|    return {ranges::begin(range), 10, false};
   82|   308k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   476k|{
  156|   476k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   476k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   476k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   476k|            return unexpected_scan_error(
  161|   476k|                scan_error::invalid_scanned_value,
  162|   476k|                "Failed to parse integer: No digits found");
  163|   476k|        }
  164|   476k|        return ranges::end(range);
  165|   476k|    }
  166|   476k|    else {
  167|   476k|        return read_while1_code_unit(
  168|   476k|                   range, [&](char_type ch)
  169|   476k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   476k|            .transform_error(map_parse_error_to_scan_error(
  171|   476k|                scan_error::invalid_scanned_value,
  172|   476k|                "Failed to parse integer: No digits found"));
  173|   476k|    }
  174|   476k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   872k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  22.0k|                return unexpected_scan_error(
  293|  22.0k|                    scan_error::invalid_scanned_value,
  294|  22.0k|                    "Unexpected '-' sign when parsing an "
  295|  22.0k|                    "unsigned value");
  296|  22.0k|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  22.0k|                return unexpected_scan_error(
  293|  22.0k|                    scan_error::invalid_scanned_value,
  294|  22.0k|                    "Unexpected '-' sign when parsing an "
  295|  22.0k|                    "unsigned value");
  296|  22.0k|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 22.0k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 22.0k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  22.0k|    {
  324|  22.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  22.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  22.0k|        return read_default_with_base(range, value, 0);
  326|  22.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  22.0k|    {
  287|  22.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  22.0k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  22.0k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  22.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 22.0k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  22.0k|        }
  298|       |
  299|  22.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 22.0k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  33.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  33.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  33.0k|                                                      ranges::end(range)},
  307|  33.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  33.0k|        auto buf = make_contiguous_buffer(
  310|  33.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  33.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  11.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  11.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  11.0k|        return ranges_polyfill::batch_next(
  316|  11.0k|            prefix_result.iterator,
  317|  11.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  33.0k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  88.0k|{
  185|  88.0k|    std::basic_string<CharT> output;
  186|  88.0k|    std::string thsep_indices;
  187|  88.0k|    auto it = ranges::begin(range);
  188|  88.0k|    bool digit_matched = false;
  189|   176k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 176k, False: 24]
  ------------------
  190|   176k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 176k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|   176k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 87.9k, False: 88.0k]
  ------------------
  195|  87.9k|            break;
  196|  87.9k|        }
  197|  88.0k|        else {
  198|  88.0k|            output.push_back(*it);
  199|  88.0k|            digit_matched = true;
  200|  88.0k|        }
  201|   176k|    }
  202|  88.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 44.0k]
  |  |  ------------------
  ------------------
  203|  43.9k|        return unexpected_scan_error(
  204|  43.9k|            scan_error::invalid_scanned_value,
  205|  43.9k|            "Failed to parse integer: No digits found");
  206|  43.9k|    }
  207|  44.0k|    return std::tuple{it, output, thsep_indices};
  208|  88.0k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  66.0k|    {
  335|  66.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  66.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  66.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  66.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 66.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  66.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 66.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  66.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  66.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 51.3k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  51.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  51.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 29.3k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.3k|    }                                                  \
  |  |  |  |   70|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.6k|            return ranges_polyfill::batch_next(
  374|  14.6k|                prefix_result.iterator,
  375|  14.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  73.3k|    {
  335|  73.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  73.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  73.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 73.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  73.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 73.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  73.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.6k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  58.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  22.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  22.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  22.0k|            return ranges_polyfill::batch_next(
  374|  22.0k|                prefix_result.iterator,
  375|  22.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  73.3k|    {
  335|  73.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  73.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  73.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 73.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  73.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 73.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  73.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.6k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  58.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  22.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  22.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  22.0k|            return ranges_polyfill::batch_next(
  374|  22.0k|                prefix_result.iterator,
  375|  22.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  73.3k|    {
  335|  73.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  73.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  73.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 73.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  73.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 73.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  73.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.6k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  58.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  22.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  22.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  22.0k|            return ranges_polyfill::batch_next(
  374|  22.0k|                prefix_result.iterator,
  375|  22.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  73.3k|    {
  335|  73.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  73.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  73.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 73.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  73.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 73.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  73.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.6k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  58.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  22.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  22.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  22.0k|            return ranges_polyfill::batch_next(
  374|  22.0k|                prefix_result.iterator,
  375|  22.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  73.3k|    {
  335|  73.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  73.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  73.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 73.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  73.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 73.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  73.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.6k, False: 14.6k]
  |  |  ------------------
  ------------------
  361|  58.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  22.0k|                    parse_integer_digits_without_thsep(
  363|  22.0k|                        ranges::subrange{prefix_result.iterator,
  364|  22.0k|                                         ranges::end(range)},
  365|  22.0k|                        prefix_result.parsed_base));
  366|       |
  367|  22.0k|            auto buf = make_contiguous_buffer(
  368|  22.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  22.0k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  22.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  22.0k|                                        prefix_result.parsed_base));
  372|       |
  373|  22.0k|            return ranges_polyfill::batch_next(
  374|  22.0k|                prefix_result.iterator,
  375|  22.0k|                ranges::distance(buf.view().begin(), result_it));
  376|  22.0k|        }
  377|       |
  378|  14.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.6k|            localized_number_formatting_options<CharT>{loc};
  383|  14.6k|#endif
  384|       |
  385|  14.6k|        SCN_TRY(
  ------------------
  |  |   71|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.33k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.33k|    }                                                  \
  |  |  |  |   70|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.33k|            parse_digits_result,
  387|  7.33k|            parse_integer_digits_with_thsep(
  388|  7.33k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.33k|                prefix_result.parsed_base, locale_options));
  390|  7.33k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.33k|            parse_digits_result;
  392|       |
  393|  7.33k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.33k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.33k|        auto nothsep_source_view =
  403|  7.33k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.33k|        SCN_TRY(
  ------------------
  |  |   71|  7.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.33k|            nothsep_source_it,
  406|  7.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.33k|                                prefix_result.parsed_base));
  408|       |
  409|  7.33k|        return ranges_polyfill::batch_next(
  410|  7.33k|            prefix_result.iterator,
  411|  7.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.33k|                ranges::ssize(thsep_indices));
  413|  7.33k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.32M|{
   69|  3.32M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.32M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.05M, False: 266k]
  ------------------
   71|  3.05M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.05M, False: 0]
  ------------------
   72|  3.05M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.05M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.05M|    }
   76|       |
   77|   266k|    auto& it = *r;
   78|   266k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 176k, False: 89.9k]
  ------------------
   79|   176k|        return std::pair{it, sign_type::minus_sign};
   80|   176k|    }
   81|  89.9k|    return std::pair{it, sign_type::plus_sign};
   82|   266k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  31.9M|{
   51|  31.9M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  31.9M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.75k|{
  140|  5.75k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.75k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.99k, False: 3.75k]
  ------------------
  143|  1.99k|        SCN_UNLIKELY_ATTR
  144|  1.99k|        return {scan_error::invalid_scanned_value,
  145|  1.99k|                "Invalid thousands separator grouping"};
  146|  1.99k|    }
  147|       |
  148|  3.75k|    return {};
  149|  5.75k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.75k|{
  101|  5.75k|    transform_thsep_indices(
  102|  5.75k|        thsep_indices,
  103|  5.75k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.75k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.75k|    for (auto grouping_it = grouping.begin();
  107|  5.75k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.75k]
  |  Branch (107:10): [True: 0, False: 5.75k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.75k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.75k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.75k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  74.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 69.4k, False: 4.97k]
  ------------------
  119|  69.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 780, False: 68.6k]
  ------------------
  120|    780|            return false;
  121|    780|        }
  122|  69.4k|    }
  123|       |
  124|  4.97k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.97k, False: 0]
  ------------------
  125|  4.97k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.21k, False: 3.75k]
  ------------------
  126|  1.21k|            return false;
  127|  1.21k|        }
  128|  4.97k|    }
  129|       |
  130|  3.75k|    SCN_CLANG_POP
  131|       |
  132|  3.75k|    return true;
  133|  4.97k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  10.9k|{
   87|   162k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 151k, False: 10.9k]
  ------------------
   88|   151k|         ++thsep_it) {
   89|   151k|        const auto tmp = *thsep_it;
   90|   151k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   151k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   151k|    }
   93|  10.9k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  10.9k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   327k|{
   69|   327k|    auto r = read_one_of_code_unit(range, "+-");
   70|   327k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 327k, False: 0]
  ------------------
   71|   327k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 327k, False: 0]
  ------------------
   72|   327k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   327k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   327k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.93M|{
   69|  2.93M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.93M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.72M, False: 209k]
  ------------------
   71|  2.72M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.72M, False: 0]
  ------------------
   72|  2.72M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.72M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.72M|    }
   76|       |
   77|   209k|    auto& it = *r;
   78|   209k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 132k, False: 76.9k]
  ------------------
   79|   132k|        return std::pair{it, sign_type::minus_sign};
   80|   132k|    }
   81|  76.9k|    return std::pair{it, sign_type::plus_sign};
   82|   209k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  15.8M|{
   55|  15.8M|#if WCHAR_MIN < 0
   56|  15.8M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 15.8M, False: 20.1k]
  |  Branch (56:20): [True: 15.5M, False: 350k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  15.5M|        return char_to_int(static_cast<char>(ch));
   61|  15.5M|    }
   62|   370k|    return 255;
   63|  15.8M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.16k|{
  140|  5.16k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.16k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.72k, False: 3.44k]
  ------------------
  143|  1.72k|        SCN_UNLIKELY_ATTR
  144|  1.72k|        return {scan_error::invalid_scanned_value,
  145|  1.72k|                "Invalid thousands separator grouping"};
  146|  1.72k|    }
  147|       |
  148|  3.44k|    return {};
  149|  5.16k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.16k|{
  101|  5.16k|    transform_thsep_indices(
  102|  5.16k|        thsep_indices,
  103|  5.16k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.16k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.16k|    for (auto grouping_it = grouping.begin();
  107|  5.16k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.16k]
  |  Branch (107:10): [True: 0, False: 5.16k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.16k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.16k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.16k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  69.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 64.8k, False: 4.52k]
  ------------------
  119|  64.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 640, False: 64.2k]
  ------------------
  120|    640|            return false;
  121|    640|        }
  122|  64.8k|    }
  123|       |
  124|  4.52k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.52k, False: 0]
  ------------------
  125|  4.52k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.08k, False: 3.44k]
  ------------------
  126|  1.08k|            return false;
  127|  1.08k|        }
  128|  4.52k|    }
  129|       |
  130|  3.44k|    SCN_CLANG_POP
  131|       |
  132|  3.44k|    return true;
  133|  4.52k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   564k|{
   69|   564k|    auto r = read_one_of_code_unit(range, "+-");
   70|   564k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 564k, False: 0]
  ------------------
   71|   564k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 564k, False: 0]
  ------------------
   72|   564k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   564k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   564k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   144k|    {
  122|   144k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   144k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   144k|                          basic_contiguous_scan_context<char_type>>) {
  126|   144k|            auto rd = make_reader<T, char_type>();
  127|   144k|            return impl(rd, range, value);
  128|   144k|        }
  129|   144k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   144k|            auto rd = make_reader<T, char_type>();
  131|   144k|            if (!is_segment_contiguous(range)) {
  132|   144k|                return impl(rd, range, value);
  133|   144k|            }
  134|   144k|            auto crange = get_as_contiguous(range);
  135|   144k|            SCN_TRY(it, impl(rd, crange, value));
  136|   144k|            return ranges_polyfill::batch_next(
  137|   144k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   144k|        }
  139|   144k|        else {
  140|   144k|            SCN_EXPECT(false);
  141|   144k|            SCN_UNREACHABLE;
  142|   144k|        }
  143|   144k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   144k|    {
  112|   144k|        SCN_TRY(it,
  ------------------
  |  |   71|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 864, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    864|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    864|    }                                                  \
  |  |  |  |   70|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   143k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   143k|                    .transform_error(make_eof_scan_error));
  115|   143k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   143k|                               loc);
  117|   144k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.34M|{
   43|  3.34M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.0k, False: 3.32M]
  |  |  ------------------
  ------------------
   44|  20.0k|        return unexpected(e);
   45|  20.0k|    }
   46|       |
   47|  3.32M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.32M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.32M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.32M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   183k|    {
  122|   183k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   183k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   183k|                          basic_contiguous_scan_context<char_type>>) {
  126|   183k|            auto rd = make_reader<T, char_type>();
  127|   183k|            return impl(rd, range, value);
  128|   183k|        }
  129|   183k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   183k|            auto rd = make_reader<T, char_type>();
  131|   183k|            if (!is_segment_contiguous(range)) {
  132|   183k|                return impl(rd, range, value);
  133|   183k|            }
  134|   183k|            auto crange = get_as_contiguous(range);
  135|   183k|            SCN_TRY(it, impl(rd, crange, value));
  136|   183k|            return ranges_polyfill::batch_next(
  137|   183k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   183k|        }
  139|   183k|        else {
  140|   183k|            SCN_EXPECT(false);
  141|   183k|            SCN_UNREACHABLE;
  142|   183k|        }
  143|   183k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   183k|    {
  112|   183k|        SCN_TRY(it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.37k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.37k|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   181k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   181k|                    .transform_error(make_eof_scan_error));
  115|   181k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   181k|                               loc);
  117|   183k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   185k|    {
  122|   185k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   185k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   185k|                          basic_contiguous_scan_context<char_type>>) {
  126|   185k|            auto rd = make_reader<T, char_type>();
  127|   185k|            return impl(rd, range, value);
  128|   185k|        }
  129|   185k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   185k|            auto rd = make_reader<T, char_type>();
  131|   185k|            if (!is_segment_contiguous(range)) {
  132|   185k|                return impl(rd, range, value);
  133|   185k|            }
  134|   185k|            auto crange = get_as_contiguous(range);
  135|   185k|            SCN_TRY(it, impl(rd, crange, value));
  136|   185k|            return ranges_polyfill::batch_next(
  137|   185k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   185k|        }
  139|   185k|        else {
  140|   185k|            SCN_EXPECT(false);
  141|   185k|            SCN_UNREACHABLE;
  142|   185k|        }
  143|   185k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   185k|    {
  112|   185k|        SCN_TRY(it,
  ------------------
  |  |   71|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.52k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   184k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   184k|                    .transform_error(make_eof_scan_error));
  115|   184k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   184k|                               loc);
  117|   185k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   129k|    {
  122|   129k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   129k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   129k|                          basic_contiguous_scan_context<char_type>>) {
  126|   129k|            auto rd = make_reader<T, char_type>();
  127|   129k|            return impl(rd, range, value);
  128|   129k|        }
  129|   129k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   129k|            auto rd = make_reader<T, char_type>();
  131|   129k|            if (!is_segment_contiguous(range)) {
  132|   129k|                return impl(rd, range, value);
  133|   129k|            }
  134|   129k|            auto crange = get_as_contiguous(range);
  135|   129k|            SCN_TRY(it, impl(rd, crange, value));
  136|   129k|            return ranges_polyfill::batch_next(
  137|   129k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   129k|        }
  139|   129k|        else {
  140|   129k|            SCN_EXPECT(false);
  141|   129k|            SCN_UNREACHABLE;
  142|   129k|        }
  143|   129k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   129k|    {
  112|   129k|        SCN_TRY(it,
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 792, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    792|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    792|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    792|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    792|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    792|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   128k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   128k|                    .transform_error(make_eof_scan_error));
  115|   128k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   128k|                               loc);
  117|   129k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   143k|    {
  122|   143k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   143k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   143k|                          basic_contiguous_scan_context<char_type>>) {
  126|   143k|            auto rd = make_reader<T, char_type>();
  127|   143k|            return impl(rd, range, value);
  128|   143k|        }
  129|   143k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   143k|            auto rd = make_reader<T, char_type>();
  131|   143k|            if (!is_segment_contiguous(range)) {
  132|   143k|                return impl(rd, range, value);
  133|   143k|            }
  134|   143k|            auto crange = get_as_contiguous(range);
  135|   143k|            SCN_TRY(it, impl(rd, crange, value));
  136|   143k|            return ranges_polyfill::batch_next(
  137|   143k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   143k|        }
  139|   143k|        else {
  140|   143k|            SCN_EXPECT(false);
  141|   143k|            SCN_UNREACHABLE;
  142|   143k|        }
  143|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   143k|    {
  112|   143k|        SCN_TRY(it,
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 972, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    972|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    972|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    972|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    972|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    972|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   142k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   142k|                    .transform_error(make_eof_scan_error));
  115|   142k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   142k|                               loc);
  117|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   143k|    {
  122|   143k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   143k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   143k|                          basic_contiguous_scan_context<char_type>>) {
  126|   143k|            auto rd = make_reader<T, char_type>();
  127|   143k|            return impl(rd, range, value);
  128|   143k|        }
  129|   143k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   143k|            auto rd = make_reader<T, char_type>();
  131|   143k|            if (!is_segment_contiguous(range)) {
  132|   143k|                return impl(rd, range, value);
  133|   143k|            }
  134|   143k|            auto crange = get_as_contiguous(range);
  135|   143k|            SCN_TRY(it, impl(rd, crange, value));
  136|   143k|            return ranges_polyfill::batch_next(
  137|   143k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   143k|        }
  139|   143k|        else {
  140|   143k|            SCN_EXPECT(false);
  141|   143k|            SCN_UNREACHABLE;
  142|   143k|        }
  143|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   143k|    {
  112|   143k|        SCN_TRY(it,
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.05k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.05k|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   142k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   142k|                    .transform_error(make_eof_scan_error));
  115|   142k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   142k|                               loc);
  117|   143k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   328k|{
   43|   328k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 328k]
  |  |  ------------------
  ------------------
   44|     66|        return unexpected(e);
   45|     66|    }
   46|       |
   47|   328k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 328k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   328k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   328k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.6k|    {
  122|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.6k|            auto rd = make_reader<T, char_type>();
  127|  12.6k|            return impl(rd, range, value);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            auto rd = make_reader<T, char_type>();
  131|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.6k, False: 0]
  ------------------
  132|  12.6k|                return impl(rd, range, value);
  133|  12.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.6k|        else {
  140|  12.6k|            SCN_EXPECT(false);
  141|  12.6k|            SCN_UNREACHABLE;
  142|  12.6k|        }
  143|  12.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.6k|    {
  112|  12.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.6k|                    .transform_error(make_eof_scan_error));
  115|  12.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.6k|                               loc);
  117|  12.6k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   335k|    {
  223|   335k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   335k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   335k|                          basic_contiguous_scan_context<char_type>>) {
  227|   335k|            auto rd = make_reader<T, char_type>();
  228|   335k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   335k|            return impl(rd, range, value);
  233|   335k|        }
  234|   335k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   335k|            auto rd = make_reader<T, char_type>();
  236|   335k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   335k|                return unexpected(e);
  238|   335k|            }
  239|       |
  240|   335k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   335k|                return impl(rd, range, value);
  242|   335k|            }
  243|       |
  244|   335k|            auto crange = get_as_contiguous(range);
  245|   335k|            SCN_TRY(it, impl(rd, crange, value));
  246|   335k|            return ranges_polyfill::batch_next(
  247|   335k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   335k|        }
  249|   335k|        else {
  250|   335k|            SCN_EXPECT(false);
  251|   335k|            SCN_UNREACHABLE;
  252|   335k|        }
  253|   335k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   335k|    {
  205|   335k|        SCN_TRY(it,
  ------------------
  |  |   71|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   333k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   333k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   333k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   333k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 333k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   333k|        return rd.read_specs(subr, specs, value, loc);
  218|   333k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   490k|    {
  223|   490k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   490k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   490k|                          basic_contiguous_scan_context<char_type>>) {
  227|   490k|            auto rd = make_reader<T, char_type>();
  228|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   490k|            return impl(rd, range, value);
  233|   490k|        }
  234|   490k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   490k|            auto rd = make_reader<T, char_type>();
  236|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   490k|                return unexpected(e);
  238|   490k|            }
  239|       |
  240|   490k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   490k|                return impl(rd, range, value);
  242|   490k|            }
  243|       |
  244|   490k|            auto crange = get_as_contiguous(range);
  245|   490k|            SCN_TRY(it, impl(rd, crange, value));
  246|   490k|            return ranges_polyfill::batch_next(
  247|   490k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   490k|        }
  249|   490k|        else {
  250|   490k|            SCN_EXPECT(false);
  251|   490k|            SCN_UNREACHABLE;
  252|   490k|        }
  253|   490k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   490k|    {
  205|   490k|        SCN_TRY(it,
  ------------------
  |  |   71|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.95k, False: 486k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.95k|    }                                                  \
  |  |  |  |   70|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   486k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   486k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   486k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   486k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 486k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   486k|        return rd.read_specs(subr, specs, value, loc);
  218|   486k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   496k|    {
  223|   496k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   496k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   496k|                          basic_contiguous_scan_context<char_type>>) {
  227|   496k|            auto rd = make_reader<T, char_type>();
  228|   496k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   496k|            return impl(rd, range, value);
  233|   496k|        }
  234|   496k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   496k|            auto rd = make_reader<T, char_type>();
  236|   496k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   496k|                return unexpected(e);
  238|   496k|            }
  239|       |
  240|   496k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   496k|                return impl(rd, range, value);
  242|   496k|            }
  243|       |
  244|   496k|            auto crange = get_as_contiguous(range);
  245|   496k|            SCN_TRY(it, impl(rd, crange, value));
  246|   496k|            return ranges_polyfill::batch_next(
  247|   496k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   496k|        }
  249|   496k|        else {
  250|   496k|            SCN_EXPECT(false);
  251|   496k|            SCN_UNREACHABLE;
  252|   496k|        }
  253|   496k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   496k|    {
  205|   496k|        SCN_TRY(it,
  ------------------
  |  |   71|   496k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   496k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   496k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.38k, False: 492k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.38k|    }                                                  \
  |  |  |  |   70|   496k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   492k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   492k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   492k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   492k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 492k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   492k|        return rd.read_specs(subr, specs, value, loc);
  218|   492k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   319k|    {
  223|   319k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   319k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   319k|                          basic_contiguous_scan_context<char_type>>) {
  227|   319k|            auto rd = make_reader<T, char_type>();
  228|   319k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   319k|            return impl(rd, range, value);
  233|   319k|        }
  234|   319k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   319k|            auto rd = make_reader<T, char_type>();
  236|   319k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   319k|                return unexpected(e);
  238|   319k|            }
  239|       |
  240|   319k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   319k|                return impl(rd, range, value);
  242|   319k|            }
  243|       |
  244|   319k|            auto crange = get_as_contiguous(range);
  245|   319k|            SCN_TRY(it, impl(rd, crange, value));
  246|   319k|            return ranges_polyfill::batch_next(
  247|   319k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   319k|        }
  249|   319k|        else {
  250|   319k|            SCN_EXPECT(false);
  251|   319k|            SCN_UNREACHABLE;
  252|   319k|        }
  253|   319k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   319k|    {
  205|   319k|        SCN_TRY(it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   317k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   317k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   317k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   317k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 317k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   317k|        return rd.read_specs(subr, specs, value, loc);
  218|   317k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   385k|    {
  223|   385k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   385k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   385k|                          basic_contiguous_scan_context<char_type>>) {
  227|   385k|            auto rd = make_reader<T, char_type>();
  228|   385k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   385k|            return impl(rd, range, value);
  233|   385k|        }
  234|   385k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   385k|            auto rd = make_reader<T, char_type>();
  236|   385k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   385k|                return unexpected(e);
  238|   385k|            }
  239|       |
  240|   385k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   385k|                return impl(rd, range, value);
  242|   385k|            }
  243|       |
  244|   385k|            auto crange = get_as_contiguous(range);
  245|   385k|            SCN_TRY(it, impl(rd, crange, value));
  246|   385k|            return ranges_polyfill::batch_next(
  247|   385k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   385k|        }
  249|   385k|        else {
  250|   385k|            SCN_EXPECT(false);
  251|   385k|            SCN_UNREACHABLE;
  252|   385k|        }
  253|   385k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   385k|    {
  205|   385k|        SCN_TRY(it,
  ------------------
  |  |   71|   385k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   385k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   385k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.82k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.82k|    }                                                  \
  |  |  |  |   70|   385k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   383k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   383k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   383k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   383k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 383k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   383k|        return rd.read_specs(subr, specs, value, loc);
  218|   383k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   388k|    {
  223|   388k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   388k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   388k|                          basic_contiguous_scan_context<char_type>>) {
  227|   388k|            auto rd = make_reader<T, char_type>();
  228|   388k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 388k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   388k|            return impl(rd, range, value);
  233|   388k|        }
  234|   388k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   388k|            auto rd = make_reader<T, char_type>();
  236|   388k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   388k|                return unexpected(e);
  238|   388k|            }
  239|       |
  240|   388k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   388k|                return impl(rd, range, value);
  242|   388k|            }
  243|       |
  244|   388k|            auto crange = get_as_contiguous(range);
  245|   388k|            SCN_TRY(it, impl(rd, crange, value));
  246|   388k|            return ranges_polyfill::batch_next(
  247|   388k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   388k|        }
  249|   388k|        else {
  250|   388k|            SCN_EXPECT(false);
  251|   388k|            SCN_UNREACHABLE;
  252|   388k|        }
  253|   388k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   388k|    {
  205|   388k|        SCN_TRY(it,
  ------------------
  |  |   71|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.02k, False: 385k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.02k|    }                                                  \
  |  |  |  |   70|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   385k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   385k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   385k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   385k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 385k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   385k|        return rd.read_specs(subr, specs, value, loc);
  218|   385k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  42.0k|    {
  223|  42.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  42.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  42.0k|            auto rd = make_reader<T, char_type>();
  228|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  42.0k|                return unexpected(e);
  230|  42.0k|            }
  231|       |
  232|  42.0k|            return impl(rd, range, value);
  233|  42.0k|        }
  234|  42.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  42.0k|            auto rd = make_reader<T, char_type>();
  236|  42.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  42.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 42.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  42.0k|                return impl(rd, range, value);
  242|  42.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  42.0k|        else {
  250|  42.0k|            SCN_EXPECT(false);
  251|  42.0k|            SCN_UNREACHABLE;
  252|  42.0k|        }
  253|  42.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  42.0k|    {
  205|  42.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  42.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  42.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  42.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  42.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 42.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  42.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  42.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   125k|    {
  122|   125k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   125k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   125k|                          basic_contiguous_scan_context<char_type>>) {
  126|   125k|            auto rd = make_reader<T, char_type>();
  127|   125k|            return impl(rd, range, value);
  128|   125k|        }
  129|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   125k|            auto rd = make_reader<T, char_type>();
  131|   125k|            if (!is_segment_contiguous(range)) {
  132|   125k|                return impl(rd, range, value);
  133|   125k|            }
  134|   125k|            auto crange = get_as_contiguous(range);
  135|   125k|            SCN_TRY(it, impl(rd, crange, value));
  136|   125k|            return ranges_polyfill::batch_next(
  137|   125k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   125k|        }
  139|   125k|        else {
  140|   125k|            SCN_EXPECT(false);
  141|   125k|            SCN_UNREACHABLE;
  142|   125k|        }
  143|   125k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   125k|    {
  112|   125k|        SCN_TRY(it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 969, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    969|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    969|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    969|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    969|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    969|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   124k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   124k|                    .transform_error(make_eof_scan_error));
  115|   124k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   124k|                               loc);
  117|   125k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.96M|{
   43|  2.96M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.1k, False: 2.94M]
  |  |  ------------------
  ------------------
   44|  21.1k|        return unexpected(e);
   45|  21.1k|    }
   46|       |
   47|  2.94M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.94M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.94M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.94M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   157k|    {
  122|   157k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   157k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   157k|                          basic_contiguous_scan_context<char_type>>) {
  126|   157k|            auto rd = make_reader<T, char_type>();
  127|   157k|            return impl(rd, range, value);
  128|   157k|        }
  129|   157k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   157k|            auto rd = make_reader<T, char_type>();
  131|   157k|            if (!is_segment_contiguous(range)) {
  132|   157k|                return impl(rd, range, value);
  133|   157k|            }
  134|   157k|            auto crange = get_as_contiguous(range);
  135|   157k|            SCN_TRY(it, impl(rd, crange, value));
  136|   157k|            return ranges_polyfill::batch_next(
  137|   157k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   157k|        }
  139|   157k|        else {
  140|   157k|            SCN_EXPECT(false);
  141|   157k|            SCN_UNREACHABLE;
  142|   157k|        }
  143|   157k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   157k|    {
  112|   157k|        SCN_TRY(it,
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.48k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   156k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   156k|                    .transform_error(make_eof_scan_error));
  115|   156k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   156k|                               loc);
  117|   157k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   159k|    {
  122|   159k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   159k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   159k|                          basic_contiguous_scan_context<char_type>>) {
  126|   159k|            auto rd = make_reader<T, char_type>();
  127|   159k|            return impl(rd, range, value);
  128|   159k|        }
  129|   159k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   159k|            auto rd = make_reader<T, char_type>();
  131|   159k|            if (!is_segment_contiguous(range)) {
  132|   159k|                return impl(rd, range, value);
  133|   159k|            }
  134|   159k|            auto crange = get_as_contiguous(range);
  135|   159k|            SCN_TRY(it, impl(rd, crange, value));
  136|   159k|            return ranges_polyfill::batch_next(
  137|   159k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   159k|        }
  139|   159k|        else {
  140|   159k|            SCN_EXPECT(false);
  141|   159k|            SCN_UNREACHABLE;
  142|   159k|        }
  143|   159k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   159k|    {
  112|   159k|        SCN_TRY(it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.64k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.64k|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   157k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   157k|                    .transform_error(make_eof_scan_error));
  115|   157k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   157k|                               loc);
  117|   159k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   115k|    {
  122|   115k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   115k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   115k|                          basic_contiguous_scan_context<char_type>>) {
  126|   115k|            auto rd = make_reader<T, char_type>();
  127|   115k|            return impl(rd, range, value);
  128|   115k|        }
  129|   115k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   115k|            auto rd = make_reader<T, char_type>();
  131|   115k|            if (!is_segment_contiguous(range)) {
  132|   115k|                return impl(rd, range, value);
  133|   115k|            }
  134|   115k|            auto crange = get_as_contiguous(range);
  135|   115k|            SCN_TRY(it, impl(rd, crange, value));
  136|   115k|            return ranges_polyfill::batch_next(
  137|   115k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   115k|        }
  139|   115k|        else {
  140|   115k|            SCN_EXPECT(false);
  141|   115k|            SCN_UNREACHABLE;
  142|   115k|        }
  143|   115k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   115k|    {
  112|   115k|        SCN_TRY(it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 882, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    882|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   114k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   114k|                    .transform_error(make_eof_scan_error));
  115|   114k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   114k|                               loc);
  117|   115k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   125k|    {
  122|   125k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   125k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   125k|                          basic_contiguous_scan_context<char_type>>) {
  126|   125k|            auto rd = make_reader<T, char_type>();
  127|   125k|            return impl(rd, range, value);
  128|   125k|        }
  129|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   125k|            auto rd = make_reader<T, char_type>();
  131|   125k|            if (!is_segment_contiguous(range)) {
  132|   125k|                return impl(rd, range, value);
  133|   125k|            }
  134|   125k|            auto crange = get_as_contiguous(range);
  135|   125k|            SCN_TRY(it, impl(rd, crange, value));
  136|   125k|            return ranges_polyfill::batch_next(
  137|   125k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   125k|        }
  139|   125k|        else {
  140|   125k|            SCN_EXPECT(false);
  141|   125k|            SCN_UNREACHABLE;
  142|   125k|        }
  143|   125k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   125k|    {
  112|   125k|        SCN_TRY(it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.06k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.06k|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   124k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   124k|                    .transform_error(make_eof_scan_error));
  115|   124k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   124k|                               loc);
  117|   125k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   126k|    {
  122|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   126k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   126k|                          basic_contiguous_scan_context<char_type>>) {
  126|   126k|            auto rd = make_reader<T, char_type>();
  127|   126k|            return impl(rd, range, value);
  128|   126k|        }
  129|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   126k|            auto rd = make_reader<T, char_type>();
  131|   126k|            if (!is_segment_contiguous(range)) {
  132|   126k|                return impl(rd, range, value);
  133|   126k|            }
  134|   126k|            auto crange = get_as_contiguous(range);
  135|   126k|            SCN_TRY(it, impl(rd, crange, value));
  136|   126k|            return ranges_polyfill::batch_next(
  137|   126k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   126k|        }
  139|   126k|        else {
  140|   126k|            SCN_EXPECT(false);
  141|   126k|            SCN_UNREACHABLE;
  142|   126k|        }
  143|   126k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   126k|    {
  112|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.14k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   124k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   124k|                    .transform_error(make_eof_scan_error));
  115|   124k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   124k|                               loc);
  117|   126k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   301k|    {
  223|   301k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   301k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   301k|                          basic_contiguous_scan_context<char_type>>) {
  227|   301k|            auto rd = make_reader<T, char_type>();
  228|   301k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 301k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   301k|            return impl(rd, range, value);
  233|   301k|        }
  234|   301k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   301k|            auto rd = make_reader<T, char_type>();
  236|   301k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   301k|                return unexpected(e);
  238|   301k|            }
  239|       |
  240|   301k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   301k|                return impl(rd, range, value);
  242|   301k|            }
  243|       |
  244|   301k|            auto crange = get_as_contiguous(range);
  245|   301k|            SCN_TRY(it, impl(rd, crange, value));
  246|   301k|            return ranges_polyfill::batch_next(
  247|   301k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   301k|        }
  249|   301k|        else {
  250|   301k|            SCN_EXPECT(false);
  251|   301k|            SCN_UNREACHABLE;
  252|   301k|        }
  253|   301k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   301k|    {
  205|   301k|        SCN_TRY(it,
  ------------------
  |  |   71|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.73k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.73k|    }                                                  \
  |  |  |  |   70|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   298k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   298k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   298k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   298k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 298k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   298k|        return rd.read_specs(subr, specs, value, loc);
  218|   298k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   427k|    {
  223|   427k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   427k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   427k|                          basic_contiguous_scan_context<char_type>>) {
  227|   427k|            auto rd = make_reader<T, char_type>();
  228|   427k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   427k|            return impl(rd, range, value);
  233|   427k|        }
  234|   427k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   427k|            auto rd = make_reader<T, char_type>();
  236|   427k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   427k|                return unexpected(e);
  238|   427k|            }
  239|       |
  240|   427k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   427k|                return impl(rd, range, value);
  242|   427k|            }
  243|       |
  244|   427k|            auto crange = get_as_contiguous(range);
  245|   427k|            SCN_TRY(it, impl(rd, crange, value));
  246|   427k|            return ranges_polyfill::batch_next(
  247|   427k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   427k|        }
  249|   427k|        else {
  250|   427k|            SCN_EXPECT(false);
  251|   427k|            SCN_UNREACHABLE;
  252|   427k|        }
  253|   427k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   427k|    {
  205|   427k|        SCN_TRY(it,
  ------------------
  |  |   71|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.41k, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.41k|    }                                                  \
  |  |  |  |   70|   427k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   423k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   423k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   423k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   423k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 423k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   423k|        return rd.read_specs(subr, specs, value, loc);
  218|   423k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   433k|    {
  223|   433k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   433k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   433k|                          basic_contiguous_scan_context<char_type>>) {
  227|   433k|            auto rd = make_reader<T, char_type>();
  228|   433k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 433k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   433k|            return impl(rd, range, value);
  233|   433k|        }
  234|   433k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   433k|            auto rd = make_reader<T, char_type>();
  236|   433k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   433k|                return unexpected(e);
  238|   433k|            }
  239|       |
  240|   433k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   433k|                return impl(rd, range, value);
  242|   433k|            }
  243|       |
  244|   433k|            auto crange = get_as_contiguous(range);
  245|   433k|            SCN_TRY(it, impl(rd, crange, value));
  246|   433k|            return ranges_polyfill::batch_next(
  247|   433k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   433k|        }
  249|   433k|        else {
  250|   433k|            SCN_EXPECT(false);
  251|   433k|            SCN_UNREACHABLE;
  252|   433k|        }
  253|   433k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   433k|    {
  205|   433k|        SCN_TRY(it,
  ------------------
  |  |   71|   433k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   433k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   433k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.84k, False: 428k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.84k|    }                                                  \
  |  |  |  |   70|   433k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   428k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   428k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   428k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   428k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 428k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   428k|        return rd.read_specs(subr, specs, value, loc);
  218|   428k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   293k|    {
  223|   293k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   293k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   293k|                          basic_contiguous_scan_context<char_type>>) {
  227|   293k|            auto rd = make_reader<T, char_type>();
  228|   293k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 293k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   293k|            return impl(rd, range, value);
  233|   293k|        }
  234|   293k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   293k|            auto rd = make_reader<T, char_type>();
  236|   293k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   293k|                return unexpected(e);
  238|   293k|            }
  239|       |
  240|   293k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   293k|                return impl(rd, range, value);
  242|   293k|            }
  243|       |
  244|   293k|            auto crange = get_as_contiguous(range);
  245|   293k|            SCN_TRY(it, impl(rd, crange, value));
  246|   293k|            return ranges_polyfill::batch_next(
  247|   293k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   293k|        }
  249|   293k|        else {
  250|   293k|            SCN_EXPECT(false);
  251|   293k|            SCN_UNREACHABLE;
  252|   293k|        }
  253|   293k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   293k|    {
  205|   293k|        SCN_TRY(it,
  ------------------
  |  |   71|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.40k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.40k|    }                                                  \
  |  |  |  |   70|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   290k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   290k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   290k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   290k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 290k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   290k|        return rd.read_specs(subr, specs, value, loc);
  218|   290k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   347k|    {
  223|   347k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   347k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   347k|                          basic_contiguous_scan_context<char_type>>) {
  227|   347k|            auto rd = make_reader<T, char_type>();
  228|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   347k|            return impl(rd, range, value);
  233|   347k|        }
  234|   347k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   347k|            auto rd = make_reader<T, char_type>();
  236|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   347k|                return unexpected(e);
  238|   347k|            }
  239|       |
  240|   347k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   347k|                return impl(rd, range, value);
  242|   347k|            }
  243|       |
  244|   347k|            auto crange = get_as_contiguous(range);
  245|   347k|            SCN_TRY(it, impl(rd, crange, value));
  246|   347k|            return ranges_polyfill::batch_next(
  247|   347k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   347k|        }
  249|   347k|        else {
  250|   347k|            SCN_EXPECT(false);
  251|   347k|            SCN_UNREACHABLE;
  252|   347k|        }
  253|   347k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   347k|    {
  205|   347k|        SCN_TRY(it,
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.19k, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.19k|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   343k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   343k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   343k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   343k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 343k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   343k|        return rd.read_specs(subr, specs, value, loc);
  218|   343k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   349k|    {
  223|   349k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   349k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   349k|                          basic_contiguous_scan_context<char_type>>) {
  227|   349k|            auto rd = make_reader<T, char_type>();
  228|   349k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   349k|            return impl(rd, range, value);
  233|   349k|        }
  234|   349k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   349k|            auto rd = make_reader<T, char_type>();
  236|   349k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   349k|                return unexpected(e);
  238|   349k|            }
  239|       |
  240|   349k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   349k|                return impl(rd, range, value);
  242|   349k|            }
  243|       |
  244|   349k|            auto crange = get_as_contiguous(range);
  245|   349k|            SCN_TRY(it, impl(rd, crange, value));
  246|   349k|            return ranges_polyfill::batch_next(
  247|   349k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   349k|        }
  249|   349k|        else {
  250|   349k|            SCN_EXPECT(false);
  251|   349k|            SCN_UNREACHABLE;
  252|   349k|        }
  253|   349k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   349k|    {
  205|   349k|        SCN_TRY(it,
  ------------------
  |  |   71|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.39k, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.39k|    }                                                  \
  |  |  |  |   70|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   346k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   346k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   346k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   346k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 346k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   346k|        return rd.read_specs(subr, specs, value, loc);
  218|   346k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   565k|{
   43|   565k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130, False: 564k]
  |  |  ------------------
  ------------------
   44|    130|        return unexpected(e);
   45|    130|    }
   46|       |
   47|   564k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 564k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   564k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   564k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  22.0k|    {
  122|  22.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  22.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  22.0k|            auto rd = make_reader<T, char_type>();
  127|  22.0k|            return impl(rd, range, value);
  128|  22.0k|        }
  129|  22.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  22.0k|            auto rd = make_reader<T, char_type>();
  131|  22.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 22.0k, False: 0]
  ------------------
  132|  22.0k|                return impl(rd, range, value);
  133|  22.0k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  22.0k|        else {
  140|  22.0k|            SCN_EXPECT(false);
  141|  22.0k|            SCN_UNREACHABLE;
  142|  22.0k|        }
  143|  22.0k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  22.0k|    {
  112|  22.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     12|    }                                                  \
  |  |  |  |   70|  22.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  22.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  22.0k|                    .transform_error(make_eof_scan_error));
  115|  22.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  22.0k|                               loc);
  117|  22.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  66.0k|    {
  223|  66.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  66.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  66.0k|            auto rd = make_reader<T, char_type>();
  228|  66.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  66.0k|                return unexpected(e);
  230|  66.0k|            }
  231|       |
  232|  66.0k|            return impl(rd, range, value);
  233|  66.0k|        }
  234|  66.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  66.0k|            auto rd = make_reader<T, char_type>();
  236|  66.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 66.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  66.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 66.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  66.0k|                return impl(rd, range, value);
  242|  66.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  66.0k|        else {
  250|  66.0k|            SCN_EXPECT(false);
  251|  66.0k|            SCN_UNREACHABLE;
  252|  66.0k|        }
  253|  66.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  66.0k|    {
  205|  66.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  66.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  66.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  66.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  66.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  66.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 66.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  66.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  66.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  73.3k|    {
  223|  73.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  73.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  73.3k|            auto rd = make_reader<T, char_type>();
  228|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  73.3k|                return unexpected(e);
  230|  73.3k|            }
  231|       |
  232|  73.3k|            return impl(rd, range, value);
  233|  73.3k|        }
  234|  73.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  73.3k|            auto rd = make_reader<T, char_type>();
  236|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  73.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 73.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  73.3k|                return impl(rd, range, value);
  242|  73.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  73.3k|        else {
  250|  73.3k|            SCN_EXPECT(false);
  251|  73.3k|            SCN_UNREACHABLE;
  252|  73.3k|        }
  253|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  73.3k|    {
  205|  73.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  73.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  73.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  73.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  73.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 73.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  73.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  73.3k|    {
  223|  73.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  73.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  73.3k|            auto rd = make_reader<T, char_type>();
  228|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  73.3k|                return unexpected(e);
  230|  73.3k|            }
  231|       |
  232|  73.3k|            return impl(rd, range, value);
  233|  73.3k|        }
  234|  73.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  73.3k|            auto rd = make_reader<T, char_type>();
  236|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  73.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 73.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  73.3k|                return impl(rd, range, value);
  242|  73.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  73.3k|        else {
  250|  73.3k|            SCN_EXPECT(false);
  251|  73.3k|            SCN_UNREACHABLE;
  252|  73.3k|        }
  253|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  73.3k|    {
  205|  73.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  73.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  73.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  73.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  73.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 73.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  73.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  73.3k|    {
  223|  73.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  73.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  73.3k|            auto rd = make_reader<T, char_type>();
  228|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  73.3k|                return unexpected(e);
  230|  73.3k|            }
  231|       |
  232|  73.3k|            return impl(rd, range, value);
  233|  73.3k|        }
  234|  73.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  73.3k|            auto rd = make_reader<T, char_type>();
  236|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  73.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 73.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  73.3k|                return impl(rd, range, value);
  242|  73.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  73.3k|        else {
  250|  73.3k|            SCN_EXPECT(false);
  251|  73.3k|            SCN_UNREACHABLE;
  252|  73.3k|        }
  253|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  73.3k|    {
  205|  73.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  73.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  73.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  73.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  73.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 73.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  73.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  73.3k|    {
  223|  73.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  73.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  73.3k|            auto rd = make_reader<T, char_type>();
  228|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  73.3k|                return unexpected(e);
  230|  73.3k|            }
  231|       |
  232|  73.3k|            return impl(rd, range, value);
  233|  73.3k|        }
  234|  73.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  73.3k|            auto rd = make_reader<T, char_type>();
  236|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  73.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 73.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  73.3k|                return impl(rd, range, value);
  242|  73.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  73.3k|        else {
  250|  73.3k|            SCN_EXPECT(false);
  251|  73.3k|            SCN_UNREACHABLE;
  252|  73.3k|        }
  253|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  73.3k|    {
  205|  73.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  73.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  73.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  73.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  73.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 73.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  73.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  73.3k|    {
  223|  73.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  73.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  73.3k|            auto rd = make_reader<T, char_type>();
  228|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  73.3k|                return unexpected(e);
  230|  73.3k|            }
  231|       |
  232|  73.3k|            return impl(rd, range, value);
  233|  73.3k|        }
  234|  73.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  73.3k|            auto rd = make_reader<T, char_type>();
  236|  73.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  73.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 73.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  73.3k|                return impl(rd, range, value);
  242|  73.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  73.3k|        else {
  250|  73.3k|            SCN_EXPECT(false);
  251|  73.3k|            SCN_UNREACHABLE;
  252|  73.3k|        }
  253|  73.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  73.3k|    {
  205|  73.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 73.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  73.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  73.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  73.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  73.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 73.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  73.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  73.3k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   833k|{
  110|   833k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   833k|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   277k|{
   89|   277k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 277k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   277k|    constexpr auto enc = get_encoding<CharT>();
   94|   277k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   277k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   277k|    }
   97|   277k|    else if constexpr (enc == encoding::utf16) {
   98|   277k|        return simdutf::validate_utf16(
   99|   277k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   277k|    }
  101|   277k|    else if constexpr (enc == encoding::utf32) {
  102|   277k|        return simdutf::validate_utf32(
  103|   277k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   277k|    }
  105|   277k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   138k|{
  449|   138k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 138k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   138k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   138k|        SCN_EXPECT(output.size() >= input.size());
  455|   138k|        std::memcpy(output.data(), input.data(),
  456|   138k|                    input.size() * sizeof(SourceCharT));
  457|   138k|        return input.size();
  458|   138k|    }
  459|       |
  460|   138k|    const auto result = [&]() {
  461|   138k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   138k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   138k|        if constexpr (src_enc == encoding::utf8) {
  465|   138k|            if constexpr (dest_enc == encoding::utf16) {
  466|   138k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   138k|                    input.data(), input.size(),
  468|   138k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   138k|            }
  470|   138k|            else {
  471|   138k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   138k|                    input.data(), input.size(),
  473|   138k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   138k|            }
  475|   138k|        }
  476|   138k|        else if constexpr (src_enc == encoding::utf16) {
  477|   138k|            if constexpr (dest_enc == encoding::utf8) {
  478|   138k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   138k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   138k|                    input.size(), output.data());
  481|   138k|            }
  482|   138k|            else {
  483|   138k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   138k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   138k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   138k|            }
  487|   138k|        }
  488|   138k|        else if constexpr (src_enc == encoding::utf32) {
  489|   138k|            if constexpr (dest_enc == encoding::utf8) {
  490|   138k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   138k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   138k|                    input.size(), output.data());
  493|   138k|            }
  494|   138k|            else {
  495|   138k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   138k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   138k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   138k|            }
  499|   138k|        }
  500|   138k|    }();
  501|       |
  502|   138k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 138k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|   138k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|   138k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|   138k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|   138k|    const auto result = [&]() {
  461|   138k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   138k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   138k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|   138k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|   138k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   138k|                    input.data(), input.size(),
  468|   138k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   138k|            }
  470|   138k|            else {
  471|   138k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   138k|                    input.data(), input.size(),
  473|   138k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   138k|            }
  475|   138k|        }
  476|   138k|        else if constexpr (src_enc == encoding::utf16) {
  477|   138k|            if constexpr (dest_enc == encoding::utf8) {
  478|   138k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   138k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   138k|                    input.size(), output.data());
  481|   138k|            }
  482|   138k|            else {
  483|   138k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   138k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   138k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   138k|            }
  487|   138k|        }
  488|   138k|        else if constexpr (src_enc == encoding::utf32) {
  489|   138k|            if constexpr (dest_enc == encoding::utf8) {
  490|   138k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   138k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   138k|                    input.size(), output.data());
  493|   138k|            }
  494|   138k|            else {
  495|   138k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   138k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   138k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   138k|            }
  499|   138k|        }
  500|   138k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   277k|{
  116|   277k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   277k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   277k|    constexpr auto enc = get_encoding<CharT>();
  124|   277k|    char32_t output{};
  125|   277k|    size_t ret{};
  126|   277k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   277k|#ifndef NDEBUG
  128|   277k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 138k, False: 138k]
  ------------------
  129|   138k|            auto len =
  130|   138k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   138k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   138k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   277k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   277k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 138k]
  |  |  ------------------
  ------------------
  153|   138k|        return detail::invalid_code_point;
  154|   138k|    }
  155|   138k|    return static_cast<char32_t>(output);
  156|   277k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  88.3k|{
  263|  88.3k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  88.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  88.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  88.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.32k, False: 82.0k]
  |  |  ------------------
  ------------------
  267|  6.32k|        return {get_start_of_next_code_point(input),
  268|  6.32k|                detail::invalid_code_point};
  269|  6.32k|    }
  270|  82.0k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  82.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.51k, False: 80.5k]
  |  |  ------------------
  ------------------
  271|  1.51k|        return {input.end(), detail::invalid_code_point};
  272|  1.51k|    }
  273|       |
  274|  80.5k|    constexpr auto enc = get_encoding<CharT>();
  275|  80.5k|    std::size_t result{1};
  276|  80.5k|    char32_t output{};
  277|  80.5k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  80.5k|        result = simdutf::convert_utf8_to_utf32(
  279|  80.5k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  80.5k|    }
  281|  80.5k|    else if constexpr (enc == encoding::utf16) {
  282|  80.5k|        result = simdutf::convert_utf16_to_utf32(
  283|  80.5k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  80.5k|    }
  285|  80.5k|    else if constexpr (enc == encoding::utf32) {
  286|  80.5k|        SCN_EXPECT(len == 1);
  287|  80.5k|        output = static_cast<char32_t>(input[0]);
  288|  80.5k|    }
  289|       |
  290|  80.5k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.84k, False: 76.6k]
  |  |  ------------------
  ------------------
  291|  3.84k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  3.84k|                detail::invalid_code_point};
  293|  3.84k|    }
  294|       |
  295|  76.6k|    return {input.begin() + len, output};
  296|  80.5k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  10.1k|{
  248|  10.1k|    auto it = input.begin();
  249|  53.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 51.5k, False: 1.75k]
  ------------------
  250|  51.5k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 8.41k, False: 43.1k]
  ------------------
  251|  8.41k|            break;
  252|  8.41k|        }
  253|  51.5k|    }
  254|       |
  255|  10.1k|    return it;
  256|  10.1k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  45.7M|{
  110|  45.7M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  45.7M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  3.51M|{
  449|  3.51M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 3.51M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  3.51M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  3.51M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  3.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  3.51M|                    input.size() * sizeof(SourceCharT));
  457|  3.51M|        return input.size();
  458|  3.51M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   703k|{
  116|   703k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   703k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   703k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   703k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   703k|    constexpr auto enc = get_encoding<CharT>();
  124|   703k|    char32_t output{};
  125|   703k|    size_t ret{};
  126|   703k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   703k|#ifndef NDEBUG
  128|   703k|        if (validate_unicode(input)) {
  129|   703k|            auto len =
  130|   703k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   703k|            SCN_EXPECT(len == 1);
  132|   703k|        }
  133|   703k|#endif
  134|   703k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   703k|    }
  136|   703k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|   703k|#ifndef NDEBUG
  138|   703k|        if (validate_unicode(input)) {
  139|   703k|            auto len = simdutf::utf32_length_from_utf16(
  140|   703k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   703k|            SCN_EXPECT(len == 1);
  142|   703k|        }
  143|   703k|#endif
  144|   703k|        ret = simdutf::convert_utf16_to_utf32(
  145|   703k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   703k|    }
  147|   703k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|   703k|        output = static_cast<char32_t>(input[0]);
  149|   703k|        ret = output < detail::invalid_code_point;
  150|   703k|    }
  151|       |
  152|   703k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   703k|    return static_cast<char32_t>(output);
  156|   703k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  7.63M|{
   29|       |    // Pattern_White_Space property
   30|  7.63M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 7.62M, False: 14.7k]
  |  Branch (30:27): [True: 3.89M, False: 3.72M]
  ------------------
   31|  7.63M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 33.8k, False: 3.70M]
  ------------------
   32|  7.63M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 3.72k, False: 3.70M]
  ------------------
   33|  7.63M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 654, False: 3.70M]
  ------------------
   34|  7.63M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 750, False: 3.70M]
  ------------------
   35|  7.63M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.11k, False: 3.69M]
  ------------------
   36|  7.63M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 3.69M]
  ------------------
   37|  7.63M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  7.00M|{
   58|  7.00M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  7.00M|        static_cast<unsigned char>(ch))];
   60|  7.00M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  3.68M|{
   92|  3.68M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  3.68M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  2.49M|    {
   57|  2.49M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  7.17M|    {
   61|  7.17M|        return m_current;
   62|  7.17M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  4.68M|    {
   66|  4.68M|        return m_range.end();
   67|  4.68M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  2.26M|    {
   81|  2.26M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.26M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.26M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.26M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.26M|        }
   87|  2.26M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.26M|    static_cast<    \
  |  |  247|  2.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.26M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  2.41M|    {
   71|  2.41M|        return ranges::subrange{begin(), end()};
   72|  2.41M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.28M|    {
   57|  2.28M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  6.32M|    {
   61|  6.32M|        return m_current;
   62|  6.32M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  4.04M|    {
   66|  4.04M|        return m_range.end();
   67|  4.04M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.88M|    {
   81|  1.88M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.88M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.88M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.88M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.88M|        }
   87|  1.88M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.88M|    static_cast<    \
  |  |  247|  1.88M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.88M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.15M|    {
   71|  2.15M|        return ranges::subrange{begin(), end()};
   72|  2.15M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   781k|    {
  205|   781k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   781k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   277k|    {
  196|   277k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   390k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   390k|              cvref<T> obj = *get<T>(fn);
  187|   390k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   390k|                  obj(static_cast<decltype(args)>(args)...);
  189|   390k|              }
  190|   390k|              else {
  191|   390k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   390k|              }
  193|   390k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   390k|    {
  126|   390k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   390k|            return static_cast<T*>(s.m_cp);
  128|   390k|        }
  129|   390k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   390k|            return static_cast<T*>(s.m_p);
  131|   390k|        }
  132|   390k|        else {
  133|   390k|            return reinterpret_cast<T*>(s.m_fp);
  134|   390k|        }
  135|   390k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   277k|        {
  104|   277k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  15.0M|    {
  205|  15.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  15.0M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.64M|    {
  196|  3.64M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  7.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.54M|              cvref<T> obj = *get<T>(fn);
  187|  7.54M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.54M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.54M|              }
  190|  7.54M|              else {
  191|  7.54M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.54M|              }
  193|  7.54M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  7.54M|    {
  126|  7.54M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.54M|            return static_cast<T*>(s.m_cp);
  128|  7.54M|        }
  129|  7.54M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.54M|            return static_cast<T*>(s.m_p);
  131|  7.54M|        }
  132|  7.54M|        else {
  133|  7.54M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.54M|        }
  135|  7.54M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  3.64M|        {
  104|  3.64M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   138k|    {
  196|   138k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   416k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   416k|              cvref<T> obj = *get<T>(fn);
  187|   416k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   416k|                  obj(static_cast<decltype(args)>(args)...);
  189|   416k|              }
  190|   416k|              else {
  191|   416k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   416k|              }
  193|   416k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   416k|    {
  126|   416k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   416k|            return static_cast<T*>(s.m_cp);
  128|   416k|        }
  129|   416k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   416k|            return static_cast<T*>(s.m_p);
  131|   416k|        }
  132|   416k|        else {
  133|   416k|            return reinterpret_cast<T*>(s.m_fp);
  134|   416k|        }
  135|   416k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   138k|        {
  104|   138k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   277k|    {
  196|   277k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   390k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   390k|              cvref<T> obj = *get<T>(fn);
  187|   390k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   390k|                  obj(static_cast<decltype(args)>(args)...);
  189|   390k|              }
  190|   390k|              else {
  191|   390k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   390k|              }
  193|   390k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   390k|    {
  126|   390k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   390k|            return static_cast<T*>(s.m_cp);
  128|   390k|        }
  129|   390k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   390k|            return static_cast<T*>(s.m_p);
  131|   390k|        }
  132|   390k|        else {
  133|   390k|            return reinterpret_cast<T*>(s.m_fp);
  134|   390k|        }
  135|   390k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   277k|        {
  104|   277k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.94M|    {
  196|  2.94M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  5.86M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.86M|              cvref<T> obj = *get<T>(fn);
  187|  5.86M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.86M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.86M|              }
  190|  5.86M|              else {
  191|  5.86M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.86M|              }
  193|  5.86M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  5.86M|    {
  126|  5.86M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.86M|            return static_cast<T*>(s.m_cp);
  128|  5.86M|        }
  129|  5.86M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.86M|            return static_cast<T*>(s.m_p);
  131|  5.86M|        }
  132|  5.86M|        else {
  133|  5.86M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.86M|        }
  135|  5.86M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.94M|        {
  104|  2.94M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.74M|    {
  205|  1.74M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.74M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   476k|    {
  196|   476k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   872k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   872k|              cvref<T> obj = *get<T>(fn);
  187|   872k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   872k|                  obj(static_cast<decltype(args)>(args)...);
  189|   872k|              }
  190|   872k|              else {
  191|   872k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   872k|              }
  193|   872k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   872k|    {
  126|   872k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   872k|            return static_cast<T*>(s.m_cp);
  128|   872k|        }
  129|   872k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   872k|            return static_cast<T*>(s.m_p);
  131|   872k|        }
  132|   872k|        else {
  133|   872k|            return reinterpret_cast<T*>(s.m_fp);
  134|   872k|        }
  135|   872k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   476k|        {
  104|   476k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   564k|    {
  196|   564k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  1.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.26M|              cvref<T> obj = *get<T>(fn);
  187|  1.26M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.26M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.26M|              }
  190|  1.26M|              else {
  191|  1.26M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.26M|              }
  193|  1.26M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  1.26M|    {
  126|  1.26M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.26M|            return static_cast<T*>(s.m_cp);
  128|  1.26M|        }
  129|  1.26M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.26M|            return static_cast<T*>(s.m_p);
  131|  1.26M|        }
  132|  1.26M|        else {
  133|  1.26M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.26M|        }
  135|  1.26M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   564k|        {
  104|   564k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   476k|    {
  196|   476k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   872k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   872k|              cvref<T> obj = *get<T>(fn);
  187|   872k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   872k|                  obj(static_cast<decltype(args)>(args)...);
  189|   872k|              }
  190|   872k|              else {
  191|   872k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   872k|              }
  193|   872k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   872k|    {
  126|   872k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   872k|            return static_cast<T*>(s.m_cp);
  128|   872k|        }
  129|   872k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   872k|            return static_cast<T*>(s.m_p);
  131|   872k|        }
  132|   872k|        else {
  133|   872k|            return reinterpret_cast<T*>(s.m_fp);
  134|   872k|        }
  135|   872k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   476k|        {
  104|   476k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  53.6k|{
   44|  53.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  53.6k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  30.5M|{
   30|  30.5M|    return e != eof_error::good;
   31|  30.5M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   159k|{
   91|   159k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   159k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  7.55M|    {
   69|  7.55M|        return a.m_code == b.m_code;
   70|  7.55M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  35.3M|    {
   55|  35.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  35.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  35.3M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   442k|    return [code, msg](parse_error err) {
  115|   442k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   442k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   442k|{
  100|   442k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 442k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   442k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 442k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   442k|    return scan_error{code, msg};
  109|   442k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   754k|{
  114|   754k|    return [code, msg](parse_error err) {
  115|   754k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   754k|    };
  117|   754k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.55M|{
  587|  1.55M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.55M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   189k|{
  595|   189k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   189k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   189k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 63.0k, False: 126k]
  |  |  ------------------
  ------------------
  597|  63.0k|        source.sync(*n);
  598|  63.0k|    }
  599|   126k|    else {
  600|   126k|        source.sync_all();
  601|   126k|    }
  602|   189k|    return n;
  603|   189k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.41M|{
  611|  1.41M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.41M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   326k|{
  619|   326k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   326k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   326k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 106k, False: 220k]
  |  |  ------------------
  ------------------
  621|   106k|        source.sync(*n);
  622|   106k|    }
  623|   220k|    else {
  624|   220k|        source.sync_all();
  625|   220k|    }
  626|   326k|    return n;
  627|   326k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.55M|{
  544|  1.55M|    return vscan_internal(source, format, args);
  545|  1.55M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   189k|{
  550|   189k|    auto n = vscan_internal(source, format, args);
  551|   189k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   189k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 63.0k, False: 126k]
  |  |  ------------------
  ------------------
  552|  63.0k|        source.sync(*n);
  553|  63.0k|    }
  554|   126k|    else {
  555|   126k|        source.sync_all();
  556|   126k|    }
  557|   189k|    return n;
  558|   189k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.41M|{
  564|  1.41M|    return vscan_internal(source, format, args);
  565|  1.41M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   326k|{
  570|   326k|    auto n = vscan_internal(source, format, args);
  571|   326k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   326k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 106k, False: 220k]
  |  |  ------------------
  ------------------
  572|   106k|        source.sync(*n);
  573|   106k|    }
  574|   220k|    else {
  575|   220k|        source.sync_all();
  576|   220k|    }
  577|   326k|    return n;
  578|   326k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   309k|{
  654|   309k|    return vscan_value_internal(source, arg);
  655|   309k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  25.2k|{
  659|  25.2k|    auto n = vscan_value_internal(source, arg);
  660|  25.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  25.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.6k, False: 12.6k]
  |  |  ------------------
  ------------------
  661|  12.6k|        source.sync(*n);
  662|  12.6k|    }
  663|  12.6k|    else {
  664|  12.6k|        source.sync_all();
  665|  12.6k|    }
  666|  25.2k|    return n;
  667|  25.2k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   269k|{
  673|   269k|    return vscan_value_internal(source, arg);
  674|   269k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  44.0k|{
  679|  44.0k|    auto n = vscan_value_internal(source, arg);
  680|  44.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  44.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.0k, False: 22.0k]
  |  |  ------------------
  ------------------
  681|  22.0k|        source.sync(*n);
  682|  22.0k|    }
  683|  22.0k|    else {
  684|  22.0k|        source.sync_all();
  685|  22.0k|    }
  686|  44.0k|    return n;
  687|  44.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   378k|{
  476|   378k|    const auto argcount = args.size();
  477|   378k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 50.4k, False: 328k]
  |  Branch (477:60): [True: 50.4k, False: 0]
  ------------------
  478|  50.4k|        auto arg = args.get(0);
  479|  50.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  50.4k|    static_cast<    \
  |  |  247|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  50.4k|    }
  481|       |
  482|   328k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 328k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   328k|    SCN_UNLIKELY_ATTR
  490|   328k|    {
  491|   328k|        auto handler = format_handler<false, CharT>{
  492|   328k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   328k|    static_cast<    \
  |  |  247|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   328k|    static_cast<    \
  |  |  247|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   328k|        return vscan_parse_format_string(format, handler);
  494|   328k|    }
  495|   328k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.49M|{
   36|  3.49M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.82M, False: 670k]
  ------------------
   37|  2.82M|        return false;
   38|  2.82M|    }
   39|   670k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 670k, False: 0]
  |  Branch (39:39): [True: 670k, False: 0]
  ------------------
   40|  3.49M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  75.7k|{
   69|  75.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  75.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.7k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  75.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  75.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 75.7k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  75.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  75.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  75.7k|    static_cast<    \
  |  |  247|  75.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  75.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  75.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.8k, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.8k|    }                                                  \
  |  |  |  |   70|  75.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  37.8k|    return it.position();
   86|  75.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  2.49M|    {
  314|  2.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  5.67M|    {
  133|  5.67M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  5.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  2.49M|    {
  264|  2.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.49M|{
  441|  2.49M|    const auto beg = handler.get_ctx().begin();
  442|  2.49M|    detail::parse_format_string<false>(format, handler);
  443|  2.49M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 2.26M]
  |  |  ------------------
  ------------------
  444|   227k|        return unexpected(handler.error);
  445|   227k|    }
  446|  2.26M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.49M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  16.8M|    {
  425|  16.8M|        return ctx.get();
  426|  16.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  16.8M|    {
  268|  16.8M|        return contiguous_ctx;
  269|  16.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  4.75M|    {
  318|  4.75M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.75M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.49M|{
   92|  2.49M|    auto arg = ctx.arg(id);
   93|  2.49M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.49M|    return arg;
   97|  2.49M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  5.67M|    {
  208|  5.67M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  5.67M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  5.67M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.67M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.67M, False: 0]
  |  |  ------------------
  ------------------
  218|  5.67M|            visited_args_lower64 |= (1ull << id);
  219|  5.67M|            return;
  220|  5.67M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  5.67M|    {
  193|  5.67M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  5.67M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.67M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.67M, False: 0]
  |  |  ------------------
  ------------------
  199|  5.67M|            return (visited_args_lower64 >> id) & 1ull;
  200|  5.67M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  5.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   831k|    {
  177|   831k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 831k, False: 0]
  |  |  ------------------
  ------------------
  178|   831k|            error = err;
  179|   831k|        }
  180|   831k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  2.49M|    {
  347|  2.49M|        return parse_ctx.next_arg_id();
  348|  2.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  2.49M|    {
  388|  2.49M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.49M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.49M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.49M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.49M|        auto specs = detail::format_specs{};
  401|  2.49M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.49M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.49M|            arg.type()};
  404|       |
  405|  2.49M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.49M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.49M]
  |  Branch (406:29): [True: 50.4k, False: 2.44M]
  ------------------
  407|  50.4k|            SCN_UNLIKELY_ATTR
  408|  50.4k|            on_error("Missing '}' in format string");
  409|  50.4k|            return parse_ctx.begin();
  410|  50.4k|        }
  411|  2.44M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.2k, False: 2.41M]
  |  |  ------------------
  ------------------
  412|  25.2k|            return parse_ctx.begin();
  413|  25.2k|        }
  414|  2.41M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.41M|        on_visit_scan_arg(
  417|  2.41M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.41M|                                           get_ctx().locale()},
  419|  2.41M|            arg);
  420|  2.41M|        return parse_ctx.begin();
  421|  2.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  2.49M|    {
  112|  2.49M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  2.41M|    {
  359|  2.41M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.41M]
  |  Branch (359:23): [True: 0, False: 2.41M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.41M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.41M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 151k, False: 2.26M]
  |  |  ------------------
  ------------------
  366|   151k|            on_error(r.error());
  367|   151k|        }
  368|  2.26M|        else {
  369|  2.26M|            get_ctx().advance_to(*r);
  370|  2.26M|        }
  371|  2.41M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   692k|    {
  172|   692k|        SCN_UNLIKELY_ATTR
  173|   692k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   692k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  5.67M|    {
  140|  5.67M|        {
  141|  5.67M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 5.67M]
  ------------------
  142|  5.67M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 5.67M]
  ------------------
  143|  5.67M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  5.67M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  5.67M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 5.67M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  5.67M|        }
  150|       |
  151|  5.67M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 5.67M, False: 0]
  ------------------
  152|  5.67M|            return;
  153|  5.67M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  5.67M|    {
  188|  5.67M|        return error;
  189|  5.67M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  16.5M|    {
  184|  16.5M|        return static_cast<bool>(error);
  185|  16.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   328k|    {
  314|   328k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   328k|    {
  241|   328k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   328k|{
  441|   328k|    const auto beg = handler.get_ctx().begin();
  442|   328k|    detail::parse_format_string<false>(format, handler);
  443|   328k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 100k]
  |  |  ------------------
  ------------------
  444|   227k|        return unexpected(handler.error);
  445|   227k|    }
  446|   100k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   328k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.69M|    {
  425|  1.69M|        return ctx.get();
  426|  1.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.69M|    {
  245|  1.69M|        return ctx;
  246|  1.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   429k|    {
  318|   429k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 429k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   429k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   328k|{
   92|   328k|    auto arg = ctx.arg(id);
   93|   328k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 328k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   328k|    return arg;
   97|   328k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   328k|    {
  347|   328k|        return parse_ctx.next_arg_id();
  348|   328k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   328k|    {
  388|   328k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   328k|        set_arg_as_visited(arg_id);
  390|       |
  391|   328k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 328k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   328k|        auto specs = detail::format_specs{};
  401|   328k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   328k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   328k|            arg.type()};
  404|       |
  405|   328k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   328k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 328k]
  |  Branch (406:29): [True: 50.4k, False: 277k]
  ------------------
  407|  50.4k|            SCN_UNLIKELY_ATTR
  408|  50.4k|            on_error("Missing '}' in format string");
  409|  50.4k|            return parse_ctx.begin();
  410|  50.4k|        }
  411|   277k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.2k, False: 252k]
  |  |  ------------------
  ------------------
  412|  25.2k|            return parse_ctx.begin();
  413|  25.2k|        }
  414|   252k|        parse_ctx.advance_to(begin);
  415|       |
  416|   252k|        on_visit_scan_arg(
  417|   252k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   252k|                                           get_ctx().locale()},
  419|   252k|            arg);
  420|   252k|        return parse_ctx.begin();
  421|   277k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   328k|    {
  112|   328k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   252k|    {
  359|   252k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 252k]
  |  Branch (359:23): [True: 0, False: 252k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   252k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   252k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 151k, False: 100k]
  |  |  ------------------
  ------------------
  366|   151k|            on_error(r.error());
  367|   151k|        }
  368|   100k|        else {
  369|   100k|            get_ctx().advance_to(*r);
  370|   100k|        }
  371|   252k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.11M|{
  456|  3.11M|    const auto argcount = args.size();
  457|  3.11M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 619k, False: 2.49M]
  |  Branch (457:60): [True: 619k, False: 0]
  ------------------
  458|   619k|        auto arg = args.get(0);
  459|   619k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   619k|    static_cast<    \
  |  |  247|   619k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   619k|    }
  461|       |
  462|  2.49M|    auto handler = format_handler<true, CharT>{
  463|  2.49M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.49M|                                       source.data() + source.size()},
  465|  2.49M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.49M|    static_cast<    \
  |  |  247|  2.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.49M|    static_cast<    \
  |  |  247|  2.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.49M|    return vscan_parse_format_string(format, handler);
  467|  3.11M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   929k|{
   49|   929k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 929k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   929k|    auto reader =
   55|   929k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   929k|            ranges::subrange<const CharT*>{source.data(),
   57|   929k|                                           source.data() + source.size()},
   58|   929k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   929k|    static_cast<    \
  |  |  247|   929k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   929k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   929k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   929k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   929k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.8k, False: 891k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.8k|    }                                                  \
  |  |  |  |   70|   929k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   891k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   891k|    return ranges::distance(source.data(), it);
   61|   929k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.82M|{
  456|  2.82M|    const auto argcount = args.size();
  457|  2.82M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 539k, False: 2.28M]
  |  Branch (457:60): [True: 539k, False: 0]
  ------------------
  458|   539k|        auto arg = args.get(0);
  459|   539k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   539k|    static_cast<    \
  |  |  247|   539k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   539k|    }
  461|       |
  462|  2.28M|    auto handler = format_handler<true, CharT>{
  463|  2.28M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.28M|                                       source.data() + source.size()},
  465|  2.28M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.28M|    static_cast<    \
  |  |  247|  2.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.28M|    static_cast<    \
  |  |  247|  2.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.28M|    return vscan_parse_format_string(format, handler);
  467|  2.82M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.47M|{
   36|  3.47M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.84M, False: 627k]
  ------------------
   37|  2.84M|        return false;
   38|  2.84M|    }
   39|   627k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 627k, False: 0]
  |  Branch (39:39): [True: 627k, False: 0]
  ------------------
   40|  3.47M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   809k|{
   49|   809k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 809k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   809k|    auto reader =
   55|   809k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   809k|            ranges::subrange<const CharT*>{source.data(),
   57|   809k|                                           source.data() + source.size()},
   58|   809k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   809k|    static_cast<    \
  |  |  247|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   809k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   809k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   809k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   809k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66.0k, False: 743k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  66.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  66.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  66.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  66.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  66.0k|    }                                                  \
  |  |  |  |   70|   809k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   743k|    return ranges::distance(source.data(), it);
   61|   809k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.28M|    {
  314|  2.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.28M|    {
  264|  2.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.28M|{
  441|  2.28M|    const auto beg = handler.get_ctx().begin();
  442|  2.28M|    detail::parse_format_string<false>(format, handler);
  443|  2.28M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 396k, False: 1.88M]
  |  |  ------------------
  ------------------
  444|   396k|        return unexpected(handler.error);
  445|   396k|    }
  446|  1.88M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.28M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  14.9M|    {
  425|  14.9M|        return ctx.get();
  426|  14.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  14.9M|    {
  268|  14.9M|        return contiguous_ctx;
  269|  14.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  4.17M|    {
  318|  4.17M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.17M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.28M|{
   92|  2.28M|    auto arg = ctx.arg(id);
   93|  2.28M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.28M|    return arg;
   97|  2.28M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.28M|    {
  347|  2.28M|        return parse_ctx.next_arg_id();
  348|  2.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.28M|    {
  388|  2.28M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.28M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.28M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.28M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.28M|        auto specs = detail::format_specs{};
  401|  2.28M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.28M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.28M|            arg.type()};
  404|       |
  405|  2.28M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.28M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.28M]
  |  Branch (406:29): [True: 88.0k, False: 2.19M]
  ------------------
  407|  88.0k|            SCN_UNLIKELY_ATTR
  408|  88.0k|            on_error("Missing '}' in format string");
  409|  88.0k|            return parse_ctx.begin();
  410|  88.0k|        }
  411|  2.19M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 2.15M]
  |  |  ------------------
  ------------------
  412|  44.0k|            return parse_ctx.begin();
  413|  44.0k|        }
  414|  2.15M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.15M|        on_visit_scan_arg(
  417|  2.15M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.15M|                                           get_ctx().locale()},
  419|  2.15M|            arg);
  420|  2.15M|        return parse_ctx.begin();
  421|  2.19M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.28M|    {
  112|  2.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.15M|    {
  359|  2.15M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.15M]
  |  Branch (359:23): [True: 0, False: 2.15M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.15M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.15M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 264k, False: 1.88M]
  |  |  ------------------
  ------------------
  366|   264k|            on_error(r.error());
  367|   264k|        }
  368|  1.88M|        else {
  369|  1.88M|            get_ctx().advance_to(*r);
  370|  1.88M|        }
  371|  2.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   653k|{
  476|   653k|    const auto argcount = args.size();
  477|   653k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 88.0k, False: 565k]
  |  Branch (477:60): [True: 88.0k, False: 0]
  ------------------
  478|  88.0k|        auto arg = args.get(0);
  479|  88.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  88.0k|    static_cast<    \
  |  |  247|  88.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  88.0k|    }
  481|       |
  482|   565k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 565k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   565k|    SCN_UNLIKELY_ATTR
  490|   565k|    {
  491|   565k|        auto handler = format_handler<false, CharT>{
  492|   565k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   565k|    static_cast<    \
  |  |  247|   565k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   565k|    static_cast<    \
  |  |  247|   565k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   565k|        return vscan_parse_format_string(format, handler);
  494|   565k|    }
  495|   565k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   132k|{
   69|   132k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   132k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   132k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   132k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   132k|    static_cast<    \
  |  |  247|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   132k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66.0k, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  66.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  66.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  66.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  66.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  66.0k|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  66.0k|    return it.position();
   86|   132k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   565k|    {
  314|   565k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   565k|    {
  241|   565k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   565k|{
  441|   565k|    const auto beg = handler.get_ctx().begin();
  442|   565k|    detail::parse_format_string<false>(format, handler);
  443|   565k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 396k, False: 168k]
  |  |  ------------------
  ------------------
  444|   396k|        return unexpected(handler.error);
  445|   396k|    }
  446|   168k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   565k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  2.89M|    {
  425|  2.89M|        return ctx.get();
  426|  2.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  2.89M|    {
  245|  2.89M|        return ctx;
  246|  2.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   733k|    {
  318|   733k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 733k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   733k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   565k|{
   92|   565k|    auto arg = ctx.arg(id);
   93|   565k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   565k|    return arg;
   97|   565k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   565k|    {
  347|   565k|        return parse_ctx.next_arg_id();
  348|   565k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   565k|    {
  388|   565k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   565k|        set_arg_as_visited(arg_id);
  390|       |
  391|   565k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 565k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   565k|        auto specs = detail::format_specs{};
  401|   565k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   565k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   565k|            arg.type()};
  404|       |
  405|   565k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   565k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 565k]
  |  Branch (406:29): [True: 88.0k, False: 476k]
  ------------------
  407|  88.0k|            SCN_UNLIKELY_ATTR
  408|  88.0k|            on_error("Missing '}' in format string");
  409|  88.0k|            return parse_ctx.begin();
  410|  88.0k|        }
  411|   476k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.0k, False: 432k]
  |  |  ------------------
  ------------------
  412|  44.0k|            return parse_ctx.begin();
  413|  44.0k|        }
  414|   432k|        parse_ctx.advance_to(begin);
  415|       |
  416|   432k|        on_visit_scan_arg(
  417|   432k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   432k|                                           get_ctx().locale()},
  419|   432k|            arg);
  420|   432k|        return parse_ctx.begin();
  421|   476k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   565k|    {
  112|   565k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   432k|    {
  359|   432k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 432k]
  |  Branch (359:23): [True: 0, False: 432k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   432k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   432k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 264k, False: 168k]
  |  |  ------------------
  ------------------
  366|   264k|            on_error(r.error());
  367|   264k|        }
  368|   168k|        else {
  369|   168k|            get_ctx().advance_to(*r);
  370|   168k|        }
  371|   432k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   309k|{
  502|   309k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   309k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  25.2k|{
  502|  25.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  25.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   269k|{
  502|   269k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   269k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  44.0k|{
  502|  44.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  44.0k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.10k|{
   52|  2.10k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.10k|    std::copy(data.begin(), data.end(),
   57|  2.10k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.10k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.10k|    const auto wsv_reinterpret_size =
   62|  2.10k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 119, False: 1.98k]
  ------------------
   63|  2.10k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.10k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.10k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.10k|    std::wstring_view wsv_transcoded;
   69|  2.10k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.56k, False: 537]
  ------------------
   70|  1.56k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.56k|        else {
   79|  1.56k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.56k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.56k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.56k|                sv.data(), sv.size(),
   83|  1.56k|                reinterpret_cast<char32_t*>(
   84|  1.56k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.56k|        }
   86|  1.56k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.56k|    }
   88|       |
   89|  2.10k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.10k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.10k|{
  140|  2.10k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.10k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.10k|    buf.resize(sizeof...(Args));
  143|  2.10k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.10k|    return {buf.data(), buf.size()};
  145|  2.10k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.10k|{
  126|  2.10k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.10k|        return format_string_view_buffer;
  128|  2.10k|    }
  129|  2.10k|    else {
  130|  2.10k|        return wformat_string_view_buffer;
  131|  2.10k|    }
  132|  2.10k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.10k|{
  200|  2.10k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.10k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.10k|                                   format_strings);
  203|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   222k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   222k|            auto result = scn::scan<T>(
  156|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   222k|                scn::runtime_format(f));
  158|   222k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 201k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   201k|            it = result->begin();
  162|   201k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   222k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   222k|            auto result = scn::scan<T>(
  170|   222k|                global_locale,
  171|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   222k|                scn::runtime_format(f));
  173|   222k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 201k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   201k|            it = result->begin();
  177|   201k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  48.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.0k|            auto result = scn::scan_value<T>(
  185|  48.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 45.9k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  45.9k|            it = result->begin();
  190|  45.9k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   209k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   209k|            auto result = scn::scan<T>(
  156|   209k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   209k|                scn::runtime_format(f));
  158|   209k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 188k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   188k|            it = result->begin();
  162|   188k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   209k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   209k|            auto result = scn::scan<T>(
  170|   209k|                global_locale,
  171|   209k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   209k|                scn::runtime_format(f));
  173|   209k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 188k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   188k|            it = result->begin();
  177|   188k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  43.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  43.2k|            auto result = scn::scan_value<T>(
  185|  43.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  43.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 41.1k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  41.1k|            it = result->begin();
  190|  41.1k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   312k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   312k|            auto result = scn::scan<T>(
  156|   312k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   312k|                scn::runtime_format(f));
  158|   312k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 291k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   291k|            it = result->begin();
  162|   291k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   312k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   312k|            auto result = scn::scan<T>(
  170|   312k|                global_locale,
  171|   312k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   312k|                scn::runtime_format(f));
  173|   312k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 291k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   291k|            it = result->begin();
  177|   291k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  61.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  61.0k|            auto result = scn::scan_value<T>(
  185|  61.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  61.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 58.9k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  58.9k|            it = result->begin();
  190|  58.9k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   246k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   246k|            auto result = scn::scan<T>(
  156|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   246k|                scn::runtime_format(f));
  158|   246k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 225k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   225k|            it = result->begin();
  162|   225k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   246k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   246k|            auto result = scn::scan<T>(
  170|   246k|                global_locale,
  171|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   246k|                scn::runtime_format(f));
  173|   246k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 225k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   225k|            it = result->begin();
  177|   225k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  47.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  47.6k|            auto result = scn::scan_value<T>(
  185|  47.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  47.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 45.5k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  45.5k|            it = result->begin();
  190|  45.5k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   316k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   316k|            auto result = scn::scan<T>(
  156|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   316k|                scn::runtime_format(f));
  158|   316k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 295k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   295k|            it = result->begin();
  162|   295k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   316k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   316k|            auto result = scn::scan<T>(
  170|   316k|                global_locale,
  171|   316k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   316k|                scn::runtime_format(f));
  173|   316k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 295k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   295k|            it = result->begin();
  177|   295k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  61.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  61.8k|            auto result = scn::scan_value<T>(
  185|  61.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  61.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 59.7k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  59.7k|            it = result->begin();
  190|  59.7k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|   248k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   248k|            auto result = scn::scan<T>(
  156|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   248k|                scn::runtime_format(f));
  158|   248k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 227k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|   227k|            it = result->begin();
  162|   227k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|   248k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   248k|            auto result = scn::scan<T>(
  170|   248k|                global_locale,
  171|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   248k|                scn::runtime_format(f));
  173|   248k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 227k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|   227k|            it = result->begin();
  177|   227k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  47.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  47.9k|            auto result = scn::scan_value<T>(
  185|  47.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  47.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 45.8k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  45.8k|            it = result->begin();
  190|  45.8k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.10k|{
  151|       |    // Regular scan
  152|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 21.0k, False: 2.10k]
  ------------------
  153|  21.0k|        auto it = scn::ranges::begin(source);
  154|  31.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  31.5k|            auto result = scn::scan<T>(
  156|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  31.5k|                scn::runtime_format(f));
  158|  31.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.0k, False: 10.5k]
  ------------------
  159|  21.0k|                break;
  160|  21.0k|            }
  161|  10.5k|            it = result->begin();
  162|  10.5k|        }
  163|  21.0k|    }
  164|       |
  165|       |    // scan localized
  166|  21.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 21.0k, False: 2.10k]
  ------------------
  167|  21.0k|        auto it = scn::ranges::begin(source);
  168|  31.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.5k|            auto result = scn::scan<T>(
  170|  31.5k|                global_locale,
  171|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  31.5k|                scn::runtime_format(f));
  173|  31.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 21.0k, False: 10.5k]
  ------------------
  174|  21.0k|                break;
  175|  21.0k|            }
  176|  10.5k|            it = result->begin();
  177|  10.5k|        }
  178|  21.0k|    }
  179|       |
  180|       |    // scan_value
  181|  2.10k|    {
  182|  2.10k|        auto it = scn::ranges::begin(source);
  183|  4.20k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.20k|            auto result = scn::scan_value<T>(
  185|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.20k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.10k, False: 2.10k]
  ------------------
  187|  2.10k|                break;
  188|  2.10k|            }
  189|  2.10k|            it = result->begin();
  190|  2.10k|        }
  191|  2.10k|    }
  192|  2.10k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.10k|{
  109|  2.10k|    using char_type = ranges::range_value_t<Source>;
  110|  2.10k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.10k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.10k|              std::back_inserter(deque));
  113|  2.10k|    return deque;
  114|  2.10k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.10k|{
   98|  2.10k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.10k|        return noncontiguous_buffer;
  100|  2.10k|    }
  101|  2.10k|    else {
  102|  2.10k|        return wnoncontiguous_buffer;
  103|  2.10k|    }
  104|  2.10k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.10k|{
  140|  2.10k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.10k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.10k|    buf.resize(sizeof...(Args));
  143|  2.10k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.10k|    return {buf.data(), buf.size()};
  145|  2.10k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.10k|{
  126|  2.10k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.10k|        return format_string_view_buffer;
  128|  2.10k|    }
  129|  2.10k|    else {
  130|  2.10k|        return wformat_string_view_buffer;
  131|  2.10k|    }
  132|  2.10k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.66k|{
  200|  3.66k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.66k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.66k|                                   format_strings);
  203|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   203k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   203k|            auto result = scn::scan<T>(
  156|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   203k|                scn::runtime_format(f));
  158|   203k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 167k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   167k|            it = result->begin();
  162|   167k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   203k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   203k|            auto result = scn::scan<T>(
  170|   203k|                global_locale,
  171|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   203k|                scn::runtime_format(f));
  173|   203k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 167k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   167k|            it = result->begin();
  177|   167k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  41.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  41.9k|            auto result = scn::scan_value<T>(
  185|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  41.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 38.3k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  38.3k|            it = result->begin();
  190|  38.3k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   196k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   196k|            auto result = scn::scan<T>(
  156|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   196k|                scn::runtime_format(f));
  158|   196k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 159k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   159k|            it = result->begin();
  162|   159k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   196k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   196k|            auto result = scn::scan<T>(
  170|   196k|                global_locale,
  171|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   196k|                scn::runtime_format(f));
  173|   196k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 159k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   159k|            it = result->begin();
  177|   159k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  38.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  38.4k|            auto result = scn::scan_value<T>(
  185|  38.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  38.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 34.8k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  34.8k|            it = result->begin();
  190|  34.8k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   277k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   277k|            auto result = scn::scan<T>(
  156|   277k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   277k|                scn::runtime_format(f));
  158|   277k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 240k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   240k|            it = result->begin();
  162|   240k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   277k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   277k|            auto result = scn::scan<T>(
  170|   277k|                global_locale,
  171|   277k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   277k|                scn::runtime_format(f));
  173|   277k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 240k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   240k|            it = result->begin();
  177|   240k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  52.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  52.5k|            auto result = scn::scan_value<T>(
  185|  52.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  52.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 48.8k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  48.8k|            it = result->begin();
  190|  48.8k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   226k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   226k|            auto result = scn::scan<T>(
  156|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   226k|                scn::runtime_format(f));
  158|   226k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 189k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   189k|            it = result->begin();
  162|   189k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   226k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   226k|            auto result = scn::scan<T>(
  170|   226k|                global_locale,
  171|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   226k|                scn::runtime_format(f));
  173|   226k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 189k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   189k|            it = result->begin();
  177|   189k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  41.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  41.7k|            auto result = scn::scan_value<T>(
  185|  41.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  41.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 38.1k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  38.1k|            it = result->begin();
  190|  38.1k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   280k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   280k|            auto result = scn::scan<T>(
  156|   280k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   280k|                scn::runtime_format(f));
  158|   280k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 244k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   244k|            it = result->begin();
  162|   244k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   280k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   280k|            auto result = scn::scan<T>(
  170|   280k|                global_locale,
  171|   280k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   280k|                scn::runtime_format(f));
  173|   280k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 244k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   244k|            it = result->begin();
  177|   244k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  53.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  53.1k|            auto result = scn::scan_value<T>(
  185|  53.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  53.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 49.4k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  49.4k|            it = result->begin();
  190|  49.4k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|   227k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   227k|            auto result = scn::scan<T>(
  156|   227k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   227k|                scn::runtime_format(f));
  158|   227k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 191k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|   191k|            it = result->begin();
  162|   191k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|   227k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   227k|            auto result = scn::scan<T>(
  170|   227k|                global_locale,
  171|   227k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   227k|                scn::runtime_format(f));
  173|   227k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 191k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|   191k|            it = result->begin();
  177|   191k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  42.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  42.0k|            auto result = scn::scan_value<T>(
  185|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  42.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 38.3k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  38.3k|            it = result->begin();
  190|  38.3k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  51.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  51.3k|            auto result = scn::scan<T>(
  156|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.3k|                scn::runtime_format(f));
  158|  51.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 14.6k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  14.6k|            it = result->begin();
  162|  14.6k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  51.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  51.3k|            auto result = scn::scan<T>(
  170|  51.3k|                global_locale,
  171|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  51.3k|                scn::runtime_format(f));
  173|  51.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 14.6k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  14.6k|            it = result->begin();
  177|  14.6k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  55.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  55.0k|            auto result = scn::scan<T>(
  156|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  55.0k|                scn::runtime_format(f));
  158|  55.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 18.3k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  18.3k|            it = result->begin();
  162|  18.3k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  55.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  55.0k|            auto result = scn::scan<T>(
  170|  55.0k|                global_locale,
  171|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  55.0k|                scn::runtime_format(f));
  173|  55.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 18.3k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  18.3k|            it = result->begin();
  177|  18.3k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  55.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  55.0k|            auto result = scn::scan<T>(
  156|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  55.0k|                scn::runtime_format(f));
  158|  55.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 18.3k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  18.3k|            it = result->begin();
  162|  18.3k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  55.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  55.0k|            auto result = scn::scan<T>(
  170|  55.0k|                global_locale,
  171|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  55.0k|                scn::runtime_format(f));
  173|  55.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 18.3k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  18.3k|            it = result->begin();
  177|  18.3k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  55.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  55.0k|            auto result = scn::scan<T>(
  156|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  55.0k|                scn::runtime_format(f));
  158|  55.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 18.3k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  18.3k|            it = result->begin();
  162|  18.3k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  55.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  55.0k|            auto result = scn::scan<T>(
  170|  55.0k|                global_locale,
  171|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  55.0k|                scn::runtime_format(f));
  173|  55.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 18.3k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  18.3k|            it = result->begin();
  177|  18.3k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  55.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  55.0k|            auto result = scn::scan<T>(
  156|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  55.0k|                scn::runtime_format(f));
  158|  55.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 18.3k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  18.3k|            it = result->begin();
  162|  18.3k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  55.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  55.0k|            auto result = scn::scan<T>(
  170|  55.0k|                global_locale,
  171|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  55.0k|                scn::runtime_format(f));
  173|  55.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 18.3k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  18.3k|            it = result->begin();
  177|  18.3k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.66k|{
  151|       |    // Regular scan
  152|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.6k, False: 3.66k]
  ------------------
  153|  36.6k|        auto it = scn::ranges::begin(source);
  154|  55.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  55.0k|            auto result = scn::scan<T>(
  156|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  55.0k|                scn::runtime_format(f));
  158|  55.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.6k, False: 18.3k]
  ------------------
  159|  36.6k|                break;
  160|  36.6k|            }
  161|  18.3k|            it = result->begin();
  162|  18.3k|        }
  163|  36.6k|    }
  164|       |
  165|       |    // scan localized
  166|  36.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.6k, False: 3.66k]
  ------------------
  167|  36.6k|        auto it = scn::ranges::begin(source);
  168|  55.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  55.0k|            auto result = scn::scan<T>(
  170|  55.0k|                global_locale,
  171|  55.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  55.0k|                scn::runtime_format(f));
  173|  55.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.6k, False: 18.3k]
  ------------------
  174|  36.6k|                break;
  175|  36.6k|            }
  176|  18.3k|            it = result->begin();
  177|  18.3k|        }
  178|  36.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.66k|    {
  182|  3.66k|        auto it = scn::ranges::begin(source);
  183|  7.33k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.33k|            auto result = scn::scan_value<T>(
  185|  7.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.33k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.66k, False: 3.66k]
  ------------------
  187|  3.66k|                break;
  188|  3.66k|            }
  189|  3.66k|            it = result->begin();
  190|  3.66k|        }
  191|  3.66k|    }
  192|  3.66k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.66k|{
  109|  3.66k|    using char_type = ranges::range_value_t<Source>;
  110|  3.66k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.66k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.66k|              std::back_inserter(deque));
  113|  3.66k|    return deque;
  114|  3.66k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.66k|{
   98|  3.66k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.66k|        return noncontiguous_buffer;
  100|  3.66k|    }
  101|  3.66k|    else {
  102|  3.66k|        return wnoncontiguous_buffer;
  103|  3.66k|    }
  104|  3.66k|}

LLVMFuzzerTestOneInput:
   59|  2.10k|{
   60|  2.10k|    scn::fuzz::run({data, size});
   61|  2.10k|    return 0;
   62|  2.10k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.10k|{
   36|  2.10k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.10k]
  |  Branch (36:42): [True: 0, False: 2.10k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.10k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.10k|    auto f =
   43|  2.10k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.10k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.10k|    do_basic_run(sv, f);
   46|       |
   47|  2.10k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.10k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.10k|                                          L"{:'}", L"{:'L}");
   50|  2.10k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.10k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.56k, False: 537]
  ------------------
   52|  1.56k|        do_basic_run(wsv_transcode, wf);
   53|  1.56k|    }
   54|  2.10k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.10k|{
   25|  2.10k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.10k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.10k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.10k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.10k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.10k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.10k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.10k|{
   25|  2.10k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.10k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.10k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.10k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.10k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.10k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.10k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.66k|{
   25|  3.66k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.66k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.66k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.66k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.66k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.66k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.66k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.66k|{
   25|  3.66k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.66k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.66k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.66k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.66k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.66k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.66k|}

