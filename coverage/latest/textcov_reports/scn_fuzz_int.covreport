_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|   112k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  1.91k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  6.09k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  6.09k|  return idx < lenminusstep;
   70|  6.09k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  4.18k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  4.18k|  return &buf[idx];
   75|  4.18k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  6.09k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  6.09k|  idx += STEP_SIZE;
   88|  6.09k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  1.91k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  1.91k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 1.91k]
  ------------------
   80|  1.91k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  1.91k|  std::memcpy(dst, buf + idx, len - idx);
   82|  1.91k|  return len - idx;
   83|  1.91k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.51k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.51k|    size_t pos = 0;
   12|  1.51k|    size_t count = 0;
   13|  5.10k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 3.58k, False: 1.51k]
  ------------------
   14|  3.58k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  3.58k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  3.58k|      count += count_ones(utf8_continuation_mask);
   17|  3.58k|    }
   18|  1.51k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.51k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   107k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   107k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   107k|      size_t pos = 0;
  131|   107k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|   107k|      size_t leading_byte = 0;
  139|   107k|      size_t margin = size;
  140|   261k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 153k, False: 107k]
  |  Branch (140:27): [True: 153k, False: 0]
  ------------------
  141|   153k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   153k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   107k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   107k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 107k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   107k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 107k]
  ------------------
  195|   107k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 107k, False: 0]
  ------------------
  196|   107k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   107k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 3.64k, False: 103k]
  ------------------
  198|   103k|        utf32_output += howmany;
  199|   103k|      }
  200|   103k|      return utf32_output - start;
  201|   107k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   107k|    simdutf_really_inline bool errors() const {
  291|   107k|      return this->error.any_bits_set_anywhere();
  292|   107k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.51k|    char32_t* utf32_output) noexcept {
   13|  1.51k|  size_t pos = 0;
   14|  1.51k|  char32_t* start{utf32_output};
   15|  1.51k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  5.04k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 3.52k, False: 1.51k]
  ------------------
   17|  3.52k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  3.52k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 2.63k, False: 892]
  ------------------
   19|  2.63k|      in.store_ascii_as_utf32(utf32_output);
   20|  2.63k|      utf32_output += 64;
   21|  2.63k|      pos += 64;
   22|  2.63k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    892|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    892|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    892|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    892|    size_t max_starting_point = (pos + 64) - 12;
   28|  6.52k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.63k, False: 892]
  ------------------
   29|  5.63k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.63k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.63k|      pos += consumed;
   32|  5.63k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.63k|      }
   34|    892|    }
   35|  3.52k|  }
   36|  1.51k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.51k|  return utf32_output - start;
   38|  1.51k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  6.09k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  6.09k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  6.09k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 4.65k, False: 1.44k]
  |  |  ------------------
  ------------------
  154|  4.65k|        this->error |= this->prev_incomplete;
  155|  4.65k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.44k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.44k|            "We support either two or four chunks per 64-byte block.");
  159|  1.44k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.44k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.44k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.44k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.44k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.44k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.44k|      }
  172|  6.09k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  2.88k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  2.88k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  2.88k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  2.88k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  2.88k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  2.88k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  2.88k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  2.88k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  2.88k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  2.88k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  2.88k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  2.88k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  2.88k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  2.88k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  2.88k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  2.88k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  2.88k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  2.88k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  2.88k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  2.88k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  2.88k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  2.88k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  2.88k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  2.88k|    );
   51|  2.88k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  2.88k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  2.88k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  2.88k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  2.88k|      CARRY,
   59|  2.88k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  2.88k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  2.88k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  2.88k|    );
   80|  2.88k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  2.88k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  2.88k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  2.88k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  2.88k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  2.88k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  2.88k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  2.88k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  2.88k|    );
   96|  2.88k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  2.88k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  2.88k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  2.88k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  2.88k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  2.88k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  2.88k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  2.88k|    return must23_80 ^ sc;
  105|  2.88k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.44k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.44k|    static const uint8_t max_array[32] = {
  115|  1.44k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.44k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.44k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.44k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.44k|    };
  120|  1.44k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.44k|    return input.gt_bits(max_value);
  122|  1.44k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  1.91k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  1.91k|      this->error |= this->prev_incomplete;
  150|  1.91k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  1.91k|    simdutf_really_inline bool errors() const {
  176|  1.91k|      return this->error.any_bits_set_anywhere();
  177|  1.91k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  1.91k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  1.91k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  1.91k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  1.91k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  1.91k|    checker c{};
   12|  1.91k|    buf_block_reader<64> reader(input, length);
   13|  6.09k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 4.18k, False: 1.91k]
  ------------------
   14|  4.18k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  4.18k|      c.check_next_input(in);
   16|  4.18k|      reader.advance();
   17|  4.18k|    }
   18|  1.91k|    uint8_t block[64]{};
   19|  1.91k|    reader.get_remainder(block);
   20|  1.91k|    simd::simd8x64<uint8_t> in(block);
   21|  1.91k|    c.check_next_input(in);
   22|  1.91k|    reader.advance();
   23|  1.91k|    c.check_eof();
   24|  1.91k|    return !c.errors();
   25|  1.91k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.63k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.63k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.63k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.63k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.63k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.40k, False: 4.23k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.40k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.40k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.40k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.40k|    return 16; // We consumed 16 bytes.
   30|  1.40k|  }
   31|  4.23k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 4.16k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  4.16k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 82, False: 4.08k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     82|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     82|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     82|    const __m128i ascii =
   49|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     82|    const __m128i middlebyte =
   51|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     82|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     82|    const __m128i highbyte =
   54|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     82|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     82|    const __m128i composed =
   57|     82|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     82|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     82|    utf32_output += 4;
   60|     82|    return 12;
   61|     82|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.08k|  const uint8_t idx =
   65|  4.08k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.08k|  const uint8_t consumed =
   67|  4.08k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.08k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.56k, False: 1.51k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.56k|    const __m128i sh =
   75|  2.56k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.56k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.56k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.56k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.56k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.56k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.56k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.56k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.42k, False: 94]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.42k|    const __m128i sh =
   86|  1.42k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.42k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.42k|    const __m128i ascii =
   89|  1.42k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.42k|    const __m128i middlebyte =
   91|  1.42k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.42k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.42k|    const __m128i highbyte =
   94|  1.42k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.42k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.42k|    const __m128i composed =
   97|  1.42k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.42k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.42k|    utf32_output += 4;
  100|  1.42k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 94, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     94|    const __m128i sh =
  103|     94|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     94|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     94|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     94|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     94|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     94|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     94|    const __m128i correct =
  111|     94|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     94|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     94|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     94|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     94|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     94|    const __m128i composed =
  117|     94|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     94|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     94|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     94|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     94|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.08k|  return consumed;
  125|  4.16k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|  1.91k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|  1.91k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|  1.91k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|   107k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|   107k|  utf8_to_utf32::validating_transcoder converter;
  277|   107k|  return converter.convert(buf, len, utf32_output);
  278|   107k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  1.51k|    char32_t* utf32_output) const noexcept {
  287|  1.51k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  1.51k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|  1.51k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|  1.51k|  return utf8::count_code_points(input, length);
  779|  1.51k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  6.09k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  6.09k|  return input.reduce_or().is_ascii();
   25|  6.09k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  2.88k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  2.88k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  2.88k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  2.88k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  2.88k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|   112k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|   112k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|   112k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|   112k|    return active_implementation;
  913|   112k|#endif
  914|   112k|}
_ZN7simdutf26get_default_implementationEv:
  922|   112k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|   112k|  return get_active_implementation();
  924|   112k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|  1.91k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|  1.91k|  return get_default_implementation()->validate_utf8(buf, len);
  930|  1.91k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|   107k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|   107k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|   107k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  1.51k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  1.51k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  1.51k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|  1.51k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|  1.51k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|  1.51k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.51k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.51k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.51k|    size_t counter{0};
  171|  36.4k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 34.8k, False: 1.51k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  34.8k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 34.2k, False: 667]
  ------------------
  174|  34.8k|    }
  175|  1.51k|    return counter;
  176|  1.51k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   107k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   107k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   107k|  size_t pos = 0;
   12|   107k|  char32_t* start{utf32_output};
   13|   211k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 107k, False: 103k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   107k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 107k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   107k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   107k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 81.0k, False: 26.3k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  81.0k|      *utf32_output++ = char32_t(leading_byte);
   34|  81.0k|      pos++;
   35|  81.0k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 8.15k, False: 18.1k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  8.15k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 8.15k]
  ------------------
   38|  8.15k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.03k, False: 7.12k]
  ------------------
   39|       |      // range check
   40|  7.12k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  7.12k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 6.98k]
  |  Branch (41:32): [True: 0, False: 6.98k]
  ------------------
   42|  6.98k|      *utf32_output++ = char32_t(code_point);
   43|  6.98k|      pos += 2;
   44|  18.1k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 16.2k, False: 1.95k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  16.2k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 16.2k]
  ------------------
   47|       |
   48|  16.2k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 586, False: 15.6k]
  ------------------
   49|  15.6k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 456, False: 15.1k]
  ------------------
   50|       |      // range check
   51|  15.1k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  15.1k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  15.1k|                   (data[pos + 2] & 0b00111111);
   54|  15.1k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 15.0k]
  |  Branch (54:33): [True: 0, False: 15.0k]
  ------------------
   55|  15.1k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 282, False: 14.7k]
  |  Branch (55:35): [True: 141, False: 141]
  ------------------
   56|    282|        return 0;
   57|    282|      }
   58|  14.8k|      *utf32_output++ = char32_t(code_point);
   59|  14.8k|      pos += 3;
   60|  14.8k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.95k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.95k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.95k]
  ------------------
   63|  1.95k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 429, False: 1.52k]
  ------------------
   64|  1.52k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 169, False: 1.35k]
  ------------------
   65|  1.35k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.21k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.21k|      uint32_t code_point =
   69|  1.21k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.21k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.21k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 944]
  |  Branch (71:35): [True: 141, False: 803]
  ------------------
   72|    803|      *utf32_output++ = char32_t(code_point);
   73|    803|      pos += 4;
   74|    803|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   107k|  }
   78|   103k|  return utf32_output - start;
   79|   107k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.51k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.51k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.51k|  size_t pos = 0;
   12|  1.51k|  char32_t* start{utf32_output};
   13|  12.3k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 10.8k, False: 1.51k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  10.8k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.66k, False: 5.16k]
  ------------------
   16|  5.66k|      uint64_t v;
   17|  5.66k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.66k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 4.98k, False: 686]
  ------------------
   19|  4.98k|        size_t final_pos = pos + 8;
   20|  44.8k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 39.8k, False: 4.98k]
  ------------------
   21|  39.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  39.8k|          pos++;
   23|  39.8k|        }
   24|  4.98k|        continue;
   25|  4.98k|      }
   26|  5.66k|    }
   27|  5.85k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.85k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.41k, False: 442]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.41k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.41k|      pos++;
   32|  5.41k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 204, False: 238]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    204|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 204]
  ------------------
   35|    204|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    204|      pos += 2;
   37|    238|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 189, False: 49]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    189|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 189]
  ------------------
   40|    189|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    189|      pos += 3;
   42|    189|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 49, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     49|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 49]
  ------------------
   45|     49|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     49|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     49|      *utf32_output++ = char32_t(code_word);
   48|     49|      pos += 4;
   49|     49|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.85k|  }
   54|  1.51k|  return utf32_output - start;
   55|  1.51k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  3.58k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  3.58k|  return _popcnt64(input_num);
   16|  3.58k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  5.73k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  5.73k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  5.73k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  5.73k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  6.09k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  13.6k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  13.6k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  13.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   218k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   218k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   218k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   218k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  6.09k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  6.09k|      return this->chunks[0] | this->chunks[1];
  297|  6.09k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  18.4k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   356k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  6.09k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  9.45k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  2.88k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.88k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.88k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  5.77k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  8.66k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  8.66k|      return lookup_16(simd8<L>::repeat_16(
  140|  8.66k|        replace0,  replace1,  replace2,  replace3,
  141|  8.66k|        replace4,  replace5,  replace6,  replace7,
  142|  8.66k|        replace8,  replace9,  replace10, replace11,
  143|  8.66k|        replace12, replace13, replace14, replace15
  144|  8.66k|      ));
  145|  8.66k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  8.66k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  8.66k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  8.66k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  11.5k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  8.66k|    ) {
  218|  8.66k|      return simd8<uint8_t>(
  219|  8.66k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  8.66k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  8.66k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  8.66k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  8.66k|      );
  224|  8.66k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  8.66k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  17.3k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   124k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   124k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  2.88k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.88k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.88k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  2.88k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.88k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.88k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  7.22k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  11.8k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  11.8k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  11.8k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  2.88k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  2.88k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.44k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.44k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   109k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   109k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  7.11k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  14.2k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  14.2k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  14.2k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  22.2k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  22.2k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  22.2k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  22.2k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  3.52k|    simdutf_really_inline bool is_ascii() const {
  300|  3.52k|      return this->reduce_or().is_ascii();
  301|  3.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  3.52k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  3.52k|      return this->chunks[0] | this->chunks[1];
  297|  3.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  3.52k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  49.5k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  3.52k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    892|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    892|      const simd8<T> mask = simd8<T>::splat(m);
  364|    892|      return  simd8x64<bool>(
  365|    892|        this->chunks[0] < mask,
  366|    892|        this->chunks[1] < mask
  367|    892|      ).to_bitmask();
  368|    892|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  4.47k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.78k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  4.47k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  4.47k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  4.47k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  4.47k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  4.47k|      return r_lo | (r_hi << 32);
  287|  4.47k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  8.95k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  8.95k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  2.63k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  2.63k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  2.63k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  2.63k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  5.27k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  5.27k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  5.27k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  5.27k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  5.27k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  5.27k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  3.58k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  3.58k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  3.58k|      return  simd8x64<bool>(
  373|  3.58k|        this->chunks[0] > mask,
  374|  3.58k|        this->chunks[1] > mask
  375|  3.58k|      ).to_bitmask();
  376|  3.58k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  7.16k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   394k|{
  622|   394k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   394k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   394k|    static_cast<    \
  |  |  251|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   394k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  389|   889k|{
  390|   889k|    static_assert(
  391|   889k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|   889k|        "Scan argument types must be default constructible");
  393|   889k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|   889k|                  "Scan argument types must be Destructible");
  395|   889k|    static_assert(
  396|   889k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|   889k|        "Scan argument types must not be references");
  398|   889k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  566|   394k|    {
  567|   394k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   394k|    {
  577|   394k|        return {
  578|   394k|            detail::make_arg<base::is_packed, Context,
  579|   394k|                             detail::mapped_type_constant<
  580|   394k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   394k|                args)...};
  582|   394k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  417|   394k|{
  418|   394k|    return make_value<Context>(value);
  419|   394k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  374|   434k|{
  375|   434k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   434k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   434k|                                  needs_context_tag>) {
  379|   434k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   434k|    }
  381|   434k|    else {
  382|   434k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   434k|            value, context_tag<Context>{}));
  384|   434k|    }
  385|   434k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  219|   434k|    {                                                                        \
  220|   434k|        return val;                                                          \
  221|   434k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  343|   889k|{
  344|   889k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|   889k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|   889k|    constexpr bool scannable_char =
  348|   889k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|   889k|    static_assert(scannable_char,
  350|   889k|                  "Cannot scan an argument of an unsupported character "
  351|   889k|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|   889k|    constexpr bool scannable_const =
  354|   889k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|   889k|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|   889k|    constexpr bool scannable_disabled =
  358|   889k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|   889k|    static_assert(scannable_disabled,
  360|   889k|                  "Cannot scan an argument that has been disabled by "
  361|   889k|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|   889k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|   889k|    static_assert(
  365|   889k|        scannable,
  366|   889k|        "Cannot scan an argument. To make a type T scannable, provide "
  367|   889k|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|   889k|    return arg_value{arg};
  370|   889k|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|   889k|    {
  160|   889k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   394k|    {
  650|   394k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  696|  2.68M|    {
  697|  2.68M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  556|   318k|    {
  557|   318k|        return m_args;
  558|   318k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  402|  39.3k|{
  403|  39.3k|    check_scan_arg_types<T>();
  404|       |
  405|  39.3k|    basic_scan_arg<Context> arg;
  406|  39.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  39.3k|    arg.m_value = make_value<Context>(value);
  408|  39.3k|    return arg;
  409|  39.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  479|  2.93M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  5.96M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   378k|{
  622|   378k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   378k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   378k|    static_cast<    \
  |  |  251|   378k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   378k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  389|   854k|{
  390|   854k|    static_assert(
  391|   854k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|   854k|        "Scan argument types must be default constructible");
  393|   854k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|   854k|                  "Scan argument types must be Destructible");
  395|   854k|    static_assert(
  396|   854k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|   854k|        "Scan argument types must not be references");
  398|   854k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  566|   378k|    {
  567|   378k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   378k|    {
  577|   378k|        return {
  578|   378k|            detail::make_arg<base::is_packed, Context,
  579|   378k|                             detail::mapped_type_constant<
  580|   378k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   378k|                args)...};
  582|   378k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  417|   378k|{
  418|   378k|    return make_value<Context>(value);
  419|   378k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  374|   414k|{
  375|   414k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   414k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   414k|                                  needs_context_tag>) {
  379|   414k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   414k|    }
  381|   414k|    else {
  382|   414k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   414k|            value, context_tag<Context>{}));
  384|   414k|    }
  385|   414k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  219|   414k|    {                                                                        \
  220|   414k|        return val;                                                          \
  221|   414k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  343|   854k|{
  344|   854k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|   854k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|   854k|    constexpr bool scannable_char =
  348|   854k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|   854k|    static_assert(scannable_char,
  350|   854k|                  "Cannot scan an argument of an unsupported character "
  351|   854k|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|   854k|    constexpr bool scannable_const =
  354|   854k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|   854k|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|   854k|    constexpr bool scannable_disabled =
  358|   854k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|   854k|    static_assert(scannable_disabled,
  360|   854k|                  "Cannot scan an argument that has been disabled by "
  361|   854k|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|   854k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|   854k|    static_assert(
  365|   854k|        scannable,
  366|   854k|        "Cannot scan an argument. To make a type T scannable, provide "
  367|   854k|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|   854k|    return arg_value{arg};
  370|   854k|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|   854k|    {
  160|   854k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   378k|    {
  650|   378k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  556|   301k|    {
  557|   301k|        return m_args;
  558|   301k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  402|  35.6k|{
  403|  35.6k|    check_scan_arg_types<T>();
  404|       |
  405|  35.6k|    basic_scan_arg<Context> arg;
  406|  35.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  35.6k|    arg.m_value = make_value<Context>(value);
  408|  35.6k|    return arg;
  409|  35.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   508k|{
  622|   508k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   508k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   508k|    static_cast<    \
  |  |  251|   508k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   508k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  389|  1.11M|{
  390|  1.11M|    static_assert(
  391|  1.11M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|  1.11M|        "Scan argument types must be default constructible");
  393|  1.11M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|  1.11M|                  "Scan argument types must be Destructible");
  395|  1.11M|    static_assert(
  396|  1.11M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|  1.11M|        "Scan argument types must not be references");
  398|  1.11M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  566|   508k|    {
  567|   508k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   508k|    {
  577|   508k|        return {
  578|   508k|            detail::make_arg<base::is_packed, Context,
  579|   508k|                             detail::mapped_type_constant<
  580|   508k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   508k|                args)...};
  582|   508k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  417|   508k|{
  418|   508k|    return make_value<Context>(value);
  419|   508k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  374|   556k|{
  375|   556k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   556k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   556k|                                  needs_context_tag>) {
  379|   556k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   556k|    }
  381|   556k|    else {
  382|   556k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   556k|            value, context_tag<Context>{}));
  384|   556k|    }
  385|   556k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  219|   556k|    {                                                                        \
  220|   556k|        return val;                                                          \
  221|   556k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  343|  1.11M|{
  344|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|  1.11M|    constexpr bool scannable_char =
  348|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|  1.11M|    static_assert(scannable_char,
  350|  1.11M|                  "Cannot scan an argument of an unsupported character "
  351|  1.11M|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|  1.11M|    constexpr bool scannable_const =
  354|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|  1.11M|    constexpr bool scannable_disabled =
  358|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|  1.11M|    static_assert(scannable_disabled,
  360|  1.11M|                  "Cannot scan an argument that has been disabled by "
  361|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|  1.11M|    static_assert(
  365|  1.11M|        scannable,
  366|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
  367|  1.11M|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|  1.11M|    return arg_value{arg};
  370|  1.11M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.11M|    {
  160|  1.11M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   508k|    {
  650|   508k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  556|   432k|    {
  557|   432k|        return m_args;
  558|   432k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  402|  48.1k|{
  403|  48.1k|    check_scan_arg_types<T>();
  404|       |
  405|  48.1k|    basic_scan_arg<Context> arg;
  406|  48.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  48.1k|    arg.m_value = make_value<Context>(value);
  408|  48.1k|    return arg;
  409|  48.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   437k|{
  622|   437k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   437k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   437k|    static_cast<    \
  |  |  251|   437k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   437k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  389|   980k|{
  390|   980k|    static_assert(
  391|   980k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|   980k|        "Scan argument types must be default constructible");
  393|   980k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|   980k|                  "Scan argument types must be Destructible");
  395|   980k|    static_assert(
  396|   980k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|   980k|        "Scan argument types must not be references");
  398|   980k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  566|   437k|    {
  567|   437k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   437k|    {
  577|   437k|        return {
  578|   437k|            detail::make_arg<base::is_packed, Context,
  579|   437k|                             detail::mapped_type_constant<
  580|   437k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   437k|                args)...};
  582|   437k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  417|   437k|{
  418|   437k|    return make_value<Context>(value);
  419|   437k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  374|   478k|{
  375|   478k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   478k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   478k|                                  needs_context_tag>) {
  379|   478k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   478k|    }
  381|   478k|    else {
  382|   478k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   478k|            value, context_tag<Context>{}));
  384|   478k|    }
  385|   478k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  219|   478k|    {                                                                        \
  220|   478k|        return val;                                                          \
  221|   478k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  343|   980k|{
  344|   980k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|   980k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|   980k|    constexpr bool scannable_char =
  348|   980k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|   980k|    static_assert(scannable_char,
  350|   980k|                  "Cannot scan an argument of an unsupported character "
  351|   980k|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|   980k|    constexpr bool scannable_const =
  354|   980k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|   980k|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|   980k|    constexpr bool scannable_disabled =
  358|   980k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|   980k|    static_assert(scannable_disabled,
  360|   980k|                  "Cannot scan an argument that has been disabled by "
  361|   980k|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|   980k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|   980k|    static_assert(
  365|   980k|        scannable,
  366|   980k|        "Cannot scan an argument. To make a type T scannable, provide "
  367|   980k|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|   980k|    return arg_value{arg};
  370|   980k|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|   980k|    {
  160|   980k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   437k|    {
  650|   437k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  556|   361k|    {
  557|   361k|        return m_args;
  558|   361k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  402|  41.1k|{
  403|  41.1k|    check_scan_arg_types<T>();
  404|       |
  405|  41.1k|    basic_scan_arg<Context> arg;
  406|  41.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  41.1k|    arg.m_value = make_value<Context>(value);
  408|  41.1k|    return arg;
  409|  41.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   520k|{
  622|   520k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   520k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   520k|    static_cast<    \
  |  |  251|   520k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   520k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  389|  1.13M|{
  390|  1.13M|    static_assert(
  391|  1.13M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|  1.13M|        "Scan argument types must be default constructible");
  393|  1.13M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|  1.13M|                  "Scan argument types must be Destructible");
  395|  1.13M|    static_assert(
  396|  1.13M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|  1.13M|        "Scan argument types must not be references");
  398|  1.13M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  566|   520k|    {
  567|   520k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   520k|    {
  577|   520k|        return {
  578|   520k|            detail::make_arg<base::is_packed, Context,
  579|   520k|                             detail::mapped_type_constant<
  580|   520k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   520k|                args)...};
  582|   520k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  417|   520k|{
  418|   520k|    return make_value<Context>(value);
  419|   520k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  374|   569k|{
  375|   569k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   569k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   569k|                                  needs_context_tag>) {
  379|   569k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   569k|    }
  381|   569k|    else {
  382|   569k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   569k|            value, context_tag<Context>{}));
  384|   569k|    }
  385|   569k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  219|   569k|    {                                                                        \
  220|   569k|        return val;                                                          \
  221|   569k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  343|  1.13M|{
  344|  1.13M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|  1.13M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|  1.13M|    constexpr bool scannable_char =
  348|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|  1.13M|    static_assert(scannable_char,
  350|  1.13M|                  "Cannot scan an argument of an unsupported character "
  351|  1.13M|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|  1.13M|    constexpr bool scannable_const =
  354|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|  1.13M|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|  1.13M|    constexpr bool scannable_disabled =
  358|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|  1.13M|    static_assert(scannable_disabled,
  360|  1.13M|                  "Cannot scan an argument that has been disabled by "
  361|  1.13M|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|  1.13M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|  1.13M|    static_assert(
  365|  1.13M|        scannable,
  366|  1.13M|        "Cannot scan an argument. To make a type T scannable, provide "
  367|  1.13M|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|  1.13M|    return arg_value{arg};
  370|  1.13M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.13M|    {
  160|  1.13M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   520k|    {
  650|   520k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  556|   443k|    {
  557|   443k|        return m_args;
  558|   443k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  402|  49.2k|{
  403|  49.2k|    check_scan_arg_types<T>();
  404|       |
  405|  49.2k|    basic_scan_arg<Context> arg;
  406|  49.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  49.2k|    arg.m_value = make_value<Context>(value);
  408|  49.2k|    return arg;
  409|  49.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   441k|{
  622|   441k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   441k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   441k|    static_cast<    \
  |  |  251|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   441k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  389|   988k|{
  390|   988k|    static_assert(
  391|   988k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  392|   988k|        "Scan argument types must be default constructible");
  393|   988k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  394|   988k|                  "Scan argument types must be Destructible");
  395|   988k|    static_assert(
  396|   988k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  397|   988k|        "Scan argument types must not be references");
  398|   988k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  566|   441k|    {
  567|   441k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   441k|    {
  577|   441k|        return {
  578|   441k|            detail::make_arg<base::is_packed, Context,
  579|   441k|                             detail::mapped_type_constant<
  580|   441k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   441k|                args)...};
  582|   441k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  417|   441k|{
  418|   441k|    return make_value<Context>(value);
  419|   441k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  374|   483k|{
  375|   483k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   483k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   483k|                                  needs_context_tag>) {
  379|   483k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   483k|    }
  381|   483k|    else {
  382|   483k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   483k|            value, context_tag<Context>{}));
  384|   483k|    }
  385|   483k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  219|   483k|    {                                                                        \
  220|   483k|        return val;                                                          \
  221|   483k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  343|   988k|{
  344|   988k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  345|   988k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  346|       |
  347|   988k|    constexpr bool scannable_char =
  348|   988k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  349|   988k|    static_assert(scannable_char,
  350|   988k|                  "Cannot scan an argument of an unsupported character "
  351|   988k|                  "type (i.e. char from a wchar_t source)");
  352|       |
  353|   988k|    constexpr bool scannable_const =
  354|   988k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  355|   988k|    static_assert(scannable_const, "Cannot scan a const argument");
  356|       |
  357|   988k|    constexpr bool scannable_disabled =
  358|   988k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  359|   988k|    static_assert(scannable_disabled,
  360|   988k|                  "Cannot scan an argument that has been disabled by "
  361|   988k|                  "flag (SCN_DISABLE_TYPE_*)");
  362|       |
  363|   988k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  364|   988k|    static_assert(
  365|   988k|        scannable,
  366|   988k|        "Cannot scan an argument. To make a type T scannable, provide "
  367|   988k|        "a scn::scanner<T, CharT> specialization.");
  368|       |
  369|   988k|    return arg_value{arg};
  370|   988k|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|   988k|    {
  160|   988k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   441k|    {
  650|   441k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  556|   365k|    {
  557|   365k|        return m_args;
  558|   365k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  402|  41.4k|{
  403|  41.4k|    check_scan_arg_types<T>();
  404|       |
  405|  41.4k|    basic_scan_arg<Context> arg;
  406|  41.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  41.4k|    arg.m_value = make_value<Context>(value);
  408|  41.4k|    return arg;
  409|  41.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   417k|{
  622|   417k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   417k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   417k|    static_cast<    \
  |  |  251|   417k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   417k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  566|   417k|    {
  567|   417k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   417k|    {
  577|   417k|        return {
  578|   417k|            detail::make_arg<base::is_packed, Context,
  579|   417k|                             detail::mapped_type_constant<
  580|   417k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   417k|                args)...};
  582|   417k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  417|   417k|{
  418|   417k|    return make_value<Context>(value);
  419|   417k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  374|   455k|{
  375|   455k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   455k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   455k|                                  needs_context_tag>) {
  379|   455k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   455k|    }
  381|   455k|    else {
  382|   455k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   455k|            value, context_tag<Context>{}));
  384|   455k|    }
  385|   455k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  219|   455k|    {                                                                        \
  220|   455k|        return val;                                                          \
  221|   455k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   417k|    {
  650|   417k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  696|  2.78M|    {
  697|  2.78M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  556|   280k|    {
  557|   280k|        return m_args;
  558|   280k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  402|  38.2k|{
  403|  38.2k|    check_scan_arg_types<T>();
  404|       |
  405|  38.2k|    basic_scan_arg<Context> arg;
  406|  38.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  38.2k|    arg.m_value = make_value<Context>(value);
  408|  38.2k|    return arg;
  409|  38.2k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  479|  3.03M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   404k|{
  622|   404k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   404k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   404k|    static_cast<    \
  |  |  251|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   404k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  566|   404k|    {
  567|   404k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   404k|    {
  577|   404k|        return {
  578|   404k|            detail::make_arg<base::is_packed, Context,
  579|   404k|                             detail::mapped_type_constant<
  580|   404k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   404k|                args)...};
  582|   404k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  417|   404k|{
  418|   404k|    return make_value<Context>(value);
  419|   404k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  374|   440k|{
  375|   440k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   440k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   440k|                                  needs_context_tag>) {
  379|   440k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   440k|    }
  381|   440k|    else {
  382|   440k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   440k|            value, context_tag<Context>{}));
  384|   440k|    }
  385|   440k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  219|   440k|    {                                                                        \
  220|   440k|        return val;                                                          \
  221|   440k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   404k|    {
  650|   404k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  556|   267k|    {
  557|   267k|        return m_args;
  558|   267k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  402|  35.1k|{
  403|  35.1k|    check_scan_arg_types<T>();
  404|       |
  405|  35.1k|    basic_scan_arg<Context> arg;
  406|  35.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  35.1k|    arg.m_value = make_value<Context>(value);
  408|  35.1k|    return arg;
  409|  35.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   513k|{
  622|   513k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   513k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   513k|    static_cast<    \
  |  |  251|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   513k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  566|   513k|    {
  567|   513k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   513k|    {
  577|   513k|        return {
  578|   513k|            detail::make_arg<base::is_packed, Context,
  579|   513k|                             detail::mapped_type_constant<
  580|   513k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   513k|                args)...};
  582|   513k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  417|   513k|{
  418|   513k|    return make_value<Context>(value);
  419|   513k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  374|   558k|{
  375|   558k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   558k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   558k|                                  needs_context_tag>) {
  379|   558k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   558k|    }
  381|   558k|    else {
  382|   558k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   558k|            value, context_tag<Context>{}));
  384|   558k|    }
  385|   558k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  219|   558k|    {                                                                        \
  220|   558k|        return val;                                                          \
  221|   558k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   513k|    {
  650|   513k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  556|   376k|    {
  557|   376k|        return m_args;
  558|   376k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  402|  45.5k|{
  403|  45.5k|    check_scan_arg_types<T>();
  404|       |
  405|  45.5k|    basic_scan_arg<Context> arg;
  406|  45.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  45.5k|    arg.m_value = make_value<Context>(value);
  408|  45.5k|    return arg;
  409|  45.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   460k|{
  622|   460k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   460k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   460k|    static_cast<    \
  |  |  251|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   460k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  566|   460k|    {
  567|   460k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   460k|    {
  577|   460k|        return {
  578|   460k|            detail::make_arg<base::is_packed, Context,
  579|   460k|                             detail::mapped_type_constant<
  580|   460k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   460k|                args)...};
  582|   460k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  417|   460k|{
  418|   460k|    return make_value<Context>(value);
  419|   460k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  374|   501k|{
  375|   501k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   501k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   501k|                                  needs_context_tag>) {
  379|   501k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   501k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   501k|    }
  381|   501k|    else {
  382|   501k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   501k|            value, context_tag<Context>{}));
  384|   501k|    }
  385|   501k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  219|   501k|    {                                                                        \
  220|   501k|        return val;                                                          \
  221|   501k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   460k|    {
  650|   460k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  556|   323k|    {
  557|   323k|        return m_args;
  558|   323k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  402|  40.4k|{
  403|  40.4k|    check_scan_arg_types<T>();
  404|       |
  405|  40.4k|    basic_scan_arg<Context> arg;
  406|  40.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  40.4k|    arg.m_value = make_value<Context>(value);
  408|  40.4k|    return arg;
  409|  40.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   522k|{
  622|   522k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   522k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   522k|    static_cast<    \
  |  |  251|   522k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   522k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  566|   522k|    {
  567|   522k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   522k|    {
  577|   522k|        return {
  578|   522k|            detail::make_arg<base::is_packed, Context,
  579|   522k|                             detail::mapped_type_constant<
  580|   522k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   522k|                args)...};
  582|   522k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  417|   522k|{
  418|   522k|    return make_value<Context>(value);
  419|   522k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  374|   569k|{
  375|   569k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   569k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   569k|                                  needs_context_tag>) {
  379|   569k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   569k|    }
  381|   569k|    else {
  382|   569k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   569k|            value, context_tag<Context>{}));
  384|   569k|    }
  385|   569k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  219|   569k|    {                                                                        \
  220|   569k|        return val;                                                          \
  221|   569k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   522k|    {
  650|   522k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  556|   385k|    {
  557|   385k|        return m_args;
  558|   385k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  402|  46.3k|{
  403|  46.3k|    check_scan_arg_types<T>();
  404|       |
  405|  46.3k|    basic_scan_arg<Context> arg;
  406|  46.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  46.3k|    arg.m_value = make_value<Context>(value);
  408|  46.3k|    return arg;
  409|  46.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  621|   464k|{
  622|   464k|    detail::check_scan_arg_types<Args...>();
  623|       |
  624|   464k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   464k|    static_cast<    \
  |  |  251|   464k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  625|   464k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  566|   464k|    {
  567|   464k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  576|   464k|    {
  577|   464k|        return {
  578|   464k|            detail::make_arg<base::is_packed, Context,
  579|   464k|                             detail::mapped_type_constant<
  580|   464k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  581|   464k|                args)...};
  582|   464k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  417|   464k|{
  418|   464k|    return make_value<Context>(value);
  419|   464k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  374|   505k|{
  375|   505k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  376|       |
  377|   505k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|   505k|                                  needs_context_tag>) {
  379|   505k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  380|   505k|    }
  381|   505k|    else {
  382|   505k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  383|   505k|            value, context_tag<Context>{}));
  384|   505k|    }
  385|   505k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  219|   505k|    {                                                                        \
  220|   505k|        return val;                                                          \
  221|   505k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  649|   464k|    {
  650|   464k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  556|   327k|    {
  557|   327k|        return m_args;
  558|   327k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  402|  40.7k|{
  403|  40.7k|    check_scan_arg_types<T>();
  404|       |
  405|  40.7k|    basic_scan_arg<Context> arg;
  406|  40.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  407|  40.7k|    arg.m_value = make_value<Context>(value);
  408|  40.7k|    return arg;
  409|  40.7k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  684|  2.68M|    {
  685|  2.68M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.68M]
  |  |  ------------------
  ------------------
  686|      0|            return max_size();
  687|      0|        }
  688|       |
  689|  2.68M|        return static_cast<std::size_t>(m_desc &
  690|  2.68M|                                        ((1 << detail::packed_arg_bits) - 1));
  691|  2.68M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  704|  5.36M|    {
  705|  5.36M|        return (m_desc & detail::is_unpacked_bit) == 0;
  706|  5.36M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  657|  2.68M|    {
  658|  2.68M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.68M]
  |  |  ------------------
  ------------------
  659|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  660|      0|                return m_args[id];
  661|      0|            }
  662|      0|            return {};
  663|      0|        }
  664|       |
  665|  2.68M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.68M]
  |  |  ------------------
  ------------------
  666|      0|            return {};
  667|      0|        }
  668|       |
  669|  2.68M|        const auto t = type(id);
  670|  2.68M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.68M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.68M|        basic_scan_arg<Context> arg;
  675|  2.68M|        arg.m_type = t;
  676|  2.68M|        arg.m_value = m_values[id];
  677|  2.68M|        return arg;
  678|  2.68M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  709|  2.68M|    {
  710|       |        // First (0th) index is size, types start after that
  711|  2.68M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  712|  2.68M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  713|  2.68M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  714|  2.68M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  485|  4.97M|    {
  486|  4.97M|        return m_type != detail::arg_type::none_type;
  487|  4.97M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  490|  4.34M|    {
  491|  4.34M|        return m_type;
  492|  4.34M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  684|  2.78M|    {
  685|  2.78M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.78M]
  |  |  ------------------
  ------------------
  686|      0|            return max_size();
  687|      0|        }
  688|       |
  689|  2.78M|        return static_cast<std::size_t>(m_desc &
  690|  2.78M|                                        ((1 << detail::packed_arg_bits) - 1));
  691|  2.78M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  704|  5.56M|    {
  705|  5.56M|        return (m_desc & detail::is_unpacked_bit) == 0;
  706|  5.56M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  657|  2.78M|    {
  658|  2.78M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.78M]
  |  |  ------------------
  ------------------
  659|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  660|      0|                return m_args[id];
  661|      0|            }
  662|      0|            return {};
  663|      0|        }
  664|       |
  665|  2.78M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.78M]
  |  |  ------------------
  ------------------
  666|      0|            return {};
  667|      0|        }
  668|       |
  669|  2.78M|        const auto t = type(id);
  670|  2.78M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.78M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.78M|        basic_scan_arg<Context> arg;
  675|  2.78M|        arg.m_type = t;
  676|  2.78M|        arg.m_value = m_values[id];
  677|  2.78M|        return arg;
  678|  2.78M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  709|  2.78M|    {
  710|       |        // First (0th) index is size, types start after that
  711|  2.78M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  712|  2.78M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  713|  2.78M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  714|  2.78M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  485|  5.07M|    {
  486|  5.07M|        return m_type != detail::arg_type::none_type;
  487|  5.07M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  490|  4.58M|    {
  491|  4.58M|        return m_type;
  492|  4.58M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  637|   255k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  637|   246k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   206k|    {
  109|   206k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.17M|    {
   60|  2.17M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   344k|    {
  124|   344k|        return m_current;
  125|   344k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.17M|    {
   43|  2.17M|        return m_args.get(id);
   44|  2.17M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.03M|    {
   53|  2.03M|        return m_locale;
   54|  2.03M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   137k|    {
  132|   137k|        return ranges_std::default_sentinel;
  133|   137k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   137k|    {
  140|   137k|        return ranges::subrange{begin(), end()};
  141|   137k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   370k|    {
  109|   370k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.29M|    {
   60|  2.29M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   617k|    {
  124|   617k|        return m_current;
  125|   617k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.29M|    {
   43|  2.29M|        return m_args.get(id);
   44|  2.29M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.04M|    {
   53|  2.04M|        return m_locale;
   54|  2.04M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   247k|    {
  132|   247k|        return ranges_std::default_sentinel;
  133|   247k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   247k|    {
  140|   247k|        return ranges::subrange{begin(), end()};
  141|   247k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  1.85M|    {
   69|  1.85M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  1.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  1.85M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  21.2M|    {
   75|  21.2M|        return m_code == good;
   76|  21.2M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   769k|    {
   86|   769k|        return m_code;
   87|   769k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   769k|{
  111|   769k|    return a.code() == b;
  112|   769k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   769k|{
  116|   769k|    return !(a == b);
  117|   769k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  13.0M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   356k|    {
  675|   356k|        return m_str;
  676|   356k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.68M|{
  385|  2.68M|    return s;
  386|  2.68M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.68M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   356k|    {
  671|   356k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   340k|    {
  675|   340k|        return m_str;
  676|   340k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   340k|    {
  671|   340k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   470k|    {
  675|   470k|        return m_str;
  676|   470k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   470k|    {
  671|   470k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   399k|    {
  675|   399k|        return m_str;
  676|   399k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   399k|    {
  671|   399k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   482k|    {
  675|   482k|        return m_str;
  676|   482k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   482k|    {
  671|   482k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   403k|    {
  675|   403k|        return m_str;
  676|   403k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   403k|    {
  671|   403k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.2k|    {
  675|  38.2k|        return m_str;
  676|  38.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.2k|    {
  671|  38.2k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   348k|    {
  675|   348k|        return m_str;
  676|   348k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.78M|{
  390|  2.78M|    return s;
  391|  2.78M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.78M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   348k|    {
  671|   348k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   336k|    {
  675|   336k|        return m_str;
  676|   336k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   336k|    {
  671|   336k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   444k|    {
  675|   444k|        return m_str;
  676|   444k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   444k|    {
  671|   444k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   392k|    {
  675|   392k|        return m_str;
  676|   392k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   392k|    {
  671|   392k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   454k|    {
  675|   454k|        return m_str;
  676|   454k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   454k|    {
  671|   454k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   396k|    {
  675|   396k|        return m_str;
  676|   396k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   396k|    {
  671|   396k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.6k|    {
  675|  68.6k|        return m_str;
  676|  68.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.6k|    {
  671|  68.6k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  4.03M|    {
  196|  4.03M|        SCN_GCC_COMPAT_PUSH
  197|  4.03M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  4.03M|        switch (type) {
  199|   996k|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 996k, False: 3.04M]
  ------------------
  200|  1.99M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 993k, False: 3.04M]
  ------------------
  201|  1.99M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 4.03M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   221k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 221k, False: 3.81M]
  ------------------
  206|   221k|                return 2;
  207|   350k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 350k, False: 3.68M]
  ------------------
  208|   350k|                return 8;
  209|   681k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 681k, False: 3.35M]
  ------------------
  210|   681k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 4.03M]
  ------------------
  211|   681k|                return 10;
  212|   793k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 793k, False: 3.24M]
  ------------------
  213|   793k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 4.03M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  4.03M|        }
  219|  4.03M|        SCN_GCC_COMPAT_POP
  220|  4.03M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  4.46M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.00M|    {
  245|  1.00M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.00M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.00M|            m_specs.localized = true;
  247|  1.00M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.00M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  3.20M|    {
  260|  3.20M|        m_specs.type = type;
  261|  3.20M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   256k|    {
  322|   256k|        SCN_UNLIKELY_ATTR
  323|   256k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   256k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  4.20M|    {
  333|  4.20M|        return static_cast<bool>(m_error);
  334|  4.20M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.00M|{
  987|  1.00M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.00M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   155k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 155k, False: 849k]
  ------------------
  992|   155k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.00M]
  ------------------
  993|   343k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 187k, False: 817k]
  ------------------
  994|   343k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.00M]
  ------------------
  995|   535k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 191k, False: 814k]
  ------------------
  996|   535k|            return arg_type_category::integer;
  997|       |
  998|   142k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 142k, False: 863k]
  ------------------
  999|   142k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.00M]
  ------------------
 1000|   305k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 163k, False: 842k]
  ------------------
 1001|   305k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.00M]
  ------------------
 1002|   470k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 164k, False: 840k]
  ------------------
 1003|   470k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.00M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.00M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.00M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.00M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.00M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.00M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.00M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.00M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.00M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.00M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.00M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.00M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.00M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.00M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|  1.00M|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.00M|            SCN_CLANG_POP
 1034|  1.00M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.00M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.96M|{
  968|  1.96M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.96M|    handler.check_args_exhausted();
  970|  1.96M|    return handler.get_error();
  971|  1.96M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.96M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.96M|    auto begin = format.data();
  937|  1.96M|    auto it = begin;
  938|  1.96M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.72M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.96M, False: 1.75M]
  ------------------
  941|  1.96M|        const auto ch = *it++;
  942|  1.96M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.96M, False: 0]
  ------------------
  943|  1.96M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.96M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.96M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 206k, False: 1.75M]
  ------------------
  947|   206k|                return;
  948|   206k|            }
  949|  1.96M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.96M|    }
  960|       |
  961|  1.75M|    handler.on_literal_text(begin, end);
  962|  1.75M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.96M|{
  866|  1.96M|    struct id_adapter {
  867|  1.96M|        constexpr void operator()()
  868|  1.96M|        {
  869|  1.96M|            arg_id = handler.on_arg_id();
  870|  1.96M|        }
  871|  1.96M|        constexpr void operator()(std::size_t id)
  872|  1.96M|        {
  873|  1.96M|            arg_id = handler.on_arg_id(id);
  874|  1.96M|        }
  875|       |
  876|  1.96M|        constexpr void on_error(const char* msg)
  877|  1.96M|        {
  878|  1.96M|            SCN_UNLIKELY_ATTR
  879|  1.96M|            handler.on_error(msg);
  880|  1.96M|        }
  881|       |
  882|  1.96M|        Handler& handler;
  883|  1.96M|        std::size_t arg_id;
  884|  1.96M|    };
  885|       |
  886|  1.96M|    ++begin;
  887|  1.96M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.96M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.96M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.96M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.96M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.96M|    else {
  899|  1.96M|        auto adapter = id_adapter{handler, 0};
  900|  1.96M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.96M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.96M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.96M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.96M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.96M, False: 0]
  ------------------
  911|  1.96M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.96M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.96M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.8k, False: 1.89M]
  |  |  |  Branch (157:45): [True: 0, False: 1.96M]
  |  |  |  Branch (157:45): [True: 68.8k, False: 1.89M]
  |  |  ------------------
  ------------------
  917|  68.8k|                handler.on_error("Unknown format specifier");
  918|  68.8k|                return begin;
  919|  68.8k|            }
  920|  1.96M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.96M|    }
  927|  1.89M|    return begin + 1;
  928|  1.96M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.96M|{
  400|  1.96M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.96M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.96M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.96M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.96M|    handler();
  406|  1.96M|    return begin;
  407|  1.96M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.96M|        {
  869|  1.96M|            arg_id = handler.on_arg_id();
  870|  1.96M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.96M|    {
 1046|  1.96M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.96M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.96M|{
  795|  1.96M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.96M|        if (*begin == CharT{'['}) {
  797|  1.96M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.96M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.96M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.96M|                return begin;
  803|  1.96M|            }
  804|  1.96M|            handler.on_character_set_string(set);
  805|  1.96M|            return begin;
  806|  1.96M|        }
  807|  1.96M|        if (*begin == CharT{'/'}) {
  808|  1.96M|            return parse_presentation_regex(begin, end, handler);
  809|  1.96M|        }
  810|  1.96M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.96M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.96M|            handler.on_error("Invalid type specifier in format string");
  813|  1.96M|            return begin;
  814|  1.96M|        }
  815|  1.96M|        handler.on_type(type);
  816|  1.96M|        return begin;
  817|  1.96M|    };
  818|       |
  819|  1.96M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.96M, False: 0]
  |  Branch (819:28): [True: 1.91M, False: 45.9k]
  ------------------
  820|  1.96M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.89M, False: 22.9k]
  |  Branch (820:36): [True: 1.40M, False: 488k]
  ------------------
  821|  1.40M|        return do_presentation();
  822|  1.40M|    }
  823|       |
  824|   557k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   557k|    begin = parse_align(begin, end, handler);
  830|   557k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   557k|    begin = parse_width(begin, end, handler);
  836|   557k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   557k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 488k, False: 68.8k]
  ------------------
  842|   488k|        handler.on_localized();
  843|   488k|        ++begin;
  844|   488k|    }
  845|   557k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   557k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 557k, False: 0]
  |  Branch (850:25): [True: 68.8k, False: 488k]
  ------------------
  851|  68.8k|        do_presentation();
  852|  68.8k|    }
  853|   557k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   557k|    return begin;
  859|   557k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.07M|{
  464|  2.07M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.52M, False: 557k]
  |  Branch (464:33): [True: 1.52M, False: 0]
  ------------------
  465|  2.07M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 511k, False: 45.9k]
  |  Branch (465:33): [True: 511k, False: 0]
  ------------------
  466|  2.07M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.47M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.47M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.47M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.47M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.47M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.47M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.47M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 45.9k, False: 1.43M]
  |  |  ------------------
  ------------------
  812|  45.9k|            handler.on_error("Invalid type specifier in format string");
  813|  45.9k|            return begin;
  814|  45.9k|        }
  815|  1.43M|        handler.on_type(type);
  816|  1.43M|        return begin;
  817|  1.47M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.66M|{
  412|  1.66M|    switch (type) {
  413|  95.5k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 95.5k, False: 1.56M]
  ------------------
  414|   141k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 45.9k, False: 1.61M]
  ------------------
  415|   141k|            return presentation_type::int_binary;
  416|   346k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 346k, False: 1.31M]
  ------------------
  417|   346k|            return presentation_type::int_decimal;
  418|   510k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 510k, False: 1.15M]
  ------------------
  419|   510k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.66M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   166k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 166k, False: 1.49M]
  ------------------
  423|   166k|            return presentation_type::int_octal;
  424|   403k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 403k, False: 1.25M]
  ------------------
  425|   403k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.66M]
  ------------------
  426|   403k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.66M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.66M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 1.66M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.66M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 1.66M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.66M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 1.66M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.66M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 1.66M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.66M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.66M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.66M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.66M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.66M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.66M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.66M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  91.8k|        default:
  ------------------
  |  Branch (456:9): [True: 91.8k, False: 1.56M]
  ------------------
  457|  91.8k|            return presentation_type::none;
  458|  1.66M|    }
  459|  1.66M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   557k|{
  489|   557k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   557k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   557k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   557k|    auto check_align = [](wchar_t ch) {
  492|   557k|        switch (ch) {
  493|   557k|            case L'<':
  494|   557k|                return align_type::left;
  495|   557k|            case L'>':
  496|   557k|                return align_type::right;
  497|   557k|            case L'^':
  498|   557k|                return align_type::center;
  499|   557k|            default:
  500|   557k|                return align_type::none;
  501|   557k|        }
  502|   557k|    };
  503|       |
  504|   557k|    auto potential_fill_len = code_point_length(begin, end);
  505|   557k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  |  Branch (157:45): [True: 0, False: 557k]
  |  |  |  Branch (157:45): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  506|   557k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   557k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   557k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   557k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   557k|    const auto begin_before_fill = begin;
  516|   557k|    begin += potential_fill_len;
  517|       |
  518|   557k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 557k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   557k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   557k|    const auto begin_after_fill = begin;
  524|   557k|    ++begin;
  525|       |
  526|   557k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 557k, False: 0]
  ------------------
  527|   557k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   557k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 557k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   557k|    }
  535|       |
  536|   557k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 557k, False: 0]
  ------------------
  537|   557k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 557k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   557k|        return begin_before_fill;
  542|   557k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   557k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   649k|{
  471|   649k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   649k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   649k|        return 1;
  474|   649k|    }
  475|   649k|    else {
  476|   649k|        const auto lengths =
  477|   649k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   649k|            "\3\4";
  479|   649k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   649k|        return len;
  481|   649k|    }
  482|   649k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.11M|    auto check_align = [](wchar_t ch) {
  492|  1.11M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.11M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.11M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.11M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.11M|            default:
  ------------------
  |  Branch (499:13): [True: 1.11M, False: 0]
  ------------------
  500|  1.11M|                return align_type::none;
  501|  1.11M|        }
  502|  1.11M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   557k|{
  554|   557k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   557k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   557k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   557k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 511k, False: 45.9k]
  |  Branch (556:33): [True: 0, False: 511k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   557k|    return begin;
  567|   557k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   488k|    {
 1051|   488k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   488k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 225k, False: 262k]
  ------------------
 1053|   488k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 225k]
  ------------------
 1054|   488k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   488k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   488k|        Handler::on_localized();
 1063|   488k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  4.07M|{
 1073|  4.07M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  157|  4.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.07M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  4.07M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.00M, False: 3.07M]
  ------------------
 1077|  1.00M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.00M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.00M|    }
 1089|  4.07M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   206k|{
  968|   206k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   206k|    handler.check_args_exhausted();
  970|   206k|    return handler.get_error();
  971|   206k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   206k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   206k|    auto begin = format.data();
  937|   206k|    auto it = begin;
  938|   206k|    const auto end = format.data() + format.size();
  939|       |
  940|   206k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 206k, False: 0]
  ------------------
  941|   206k|        const auto ch = *it++;
  942|   206k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 206k, False: 0]
  ------------------
  943|   206k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   206k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   206k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 206k, False: 0]
  ------------------
  947|   206k|                return;
  948|   206k|            }
  949|   206k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   206k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   206k|{
  866|   206k|    struct id_adapter {
  867|   206k|        constexpr void operator()()
  868|   206k|        {
  869|   206k|            arg_id = handler.on_arg_id();
  870|   206k|        }
  871|   206k|        constexpr void operator()(std::size_t id)
  872|   206k|        {
  873|   206k|            arg_id = handler.on_arg_id(id);
  874|   206k|        }
  875|       |
  876|   206k|        constexpr void on_error(const char* msg)
  877|   206k|        {
  878|   206k|            SCN_UNLIKELY_ATTR
  879|   206k|            handler.on_error(msg);
  880|   206k|        }
  881|       |
  882|   206k|        Handler& handler;
  883|   206k|        std::size_t arg_id;
  884|   206k|    };
  885|       |
  886|   206k|    ++begin;
  887|   206k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   206k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 206k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   206k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 206k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   206k|    else {
  899|   206k|        auto adapter = id_adapter{handler, 0};
  900|   206k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   206k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   206k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 206k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   206k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 206k, False: 0]
  ------------------
  911|   206k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   206k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   206k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.8k, False: 137k]
  |  |  |  Branch (157:45): [True: 0, False: 206k]
  |  |  |  Branch (157:45): [True: 68.8k, False: 137k]
  |  |  ------------------
  ------------------
  917|  68.8k|                handler.on_error("Unknown format specifier");
  918|  68.8k|                return begin;
  919|  68.8k|            }
  920|   206k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   206k|    }
  927|   137k|    return begin + 1;
  928|   206k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   206k|{
  400|   206k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   206k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 206k, False: 0]
  |  Branch (401:26): [True: 0, False: 206k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   206k|    handler();
  406|   206k|    return begin;
  407|   206k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   206k|        {
  869|   206k|            arg_id = handler.on_arg_id();
  870|   206k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   206k|    {
 1046|   206k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   206k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   206k|{
  795|   206k|    auto do_presentation = [&]() -> const CharT* {
  796|   206k|        if (*begin == CharT{'['}) {
  797|   206k|            auto set = parse_presentation_set(begin, end, handler);
  798|   206k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   206k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   206k|                return begin;
  803|   206k|            }
  804|   206k|            handler.on_character_set_string(set);
  805|   206k|            return begin;
  806|   206k|        }
  807|   206k|        if (*begin == CharT{'/'}) {
  808|   206k|            return parse_presentation_regex(begin, end, handler);
  809|   206k|        }
  810|   206k|        presentation_type type = parse_presentation_type(*begin++);
  811|   206k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   206k|            handler.on_error("Invalid type specifier in format string");
  813|   206k|            return begin;
  814|   206k|        }
  815|   206k|        handler.on_type(type);
  816|   206k|        return begin;
  817|   206k|    };
  818|       |
  819|   206k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 206k, False: 0]
  |  Branch (819:28): [True: 160k, False: 45.9k]
  ------------------
  820|   206k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 137k, False: 22.9k]
  |  Branch (820:36): [True: 114k, False: 22.9k]
  ------------------
  821|   114k|        return do_presentation();
  822|   114k|    }
  823|       |
  824|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  91.8k|    begin = parse_align(begin, end, handler);
  830|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  91.8k|    begin = parse_width(begin, end, handler);
  836|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  91.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 22.9k, False: 68.8k]
  ------------------
  842|  22.9k|        handler.on_localized();
  843|  22.9k|        ++begin;
  844|  22.9k|    }
  845|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  91.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 91.8k, False: 0]
  |  Branch (850:25): [True: 68.8k, False: 22.9k]
  ------------------
  851|  68.8k|        do_presentation();
  852|  68.8k|    }
  853|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  91.8k|    return begin;
  859|  91.8k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   183k|    auto do_presentation = [&]() -> const CharT* {
  796|   183k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 183k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   183k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 183k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   183k|        presentation_type type = parse_presentation_type(*begin++);
  811|   183k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 45.9k, False: 137k]
  |  |  ------------------
  ------------------
  812|  45.9k|            handler.on_error("Invalid type specifier in format string");
  813|  45.9k|            return begin;
  814|  45.9k|        }
  815|   137k|        handler.on_type(type);
  816|   137k|        return begin;
  817|   183k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  91.8k|{
  489|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  91.8k|    auto check_align = [](wchar_t ch) {
  492|  91.8k|        switch (ch) {
  493|  91.8k|            case L'<':
  494|  91.8k|                return align_type::left;
  495|  91.8k|            case L'>':
  496|  91.8k|                return align_type::right;
  497|  91.8k|            case L'^':
  498|  91.8k|                return align_type::center;
  499|  91.8k|            default:
  500|  91.8k|                return align_type::none;
  501|  91.8k|        }
  502|  91.8k|    };
  503|       |
  504|  91.8k|    auto potential_fill_len = code_point_length(begin, end);
  505|  91.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  |  Branch (157:45): [True: 0, False: 91.8k]
  |  |  |  Branch (157:45): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  506|  91.8k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  91.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  91.8k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  91.8k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  91.8k|    const auto begin_before_fill = begin;
  516|  91.8k|    begin += potential_fill_len;
  517|       |
  518|  91.8k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 91.8k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  91.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  91.8k|    const auto begin_after_fill = begin;
  524|  91.8k|    ++begin;
  525|       |
  526|  91.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 91.8k, False: 0]
  ------------------
  527|  91.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  91.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 91.8k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  91.8k|    }
  535|       |
  536|  91.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 91.8k, False: 0]
  ------------------
  537|  91.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 91.8k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  91.8k|        return begin_before_fill;
  542|  91.8k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  91.8k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   183k|    auto check_align = [](wchar_t ch) {
  492|   183k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 183k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 183k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 183k]
  ------------------
  498|      0|                return align_type::center;
  499|   183k|            default:
  ------------------
  |  Branch (499:13): [True: 183k, False: 0]
  ------------------
  500|   183k|                return align_type::none;
  501|   183k|        }
  502|   183k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  91.8k|{
  554|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  91.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 45.9k, False: 45.9k]
  |  Branch (556:33): [True: 0, False: 45.9k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  91.8k|    return begin;
  567|  91.8k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  22.9k|    {
 1051|  22.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  22.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 11.4k, False: 11.4k]
  ------------------
 1053|  22.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 11.4k]
  ------------------
 1054|  22.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  22.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  22.9k|        Handler::on_localized();
 1063|  22.9k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.92M|{
  968|  1.92M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.92M|    handler.check_args_exhausted();
  970|  1.92M|    return handler.get_error();
  971|  1.92M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.92M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.92M|    auto begin = format.data();
  937|  1.92M|    auto it = begin;
  938|  1.92M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.47M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.92M, False: 1.55M]
  ------------------
  941|  1.92M|        const auto ch = *it++;
  942|  1.92M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.92M, False: 0]
  ------------------
  943|  1.92M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.92M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.92M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 370k, False: 1.55M]
  ------------------
  947|   370k|                return;
  948|   370k|            }
  949|  1.92M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.92M|    }
  960|       |
  961|  1.55M|    handler.on_literal_text(begin, end);
  962|  1.55M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.92M|{
  866|  1.92M|    struct id_adapter {
  867|  1.92M|        constexpr void operator()()
  868|  1.92M|        {
  869|  1.92M|            arg_id = handler.on_arg_id();
  870|  1.92M|        }
  871|  1.92M|        constexpr void operator()(std::size_t id)
  872|  1.92M|        {
  873|  1.92M|            arg_id = handler.on_arg_id(id);
  874|  1.92M|        }
  875|       |
  876|  1.92M|        constexpr void on_error(const char* msg)
  877|  1.92M|        {
  878|  1.92M|            SCN_UNLIKELY_ATTR
  879|  1.92M|            handler.on_error(msg);
  880|  1.92M|        }
  881|       |
  882|  1.92M|        Handler& handler;
  883|  1.92M|        std::size_t arg_id;
  884|  1.92M|    };
  885|       |
  886|  1.92M|    ++begin;
  887|  1.92M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.92M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.92M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.92M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.92M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.92M|    else {
  899|  1.92M|        auto adapter = id_adapter{handler, 0};
  900|  1.92M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.92M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.92M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.92M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.92M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.92M, False: 0]
  ------------------
  911|  1.92M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.92M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.92M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 123k, False: 1.79M]
  |  |  |  Branch (157:45): [True: 0, False: 1.92M]
  |  |  |  Branch (157:45): [True: 123k, False: 1.79M]
  |  |  ------------------
  ------------------
  917|   123k|                handler.on_error("Unknown format specifier");
  918|   123k|                return begin;
  919|   123k|            }
  920|  1.92M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.92M|    }
  927|  1.79M|    return begin + 1;
  928|  1.92M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.92M|{
  400|  1.92M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.92M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.92M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.92M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.92M|    handler();
  406|  1.92M|    return begin;
  407|  1.92M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.92M|        {
  869|  1.92M|            arg_id = handler.on_arg_id();
  870|  1.92M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.92M|    {
 1046|  1.92M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.92M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.92M|{
  795|  1.92M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.92M|        if (*begin == CharT{'['}) {
  797|  1.92M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.92M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.92M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.92M|                return begin;
  803|  1.92M|            }
  804|  1.92M|            handler.on_character_set_string(set);
  805|  1.92M|            return begin;
  806|  1.92M|        }
  807|  1.92M|        if (*begin == CharT{'/'}) {
  808|  1.92M|            return parse_presentation_regex(begin, end, handler);
  809|  1.92M|        }
  810|  1.92M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.92M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.92M|            handler.on_error("Invalid type specifier in format string");
  813|  1.92M|            return begin;
  814|  1.92M|        }
  815|  1.92M|        handler.on_type(type);
  816|  1.92M|        return begin;
  817|  1.92M|    };
  818|       |
  819|  1.92M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.92M, False: 0]
  |  Branch (819:28): [True: 1.83M, False: 82.3k]
  ------------------
  820|  1.92M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.79M, False: 41.1k]
  |  Branch (820:36): [True: 1.34M, False: 453k]
  ------------------
  821|  1.34M|        return do_presentation();
  822|  1.34M|    }
  823|       |
  824|   576k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   576k|    begin = parse_align(begin, end, handler);
  830|   576k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   576k|    begin = parse_width(begin, end, handler);
  836|   576k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   576k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 453k, False: 123k]
  ------------------
  842|   453k|        handler.on_localized();
  843|   453k|        ++begin;
  844|   453k|    }
  845|   576k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   576k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 576k, False: 0]
  |  Branch (850:25): [True: 123k, False: 453k]
  ------------------
  851|   123k|        do_presentation();
  852|   123k|    }
  853|   576k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   576k|    return begin;
  859|   576k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.12M|{
  464|  2.12M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.55M, False: 576k]
  |  Branch (464:33): [True: 1.55M, False: 0]
  ------------------
  465|  2.12M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 494k, False: 82.3k]
  |  Branch (465:33): [True: 494k, False: 0]
  ------------------
  466|  2.12M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.46M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.46M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.46M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.46M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.46M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.46M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.46M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 82.3k, False: 1.38M]
  |  |  ------------------
  ------------------
  812|  82.3k|            handler.on_error("Invalid type specifier in format string");
  813|  82.3k|            return begin;
  814|  82.3k|        }
  815|  1.38M|        handler.on_type(type);
  816|  1.38M|        return begin;
  817|  1.46M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.79M|{
  412|  1.79M|    switch (type) {
  413|   127k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 127k, False: 1.66M]
  ------------------
  414|   210k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 82.3k, False: 1.71M]
  ------------------
  415|   210k|            return presentation_type::int_binary;
  416|   342k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 342k, False: 1.45M]
  ------------------
  417|   342k|            return presentation_type::int_decimal;
  418|   492k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 492k, False: 1.30M]
  ------------------
  419|   492k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.79M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   187k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 187k, False: 1.60M]
  ------------------
  423|   187k|            return presentation_type::int_octal;
  424|   399k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 399k, False: 1.39M]
  ------------------
  425|   399k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.79M]
  ------------------
  426|   399k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.79M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.79M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 1.79M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.79M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 1.79M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.79M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 1.79M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.79M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 1.79M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.79M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.79M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.79M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.79M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.79M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.79M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.79M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   164k|        default:
  ------------------
  |  Branch (456:9): [True: 164k, False: 1.63M]
  ------------------
  457|   164k|            return presentation_type::none;
  458|  1.79M|    }
  459|  1.79M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   576k|{
  489|   576k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   576k|    auto check_align = [](wchar_t ch) {
  492|   576k|        switch (ch) {
  493|   576k|            case L'<':
  494|   576k|                return align_type::left;
  495|   576k|            case L'>':
  496|   576k|                return align_type::right;
  497|   576k|            case L'^':
  498|   576k|                return align_type::center;
  499|   576k|            default:
  500|   576k|                return align_type::none;
  501|   576k|        }
  502|   576k|    };
  503|       |
  504|   576k|    auto potential_fill_len = code_point_length(begin, end);
  505|   576k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  |  Branch (157:45): [True: 0, False: 576k]
  |  |  |  Branch (157:45): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  506|   576k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   576k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   576k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   576k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   576k|    const auto begin_before_fill = begin;
  516|   576k|    begin += potential_fill_len;
  517|       |
  518|   576k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 576k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   576k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   576k|    const auto begin_after_fill = begin;
  524|   576k|    ++begin;
  525|       |
  526|   576k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 576k, False: 0]
  ------------------
  527|   576k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   576k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 576k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   576k|    }
  535|       |
  536|   576k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 576k, False: 0]
  ------------------
  537|   576k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 576k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   576k|        return begin_before_fill;
  542|   576k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   576k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   741k|{
  471|   741k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   741k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   741k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   741k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   741k|        return 1;
  474|   741k|    }
  475|   741k|    else {
  476|   741k|        const auto lengths =
  477|   741k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   741k|            "\3\4";
  479|   741k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   741k|        return len;
  481|   741k|    }
  482|   741k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.15M|    auto check_align = [](wchar_t ch) {
  492|  1.15M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.15M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.15M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.15M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.15M|            default:
  ------------------
  |  Branch (499:13): [True: 1.15M, False: 0]
  ------------------
  500|  1.15M|                return align_type::none;
  501|  1.15M|        }
  502|  1.15M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   576k|{
  554|   576k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   576k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 494k, False: 82.3k]
  |  Branch (556:33): [True: 0, False: 494k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   576k|    return begin;
  567|   576k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   453k|    {
 1051|   453k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   453k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 212k, False: 240k]
  ------------------
 1053|   453k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 212k]
  ------------------
 1054|   453k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   453k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   453k|        Handler::on_localized();
 1063|   453k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   370k|{
  968|   370k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   370k|    handler.check_args_exhausted();
  970|   370k|    return handler.get_error();
  971|   370k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   370k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   370k|    auto begin = format.data();
  937|   370k|    auto it = begin;
  938|   370k|    const auto end = format.data() + format.size();
  939|       |
  940|   370k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 370k, False: 0]
  ------------------
  941|   370k|        const auto ch = *it++;
  942|   370k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 370k, False: 0]
  ------------------
  943|   370k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   370k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   370k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 370k, False: 0]
  ------------------
  947|   370k|                return;
  948|   370k|            }
  949|   370k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   370k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   370k|{
  866|   370k|    struct id_adapter {
  867|   370k|        constexpr void operator()()
  868|   370k|        {
  869|   370k|            arg_id = handler.on_arg_id();
  870|   370k|        }
  871|   370k|        constexpr void operator()(std::size_t id)
  872|   370k|        {
  873|   370k|            arg_id = handler.on_arg_id(id);
  874|   370k|        }
  875|       |
  876|   370k|        constexpr void on_error(const char* msg)
  877|   370k|        {
  878|   370k|            SCN_UNLIKELY_ATTR
  879|   370k|            handler.on_error(msg);
  880|   370k|        }
  881|       |
  882|   370k|        Handler& handler;
  883|   370k|        std::size_t arg_id;
  884|   370k|    };
  885|       |
  886|   370k|    ++begin;
  887|   370k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   370k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 370k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   370k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 370k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   370k|    else {
  899|   370k|        auto adapter = id_adapter{handler, 0};
  900|   370k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   370k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   370k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 370k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   370k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 370k, False: 0]
  ------------------
  911|   370k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   370k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   370k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 123k, False: 247k]
  |  |  |  Branch (157:45): [True: 0, False: 370k]
  |  |  |  Branch (157:45): [True: 123k, False: 247k]
  |  |  ------------------
  ------------------
  917|   123k|                handler.on_error("Unknown format specifier");
  918|   123k|                return begin;
  919|   123k|            }
  920|   370k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   370k|    }
  927|   247k|    return begin + 1;
  928|   370k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   370k|{
  400|   370k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   370k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 370k, False: 0]
  |  Branch (401:26): [True: 0, False: 370k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   370k|    handler();
  406|   370k|    return begin;
  407|   370k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   370k|        {
  869|   370k|            arg_id = handler.on_arg_id();
  870|   370k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   370k|    {
 1046|   370k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   370k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   370k|{
  795|   370k|    auto do_presentation = [&]() -> const CharT* {
  796|   370k|        if (*begin == CharT{'['}) {
  797|   370k|            auto set = parse_presentation_set(begin, end, handler);
  798|   370k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   370k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   370k|                return begin;
  803|   370k|            }
  804|   370k|            handler.on_character_set_string(set);
  805|   370k|            return begin;
  806|   370k|        }
  807|   370k|        if (*begin == CharT{'/'}) {
  808|   370k|            return parse_presentation_regex(begin, end, handler);
  809|   370k|        }
  810|   370k|        presentation_type type = parse_presentation_type(*begin++);
  811|   370k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   370k|            handler.on_error("Invalid type specifier in format string");
  813|   370k|            return begin;
  814|   370k|        }
  815|   370k|        handler.on_type(type);
  816|   370k|        return begin;
  817|   370k|    };
  818|       |
  819|   370k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 370k, False: 0]
  |  Branch (819:28): [True: 288k, False: 82.3k]
  ------------------
  820|   370k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 247k, False: 41.1k]
  |  Branch (820:36): [True: 205k, False: 41.1k]
  ------------------
  821|   205k|        return do_presentation();
  822|   205k|    }
  823|       |
  824|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   164k|    begin = parse_align(begin, end, handler);
  830|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   164k|    begin = parse_width(begin, end, handler);
  836|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   164k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 41.1k, False: 123k]
  ------------------
  842|  41.1k|        handler.on_localized();
  843|  41.1k|        ++begin;
  844|  41.1k|    }
  845|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   164k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 164k, False: 0]
  |  Branch (850:25): [True: 123k, False: 41.1k]
  ------------------
  851|   123k|        do_presentation();
  852|   123k|    }
  853|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   164k|    return begin;
  859|   164k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   329k|    auto do_presentation = [&]() -> const CharT* {
  796|   329k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 329k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   329k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 329k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   329k|        presentation_type type = parse_presentation_type(*begin++);
  811|   329k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 82.3k, False: 247k]
  |  |  ------------------
  ------------------
  812|  82.3k|            handler.on_error("Invalid type specifier in format string");
  813|  82.3k|            return begin;
  814|  82.3k|        }
  815|   247k|        handler.on_type(type);
  816|   247k|        return begin;
  817|   329k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   164k|{
  489|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   164k|    auto check_align = [](wchar_t ch) {
  492|   164k|        switch (ch) {
  493|   164k|            case L'<':
  494|   164k|                return align_type::left;
  495|   164k|            case L'>':
  496|   164k|                return align_type::right;
  497|   164k|            case L'^':
  498|   164k|                return align_type::center;
  499|   164k|            default:
  500|   164k|                return align_type::none;
  501|   164k|        }
  502|   164k|    };
  503|       |
  504|   164k|    auto potential_fill_len = code_point_length(begin, end);
  505|   164k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  |  Branch (157:45): [True: 0, False: 164k]
  |  |  |  Branch (157:45): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  506|   164k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   164k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   164k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   164k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   164k|    const auto begin_before_fill = begin;
  516|   164k|    begin += potential_fill_len;
  517|       |
  518|   164k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 164k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   164k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   164k|    const auto begin_after_fill = begin;
  524|   164k|    ++begin;
  525|       |
  526|   164k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 164k, False: 0]
  ------------------
  527|   164k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   164k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 164k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   164k|    }
  535|       |
  536|   164k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 164k, False: 0]
  ------------------
  537|   164k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 164k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   164k|        return begin_before_fill;
  542|   164k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   164k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   329k|    auto check_align = [](wchar_t ch) {
  492|   329k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 329k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 329k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 329k]
  ------------------
  498|      0|                return align_type::center;
  499|   329k|            default:
  ------------------
  |  Branch (499:13): [True: 329k, False: 0]
  ------------------
  500|   329k|                return align_type::none;
  501|   329k|        }
  502|   329k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   164k|{
  554|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   164k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 82.3k, False: 82.3k]
  |  Branch (556:33): [True: 0, False: 82.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   164k|    return begin;
  567|   164k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  41.1k|    {
 1051|  41.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  41.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 20.5k, False: 20.5k]
  ------------------
 1053|  41.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 20.5k]
  ------------------
 1054|  41.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  41.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  41.1k|        Handler::on_localized();
 1063|  41.1k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.69M|{
  226|  2.69M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.69M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.69M|                  "\n"
  230|  2.69M|                  "Unsupported range type given as input to a scanning "
  231|  2.69M|                  "function.\n"
  232|  2.69M|                  "A range needs to have a character type (value type) "
  233|  2.69M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.69M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.69M|                  "to be included.\n"
  236|  2.69M|                  "See the scnlib documentation for more details.");
  237|  2.69M|    static_assert(
  238|  2.69M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.69M|        "\n"
  240|  2.69M|        "Unsupported range type given as input to a scanning "
  241|  2.69M|        "function.\n"
  242|  2.69M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.69M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.69M|        "not supported.");
  245|  2.69M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.69M|                  "\n"
  247|  2.69M|                  "Unsupported range type given as input to a scanning "
  248|  2.69M|                  "function.\n"
  249|  2.69M|                  "file_marker_found cannot be used as an "
  250|  2.69M|                  "source range type to scn::scan.\n"
  251|  2.69M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.69M|                  "and do not provide an explicit source range, "
  253|  2.69M|                  "or use scn::scan with a FILE* directly.");
  254|  2.69M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.69M|                  "\n"
  256|  2.69M|                  "Unsupported range type given as input to a scanning "
  257|  2.69M|                  "function.\n"
  258|  2.69M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.69M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.69M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.69M|                  "\n"
  262|  2.69M|                  "Unsupported range type given as input to a scanning "
  263|  2.69M|                  "function.\n"
  264|  2.69M|                  "A range needs to model forward_range and have a valid "
  265|  2.69M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.69M|                  "Examples of scannable ranges are std::string, "
  267|  2.69M|                  "std::string_view, "
  268|  2.69M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.69M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.69M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.69M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.69M|{
  153|  2.69M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.69M|        return std::basic_string_view{ranges::data(r),
  155|  2.69M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.69M|    }
  162|  2.69M|    else {
  163|  2.69M|        return invalid_char_type{};
  164|  2.69M|    }
  165|  2.69M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   241k|{
  226|   241k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   241k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   241k|                  "\n"
  230|   241k|                  "Unsupported range type given as input to a scanning "
  231|   241k|                  "function.\n"
  232|   241k|                  "A range needs to have a character type (value type) "
  233|   241k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   241k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   241k|                  "to be included.\n"
  236|   241k|                  "See the scnlib documentation for more details.");
  237|   241k|    static_assert(
  238|   241k|        !std::is_same_v<T, custom_char_traits>,
  239|   241k|        "\n"
  240|   241k|        "Unsupported range type given as input to a scanning "
  241|   241k|        "function.\n"
  242|   241k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   241k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   241k|        "not supported.");
  245|   241k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   241k|                  "\n"
  247|   241k|                  "Unsupported range type given as input to a scanning "
  248|   241k|                  "function.\n"
  249|   241k|                  "file_marker_found cannot be used as an "
  250|   241k|                  "source range type to scn::scan.\n"
  251|   241k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   241k|                  "and do not provide an explicit source range, "
  253|   241k|                  "or use scn::scan with a FILE* directly.");
  254|   241k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   241k|                  "\n"
  256|   241k|                  "Unsupported range type given as input to a scanning "
  257|   241k|                  "function.\n"
  258|   241k|                  "In order to be scannable, a range needs to satisfy "
  259|   241k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   241k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   241k|                  "\n"
  262|   241k|                  "Unsupported range type given as input to a scanning "
  263|   241k|                  "function.\n"
  264|   241k|                  "A range needs to model forward_range and have a valid "
  265|   241k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   241k|                  "Examples of scannable ranges are std::string, "
  267|   241k|                  "std::string_view, "
  268|   241k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   241k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   241k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   241k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   241k|{
  196|   241k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   241k|        return file_marker_found{};
  198|   241k|    }
  199|   241k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   241k|        if constexpr (ranges::input_range<Range>) {
  201|   241k|            return insufficient_range{};
  202|   241k|        }
  203|   241k|        else {
  204|   241k|            return invalid_input_range{};
  205|   241k|        }
  206|   241k|    }
  207|   241k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   241k|        return invalid_char_type{};
  209|   241k|    }
  210|   241k|    else {
  211|   241k|        return make_forward_scan_buffer(r);
  212|   241k|    }
  213|   241k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.59M|{
  226|  2.59M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.59M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.59M|                  "\n"
  230|  2.59M|                  "Unsupported range type given as input to a scanning "
  231|  2.59M|                  "function.\n"
  232|  2.59M|                  "A range needs to have a character type (value type) "
  233|  2.59M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.59M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.59M|                  "to be included.\n"
  236|  2.59M|                  "See the scnlib documentation for more details.");
  237|  2.59M|    static_assert(
  238|  2.59M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.59M|        "\n"
  240|  2.59M|        "Unsupported range type given as input to a scanning "
  241|  2.59M|        "function.\n"
  242|  2.59M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.59M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.59M|        "not supported.");
  245|  2.59M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.59M|                  "\n"
  247|  2.59M|                  "Unsupported range type given as input to a scanning "
  248|  2.59M|                  "function.\n"
  249|  2.59M|                  "file_marker_found cannot be used as an "
  250|  2.59M|                  "source range type to scn::scan.\n"
  251|  2.59M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.59M|                  "and do not provide an explicit source range, "
  253|  2.59M|                  "or use scn::scan with a FILE* directly.");
  254|  2.59M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.59M|                  "\n"
  256|  2.59M|                  "Unsupported range type given as input to a scanning "
  257|  2.59M|                  "function.\n"
  258|  2.59M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.59M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.59M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.59M|                  "\n"
  262|  2.59M|                  "Unsupported range type given as input to a scanning "
  263|  2.59M|                  "function.\n"
  264|  2.59M|                  "A range needs to model forward_range and have a valid "
  265|  2.59M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.59M|                  "Examples of scannable ranges are std::string, "
  267|  2.59M|                  "std::string_view, "
  268|  2.59M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.59M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.59M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.59M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.59M|{
  153|  2.59M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.59M|        return std::basic_string_view{ranges::data(r),
  155|  2.59M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.59M|    }
  162|  2.59M|    else {
  163|  2.59M|        return invalid_char_type{};
  164|  2.59M|    }
  165|  2.59M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   432k|{
  226|   432k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   432k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   432k|                  "\n"
  230|   432k|                  "Unsupported range type given as input to a scanning "
  231|   432k|                  "function.\n"
  232|   432k|                  "A range needs to have a character type (value type) "
  233|   432k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   432k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   432k|                  "to be included.\n"
  236|   432k|                  "See the scnlib documentation for more details.");
  237|   432k|    static_assert(
  238|   432k|        !std::is_same_v<T, custom_char_traits>,
  239|   432k|        "\n"
  240|   432k|        "Unsupported range type given as input to a scanning "
  241|   432k|        "function.\n"
  242|   432k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   432k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   432k|        "not supported.");
  245|   432k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   432k|                  "\n"
  247|   432k|                  "Unsupported range type given as input to a scanning "
  248|   432k|                  "function.\n"
  249|   432k|                  "file_marker_found cannot be used as an "
  250|   432k|                  "source range type to scn::scan.\n"
  251|   432k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   432k|                  "and do not provide an explicit source range, "
  253|   432k|                  "or use scn::scan with a FILE* directly.");
  254|   432k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   432k|                  "\n"
  256|   432k|                  "Unsupported range type given as input to a scanning "
  257|   432k|                  "function.\n"
  258|   432k|                  "In order to be scannable, a range needs to satisfy "
  259|   432k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   432k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   432k|                  "\n"
  262|   432k|                  "Unsupported range type given as input to a scanning "
  263|   432k|                  "function.\n"
  264|   432k|                  "A range needs to model forward_range and have a valid "
  265|   432k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   432k|                  "Examples of scannable ranges are std::string, "
  267|   432k|                  "std::string_view, "
  268|   432k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   432k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   432k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   432k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   432k|{
  196|   432k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   432k|        return file_marker_found{};
  198|   432k|    }
  199|   432k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   432k|        if constexpr (ranges::input_range<Range>) {
  201|   432k|            return insufficient_range{};
  202|   432k|        }
  203|   432k|        else {
  204|   432k|            return invalid_input_range{};
  205|   432k|        }
  206|   432k|    }
  207|   432k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   432k|        return invalid_char_type{};
  209|   432k|    }
  210|   432k|    else {
  211|   432k|        return make_forward_scan_buffer(r);
  212|   432k|    }
  213|   432k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  4.23M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.17M|    {
   45|  2.17M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.17M|    {
   66|  2.17M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.17M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.17M|        do_check_arg_id(id);
   74|  2.17M|        return id;
   75|  2.17M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.17M|{
  210|  2.17M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.17M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.17M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.03M|    {
   61|  2.03M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.03M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  4.20M|    {
   50|  4.20M|        return m_format.data();
   51|  4.20M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.29M|    {
   45|  2.29M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.29M|    {
   66|  2.29M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.29M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.29M|        do_check_arg_id(id);
   74|  2.29M|        return id;
   75|  2.29M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.29M|{
  210|  2.29M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.29M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.29M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.04M|    {
   61|  2.04M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.04M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  4.33M|    {
   50|  4.33M|        return m_format.data();
   51|  4.33M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  157|  7.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  157|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.30M|    {
  482|  5.30M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  5.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.30M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  5.30M|    {
  473|  5.30M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  5.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.30M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.59M|    {
  482|  2.59M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.59M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  2.59M|    {
  473|  2.59M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.59M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   477k|    {
  594|   477k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   477k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   477k|    {
  564|   477k|        return ranges::prev(it);
  565|   477k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.73M|    {
  482|  1.73M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.73M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  1.73M|    {
  473|  1.73M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.73M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.97M|    {
  513|  1.97M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.97M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.97M|    {
  505|  1.97M|        return ranges::next(it, n);
  506|  1.97M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.83M|    {
  549|  1.83M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.83M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.83M|    {
  541|  1.83M|        return ranges::distance(lhs, rhs);
  542|  1.83M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   481k|    {
  513|   481k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   481k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   481k|    {
  498|   481k|        it.batch_advance(n);
  499|   481k|        return it;
  500|   481k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.66M|    {
  482|  1.66M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.66M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  1.66M|    {
  473|  1.66M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.66M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   428k|    {
  594|   428k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   428k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   428k|    {
  564|   428k|        return ranges::prev(it);
  565|   428k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.73M|    {
  513|  1.73M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.73M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.73M|    {
  505|  1.73M|        return ranges::next(it, n);
  506|  1.73M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.60M|    {
  549|  1.60M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.60M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.60M|    {
  541|  1.60M|        return ranges::distance(lhs, rhs);
  542|  1.60M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   864k|    {
  513|   864k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   864k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   864k|    {
  498|   864k|        it.batch_advance(n);
  499|   864k|        return it;
  500|   864k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.45M|{
  343|  2.45M|    return {ranges::next(ranges::begin(source), n),
  344|  2.45M|            make_vscan_result_range_end(source)};
  345|  2.45M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.45M|{
  330|  2.45M|    return ranges::end(source);
  331|  2.45M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   353k|    {
  253|   353k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.45M|    {
  104|  2.45M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   665k|    {
   39|   665k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.45M|    {
  121|  2.45M|        return ranges::begin(m_range);
  122|  2.45M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   333k|    {
  253|   333k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   629k|    {
   39|   629k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   476k|    {
  253|   476k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|   891k|    {
   39|   891k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   398k|    {
  253|   398k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   755k|    {
   39|   755k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   489k|    {
  253|   489k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|   914k|    {
   39|   914k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   402k|    {
  253|   402k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   764k|    {
   39|   764k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.16M|{
  343|  2.16M|    return {ranges::next(ranges::begin(source), n),
  344|  2.16M|            make_vscan_result_range_end(source)};
  345|  2.16M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.16M|{
  330|  2.16M|    return ranges::end(source);
  331|  2.16M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   311k|    {
  253|   311k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.16M|    {
  104|  2.16M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.16M|    {
  121|  2.16M|        return ranges::begin(m_range);
  122|  2.16M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   295k|    {
  253|   295k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   414k|    {
  253|   414k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   357k|    {
  253|   357k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   425k|    {
  253|   425k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   361k|    {
  253|   361k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   178k|{
  117|   178k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   178k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   178k|{
   77|   178k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   178k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   178k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   178k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   356k|{
   55|   356k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 318k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   318k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   318k|    static_cast<    \
  |  |  251|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   318k|    static_cast<    \
  |  |  251|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   356k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   178k|{
  201|   178k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   178k|                                                      format, {});
  203|   178k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   178k|{
  163|   178k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   178k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   178k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   178k|    static_cast<    \
  |  |  251|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   178k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  37.4k|{
  248|  37.4k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  37.4k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  37.4k|{
  229|  37.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  37.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  37.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 35.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  37.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  35.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  35.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.5k|    static_cast<    \
  |  |  251|  35.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.5k|    static_cast<    \
  |  |  251|  35.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  37.4k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   170k|{
  117|   170k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   170k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   170k|{
   77|   170k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   170k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   170k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   170k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   170k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   340k|{
   55|   340k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 301k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   301k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   301k|    static_cast<    \
  |  |  251|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   301k|    static_cast<    \
  |  |  251|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   340k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   170k|{
  201|   170k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   170k|                                                      format, {});
  203|   170k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   170k|{
  163|   170k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   170k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   170k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   170k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   170k|    static_cast<    \
  |  |  251|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   170k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  33.7k|{
  248|  33.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  33.7k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  33.7k|{
  229|  33.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  33.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 31.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  31.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.8k|    static_cast<    \
  |  |  251|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.8k|    static_cast<    \
  |  |  251|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  33.7k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   235k|{
  117|   235k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   235k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   235k|{
   77|   235k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   235k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   235k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   235k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   470k|{
   55|   470k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 432k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   432k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   432k|    static_cast<    \
  |  |  251|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   432k|    static_cast<    \
  |  |  251|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   470k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   235k|{
  201|   235k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   235k|                                                      format, {});
  203|   235k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   235k|{
  163|   235k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   235k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   235k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   235k|    static_cast<    \
  |  |  251|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   235k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  46.2k|{
  248|  46.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  46.2k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  46.2k|{
  229|  46.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  46.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  46.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  46.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  44.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  44.3k|    static_cast<    \
  |  |  251|  44.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  44.3k|    static_cast<    \
  |  |  251|  44.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  46.2k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   199k|{
  117|   199k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   199k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   199k|{
   77|   199k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   199k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   199k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   199k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   399k|{
   55|   399k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 361k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   361k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   361k|    static_cast<    \
  |  |  251|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   361k|    static_cast<    \
  |  |  251|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   399k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   199k|{
  201|   199k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   199k|                                                      format, {});
  203|   199k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   199k|{
  163|   199k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   199k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   199k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   199k|    static_cast<    \
  |  |  251|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   199k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  39.2k|{
  248|  39.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  39.2k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  39.2k|{
  229|  39.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  39.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 37.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  37.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  37.3k|    static_cast<    \
  |  |  251|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  37.3k|    static_cast<    \
  |  |  251|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  39.2k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   241k|{
  117|   241k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   241k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   241k|{
   77|   241k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   241k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   241k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   241k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   482k|{
   55|   482k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 443k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   443k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   443k|    static_cast<    \
  |  |  251|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   443k|    static_cast<    \
  |  |  251|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   482k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   241k|{
  201|   241k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   241k|                                                      format, {});
  203|   241k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   241k|{
  163|   241k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   241k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   241k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   241k|    static_cast<    \
  |  |  251|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   241k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  47.3k|{
  248|  47.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  47.3k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  47.3k|{
  229|  47.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  47.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  45.3k|    static_cast<    \
  |  |  251|  45.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  45.3k|    static_cast<    \
  |  |  251|  45.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  47.3k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   201k|{
  117|   201k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   201k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   201k|{
   77|   201k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   201k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   201k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   201k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   201k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   403k|{
   55|   403k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 365k]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|   365k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   365k|    static_cast<    \
  |  |  251|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   365k|    static_cast<    \
  |  |  251|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   403k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   201k|{
  201|   201k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   201k|                                                      format, {});
  203|   201k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   201k|{
  163|   201k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   201k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   201k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   201k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   201k|    static_cast<    \
  |  |  251|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   201k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  39.5k|{
  248|  39.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  39.5k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  39.5k|{
  229|  39.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  39.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  39.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 37.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  39.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  37.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  37.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  37.6k|    static_cast<    \
  |  |  251|  37.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  37.6k|    static_cast<    \
  |  |  251|  37.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  39.5k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.1k|{
  117|  19.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.1k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.1k|{
   77|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.2k|{
   55|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  38.2k|        return unexpected(result.error());
   57|  38.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.2k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.1k|{
  201|  19.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.1k|                                                      format, {});
  203|  19.1k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.1k|{
  163|  19.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.1k|    static_cast<    \
  |  |  251|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.1k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.91k|{
  248|  1.91k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.91k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.91k|{
  229|  1.91k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.91k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.91k|    }                                                  \
  |  |  |  |   70|  1.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.91k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   174k|{
   77|   174k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   174k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   174k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   174k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   348k|{
   55|   348k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 280k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   280k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   280k|    static_cast<    \
  |  |  251|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   280k|    static_cast<    \
  |  |  251|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   348k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   174k|{
  163|   174k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   174k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   174k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   174k|    static_cast<    \
  |  |  251|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   174k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  34.8k|{
  229|  34.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  34.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 31.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  31.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.4k|    static_cast<    \
  |  |  251|  31.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.4k|    static_cast<    \
  |  |  251|  31.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  34.8k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   168k|{
   77|   168k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   168k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   168k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   168k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   336k|{
   55|   336k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 267k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   267k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   267k|    static_cast<    \
  |  |  251|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   267k|    static_cast<    \
  |  |  251|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   336k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   168k|{
  163|   168k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   168k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   168k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   168k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  31.6k|{
  229|  31.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  31.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 28.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  28.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  28.2k|    static_cast<    \
  |  |  251|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  28.2k|    static_cast<    \
  |  |  251|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  31.6k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   222k|{
   77|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   222k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   222k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   444k|{
   55|   444k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 376k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   376k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   376k|    static_cast<    \
  |  |  251|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   376k|    static_cast<    \
  |  |  251|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   444k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   222k|{
  163|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   222k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   222k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  42.1k|{
  229|  42.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  42.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  42.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  42.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 38.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  42.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  38.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  38.6k|    static_cast<    \
  |  |  251|  38.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  38.6k|    static_cast<    \
  |  |  251|  38.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  42.1k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   196k|{
   77|   196k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   196k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   196k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   196k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   392k|{
   55|   392k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 323k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   323k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   323k|    static_cast<    \
  |  |  251|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   323k|    static_cast<    \
  |  |  251|   323k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   392k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   196k|{
  163|   196k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   196k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   196k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   196k|    static_cast<    \
  |  |  251|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   196k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  36.9k|{
  229|  36.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  36.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  33.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  33.5k|    static_cast<    \
  |  |  251|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  33.5k|    static_cast<    \
  |  |  251|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  36.9k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   227k|{
   77|   227k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   227k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   227k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   227k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   227k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   454k|{
   55|   454k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 385k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   385k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   385k|    static_cast<    \
  |  |  251|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   385k|    static_cast<    \
  |  |  251|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   454k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   227k|{
  163|   227k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   227k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   227k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   227k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   227k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  42.9k|{
  229|  42.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  42.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  42.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 39.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  42.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  39.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  39.5k|    static_cast<    \
  |  |  251|  39.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  39.5k|    static_cast<    \
  |  |  251|  39.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  42.9k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   198k|{
   77|   198k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   198k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   198k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   198k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   396k|{
   55|   396k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 327k]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|   327k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   327k|    static_cast<    \
  |  |  251|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   327k|    static_cast<    \
  |  |  251|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   396k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   198k|{
  163|   198k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   198k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   198k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   198k|    static_cast<    \
  |  |  251|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   198k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  37.2k|{
  229|  37.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  37.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  37.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 33.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  37.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  33.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  33.8k|    static_cast<    \
  |  |  251|  33.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  33.8k|    static_cast<    \
  |  |  251|  33.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  37.2k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.6k|{
   55|  68.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  68.6k|        return unexpected(result.error());
   57|  68.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.6k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.3k|    static_cast<    \
  |  |  251|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.43k|{
  229|  3.43k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.43k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   241k|{
  486|   241k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   241k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   241k|    {
  378|   241k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   241k|    {
  360|   241k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   241k|    {
  129|   241k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   241k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   344k|    {
  382|   344k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 468, False: 344k]
  ------------------
  383|    468|            return false;
  384|    468|        }
  385|   344k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 172k, False: 172k]
  ------------------
  386|   172k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   172k|                                          this->m_current_view.begin(),
  388|   172k|                                          this->m_current_view.end());
  389|   172k|        }
  390|   344k|        m_latest = *m_cursor;
  391|   344k|        ++m_cursor;
  392|   344k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   344k|        return true;
  394|   344k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   241k|    {
   49|   241k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   241k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   241k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   432k|{
  486|   432k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   432k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   432k|    {
  378|   432k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   432k|    {
  360|   432k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   432k|    {
  129|   432k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   432k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   617k|    {
  382|   617k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 468, False: 617k]
  ------------------
  383|    468|            return false;
  384|    468|        }
  385|   617k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 308k, False: 308k]
  ------------------
  386|   308k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   308k|                                          this->m_current_view.begin(),
  388|   308k|                                          this->m_current_view.end());
  389|   308k|        }
  390|   617k|        m_latest = *m_cursor;
  391|   617k|        ++m_cursor;
  392|   617k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   617k|        return true;
  394|   617k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   432k|    {
   49|   432k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   432k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   432k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  9.32M|    {
  173|  9.32M|        return m_end == nullptr;
  174|  9.32M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   344k|    {
  189|   344k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 344k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   344k|        return parent()->get_segment_starting_at(position());
  195|   344k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  4.86M|    {
  183|  4.86M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  4.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  4.86M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  4.86M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   344k|    {
   79|   344k|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
   80|   344k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   344k|        const auto start = pos - m_putback_buffer.size();
   84|   344k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|   344k|        return m_current_view.substr(start);
   86|   344k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   309k|    {
  178|   309k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|   309k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   309k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   654k|    {
  168|   654k|        return m_position;
  169|   654k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   723k|    {
  101|   723k|        return m_is_contiguous;
  102|   723k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  16.7M|    {
  173|  16.7M|        return m_end == nullptr;
  174|  16.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|   617k|    {
  189|   617k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 617k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   617k|        return parent()->get_segment_starting_at(position());
  195|   617k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  8.72M|    {
  183|  8.72M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  8.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  8.72M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  8.72M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|   617k|    {
   79|   617k|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
   80|   617k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   617k|        const auto start = pos - m_putback_buffer.size();
   84|   617k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|   617k|        return m_current_view.substr(start);
   86|   617k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   555k|    {
  178|   555k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|   555k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   555k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  1.17M|    {
  168|  1.17M|        return m_position;
  169|  1.17M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.29M|    {
  101|  1.29M|        return m_is_contiguous;
  102|  1.29M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   241k|{
  322|   241k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 241k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   241k|    return ranges::subrange{forward_iterator{this, 0},
  327|   241k|                            ranges_std::default_sentinel};
  328|   241k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   241k|    {
  155|   241k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   241k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   241k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   792k|    {
  258|   792k|        return x.is_at_end();
  259|   792k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|   964k|    {
  302|   964k|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 964k]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|   964k|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 964k]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|   964k|        return !read_at_position();
  309|   964k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  2.36M|    {
  282|  2.36M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  2.36M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 2.36M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  2.36M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.02M, False: 344k]
  |  |  ------------------
  ------------------
  289|  2.02M|            return true;
  290|  2.02M|        }
  291|       |
  292|   688k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 344k, False: 344k]
  ------------------
  293|   344k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 468, False: 344k]
  ------------------
  294|    468|                return false;
  295|    468|            }
  296|   344k|        }
  297|   344k|        return true;
  298|   344k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  3.36M|    {
   59|  3.36M|        return m_putback_buffer.size() + m_current_view.size();
   60|  3.36M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   172k|    {
  269|   172k|        return !x.is_at_end();
  270|   172k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.12M|    {
  217|  1.12M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.12M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.12M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.12M|        auto res = read_at_position();
  226|  1.12M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  1.12M|        return parent()->get_character_at(m_position);
  228|  1.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.12M|    {
   90|  1.12M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.12M, False: 426]
  |  |  ------------------
  ------------------
   91|  1.12M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.12M|            return m_putback_buffer[pos];
   93|  1.12M|        }
   94|    426|        const auto start = pos - m_putback_buffer.size();
   95|    426|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|    426|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    426|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|    426|        return m_current_view[start];
   97|    426|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   275k|    {
  203|   275k|        ++m_position;
  204|   275k|        std::ignore = read_at_position();
  205|   275k|        return *this;
  206|   275k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   309k|    {
  252|   309k|        return !(lhs == rhs);
  253|   309k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   458k|    {
  247|   458k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 458k, False: 0]
  |  Branch (247:46): [True: 149k, False: 309k]
  ------------------
  248|   458k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   481k|    {
  232|   481k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   481k|        m_position += n;
  234|   481k|        return *this;
  235|   481k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   241k|    {
   54|   241k|        sync(0);
   55|   241k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   432k|{
  322|   432k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 432k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   432k|    return ranges::subrange{forward_iterator{this, 0},
  327|   432k|                            ranges_std::default_sentinel};
  328|   432k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   432k|    {
  155|   432k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   432k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   432k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.42M|    {
  258|  1.42M|        return x.is_at_end();
  259|  1.42M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  1.72M|    {
  302|  1.72M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.72M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.72M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.72M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.72M|        return !read_at_position();
  309|  1.72M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  4.24M|    {
  282|  4.24M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  4.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  4.24M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 4.24M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  4.24M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  4.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 3.62M, False: 617k]
  |  |  ------------------
  ------------------
  289|  3.62M|            return true;
  290|  3.62M|        }
  291|       |
  292|  1.23M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 617k, False: 617k]
  ------------------
  293|   617k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 468, False: 617k]
  ------------------
  294|    468|                return false;
  295|    468|            }
  296|   617k|        }
  297|   617k|        return true;
  298|   617k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  6.03M|    {
   59|  6.03M|        return m_putback_buffer.size() + m_current_view.size();
   60|  6.03M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   308k|    {
  269|   308k|        return !x.is_at_end();
  270|   308k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  2.01M|    {
  217|  2.01M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.01M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.01M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.01M|        auto res = read_at_position();
  226|  2.01M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  2.01M|        return parent()->get_character_at(m_position);
  228|  2.01M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  2.01M|    {
   90|  2.01M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.01M, False: 426]
  |  |  ------------------
  ------------------
   91|  2.01M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.01M|            return m_putback_buffer[pos];
   93|  2.01M|        }
   94|    426|        const auto start = pos - m_putback_buffer.size();
   95|    426|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|    426|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    426|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|    426|        return m_current_view[start];
   97|    426|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|   494k|    {
  203|   494k|        ++m_position;
  204|   494k|        std::ignore = read_at_position();
  205|   494k|        return *this;
  206|   494k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|   555k|    {
  252|   555k|        return !(lhs == rhs);
  253|   555k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|   823k|    {
  247|   823k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 823k, False: 0]
  |  Branch (247:46): [True: 267k, False: 555k]
  ------------------
  248|   823k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   864k|    {
  232|   864k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   864k|        m_position += n;
  234|   864k|        return *this;
  235|   864k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   432k|    {
   54|   432k|        sync(0);
   55|   432k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   334k|{
   72|   334k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   334k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   334k|    }
   75|   334k|    else if constexpr (sizeof(U) == 2) {
   76|   334k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   334k|    }
   78|   334k|    else {
   79|       |        // utf-32
   80|   334k|        static_assert(sizeof(U) == 4);
   81|   334k|        SCN_UNUSED(ch);
   82|   334k|        return 1;
   83|   334k|    }
   84|   334k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   334k|{
   36|   334k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   334k|    SCN_GCC_COMPAT_PUSH
   39|   334k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   334k|    constexpr char lengths[] =
   41|   334k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   334k|        "\1\1\1\1\1\1\1\1"
   43|   334k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   334k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   334k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   334k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   334k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   334k|    SCN_GCC_COMPAT_POP
   50|   334k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  36.2M|{
   72|  36.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  36.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  36.2M|    }
   75|  36.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  36.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  36.2M|    }
   78|  36.2M|    else {
   79|       |        // utf-32
   80|  36.2M|        static_assert(sizeof(U) == 4);
   81|  36.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  231|  36.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  36.2M|        return 1;
   83|  36.2M|    }
   84|  36.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   730k|{
   36|   730k|#define SCN_VISIT(Type)                                         \
   37|   730k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   730k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   730k|    }                                                           \
   40|   730k|    else {                                                      \
   41|   730k|        return vis(monostate_val);                              \
   42|   730k|    }
   43|       |
   44|   730k|    monostate monostate_val{};
   45|       |
   46|   730k|    switch (arg.m_type) {
   47|   112k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 112k, False: 618k]
  ------------------
   48|   112k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   112k|    }                                                           \
  |  |   40|   112k|    else {                                                      \
  |  |   41|   112k|        return vis(monostate_val);                              \
  |  |   42|   112k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 730k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   138k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 138k, False: 591k]
  ------------------
   52|   138k|            SCN_VISIT(int);
  ------------------
  |  |   37|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   138k|    }                                                           \
  |  |   40|   138k|    else {                                                      \
  |  |   41|   138k|        return vis(monostate_val);                              \
  |  |   42|   138k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 730k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   141k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 141k, False: 588k]
  ------------------
   56|   141k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   141k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   141k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   141k|    }                                                           \
  |  |   40|   141k|    else {                                                      \
  |  |   41|   141k|        return vis(monostate_val);                              \
  |  |   42|   141k|    }
  ------------------
   57|   101k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 101k, False: 629k]
  ------------------
   58|   101k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   101k|    }                                                           \
  |  |   40|   101k|    else {                                                      \
  |  |   41|   101k|        return vis(monostate_val);                              \
  |  |   42|   101k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 730k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   117k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 117k, False: 612k]
  ------------------
   62|   117k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   117k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   117k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   117k|    }                                                           \
  |  |   40|   117k|    else {                                                      \
  |  |   41|   117k|        return vis(monostate_val);                              \
  |  |   42|   117k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 730k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   118k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 118k, False: 611k]
  ------------------
   66|   118k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   118k|    }                                                           \
  |  |   40|   118k|    else {                                                      \
  |  |   41|   118k|        return vis(monostate_val);                              \
  |  |   42|   118k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 730k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 730k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 730k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 730k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 730k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 730k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 730k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 730k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 730k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 730k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 730k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 730k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 730k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 730k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 730k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 730k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 730k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   730k|            SCN_CLANG_POP
  114|   730k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  34.4k|{
   36|  34.4k|#define SCN_VISIT(Type)                                         \
   37|  34.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  34.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  34.4k|    }                                                           \
   40|  34.4k|    else {                                                      \
   41|  34.4k|        return vis(monostate_val);                              \
   42|  34.4k|    }
   43|       |
   44|  34.4k|    monostate monostate_val{};
   45|       |
   46|  34.4k|    switch (arg.m_type) {
   47|  5.73k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 5.73k, False: 28.6k]
  ------------------
   48|  5.73k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 34.4k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  5.73k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 5.73k, False: 28.6k]
  ------------------
   52|  5.73k|            SCN_VISIT(int);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 34.4k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  5.73k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 5.73k, False: 28.6k]
  ------------------
   56|  5.73k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   57|  5.73k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 5.73k, False: 28.6k]
  ------------------
   58|  5.73k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 34.4k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  5.73k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 5.73k, False: 28.6k]
  ------------------
   62|  5.73k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 34.4k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  5.73k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 5.73k, False: 28.6k]
  ------------------
   66|  5.73k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  5.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.73k|    }                                                           \
  |  |   40|  5.73k|    else {                                                      \
  |  |   41|  5.73k|        return vis(monostate_val);                              \
  |  |   42|  5.73k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 34.4k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 34.4k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 34.4k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 34.4k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 34.4k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 34.4k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 34.4k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 34.4k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 34.4k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 34.4k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 34.4k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 34.4k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 34.4k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 34.4k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 34.4k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 34.4k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 34.4k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  34.4k|            SCN_CLANG_POP
  114|  34.4k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.89M|{
   36|  1.89M|#define SCN_VISIT(Type)                                         \
   37|  1.89M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.89M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.89M|    }                                                           \
   40|  1.89M|    else {                                                      \
   41|  1.89M|        return vis(monostate_val);                              \
   42|  1.89M|    }
   43|       |
   44|  1.89M|    monostate monostate_val{};
   45|       |
   46|  1.89M|    switch (arg.m_type) {
   47|   270k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 270k, False: 1.62M]
  ------------------
   48|   270k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   270k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   270k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   270k|    }                                                           \
  |  |   40|   270k|    else {                                                      \
  |  |   41|   270k|        return vis(monostate_val);                              \
  |  |   42|   270k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.89M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   366k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 366k, False: 1.52M]
  ------------------
   52|   366k|            SCN_VISIT(int);
  ------------------
  |  |   37|   366k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   366k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   366k|    }                                                           \
  |  |   40|   366k|    else {                                                      \
  |  |   41|   366k|        return vis(monostate_val);                              \
  |  |   42|   366k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.89M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   376k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 376k, False: 1.52M]
  ------------------
   56|   376k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   376k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   376k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   376k|    }                                                           \
  |  |   40|   376k|    else {                                                      \
  |  |   41|   376k|        return vis(monostate_val);                              \
  |  |   42|   376k|    }
  ------------------
   57|   261k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 261k, False: 1.63M]
  ------------------
   58|   261k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   261k|    }                                                           \
  |  |   40|   261k|    else {                                                      \
  |  |   41|   261k|        return vis(monostate_val);                              \
  |  |   42|   261k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.89M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   309k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 309k, False: 1.58M]
  ------------------
   62|   309k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   309k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   309k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   309k|    }                                                           \
  |  |   40|   309k|    else {                                                      \
  |  |   41|   309k|        return vis(monostate_val);                              \
  |  |   42|   309k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.89M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   312k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 312k, False: 1.58M]
  ------------------
   66|   312k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   312k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   312k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   312k|    }                                                           \
  |  |   40|   312k|    else {                                                      \
  |  |   41|   312k|        return vis(monostate_val);                              \
  |  |   42|   312k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.89M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.89M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.89M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.89M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.89M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.89M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.89M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.89M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.89M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.89M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.89M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.89M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.89M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.89M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.89M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.89M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.89M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.89M|            SCN_CLANG_POP
  114|  1.89M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   137k|{
   36|   137k|#define SCN_VISIT(Type)                                         \
   37|   137k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   137k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   137k|    }                                                           \
   40|   137k|    else {                                                      \
   41|   137k|        return vis(monostate_val);                              \
   42|   137k|    }
   43|       |
   44|   137k|    monostate monostate_val{};
   45|       |
   46|   137k|    switch (arg.m_type) {
   47|  22.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 22.9k, False: 114k]
  ------------------
   48|  22.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 137k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  22.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 22.9k, False: 114k]
  ------------------
   52|  22.9k|            SCN_VISIT(int);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 137k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  22.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 22.9k, False: 114k]
  ------------------
   56|  22.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   57|  22.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 22.9k, False: 114k]
  ------------------
   58|  22.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 137k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  22.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 22.9k, False: 114k]
  ------------------
   62|  22.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 137k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  22.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 22.9k, False: 114k]
  ------------------
   66|  22.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  22.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  22.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  22.9k|    }                                                           \
  |  |   40|  22.9k|    else {                                                      \
  |  |   41|  22.9k|        return vis(monostate_val);                              \
  |  |   42|  22.9k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 137k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 137k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 137k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 137k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 137k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 137k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 137k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 137k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 137k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 137k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 137k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 137k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 137k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 137k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 137k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 137k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 137k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   137k|            SCN_CLANG_POP
  114|   137k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   677k|{
   36|   677k|#define SCN_VISIT(Type)                                         \
   37|   677k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   677k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   677k|    }                                                           \
   40|   677k|    else {                                                      \
   41|   677k|        return vis(monostate_val);                              \
   42|   677k|    }
   43|       |
   44|   677k|    monostate monostate_val{};
   45|       |
   46|   677k|    switch (arg.m_type) {
   47|   104k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 104k, False: 573k]
  ------------------
   48|   104k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   104k|    }                                                           \
  |  |   40|   104k|    else {                                                      \
  |  |   41|   104k|        return vis(monostate_val);                              \
  |  |   42|   104k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 677k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   126k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 126k, False: 551k]
  ------------------
   52|   126k|            SCN_VISIT(int);
  ------------------
  |  |   37|   126k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   126k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   126k|    }                                                           \
  |  |   40|   126k|    else {                                                      \
  |  |   41|   126k|        return vis(monostate_val);                              \
  |  |   42|   126k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 677k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   128k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 128k, False: 548k]
  ------------------
   56|   128k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   128k|    }                                                           \
  |  |   40|   128k|    else {                                                      \
  |  |   41|   128k|        return vis(monostate_val);                              \
  |  |   42|   128k|    }
  ------------------
   57|  95.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 95.0k, False: 582k]
  ------------------
   58|  95.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  95.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  95.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  95.0k|    }                                                           \
  |  |   40|  95.0k|    else {                                                      \
  |  |   41|  95.0k|        return vis(monostate_val);                              \
  |  |   42|  95.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 677k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   110k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 110k, False: 566k]
  ------------------
   62|   110k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   110k|    }                                                           \
  |  |   40|   110k|    else {                                                      \
  |  |   41|   110k|        return vis(monostate_val);                              \
  |  |   42|   110k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 677k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   111k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 111k, False: 565k]
  ------------------
   66|   111k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   111k|    }                                                           \
  |  |   40|   111k|    else {                                                      \
  |  |   41|   111k|        return vis(monostate_val);                              \
  |  |   42|   111k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 677k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 677k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 677k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 677k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 677k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 677k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 677k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 677k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 677k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 677k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 677k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 677k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 677k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 677k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 677k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 677k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 677k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   677k|            SCN_CLANG_POP
  114|   677k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.79M|{
   36|  1.79M|#define SCN_VISIT(Type)                                         \
   37|  1.79M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.79M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.79M|    }                                                           \
   40|  1.79M|    else {                                                      \
   41|  1.79M|        return vis(monostate_val);                              \
   42|  1.79M|    }
   43|       |
   44|  1.79M|    monostate monostate_val{};
   45|       |
   46|  1.79M|    switch (arg.m_type) {
   47|   258k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 258k, False: 1.53M]
  ------------------
   48|   258k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   258k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   258k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   258k|    }                                                           \
  |  |   40|   258k|    else {                                                      \
  |  |   41|   258k|        return vis(monostate_val);                              \
  |  |   42|   258k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.79M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   340k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 340k, False: 1.45M]
  ------------------
   52|   340k|            SCN_VISIT(int);
  ------------------
  |  |   37|   340k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   340k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   340k|    }                                                           \
  |  |   40|   340k|    else {                                                      \
  |  |   41|   340k|        return vis(monostate_val);                              \
  |  |   42|   340k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.79M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   347k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 347k, False: 1.44M]
  ------------------
   56|   347k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   347k|    }                                                           \
  |  |   40|   347k|    else {                                                      \
  |  |   41|   347k|        return vis(monostate_val);                              \
  |  |   42|   347k|    }
  ------------------
   57|   252k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 252k, False: 1.54M]
  ------------------
   58|   252k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   252k|    }                                                           \
  |  |   40|   252k|    else {                                                      \
  |  |   41|   252k|        return vis(monostate_val);                              \
  |  |   42|   252k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.79M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   297k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 297k, False: 1.49M]
  ------------------
   62|   297k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   297k|    }                                                           \
  |  |   40|   297k|    else {                                                      \
  |  |   41|   297k|        return vis(monostate_val);                              \
  |  |   42|   297k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.79M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   300k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 300k, False: 1.49M]
  ------------------
   66|   300k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   300k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   300k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   300k|    }                                                           \
  |  |   40|   300k|    else {                                                      \
  |  |   41|   300k|        return vis(monostate_val);                              \
  |  |   42|   300k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.79M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.79M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.79M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.79M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.79M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.79M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.79M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.79M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.79M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.79M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.79M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.79M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.79M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.79M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.79M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.79M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.79M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.79M|            SCN_CLANG_POP
  114|  1.79M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  61.7k|{
   36|  61.7k|#define SCN_VISIT(Type)                                         \
   37|  61.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  61.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  61.7k|    }                                                           \
   40|  61.7k|    else {                                                      \
   41|  61.7k|        return vis(monostate_val);                              \
   42|  61.7k|    }
   43|       |
   44|  61.7k|    monostate monostate_val{};
   45|       |
   46|  61.7k|    switch (arg.m_type) {
   47|  10.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 10.2k, False: 51.4k]
  ------------------
   48|  10.2k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 61.7k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  10.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 10.2k, False: 51.4k]
  ------------------
   52|  10.2k|            SCN_VISIT(int);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 61.7k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  10.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 10.2k, False: 51.4k]
  ------------------
   56|  10.2k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   57|  10.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 10.2k, False: 51.4k]
  ------------------
   58|  10.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 61.7k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  10.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 10.2k, False: 51.4k]
  ------------------
   62|  10.2k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 61.7k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  10.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 10.2k, False: 51.4k]
  ------------------
   66|  10.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 61.7k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 61.7k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 61.7k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 61.7k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 61.7k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 61.7k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 61.7k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 61.7k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 61.7k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 61.7k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 61.7k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 61.7k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 61.7k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 61.7k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 61.7k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 61.7k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 61.7k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  61.7k|            SCN_CLANG_POP
  114|  61.7k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   247k|{
   36|   247k|#define SCN_VISIT(Type)                                         \
   37|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   247k|    }                                                           \
   40|   247k|    else {                                                      \
   41|   247k|        return vis(monostate_val);                              \
   42|   247k|    }
   43|       |
   44|   247k|    monostate monostate_val{};
   45|       |
   46|   247k|    switch (arg.m_type) {
   47|  41.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 41.1k, False: 205k]
  ------------------
   48|  41.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 247k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  41.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 41.1k, False: 205k]
  ------------------
   52|  41.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 247k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  41.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 41.1k, False: 205k]
  ------------------
   56|  41.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   57|  41.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 41.1k, False: 205k]
  ------------------
   58|  41.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 247k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  41.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 41.1k, False: 205k]
  ------------------
   62|  41.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 247k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  41.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 41.1k, False: 205k]
  ------------------
   66|  41.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  41.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  41.1k|    }                                                           \
  |  |   40|  41.1k|    else {                                                      \
  |  |   41|  41.1k|        return vis(monostate_val);                              \
  |  |   42|  41.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 247k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 247k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 247k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 247k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 247k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 247k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 247k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 247k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 247k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 247k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 247k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 247k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 247k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 247k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 247k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 247k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 247k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   247k|            SCN_CLANG_POP
  114|   247k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.22M|{
  174|  1.22M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.22M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.22M|{
  111|  1.22M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.22M|    auto result = vscan_impl(buffer, format, args);
  114|  1.22M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 114k, False: 1.11M]
  |  |  ------------------
  ------------------
  115|   114k|        return unexpected(result.error());
  116|   114k|    }
  117|  1.11M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.22M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.22M|{
  192|  1.22M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.22M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.22M|{
  127|  1.22M|#if !SCN_DISABLE_LOCALE
  128|  1.22M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.22M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.22M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.22M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.22M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 114k, False: 1.11M]
  |  |  ------------------
  ------------------
  135|   114k|        return unexpected(result.error());
  136|   114k|    }
  137|  1.11M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.22M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   243k|{
  205|   243k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   243k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   243k|{
  151|   243k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   243k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   243k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 11.4k, False: 232k]
  |  |  ------------------
  ------------------
  155|  11.4k|        return unexpected(result.error());
  156|  11.4k|    }
  157|   232k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   243k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   114k|{
  174|   114k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   114k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   114k|{
  111|   114k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   114k|    auto result = vscan_impl(buffer, format, args);
  114|   114k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 114k, False: 0]
  |  |  ------------------
  ------------------
  115|   114k|        return unexpected(result.error());
  116|   114k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   114k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   114k|{
  192|   114k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   114k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   114k|{
  127|   114k|#if !SCN_DISABLE_LOCALE
  128|   114k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   114k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   114k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   114k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   114k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 114k, False: 0]
  |  |  ------------------
  ------------------
  135|   114k|        return unexpected(result.error());
  136|   114k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   114k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  11.4k|{
  205|  11.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  11.4k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  11.4k|{
  151|  11.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  11.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  11.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 11.4k, False: 0]
  |  |  ------------------
  ------------------
  155|  11.4k|        return unexpected(result.error());
  156|  11.4k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  11.4k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.18M|{
  111|  1.18M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.18M|    auto result = vscan_impl(buffer, format, args);
  114|  1.18M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 205k, False: 980k]
  |  |  ------------------
  ------------------
  115|   205k|        return unexpected(result.error());
  116|   205k|    }
  117|   980k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   980k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.18M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.18M|{
  127|  1.18M|#if !SCN_DISABLE_LOCALE
  128|  1.18M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.18M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.18M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.18M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.18M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 205k, False: 980k]
  |  |  ------------------
  ------------------
  135|   205k|        return unexpected(result.error());
  136|   205k|    }
  137|   980k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   980k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.18M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   225k|{
  151|   225k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   225k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   225k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.5k, False: 205k]
  |  |  ------------------
  ------------------
  155|  20.5k|        return unexpected(result.error());
  156|  20.5k|    }
  157|   205k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   225k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   205k|{
  111|   205k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   205k|    auto result = vscan_impl(buffer, format, args);
  114|   205k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 205k, False: 0]
  |  |  ------------------
  ------------------
  115|   205k|        return unexpected(result.error());
  116|   205k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   205k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   205k|{
  127|   205k|#if !SCN_DISABLE_LOCALE
  128|   205k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   205k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   205k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   205k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   205k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 205k, False: 0]
  |  |  ------------------
  ------------------
  135|   205k|        return unexpected(result.error());
  136|   205k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   205k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  20.5k|{
  151|  20.5k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  20.5k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  20.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.5k, False: 0]
  |  |  ------------------
  ------------------
  155|  20.5k|        return unexpected(result.error());
  156|  20.5k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  20.5k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   174k|{
   90|   174k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   174k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.18M|{
   45|  1.18M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.18M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   174k|{
  125|   174k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   174k|                                                         format, {});
  127|   174k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.18M|{
   61|  1.18M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.18M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  34.8k|{
  159|  34.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  34.8k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   225k|{
   73|   225k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   225k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   168k|{
   90|   168k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   168k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   168k|{
  125|   168k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   168k|                                                         format, {});
  127|   168k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  31.6k|{
  159|  31.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  31.6k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   222k|{
   90|   222k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   222k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   222k|{
  125|   222k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   222k|                                                         format, {});
  127|   222k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  42.1k|{
  159|  42.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  42.1k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   196k|{
   90|   196k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   196k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   196k|{
  125|   196k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   196k|                                                         format, {});
  127|   196k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  36.9k|{
  159|  36.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  36.9k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   227k|{
   90|   227k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   227k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   227k|{
  125|   227k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   227k|                                                         format, {});
  127|   227k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  42.9k|{
  159|  42.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  42.9k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   198k|{
   90|   198k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   198k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   198k|{
  125|   198k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   198k|                                                         format, {});
  127|   198k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  37.2k|{
  159|  37.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  37.2k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   205k|{
   45|   205k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   205k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   205k|{
   61|   205k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   205k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  20.5k|{
   73|  20.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  20.5k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.43k|{
  159|  3.43k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.43k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  2.81M|            {
 2693|  2.81M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.81M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  2.81M|            {
 2672|  2.81M|                return decay_copy(t.begin());
 2673|  2.81M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEEu7__decayIT_EOS5_:
 2605|  85.7M|    {
 2606|  85.7M|        return std::forward<T>(t);
 2607|  85.7M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.30M|            {
 3178|  5.30M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.30M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.30M|            {
 3158|  5.30M|                return t.data();
 3159|  5.30M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.30M|    {
 6095|  5.30M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 19.9k, False: 5.28M]
  ------------------
 6096|  5.30M|                   ? nullptr
 6097|  5.30M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.30M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.30M|            {
 3127|  5.30M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.30M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.30M|            {
 3098|  5.30M|                return bool((std::forward<T>(t).empty()));
 3099|  5.30M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  12.5M|        {
 6454|  12.5M|            return data_.begin_ == data_.end_;
 6455|  12.5M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  10.5M|    {
 6049|  10.5M|        return static_cast<const D&>(*this);
 6050|  10.5M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  21.6M|            {
 2693|  21.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  21.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  21.6M|            {
 2672|  21.6M|                return decay_copy(t.begin());
 2673|  21.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  49.9M|        {
 6444|  49.9M|            return data_.begin_;
 6445|  49.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.30M|            {
 3038|  5.30M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.30M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.30M|            {
 3000|  5.30M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.30M|            }
_ZN4nano6ranges6detail10decay_copyIlEEu7__decayIT_EOS3_:
 2605|  22.1M|    {
 2606|  22.1M|        return std::forward<T>(t);
 2607|  22.1M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  12.6M|        {
 6462|  12.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  12.6M|                return data_.size_;
 6464|  12.6M|            }
 6465|  12.6M|            else {
 6466|  12.6M|                return data_.end_ - data_.begin_;
 6467|  12.6M|            }
 6468|  12.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  9.08M|            {
 3788|  9.08M|                ranges::advance(x, n);
 3789|  9.08M|                return x;
 3790|  9.08M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  9.08M|            {
 3678|  9.08M|                fn::impl(i, n);
 3679|  9.08M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  9.08M|            {
 3562|  9.08M|                r += n;
 3563|  9.08M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  26.2M|            {
 2693|  26.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  26.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  26.2M|            {
 2672|  26.2M|                return decay_copy(t.begin());
 2673|  26.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  13.1M|            {
 2759|  13.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  13.1M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  13.1M|            {
 2739|  13.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  13.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  33.3M|        {
 6449|  33.3M|            return data_.end_;
 6450|  33.3M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  5.26M|            {
 2759|  5.26M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.26M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  5.26M|            {
 2739|  5.26M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.26M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  21.3M|        {
 6375|  21.3M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  21.3M|        {
 6294|  21.3M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   241k|            {
 2693|   241k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   241k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   241k|            {
 2672|   241k|                return decay_copy(t.begin());
 2673|   241k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEEu7__decayIT_EOSB_:
 2605|  1.06M|    {
 2606|  1.06M|        return std::forward<T>(t);
 2607|  1.06M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   241k|            {
 2693|   241k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   241k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   241k|            {
 2672|   241k|                return decay_copy(t.begin());
 2673|   241k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   241k|        {
 6444|   241k|            return data_.begin_;
 6445|   241k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   344k|            {
 2759|   344k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   344k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   344k|            {
 2739|   344k|                return decay_copy(std::forward<T>(t).end());
 2740|   344k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   344k|        {
 6449|   344k|            return data_.end_;
 6450|   344k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   241k|            {
 2759|   241k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   241k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   241k|            {
 2739|   241k|                return decay_copy(std::forward<T>(t).end());
 2740|   241k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   241k|        {
 6375|   241k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   241k|        {
 6294|   241k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   744k|            {
 2693|   744k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   744k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   744k|            {
 2672|   744k|                return decay_copy(t.begin());
 2673|   744k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEEu7__decayIT_EOS5_:
 2605|   120M|    {
 2606|   120M|        return std::forward<T>(t);
 2607|   120M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.59M|            {
 3178|  2.59M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.59M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.59M|            {
 3158|  2.59M|                return t.data();
 3159|  2.59M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.59M|    {
 6095|  2.59M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.9k, False: 2.57M]
  ------------------
 6096|  2.59M|                   ? nullptr
 6097|  2.59M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.59M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.59M|            {
 3127|  2.59M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.59M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.59M|            {
 3098|  2.59M|                return bool((std::forward<T>(t).empty()));
 3099|  2.59M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  4.26M|        {
 6454|  4.26M|            return data_.begin_ == data_.end_;
 6455|  4.26M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  5.17M|    {
 6049|  5.17M|        return static_cast<const D&>(*this);
 6050|  5.17M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  20.3M|            {
 2693|  20.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  20.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  20.3M|            {
 2672|  20.3M|                return decay_copy(t.begin());
 2673|  20.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  51.8M|        {
 6444|  51.8M|            return data_.begin_;
 6445|  51.8M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.59M|            {
 3038|  2.59M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.59M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.59M|            {
 3000|  2.59M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.59M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  9.49M|        {
 6462|  9.49M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  9.49M|                return data_.size_;
 6464|  9.49M|            }
 6465|  9.49M|            else {
 6466|  9.49M|                return data_.end_ - data_.begin_;
 6467|  9.49M|            }
 6468|  9.49M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  10.7M|            {
 3788|  10.7M|                ranges::advance(x, n);
 3789|  10.7M|                return x;
 3790|  10.7M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  10.7M|            {
 3678|  10.7M|                fn::impl(i, n);
 3679|  10.7M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  10.7M|            {
 3562|  10.7M|                r += n;
 3563|  10.7M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  29.5M|            {
 2693|  29.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  29.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  29.5M|            {
 2672|  29.5M|                return decay_copy(t.begin());
 2673|  29.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  12.1M|            {
 2759|  12.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.1M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  12.1M|            {
 2739|  12.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  12.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  69.8M|        {
 6449|  69.8M|            return data_.end_;
 6450|  69.8M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  3.52M|            {
 2759|  3.52M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.52M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  3.52M|            {
 2739|  3.52M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.52M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  20.1M|        {
 6375|  20.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  20.1M|        {
 6294|  20.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   432k|            {
 2693|   432k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   432k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   432k|            {
 2672|   432k|                return decay_copy(t.begin());
 2673|   432k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEEu7__decayIT_EOSB_:
 2605|  1.91M|    {
 2606|  1.91M|        return std::forward<T>(t);
 2607|  1.91M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   432k|            {
 2693|   432k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   432k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   432k|            {
 2672|   432k|                return decay_copy(t.begin());
 2673|   432k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   432k|        {
 6444|   432k|            return data_.begin_;
 6445|   432k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   617k|            {
 2759|   617k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   617k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   617k|            {
 2739|   617k|                return decay_copy(std::forward<T>(t).end());
 2740|   617k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   617k|        {
 6449|   617k|            return data_.end_;
 6450|   617k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   432k|            {
 2759|   432k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   432k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   432k|            {
 2739|   432k|                return decay_copy(std::forward<T>(t).end());
 2740|   432k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   432k|        {
 6375|   432k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   432k|        {
 6294|   432k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  4.28M|        {
 6444|  4.28M|            return data_.begin_;
 6445|  4.28M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  7.98M|        {
 6444|  7.98M|            return data_.begin_;
 6445|  7.98M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  14.5M|    {
 6044|  14.5M|        return static_cast<D&>(*this);
 6045|  14.5M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  7.29M|            {
 3098|  7.29M|                return bool((std::forward<T>(t).empty()));
 3099|  7.29M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  7.29M|            {
 3127|  7.29M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  7.29M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  7.29M|    {
 6085|  7.29M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 7.29M]
  ------------------
 6086|  7.29M|                   ? nullptr
 6087|  7.29M|                   : std::addressof(*ranges::begin(derived()));
 6088|  7.29M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  16.5M|            {
 2739|  16.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  16.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  16.5M|            {
 2759|  16.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  16.5M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.32M|    {
 6044|  3.32M|        return static_cast<D&>(*this);
 6045|  3.32M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.66M|            {
 3098|  1.66M|                return bool((std::forward<T>(t).empty()));
 3099|  1.66M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.66M|            {
 3127|  1.66M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.66M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.66M|    {
 6085|  1.66M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 1.66M]
  ------------------
 6086|  1.66M|                   ? nullptr
 6087|  1.66M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.66M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  54.3M|            {
 2739|  54.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  54.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  54.3M|            {
 2759|  54.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  54.3M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  4.37M|            {
 3780|  4.37M|                ++x;
 3781|  4.37M|                return x;
 3782|  4.37M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.34M|            {
 3038|  7.34M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.34M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.34M|            {
 3000|  7.34M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.34M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  7.29M|            {
 3178|  7.29M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  7.29M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  7.29M|            {
 3158|  7.29M|                return t.data();
 3159|  7.29M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   477k|            {
 3828|   477k|                --x;
 3829|   477k|                return x;
 3830|   477k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   640k|            {
 3077|   640k|                return fn::impl(std::forward<T>(t));
 3078|   640k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   640k|            {
 3067|   640k|                return static_cast<ssize_return_t<T>>(
 3068|   640k|                    ranges::size(std::forward<T>(t)));
 3069|   640k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   640k|            {
 3038|   640k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   640k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   640k|            {
 3000|   640k|                return decay_copy(std::forward<T>(t).size());
 3001|   640k|            }
_ZN4nano6ranges6detail10decay_copyImEEu7__decayIT_EOS3_:
 2605|  6.73M|    {
 2606|  6.73M|        return std::forward<T>(t);
 2607|  6.73M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  6.09M|            {
 3077|  6.09M|                return fn::impl(std::forward<T>(t));
 3078|  6.09M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  6.09M|            {
 3067|  6.09M|                return static_cast<ssize_return_t<T>>(
 3068|  6.09M|                    ranges::size(std::forward<T>(t)));
 3069|  6.09M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  6.09M|            {
 3038|  6.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.09M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  6.09M|            {
 3000|  6.09M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.09M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  5.17M|            {
 1300|  5.17M|                return fn::impl(std::forward<F>(f),
 1301|  5.17M|                                std::forward<Args>(args)...);
 1302|  5.17M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|  5.17M|            {
 1289|  5.17M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.17M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  5.17M|    {
 1142|  5.17M|        return std::forward<T>(t);
 1143|  5.17M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  9.31M|            {
 3756|  9.31M|                return fn::impl(std::move(first), std::move(last));
 3757|  9.31M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  9.31M|            {
 3716|  9.31M|                return s - i;
 3717|  9.31M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.06M|        {
 6375|  1.06M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.06M|        {
 6294|  1.06M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.06M|            {
 2693|  2.06M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.06M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.06M|            {
 2672|  2.06M|                return decay_copy(t.begin());
 2673|  2.06M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  4.07M|    {
 2606|  4.07M|        return std::forward<T>(t);
 2607|  4.07M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   689k|            {
 2759|   689k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   689k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   689k|            {
 2739|   689k|                return decay_copy(std::forward<T>(t).end());
 2740|   689k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEEu7__decayIT_EOS4_:
 2605|  4.61M|    {
 2606|  4.61M|        return std::forward<T>(t);
 2607|  4.61M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.65M|        {
 6449|  1.65M|            return data_.end_;
 6450|  1.65M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   275k|            {
 3780|   275k|                ++x;
 3781|   275k|                return x;
 3782|   275k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   149k|        {
 6793|   149k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   149k|                                    proj);
 6795|   149k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   149k|        {
 6761|   149k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 149k, False: 0]
  ------------------
 6762|   149k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 149k, False: 0]
  ------------------
 6763|   149k|                    return first;
 6764|   149k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   149k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   149k|            {
 1300|   149k|                return fn::impl(std::forward<F>(f),
 1301|   149k|                                std::forward<Args>(args)...);
 1302|   149k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|   149k|            {
 1289|   149k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   149k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   149k|            {
 1300|   149k|                return fn::impl(std::forward<F>(f),
 1301|   149k|                                std::forward<Args>(args)...);
 1302|   149k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|   149k|            {
 1289|   149k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   149k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   149k|    {
 1142|   149k|        return std::forward<T>(t);
 1143|   149k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   964k|            {
 2759|   964k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   964k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   964k|            {
 2739|   964k|                return decay_copy(std::forward<T>(t).end());
 2740|   964k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.00M|            {
 2693|  2.00M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.00M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.00M|            {
 2672|  2.00M|                return decay_copy(t.begin());
 2673|  2.00M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.66M|            {
 3178|  1.66M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.66M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.66M|            {
 3158|  1.66M|                return t.data();
 3159|  1.66M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  6.89M|            {
 3038|  6.89M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.89M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  6.89M|            {
 3000|  6.89M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.89M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  4.10M|            {
 3780|  4.10M|                ++x;
 3781|  4.10M|                return x;
 3782|  4.10M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  5.23M|            {
 3077|  5.23M|                return fn::impl(std::forward<T>(t));
 3078|  5.23M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  5.23M|            {
 3067|  5.23M|                return static_cast<ssize_return_t<T>>(
 3068|  5.23M|                    ranges::size(std::forward<T>(t)));
 3069|  5.23M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   428k|            {
 3828|   428k|                --x;
 3829|   428k|                return x;
 3830|   428k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  6.01M|            {
 3756|  6.01M|                return fn::impl(std::move(first), std::move(last));
 3757|  6.01M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  6.01M|            {
 3716|  6.01M|                return s - i;
 3717|  6.01M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.91M|        {
 6375|  1.91M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.91M|        {
 6294|  1.91M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.01M|            {
 2693|  4.01M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.01M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.01M|            {
 2672|  4.01M|                return decay_copy(t.begin());
 2673|  4.01M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  7.61M|    {
 2606|  7.61M|        return std::forward<T>(t);
 2607|  7.61M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.23M|            {
 2759|  1.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.23M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.23M|            {
 2739|  1.23M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.23M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.96M|        {
 6449|  2.96M|            return data_.end_;
 6450|  2.96M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   494k|            {
 3780|   494k|                ++x;
 3781|   494k|                return x;
 3782|   494k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   267k|        {
 6793|   267k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   267k|                                    proj);
 6795|   267k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   267k|        {
 6761|   267k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 267k, False: 0]
  ------------------
 6762|   267k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 267k, False: 0]
  ------------------
 6763|   267k|                    return first;
 6764|   267k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   267k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   267k|            {
 1300|   267k|                return fn::impl(std::forward<F>(f),
 1301|   267k|                                std::forward<Args>(args)...);
 1302|   267k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|   267k|            {
 1289|   267k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   267k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   267k|            {
 1300|   267k|                return fn::impl(std::forward<F>(f),
 1301|   267k|                                std::forward<Args>(args)...);
 1302|   267k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|   267k|            {
 1289|   267k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   267k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   267k|    {
 1142|   267k|        return std::forward<T>(t);
 1143|   267k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.72M|            {
 2759|  1.72M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.72M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.72M|            {
 2739|  1.72M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.72M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.60M|            {
 2693|  3.60M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.60M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.60M|            {
 2672|  3.60M|                return decay_copy(t.begin());
 2673|  3.60M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.57M|        {
 6793|  2.57M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.57M|                                    proj);
 6795|  2.57M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.57M|        {
 6761|  5.21M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.17M, False: 38.6k]
  ------------------
 6762|  5.17M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.53M, False: 2.64M]
  ------------------
 6763|  2.53M|                    return first;
 6764|  2.53M|                }
 6765|  2.64M|                ++first;
 6766|  2.64M|            }
 6767|  38.6k|            return first;
 6768|  2.57M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  5.17M|            {
 1300|  5.17M|                return fn::impl(std::forward<F>(f),
 1301|  5.17M|                                std::forward<Args>(args)...);
 1302|  5.17M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|  5.17M|            {
 1289|  5.17M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.17M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   282k|{
   50|   282k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   282k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   102k|{
   50|   102k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   102k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  55.8k|{
   50|  55.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  55.8k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   149k|    {
   44|   149k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   267k|    {
   44|   267k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  45.2k|{
   50|  45.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  45.2k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  6.64M|    {
 1191|  6.64M|        return has_value();
 1192|  6.64M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  12.6M|    {
  189|  12.6M|        return m_has_value;
  190|  12.6M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.34M|    {
 1197|  1.34M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.34M|        return this->get_unexpected().error();
 1199|  1.34M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.34M|    {
  172|  1.34M|        return m_unexpected;
  173|  1.34M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.0M|    {
   72|  10.0M|        return m_unexpected;
   73|  10.0M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  4.99M|    {
   58|  4.99M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  4.99M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  4.99M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   241k|    {
 1078|   241k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   241k|    {
  151|   241k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  5.94M|    {
   67|  5.94M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  5.94M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  5.94M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.69M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  4.62M|    {
 1251|  4.62M|        return value();
 1252|  4.62M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  4.62M|    {
 1221|  4.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  4.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  4.62M|        return this->get_value();
 1223|  4.62M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  4.62M|    {
  155|  4.62M|        return m_value;
  156|  4.62M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.45M|    {
 1034|  2.45M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.45M|    {
  142|  2.45M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.69M|    {
 1191|  2.69M|        return has_value();
 1192|  2.69M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.39M|    {
  189|  5.39M|        return m_has_value;
  190|  5.39M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   241k|    {
 1197|   241k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   241k|        return this->get_unexpected().error();
 1199|   241k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   241k|    {
  172|   241k|        return m_unexpected;
  173|   241k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   394k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.22M|    {
 1251|  2.22M|        return value();
 1252|  2.22M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.45M|    {
 1221|  2.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.45M|        return this->get_value();
 1223|  2.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.45M|    {
  155|  2.45M|        return m_value;
  156|  2.45M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   353k|    {
 1034|   353k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   353k|    {
  142|   353k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   394k|    {
 1191|   394k|        return has_value();
 1192|   394k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   748k|    {
  189|   748k|        return m_has_value;
  190|   748k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   353k|    {
 1274|   353k|        return std::addressof(value());
 1275|   353k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   353k|    {
 1221|   353k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   353k|        return this->get_value();
 1223|   353k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   353k|    {
  155|   353k|        return m_value;
  156|   353k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   232k|    {
 1263|   232k|        return std::move(value());
 1264|   232k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   373k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   333k|    {
 1034|   333k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   333k|    {
  142|   333k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   373k|    {
 1191|   373k|        return has_value();
 1192|   373k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   707k|    {
  189|   707k|        return m_has_value;
  190|   707k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   333k|    {
 1274|   333k|        return std::addressof(value());
 1275|   333k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   333k|    {
 1221|   333k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   333k|        return this->get_value();
 1223|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   333k|    {
  155|   333k|        return m_value;
  156|   333k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   516k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   476k|    {
 1034|   476k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   476k|    {
  142|   476k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   516k|    {
 1191|   516k|        return has_value();
 1192|   516k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   992k|    {
  189|   992k|        return m_has_value;
  190|   992k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   476k|    {
 1274|   476k|        return std::addressof(value());
 1275|   476k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   476k|    {
 1221|   476k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   476k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   476k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   476k|        return this->get_value();
 1223|   476k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   476k|    {
  155|   476k|        return m_value;
  156|   476k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   438k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   398k|    {
 1034|   398k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   398k|    {
  142|   398k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   438k|    {
 1191|   438k|        return has_value();
 1192|   438k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   837k|    {
  189|   837k|        return m_has_value;
  190|   837k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   398k|    {
 1274|   398k|        return std::addressof(value());
 1275|   398k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   398k|    {
 1221|   398k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   398k|        return this->get_value();
 1223|   398k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   398k|    {
  155|   398k|        return m_value;
  156|   398k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   529k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   489k|    {
 1034|   489k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   489k|    {
  142|   489k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   529k|    {
 1191|   529k|        return has_value();
 1192|   529k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.01M|    {
  189|  1.01M|        return m_has_value;
  190|  1.01M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   489k|    {
 1274|   489k|        return std::addressof(value());
 1275|   489k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   489k|    {
 1221|   489k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   489k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   489k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   489k|        return this->get_value();
 1223|   489k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   489k|    {
  155|   489k|        return m_value;
  156|   489k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   442k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   402k|    {
 1034|   402k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   402k|    {
  142|   402k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   442k|    {
 1191|   442k|        return has_value();
 1192|   442k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   845k|    {
  189|   845k|        return m_has_value;
  190|   845k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   402k|    {
 1274|   402k|        return std::addressof(value());
 1275|   402k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   402k|    {
 1221|   402k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   402k|        return this->get_value();
 1223|   402k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   402k|    {
  155|   402k|        return m_value;
  156|   402k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   241k|    {
 1078|   241k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   241k|    {
  151|   241k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   241k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   241k|    {
 1191|   241k|        return has_value();
 1192|   241k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   482k|    {
  189|   482k|        return m_has_value;
  190|   482k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   241k|    {
 1197|   241k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   241k|        return this->get_unexpected().error();
 1199|   241k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   241k|    {
  172|   241k|        return m_unexpected;
  173|   241k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.1k|    {
 1078|  40.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.1k|    {
  151|  40.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  40.1k|    {
 1191|  40.1k|        return has_value();
 1192|  40.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.1k|    {
  189|  40.1k|        return m_has_value;
  190|  40.1k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   432k|    {
 1078|   432k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   432k|    {
  151|   432k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.59M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.16M|    {
 1034|  2.16M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.16M|    {
  142|  2.16M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.59M|    {
 1191|  2.59M|        return has_value();
 1192|  2.59M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.19M|    {
  189|  5.19M|        return m_has_value;
  190|  5.19M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   432k|    {
 1197|   432k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   432k|        return this->get_unexpected().error();
 1199|   432k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   432k|    {
  172|   432k|        return m_unexpected;
  173|   432k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   383k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.96M|    {
 1251|  1.96M|        return value();
 1252|  1.96M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.16M|    {
 1221|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.16M|        return this->get_value();
 1223|  2.16M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.16M|    {
  155|  2.16M|        return m_value;
  156|  2.16M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   311k|    {
 1034|   311k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   311k|    {
  142|   311k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   383k|    {
 1191|   383k|        return has_value();
 1192|   383k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   695k|    {
  189|   695k|        return m_has_value;
  190|   695k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   311k|    {
 1274|   311k|        return std::addressof(value());
 1275|   311k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   311k|    {
 1221|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   311k|        return this->get_value();
 1223|   311k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   311k|    {
  155|   311k|        return m_value;
  156|   311k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   205k|    {
 1263|   205k|        return std::move(value());
 1264|   205k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   368k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   295k|    {
 1034|   295k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   295k|    {
  142|   295k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   368k|    {
 1191|   368k|        return has_value();
 1192|   368k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   663k|    {
  189|   663k|        return m_has_value;
  190|   663k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   295k|    {
 1274|   295k|        return std::addressof(value());
 1275|   295k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   295k|    {
 1221|   295k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   295k|        return this->get_value();
 1223|   295k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   295k|    {
  155|   295k|        return m_value;
  156|   295k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   486k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   414k|    {
 1034|   414k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   414k|    {
  142|   414k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   486k|    {
 1191|   486k|        return has_value();
 1192|   486k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   901k|    {
  189|   901k|        return m_has_value;
  190|   901k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   414k|    {
 1274|   414k|        return std::addressof(value());
 1275|   414k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   414k|    {
 1221|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   414k|        return this->get_value();
 1223|   414k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   414k|    {
  155|   414k|        return m_value;
  156|   414k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   429k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   357k|    {
 1034|   357k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   357k|    {
  142|   357k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   429k|    {
 1191|   429k|        return has_value();
 1192|   429k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   786k|    {
  189|   786k|        return m_has_value;
  190|   786k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   357k|    {
 1274|   357k|        return std::addressof(value());
 1275|   357k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   357k|    {
 1221|   357k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   357k|        return this->get_value();
 1223|   357k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   357k|    {
  155|   357k|        return m_value;
  156|   357k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   497k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   425k|    {
 1034|   425k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   425k|    {
  142|   425k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   497k|    {
 1191|   497k|        return has_value();
 1192|   497k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   922k|    {
  189|   922k|        return m_has_value;
  190|   922k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   425k|    {
 1274|   425k|        return std::addressof(value());
 1275|   425k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   425k|    {
 1221|   425k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   425k|        return this->get_value();
 1223|   425k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   425k|    {
  155|   425k|        return m_value;
  156|   425k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   433k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   361k|    {
 1034|   361k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   361k|    {
  142|   361k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   433k|    {
 1191|   433k|        return has_value();
 1192|   433k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   794k|    {
  189|   794k|        return m_has_value;
  190|   794k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   361k|    {
 1274|   361k|        return std::addressof(value());
 1275|   361k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   361k|    {
 1221|   361k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   361k|        return this->get_value();
 1223|   361k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   361k|    {
  155|   361k|        return m_value;
  156|   361k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   432k|    {
 1078|   432k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   432k|    {
  151|   432k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   432k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   432k|    {
 1191|   432k|        return has_value();
 1192|   432k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   864k|    {
  189|   864k|        return m_has_value;
  190|   864k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   432k|    {
 1197|   432k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   432k|        return this->get_unexpected().error();
 1199|   432k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   432k|    {
  172|   432k|        return m_unexpected;
  173|   432k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  72.0k|    {
 1078|  72.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  72.0k|    {
  151|  72.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  72.0k|    {
 1191|  72.0k|        return has_value();
 1192|  72.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  72.0k|    {
  189|  72.0k|        return m_has_value;
  190|  72.0k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.62M|    {
 1405|  2.62M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.62M|                                            std::forward<F>(f));
 1407|  2.62M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.62M|{
  927|  2.62M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.62M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.62M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.62M|            return result(*std::forward<Exp>(exp));
  931|  2.62M|        }
  932|       |
  933|  2.62M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.62M|        return result(unexpect, monostate{});
  935|  2.62M|    }
  936|  2.62M|    else {
  937|  2.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.60M, False: 25.9k]
  |  |  ------------------
  ------------------
  939|  2.62M|                   ? result(*std::forward<Exp>(exp))
  940|  2.62M|                   : result(unexpect,
  941|  25.9k|                            std::invoke(std::forward<F>(f),
  942|  25.9k|                                        std::forward<Exp>(exp).error()));
  943|  2.62M|    }
  944|  2.62M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  10.6M|    {
  189|  10.6M|        return m_has_value;
  190|  10.6M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.60M|    {
 1263|  2.60M|        return std::move(value());
 1264|  2.60M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.65M|    {
 1221|  3.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.65M|        return this->get_value();
 1223|  3.65M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.65M|    {
  155|  3.65M|        return m_value;
  156|  3.65M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  10.2M|    {
 1034|  10.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.2M|    {
  142|  10.2M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  25.9k|    {
 1207|  25.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  25.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  25.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|  25.9k|        return std::move(this->get_unexpected().error());
 1209|  25.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  27.3k|    {
  172|  27.3k|        return m_unexpected;
  173|  27.3k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   340k|    {
   72|   340k|        return m_unexpected;
   73|   340k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  25.9k|    {
 1088|  25.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   326k|    {
  151|   326k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  10.5M|    {
 1191|  10.5M|        return has_value();
 1192|  10.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  21.1M|    {
  189|  21.1M|        return m_has_value;
  190|  21.1M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   326k|    {
 1197|   326k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   326k|        return this->get_unexpected().error();
 1199|   326k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   326k|    {
  172|   326k|        return m_unexpected;
  173|   326k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   300k|    {
 1078|   300k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.48M|    {
 1263|  8.48M|        return std::move(value());
 1264|  8.48M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.2M|    {
 1221|  10.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  10.2M|        return this->get_value();
 1223|  10.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  10.2M|    {
  155|  10.2M|        return m_value;
  156|  10.2M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   486k|    {
   58|   486k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   486k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   486k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.34M|    {
 1078|  1.34M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.34M|    {
  151|  1.34M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.96M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  57.0k|    {
   58|  57.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  57.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.0k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  27.3k|    {
 1078|  27.3k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  27.3k|    {
  151|  27.3k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   170k|    {
   67|   170k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   170k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   170k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  6.97M|    {
 1034|  6.97M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.97M|    {
  142|  6.97M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  4.37M|    {
 1191|  4.37M|        return has_value();
 1192|  4.37M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.41k|    {
 1197|  1.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.41k|        return this->get_unexpected().error();
 1199|  1.41k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  56.9k|    {
   58|  56.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  56.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  56.9k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  55.2k|    {
 1078|  55.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  5.92M|    {
   72|  5.92M|        return m_unexpected;
   73|  5.92M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  55.2k|    {
  151|  55.2k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   283k|    {
   67|   283k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   283k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   283k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.05M|    {
 1251|  1.05M|        return value();
 1252|  1.05M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.95M|    {
 1034|  1.95M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.95M|    {
  142|  1.95M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  21.1M|    {
   58|  21.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  21.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  21.1M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.71M|    {
 1078|  9.71M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  21.1M|    {
   72|  21.1M|        return m_unexpected;
   73|  21.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.71M|    {
  151|  9.71M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  21.1M|    {
   67|  21.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  21.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  21.1M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  11.7M|    {
 1191|  11.7M|        return has_value();
 1192|  11.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  16.2M|    {
  189|  16.2M|        return m_has_value;
  190|  16.2M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  2.43M|    {
 1197|  2.43M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  2.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  2.43M|        return this->get_unexpected().error();
 1199|  2.43M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.43M|    {
  172|  2.43M|        return m_unexpected;
  173|  2.43M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.60M|    {
 1034|  2.60M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.60M|    {
  142|  2.60M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.60M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   113k|    {
   58|   113k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   113k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.02M|    {
 1251|  2.02M|        return value();
 1252|  2.02M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.02M|    {
 1221|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.02M|        return this->get_value();
 1223|  2.02M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.02M|    {
  155|  2.02M|        return m_value;
  156|  2.02M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.60M|    {
 1191|  2.60M|        return has_value();
 1192|  2.60M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  5.20M|    {
  189|  5.20M|        return m_has_value;
  190|  5.20M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.60M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.60M|    {
 1263|  2.60M|        return std::move(value());
 1264|  2.60M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.60M|    {
 1221|  2.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.60M|        return this->get_value();
 1223|  2.60M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.60M|    {
  155|  2.60M|        return m_value;
  156|  2.60M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  61.9k|    {
 1034|  61.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  61.9k|    {
  142|  61.9k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.60M|    {
 1034|  2.60M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.60M|    {
  142|  2.60M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.60M|    {
 1405|  2.60M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.60M|                                            std::forward<F>(f));
 1407|  2.60M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.60M|{
  927|  2.60M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.60M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.60M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.60M|            return result(*std::forward<Exp>(exp));
  931|  2.60M|        }
  932|       |
  933|  2.60M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.60M|        return result(unexpect, monostate{});
  935|  2.60M|    }
  936|  2.60M|    else {
  937|  2.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.60M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.60M|                   ? result(*std::forward<Exp>(exp))
  940|  2.60M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.60M|    }
  944|  2.60M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  5.20M|    {
  189|  5.20M|        return m_has_value;
  190|  5.20M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.60M|    {
 1263|  2.60M|        return std::move(value());
 1264|  2.60M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.60M|    {
 1221|  2.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.60M|        return this->get_value();
 1223|  2.60M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.60M|    {
  155|  2.60M|        return m_value;
  156|  2.60M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.60M|    {
 1034|  2.60M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.60M|    {
  142|  2.60M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.60M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  2.60M|    {
 1191|  2.60M|        return has_value();
 1192|  2.60M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.20M|    {
  189|  5.20M|        return m_has_value;
  190|  5.20M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.60M|    {
 1263|  2.60M|        return std::move(value());
 1264|  2.60M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.60M|    {
 1221|  2.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.60M|        return this->get_value();
 1223|  2.60M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.60M|    {
  155|  2.60M|        return m_value;
  156|  2.60M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  8.11k|    {
 1078|  8.11k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  8.11k|    {
  312|  8.11k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  8.11k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  8.11k|    {
  373|  8.11k|        scn::detail::construct_at(unexpected_ptr(),
  374|  8.11k|                                  std::forward<Args>(args)...);
  375|  8.11k|        m_has_value = false;
  376|  8.11k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   100k|{
  102|   100k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   100k|        T(std::forward<Args>(args)...);
  104|   100k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  24.3k|    {
  403|  24.3k|        return reinterpret_cast<unexpected<E>*>(
  404|  24.3k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  24.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  24.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   354k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   354k|    {
  317|   354k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 346k, False: 8.11k]
  ------------------
  318|   346k|            destroy_value();
  319|   346k|        }
  320|  8.11k|        else {
  321|  8.11k|            destroy_unexpected();
  322|  8.11k|        }
  323|   354k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.06M|    {
  361|  1.06M|        return m_has_value;
  362|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   346k|    {
  380|   346k|        scn::detail::destroy_at(value_ptr());
  381|   346k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   346k|{
  108|   346k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   346k|        for (auto& elem : *p) {
  110|   346k|            scn::detail::destroy_at(std::addressof(elem));
  111|   346k|        }
  112|   346k|    }
  113|   346k|    else {
  114|   346k|        p->~T();
  115|   346k|    }
  116|   346k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.03M|    {
  390|  1.03M|        return reinterpret_cast<T*>(
  391|  1.03M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  205|  1.03M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.03M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  8.11k|    {
  384|  8.11k|        scn::detail::destroy_at(unexpected_ptr());
  385|  8.11k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   100k|{
  108|   100k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   100k|        for (auto& elem : *p) {
  110|   100k|            scn::detail::destroy_at(std::addressof(elem));
  111|   100k|        }
  112|   100k|    }
  113|   100k|    else {
  114|   100k|        p->~T();
  115|   100k|    }
  116|   100k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   346k|    {
 1034|   346k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   346k|    {
  303|   346k|        construct(std::forward<Args>(args)...);
  304|   346k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   346k|    {
  367|   346k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   346k|        m_has_value = true;
  369|   346k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   346k|{
  102|   346k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   346k|        T(std::forward<Args>(args)...);
  104|   346k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   354k|    {
 1191|   354k|        return has_value();
 1192|   354k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  8.11k|    {
 1197|  8.11k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  8.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  8.11k|        return this->get_unexpected().error();
 1199|  8.11k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  8.11k|    {
  344|  8.11k|        return *unexpected_ptr();
  345|  8.11k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   346k|    {
 1263|   346k|        return std::move(value());
 1264|   346k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   346k|    {
 1221|   346k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   346k|        return this->get_value();
 1223|   346k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   346k|    {
  327|   346k|        return *value_ptr();
  328|   346k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.75M|    {
 1251|  1.75M|        return value();
 1252|  1.75M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   113k|    {
   58|   113k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   113k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  4.62M|    {
 1034|  4.62M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  4.62M|    {
  142|  4.62M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   757k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   757k|    {
 1034|   757k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   757k|    {
  142|   757k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   172k|    {
 1405|   172k|        return detail::transform_error_impl(std::move(*this),
 1406|   172k|                                            std::forward<F>(f));
 1407|   172k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   172k|{
  927|   172k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   172k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   172k|        if (SCN_LIKELY(exp.has_value())) {
  930|   172k|            return result(*std::forward<Exp>(exp));
  931|   172k|        }
  932|       |
  933|   172k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   172k|        return result(unexpect, monostate{});
  935|   172k|    }
  936|   172k|    else {
  937|   172k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   172k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   172k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 172k, False: 0]
  |  |  ------------------
  ------------------
  939|   172k|                   ? result(*std::forward<Exp>(exp))
  940|   172k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   172k|    }
  944|   172k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.23M|    {
  189|  1.23M|        return m_has_value;
  190|  1.23M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   481k|    {
 1263|   481k|        return std::move(value());
 1264|   481k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   481k|    {
 1221|   481k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   481k|        return this->get_value();
 1223|   481k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   481k|    {
  155|   481k|        return m_value;
  156|   481k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   172k|    {
 1034|   172k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   172k|    {
  142|   172k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   493k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    162|    {
 1207|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    162|        return std::move(this->get_unexpected().error());
 1209|    162|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    162|    {
  172|    162|        return m_unexpected;
  173|    162|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   149k|    {
 1088|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   321k|    {
  151|   321k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   275k|    {
 1191|   275k|        return has_value();
 1192|   275k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    324|    {
  151|    324|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.14M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   837k|    {
 1078|   837k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   837k|    {
  151|   837k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|   998k|    {
 1191|   998k|        return has_value();
 1192|   998k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   172k|    {
 1197|   172k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   172k|        return this->get_unexpected().error();
 1199|   172k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   321k|    {
  172|   321k|        return m_unexpected;
  173|   321k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   172k|    {
 1034|   172k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   172k|    {
  142|   172k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   172k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   309k|    {
 1221|   309k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   309k|        return this->get_value();
 1223|   309k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   309k|    {
  155|   309k|        return m_value;
  156|   309k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   172k|    {
 1191|   172k|        return has_value();
 1192|   172k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   344k|    {
  189|   344k|        return m_has_value;
  190|   344k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   172k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   172k|    {
 1263|   172k|        return std::move(value());
 1264|   172k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   172k|    {
 1221|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   172k|        return this->get_value();
 1223|   172k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   172k|    {
  155|   172k|        return m_value;
  156|   172k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   309k|    {
 1405|   309k|        return detail::transform_error_impl(std::move(*this),
 1406|   309k|                                            std::forward<F>(f));
 1407|   309k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   309k|{
  927|   309k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   309k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   309k|        if (SCN_LIKELY(exp.has_value())) {
  930|   309k|            return result(*std::forward<Exp>(exp));
  931|   309k|        }
  932|       |
  933|   309k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   309k|        return result(unexpect, monostate{});
  935|   309k|    }
  936|   309k|    else {
  937|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 309k, False: 162]
  |  |  ------------------
  ------------------
  939|   309k|                   ? result(*std::forward<Exp>(exp))
  940|   309k|                   : result(unexpect,
  941|    162|                            std::invoke(std::forward<F>(f),
  942|    162|                                        std::forward<Exp>(exp).error()));
  943|   309k|    }
  944|   309k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   309k|    {
 1034|   309k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   309k|    {
  142|   309k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    162|    {
 1088|    162|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   309k|    {
 1263|   309k|        return std::move(value());
 1264|   309k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   172k|    {
 1034|   172k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   172k|    {
  142|   172k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   172k|    {
 1405|   172k|        return detail::transform_error_impl(std::move(*this),
 1406|   172k|                                            std::forward<F>(f));
 1407|   172k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   172k|{
  927|   172k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   172k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   172k|        if (SCN_LIKELY(exp.has_value())) {
  930|   172k|            return result(*std::forward<Exp>(exp));
  931|   172k|        }
  932|       |
  933|   172k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   172k|        return result(unexpect, monostate{});
  935|   172k|    }
  936|   172k|    else {
  937|   172k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   172k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   172k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 172k, False: 0]
  |  |  ------------------
  ------------------
  939|   172k|                   ? result(*std::forward<Exp>(exp))
  940|   172k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   172k|    }
  944|   172k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   344k|    {
  189|   344k|        return m_has_value;
  190|   344k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   172k|    {
 1263|   172k|        return std::move(value());
 1264|   172k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   172k|    {
 1221|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   172k|        return this->get_value();
 1223|   172k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   172k|    {
  155|   172k|        return m_value;
  156|   172k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   172k|    {
 1034|   172k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   172k|    {
  142|   172k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   172k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   172k|    {
 1191|   172k|        return has_value();
 1192|   172k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   344k|    {
  189|   344k|        return m_has_value;
  190|   344k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   172k|    {
 1263|   172k|        return std::move(value());
 1264|   172k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   172k|    {
 1221|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   172k|        return this->get_value();
 1223|   172k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   172k|    {
  155|   172k|        return m_value;
  156|   172k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   149k|    {
 1405|   149k|        return detail::transform_error_impl(std::move(*this),
 1406|   149k|                                            std::forward<F>(f));
 1407|   149k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   149k|{
  927|   149k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   149k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   149k|        if (SCN_LIKELY(exp.has_value())) {
  930|   149k|            return result(*std::forward<Exp>(exp));
  931|   149k|        }
  932|       |
  933|   149k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   149k|        return result(unexpect, monostate{});
  935|   149k|    }
  936|   149k|    else {
  937|   149k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   149k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   149k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
  939|   149k|                   ? result(*std::forward<Exp>(exp))
  940|   149k|                   : result(unexpect,
  941|   149k|                            std::invoke(std::forward<F>(f),
  942|   149k|                                        std::forward<Exp>(exp).error()));
  943|   149k|    }
  944|   149k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   149k|    {
 1207|   149k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   149k|        return std::move(this->get_unexpected().error());
 1209|   149k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   172k|    {
 1078|   172k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  22.9k|    {
  312|  22.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  22.9k|    {
  373|  22.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  22.9k|                                  std::forward<Args>(args)...);
  375|  22.9k|        m_has_value = false;
  376|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  68.8k|    {
  403|  68.8k|        return reinterpret_cast<unexpected<E>*>(
  404|  68.8k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  68.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  68.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  22.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  22.9k|    {
  317|  22.9k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 22.9k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  22.9k|        else {
  321|  22.9k|            destroy_unexpected();
  322|  22.9k|        }
  323|  22.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  68.8k|    {
  361|  68.8k|        return m_has_value;
  362|  68.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  22.9k|    {
  384|  22.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  22.9k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  22.9k|    {
 1191|  22.9k|        return has_value();
 1192|  22.9k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  22.9k|    {
 1197|  22.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  22.9k|        return this->get_unexpected().error();
 1199|  22.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  22.9k|    {
  344|  22.9k|        return *unexpected_ptr();
  345|  22.9k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   172k|    {
 1221|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   172k|        return this->get_value();
 1223|   172k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|   987k|    {
  189|   987k|        return m_has_value;
  190|   987k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   172k|    {
  155|   172k|        return m_value;
  156|   172k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   493k|    {
 1191|   493k|        return has_value();
 1192|   493k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   321k|    {
 1197|   321k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   321k|        return this->get_unexpected().error();
 1199|   321k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   321k|    {
  172|   321k|        return m_unexpected;
  173|   321k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   172k|    {
 1263|   172k|        return std::move(value());
 1264|   172k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   142k|    {
 1078|   142k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   142k|    {
  151|   142k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  11.6M|    {
 1034|  11.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.6M|    {
  142|  11.6M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.47M|    {
 1405|  2.47M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.47M|                                            std::forward<F>(f));
 1407|  2.47M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.47M|{
  927|  2.47M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.47M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.47M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.47M|            return result(*std::forward<Exp>(exp));
  931|  2.47M|        }
  932|       |
  933|  2.47M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.47M|        return result(unexpect, monostate{});
  935|  2.47M|    }
  936|  2.47M|    else {
  937|  2.47M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.47M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.44M, False: 28.0k]
  |  |  ------------------
  ------------------
  939|  2.47M|                   ? result(*std::forward<Exp>(exp))
  940|  2.47M|                   : result(unexpect,
  941|  28.0k|                            std::invoke(std::forward<F>(f),
  942|  28.0k|                                        std::forward<Exp>(exp).error()));
  943|  2.47M|    }
  944|  2.47M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  20.4M|    {
  189|  20.4M|        return m_has_value;
  190|  20.4M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.56M|    {
 1263|  7.56M|        return std::move(value());
 1264|  7.56M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.48M|    {
 1221|  8.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  8.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  8.48M|        return this->get_value();
 1223|  8.48M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  8.48M|    {
  155|  8.48M|        return m_value;
  156|  8.48M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  9.28M|    {
 1034|  9.28M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.28M|    {
  142|  9.28M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.86M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   140k|    {
 1207|   140k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   140k|        return std::move(this->get_unexpected().error());
 1209|   140k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   142k|    {
  172|   142k|        return m_unexpected;
  173|   142k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.0k|    {
 1088|  28.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   584k|    {
  151|   584k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   556k|    {
 1078|   556k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  4.10M|    {
 1191|  4.10M|        return has_value();
 1192|  4.10M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.68k|    {
 1197|  1.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.68k|        return this->get_unexpected().error();
 1199|  1.68k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   114k|    {
 1078|   114k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   227k|    {
  151|   227k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  16.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   918k|    {
 1251|   918k|        return value();
 1252|   918k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.72M|    {
 1034|  1.72M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.72M|    {
  142|  1.72M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.11M|    {
 1078|  9.11M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.11M|    {
  151|  9.11M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  16.2M|    {
 1191|  16.2M|        return has_value();
 1192|  16.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  25.5M|    {
  189|  25.5M|        return m_has_value;
  190|  25.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.42M|    {
 1197|  2.42M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  2.42M|        return this->get_unexpected().error();
 1199|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.42M|    {
  172|  2.42M|        return m_unexpected;
  173|  2.42M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.44M|    {
 1034|  2.44M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.44M|    {
  142|  2.44M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.78M|    {
 1251|  1.78M|        return value();
 1252|  1.78M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.90M|    {
 1221|  6.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.90M|        return this->get_value();
 1223|  6.90M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  6.90M|    {
  155|  6.90M|        return m_value;
  156|  6.90M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.44M|    {
 1191|  2.44M|        return has_value();
 1192|  2.44M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.89M|    {
  189|  4.89M|        return m_has_value;
  190|  4.89M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.44M|    {
 1263|  2.44M|        return std::move(value());
 1264|  2.44M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.44M|    {
 1221|  2.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.44M|        return this->get_value();
 1223|  2.44M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.44M|    {
  155|  2.44M|        return m_value;
  156|  2.44M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  5.23M|    {
 1405|  5.23M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.23M|                                            std::forward<F>(f));
 1407|  5.23M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.23M|{
  927|  5.23M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.23M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.23M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.23M|            return result(*std::forward<Exp>(exp));
  931|  5.23M|        }
  932|       |
  933|  5.23M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.23M|        return result(unexpect, monostate{});
  935|  5.23M|    }
  936|  5.23M|    else {
  937|  5.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  5.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 5.11M, False: 112k]
  |  |  ------------------
  ------------------
  939|  5.23M|                   ? result(*std::forward<Exp>(exp))
  940|  5.23M|                   : result(unexpect,
  941|   112k|                            std::invoke(std::forward<F>(f),
  942|   112k|                                        std::forward<Exp>(exp).error()));
  943|  5.23M|    }
  944|  5.23M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  5.17M|    {
 1034|  5.17M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.17M|    {
  142|  5.17M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   112k|    {
 1088|   112k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.11M|    {
 1263|  5.11M|        return std::move(value());
 1264|  5.11M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.44M|    {
 1034|  2.44M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.44M|    {
  142|  2.44M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.44M|    {
 1405|  2.44M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.44M|                                            std::forward<F>(f));
 1407|  2.44M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.44M|{
  927|  2.44M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.44M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.44M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.44M|            return result(*std::forward<Exp>(exp));
  931|  2.44M|        }
  932|       |
  933|  2.44M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.44M|        return result(unexpect, monostate{});
  935|  2.44M|    }
  936|  2.44M|    else {
  937|  2.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.44M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.44M|                   ? result(*std::forward<Exp>(exp))
  940|  2.44M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.44M|    }
  944|  2.44M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  4.89M|    {
  189|  4.89M|        return m_has_value;
  190|  4.89M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.44M|    {
 1263|  2.44M|        return std::move(value());
 1264|  2.44M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.44M|    {
 1221|  2.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.44M|        return this->get_value();
 1223|  2.44M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.44M|    {
  155|  2.44M|        return m_value;
  156|  2.44M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.44M|    {
 1034|  2.44M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.44M|    {
  142|  2.44M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  2.44M|    {
 1191|  2.44M|        return has_value();
 1192|  2.44M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.89M|    {
  189|  4.89M|        return m_has_value;
  190|  4.89M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.44M|    {
 1263|  2.44M|        return std::move(value());
 1264|  2.44M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.44M|    {
 1221|  2.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.44M|        return this->get_value();
 1223|  2.44M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.44M|    {
  155|  2.44M|        return m_value;
  156|  2.44M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  27.9k|    {
 1078|  27.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  27.9k|    {
  312|  27.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  27.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  27.9k|    {
  373|  27.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  27.9k|                                  std::forward<Args>(args)...);
  375|  27.9k|        m_has_value = false;
  376|  27.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  83.7k|    {
  403|  83.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  83.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  83.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  83.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   332k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   332k|    {
  317|   332k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 304k, False: 27.9k]
  ------------------
  318|   304k|            destroy_value();
  319|   304k|        }
  320|  27.9k|        else {
  321|  27.9k|            destroy_unexpected();
  322|  27.9k|        }
  323|   332k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   998k|    {
  361|   998k|        return m_has_value;
  362|   998k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   304k|    {
  380|   304k|        scn::detail::destroy_at(value_ptr());
  381|   304k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   304k|{
  108|   304k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   304k|        for (auto& elem : *p) {
  110|   304k|            scn::detail::destroy_at(std::addressof(elem));
  111|   304k|        }
  112|   304k|    }
  113|   304k|    else {
  114|   304k|        p->~T();
  115|   304k|    }
  116|   304k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   914k|    {
  390|   914k|        return reinterpret_cast<T*>(
  391|   914k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  205|   914k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   914k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  27.9k|    {
  384|  27.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  27.9k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   304k|    {
 1034|   304k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   304k|    {
  303|   304k|        construct(std::forward<Args>(args)...);
  304|   304k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   304k|    {
  367|   304k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   304k|        m_has_value = true;
  369|   304k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   304k|{
  102|   304k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   304k|        T(std::forward<Args>(args)...);
  104|   304k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   332k|    {
 1191|   332k|        return has_value();
 1192|   332k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  27.9k|    {
 1197|  27.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  27.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  27.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  27.9k|        return this->get_unexpected().error();
 1199|  27.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  27.9k|    {
  344|  27.9k|        return *unexpected_ptr();
  345|  27.9k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   304k|    {
 1263|   304k|        return std::move(value());
 1264|   304k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   304k|    {
 1221|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   304k|        return this->get_value();
 1223|   304k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   304k|    {
  327|   304k|        return *value_ptr();
  328|   304k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.55M|    {
 1251|  1.55M|        return value();
 1252|  1.55M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  9.28M|    {
 1221|  9.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  9.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  9.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  9.28M|        return this->get_value();
 1223|  9.28M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  19.7M|    {
  189|  19.7M|        return m_has_value;
  190|  19.7M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  9.28M|    {
  155|  9.28M|        return m_value;
  156|  9.28M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  9.86M|    {
 1191|  9.86M|        return has_value();
 1192|  9.86M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   584k|    {
 1197|   584k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   584k|        return this->get_unexpected().error();
 1199|   584k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   584k|    {
  172|   584k|        return m_unexpected;
  173|   584k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.73M|    {
 1263|  7.73M|        return std::move(value());
 1264|  7.73M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   308k|    {
 1078|   308k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   576k|    {
  151|   576k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   885k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   308k|    {
 1034|   308k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   308k|    {
  142|   308k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   885k|    {
 1191|   885k|        return has_value();
 1192|   885k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   576k|    {
 1197|   576k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   576k|        return this->get_unexpected().error();
 1199|   576k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   576k|    {
  172|   576k|        return m_unexpected;
  173|   576k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   308k|    {
 1221|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   308k|        return this->get_value();
 1223|   308k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   308k|    {
  155|   308k|        return m_value;
  156|   308k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    162|    {
  151|    162|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.35M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.35M|    {
 1034|  1.35M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.35M|    {
  142|  1.35M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   308k|    {
 1405|   308k|        return detail::transform_error_impl(std::move(*this),
 1406|   308k|                                            std::forward<F>(f));
 1407|   308k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   308k|{
  927|   308k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   308k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   308k|        if (SCN_LIKELY(exp.has_value())) {
  930|   308k|            return result(*std::forward<Exp>(exp));
  931|   308k|        }
  932|       |
  933|   308k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   308k|        return result(unexpect, monostate{});
  935|   308k|    }
  936|   308k|    else {
  937|   308k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   308k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   308k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 308k, False: 0]
  |  |  ------------------
  ------------------
  939|   308k|                   ? result(*std::forward<Exp>(exp))
  940|   308k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   308k|    }
  944|   308k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.22M|    {
  189|  2.22M|        return m_has_value;
  190|  2.22M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   864k|    {
 1263|   864k|        return std::move(value());
 1264|   864k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   864k|    {
 1221|   864k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   864k|        return this->get_value();
 1223|   864k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   864k|    {
  155|   864k|        return m_value;
  156|   864k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    162|    {
 1207|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    162|        return std::move(this->get_unexpected().error());
 1209|    162|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    162|    {
  172|    162|        return m_unexpected;
  173|    162|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   267k|    {
 1088|   267k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   494k|    {
 1191|   494k|        return has_value();
 1192|   494k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    162|    {
 1078|    162|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    324|    {
  151|    324|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.50M|    {
 1078|  1.50M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.50M|    {
  151|  1.50M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.79M|    {
 1191|  1.79M|        return has_value();
 1192|  1.79M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.19M|    {
  189|  3.19M|        return m_has_value;
  190|  3.19M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   308k|    {
 1197|   308k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   308k|        return this->get_unexpected().error();
 1199|   308k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   576k|    {
  172|   576k|        return m_unexpected;
  173|   576k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   308k|    {
 1034|   308k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   308k|    {
  142|   308k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   308k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   555k|    {
 1221|   555k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   555k|        return this->get_value();
 1223|   555k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   555k|    {
  155|   555k|        return m_value;
  156|   555k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   308k|    {
 1191|   308k|        return has_value();
 1192|   308k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   617k|    {
  189|   617k|        return m_has_value;
  190|   617k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   308k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   308k|    {
 1263|   308k|        return std::move(value());
 1264|   308k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   308k|    {
 1221|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   308k|        return this->get_value();
 1223|   308k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   308k|    {
  155|   308k|        return m_value;
  156|   308k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   555k|    {
 1405|   555k|        return detail::transform_error_impl(std::move(*this),
 1406|   555k|                                            std::forward<F>(f));
 1407|   555k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   555k|{
  927|   555k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   555k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   555k|        if (SCN_LIKELY(exp.has_value())) {
  930|   555k|            return result(*std::forward<Exp>(exp));
  931|   555k|        }
  932|       |
  933|   555k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   555k|        return result(unexpect, monostate{});
  935|   555k|    }
  936|   555k|    else {
  937|   555k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   555k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 555k, False: 162]
  |  |  ------------------
  ------------------
  939|   555k|                   ? result(*std::forward<Exp>(exp))
  940|   555k|                   : result(unexpect,
  941|    162|                            std::invoke(std::forward<F>(f),
  942|    162|                                        std::forward<Exp>(exp).error()));
  943|   555k|    }
  944|   555k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   555k|    {
 1034|   555k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   555k|    {
  142|   555k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    162|    {
 1088|    162|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   555k|    {
 1263|   555k|        return std::move(value());
 1264|   555k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   308k|    {
 1034|   308k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   308k|    {
  142|   308k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   308k|    {
 1405|   308k|        return detail::transform_error_impl(std::move(*this),
 1406|   308k|                                            std::forward<F>(f));
 1407|   308k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   308k|{
  927|   308k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   308k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   308k|        if (SCN_LIKELY(exp.has_value())) {
  930|   308k|            return result(*std::forward<Exp>(exp));
  931|   308k|        }
  932|       |
  933|   308k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   308k|        return result(unexpect, monostate{});
  935|   308k|    }
  936|   308k|    else {
  937|   308k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   308k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   308k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 308k, False: 0]
  |  |  ------------------
  ------------------
  939|   308k|                   ? result(*std::forward<Exp>(exp))
  940|   308k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   308k|    }
  944|   308k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   617k|    {
  189|   617k|        return m_has_value;
  190|   617k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   308k|    {
 1263|   308k|        return std::move(value());
 1264|   308k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   308k|    {
 1221|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   308k|        return this->get_value();
 1223|   308k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   308k|    {
  155|   308k|        return m_value;
  156|   308k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   308k|    {
 1034|   308k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   308k|    {
  142|   308k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   308k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   308k|    {
 1191|   308k|        return has_value();
 1192|   308k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   617k|    {
  189|   617k|        return m_has_value;
  190|   617k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   308k|    {
 1263|   308k|        return std::move(value());
 1264|   308k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   308k|    {
 1221|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   308k|        return this->get_value();
 1223|   308k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   308k|    {
  155|   308k|        return m_value;
  156|   308k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   267k|    {
 1405|   267k|        return detail::transform_error_impl(std::move(*this),
 1406|   267k|                                            std::forward<F>(f));
 1407|   267k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   267k|{
  927|   267k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   267k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   267k|        if (SCN_LIKELY(exp.has_value())) {
  930|   267k|            return result(*std::forward<Exp>(exp));
  931|   267k|        }
  932|       |
  933|   267k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   267k|        return result(unexpect, monostate{});
  935|   267k|    }
  936|   267k|    else {
  937|   267k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   267k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   267k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 267k]
  |  |  ------------------
  ------------------
  939|   267k|                   ? result(*std::forward<Exp>(exp))
  940|   267k|                   : result(unexpect,
  941|   267k|                            std::invoke(std::forward<F>(f),
  942|   267k|                                        std::forward<Exp>(exp).error()));
  943|   267k|    }
  944|   267k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   267k|    {
 1207|   267k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   267k|        return std::move(this->get_unexpected().error());
 1209|   267k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  41.1k|    {
 1078|  41.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  41.1k|    {
  312|  41.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  41.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  41.1k|    {
  373|  41.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  41.1k|                                  std::forward<Args>(args)...);
  375|  41.1k|        m_has_value = false;
  376|  41.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   123k|    {
  403|   123k|        return reinterpret_cast<unexpected<E>*>(
  404|   123k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   123k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  41.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  41.1k|    {
  317|  41.1k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 41.1k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  41.1k|        else {
  321|  41.1k|            destroy_unexpected();
  322|  41.1k|        }
  323|  41.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   123k|    {
  361|   123k|        return m_has_value;
  362|   123k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  41.1k|    {
  384|  41.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  41.1k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  41.1k|    {
 1191|  41.1k|        return has_value();
 1192|  41.1k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  41.1k|    {
 1197|  41.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  41.1k|        return this->get_unexpected().error();
 1199|  41.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  41.1k|    {
  344|  41.1k|        return *unexpected_ptr();
  345|  41.1k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   308k|    {
 1263|   308k|        return std::move(value());
 1264|   308k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.82k|{
  200|  3.82k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.82k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  3.82k|{
  180|  3.82k|    return p;
  181|  3.82k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.82k|{
  200|  3.82k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.82k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  3.82k|{
  180|  3.82k|    return p;
  181|  3.82k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.82k|{
  200|  3.82k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.82k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  3.82k|{
  180|  3.82k|    return p;
  181|  3.82k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.34M|{
  200|  9.34M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  9.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.34M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  9.34M|{
  180|  9.34M|    return p;
  181|  9.34M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.54M|{
  200|  5.54M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.54M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  5.54M|{
  180|  5.54M|    return p;
  181|  5.54M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.54M|{
  200|  5.54M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.54M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.54M|{
  180|  5.54M|    return p;
  181|  5.54M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  13.2k|    {
  242|  13.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  13.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  1.91k|    {
  181|  1.91k|        return m_ptr;
  182|  1.91k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  1.91k|    {
  185|  1.91k|        return m_end;
  186|  1.91k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  1.91k|    {
  238|  1.91k|        return m_ptr;
  239|  1.91k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  1.91k|    {
  120|  1.91k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  45.9k|    {
  181|  45.9k|        return m_ptr;
  182|  45.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  45.9k|    {
  185|  45.9k|        return m_end;
  186|  45.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  1.91k|    {
  120|  1.91k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  82.3k|    {
  181|  82.3k|        return m_ptr;
  182|  82.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  82.3k|    {
  185|  82.3k|        return m_end;
  186|  82.3k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  1.91k|    {
  120|  1.91k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  2.77M|    {
  120|  2.77M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  2.77M|    {
  238|  2.77M|        return m_ptr;
  239|  2.77M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  2.77M|    {
  242|  2.77M|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.77M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  1.49M|{
   60|  1.49M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  1.49M|                                          const CharT*, const CharT*>) {
   62|  1.49M|        return {first, last};
   63|  1.49M|    }
   64|  1.49M|    else {
   65|  1.49M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  1.49M|    }
   67|  1.49M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.06M|{
   60|  4.06M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.06M|                                          const CharT*, const CharT*>) {
   62|  4.06M|        return {first, last};
   63|  4.06M|    }
   64|  4.06M|    else {
   65|  4.06M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.06M|    }
   67|  4.06M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.10M|{
   44|  3.10M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.10M|                                          decltype(first), decltype(last)> &&
   46|  3.10M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.10M|        return {first, last};
   48|  3.10M|    }
   49|  3.10M|    else {
   50|  3.10M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.10M|                                       to_address(first), to_address(last)))};
   52|  3.10M|    }
   53|  3.10M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  5.15M|{
   75|  5.15M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  5.15M|                      typename std::basic_string_view<CharT>::iterator,
   77|  5.15M|                      decltype(it)> &&
   78|  5.15M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  5.15M|        SCN_UNUSED(sv);
  ------------------
  |  |  231|  5.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  5.15M|        return it;
   81|  5.15M|    }
   82|  5.15M|    else {
   83|  5.15M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  5.15M|    }
   85|  5.15M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   172k|{
   54|   172k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   172k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   172k|        return true;
   57|   172k|    }
   58|   172k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   172k|                           ranges::iterator_t<Range>,
   60|   172k|                           typename detail::basic_scan_buffer<
   61|   172k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   172k|        auto beg = ranges::begin(r);
   63|   172k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 172k, False: 0]
  ------------------
   64|   172k|            return false;
   65|   172k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   172k|    else {
   79|   172k|        return false;
   80|   172k|    }
   81|   172k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   172k|{
  112|   172k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   172k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   172k|        return r;
  115|   172k|    }
  116|   172k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   172k|                           ranges::iterator_t<Range>,
  118|   172k|                           typename detail::basic_scan_buffer<
  119|   172k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   172k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   172k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   172k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   172k|                ranges::begin(r), ranges::end(r)));
  124|   172k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   172k|        }
  126|   172k|        else {
  127|   172k|            return ranges::begin(r).contiguous_segment();
  128|   172k|        }
  129|   172k|    }
  130|   172k|    else {
  131|   172k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   172k|    }
  133|   172k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   309k|{
  166|   309k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   309k|        return ranges_polyfill::usize(r);
  168|   309k|    }
  169|   309k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   309k|                           ranges::iterator_t<Range>,
  171|   309k|                           typename detail::basic_scan_buffer<
  172|   309k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   309k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   309k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   309k|                                       ranges::begin(r).position());
  176|   309k|        }
  177|   309k|        else {
  178|   309k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 309k, False: 0]
  ------------------
  179|   309k|                return static_cast<size_t>(
  180|   309k|                    ranges::begin(r).parent()->chars_available() -
  181|   309k|                    ranges::begin(r).position());
  182|   309k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   309k|        }
  185|   309k|    }
  186|   309k|    else {
  187|   309k|        return 0;
  188|   309k|    }
  189|   309k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   308k|{
   54|   308k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   308k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   308k|        return true;
   57|   308k|    }
   58|   308k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   308k|                           ranges::iterator_t<Range>,
   60|   308k|                           typename detail::basic_scan_buffer<
   61|   308k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   308k|        auto beg = ranges::begin(r);
   63|   308k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 308k, False: 0]
  ------------------
   64|   308k|            return false;
   65|   308k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   308k|    else {
   79|   308k|        return false;
   80|   308k|    }
   81|   308k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   308k|{
  112|   308k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   308k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   308k|        return r;
  115|   308k|    }
  116|   308k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   308k|                           ranges::iterator_t<Range>,
  118|   308k|                           typename detail::basic_scan_buffer<
  119|   308k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   308k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   308k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   308k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   308k|                ranges::begin(r), ranges::end(r)));
  124|   308k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   308k|        }
  126|   308k|        else {
  127|   308k|            return ranges::begin(r).contiguous_segment();
  128|   308k|        }
  129|   308k|    }
  130|   308k|    else {
  131|   308k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   308k|    }
  133|   308k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   555k|{
  166|   555k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   555k|        return ranges_polyfill::usize(r);
  168|   555k|    }
  169|   555k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   555k|                           ranges::iterator_t<Range>,
  171|   555k|                           typename detail::basic_scan_buffer<
  172|   555k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   555k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   555k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   555k|                                       ranges::begin(r).position());
  176|   555k|        }
  177|   555k|        else {
  178|   555k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 555k, False: 0]
  ------------------
  179|   555k|                return static_cast<size_t>(
  180|   555k|                    ranges::begin(r).parent()->chars_available() -
  181|   555k|                    ranges::begin(r).position());
  182|   555k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   555k|        }
  185|   555k|    }
  186|   555k|    else {
  187|   555k|        return 0;
  188|   555k|    }
  189|   555k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.60M|{
  235|  2.60M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.60M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.60M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.60M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.60M|    }
  240|  2.60M|    else {
  241|  2.60M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.60M|    }
  243|  2.60M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.60M|    {
   50|  2.60M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  8.59M|    {
   63|  8.59M|        return sv;
   64|  8.59M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.73M|{
  235|  1.73M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.73M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.73M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.73M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.73M|    }
  240|  1.73M|    else {
  241|  1.73M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.73M|    }
  243|  1.73M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.73M|    {
   50|  1.73M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.66M|{
  235|  1.66M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.66M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.66M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.66M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.66M|    }
  240|  1.66M|    else {
  241|  1.66M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.66M|    }
  243|  1.66M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.66M|    {
   50|  1.66M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  3.10M|    {
   63|  3.10M|        return sv;
   64|  3.10M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  11.3M|{
   97|  11.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 28.6k, False: 11.3M]
  |  |  ------------------
  ------------------
   98|  28.6k|        return eof_error::eof;
   99|  28.6k|    }
  100|  11.3M|    return eof_error::good;
  101|  11.3M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  11.3M|{
   91|  11.3M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  11.3M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  11.3M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  11.3M|    {
   84|  11.3M|        return begin == end;
   85|  11.3M|    }
   86|  11.3M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   619k|{
   97|   619k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|   619k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 619k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|   619k|    return eof_error::good;
  101|   619k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   619k|{
   91|   619k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   619k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   619k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   619k|    {
   84|   619k|        return begin == end;
   85|   619k|    }
   86|   619k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  10.6M|{
   97|  10.6M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  10.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 31.2k, False: 10.6M]
  |  |  ------------------
  ------------------
   98|  31.2k|        return eof_error::eof;
   99|  31.2k|    }
  100|  10.6M|    return eof_error::good;
  101|  10.6M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  10.6M|{
   91|  10.6M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  10.6M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  10.6M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  10.6M|    {
   84|  10.6M|        return begin == end;
   85|  10.6M|    }
   86|  10.6M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.11M|{
   97|  1.11M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  1.11M|    return eof_error::good;
  101|  1.11M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.11M|{
   91|  1.11M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.11M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.11M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.11M|    {
   84|  1.11M|        return begin == end;
   85|  1.11M|    }
   86|  1.11M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.77M|{
  128|  2.77M|    return find_classic_impl(
  129|  2.77M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.77M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.77M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  2.81M|{
   31|  2.81M|    static_assert(sizeof(*source.data()) == 1);
   32|  2.81M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  246|  2.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  2.81M|    uint64_t word{};
   34|  2.81M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  2.81M|    return has_byte_greater(word, 127) != 0;
   37|  2.81M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|  2.77M|{
   44|  2.77M|    auto it = source.begin();
   45|       |
   46|  2.82M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.81M, False: 6.03k]
  ------------------
   47|  2.81M|        auto sv =
   48|  2.81M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.81M|                .substr(0, 8);
   50|       |
   51|  2.81M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.57M, False: 245k]
  ------------------
   52|  2.57M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.57M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.57M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.53M, False: 38.6k]
  ------------------
   55|  2.53M|                break;
   56|  2.53M|            }
   57|  38.6k|            continue;
   58|  2.57M|        }
   59|       |
   60|   288k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 285k, False: 3.46k]
  ------------------
   61|   285k|            auto tmp =
   62|   285k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   285k|            auto res = get_next_code_point(tmp);
   64|   285k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 241k, False: 43.4k]
  ------------------
   65|   241k|                return it;
   66|   241k|            }
   67|  43.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  43.4k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  43.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  247|  43.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  43.4k|        }
   71|   245k|    }
   72|       |
   73|  2.53M|    return detail::make_string_view_iterator(source, it);
   74|  2.77M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  129|  5.17M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  130|   285k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.60M|{
  300|  2.60M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.60M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.60M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.60M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  252|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.60M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.60M|        return ranges::next(ranges::begin(range),
  306|  2.60M|                            ranges::distance(buf.view().begin(), it));
  307|  2.60M|    }
  308|  2.60M|    else {
  309|  2.60M|        auto it = ranges::begin(range);
  310|       |
  311|  2.60M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.60M|            auto seg = get_contiguous_beginning(range);
  313|  2.60M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.60M|                seg_it != seg.end()) {
  315|  2.60M|                return ranges_polyfill::batch_next(
  316|  2.60M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.60M|            }
  318|  2.60M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.60M|        }
  320|       |
  321|  2.60M|        return read_while_code_point(
  322|  2.60M|            SCN_FWD(range),
  323|  2.60M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.60M|    }
  325|  2.60M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.60M|{
  459|  2.60M|    auto it = read_code_unit(range);
  460|  2.60M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  5.15M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.15M, False: 2.43M]
  ------------------
  465|  5.15M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 167k, False: 4.98M]
  ------------------
  466|   167k|            return *it;
  467|   167k|        }
  468|  5.15M|    }
  469|       |
  470|  2.43M|    return unexpected(parse_error::error);
  471|  2.60M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   590k|{
  482|   590k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 518k, False: 72.3k]
  ------------------
  483|   518k|        return ranges::begin(range);
  484|   518k|    }
  485|  72.3k|    return *result;
  486|   590k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.60M|{
  418|  5.60M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.60M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.60M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.60M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 53.8k, False: 5.55M]
  ------------------
  423|  53.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  53.8k|        }
  425|  5.55M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 5.49M, False: 61.9k]
  ------------------
  426|  5.49M|            return unexpected(parse_error::error);
  427|  5.49M|        }
  428|  61.9k|        return ranges::next(ranges::begin(range), str.size());
  429|  5.55M|    }
  430|  5.60M|    else {
  431|  5.60M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.60M|            if (ch < 'A' || ch > 'Z') {
  433|  5.60M|                return ch;
  434|  5.60M|            }
  435|  5.60M|            return static_cast<char_type>(ch +
  436|  5.60M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.60M|        };
  438|       |
  439|  5.60M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  5.60M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.60M|        if (SCN_UNLIKELY(!std::equal(
  443|  5.60M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.60M|                    return ascii_tolower(a) ==
  445|  5.60M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.60M|                }))) {
  447|  5.60M|            return unexpected(parse_error::error);
  448|  5.60M|        }
  449|       |
  450|  5.60M|        return it;
  451|  5.60M|    }
  452|  5.60M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  5.55M|{
  407|  5.55M|    unsigned char running_diff{0};
  408|  16.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 11.1M, False: 5.55M]
  ------------------
  409|  11.1M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  11.1M|    }
  411|  5.55M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 58.2k, False: 5.49M]
  |  Branch (411:33): [True: 3.72k, False: 5.49M]
  ------------------
  412|  5.55M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  1.77M|{
  332|  1.77M|    auto it = read_code_unit(range);
  333|  1.77M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.41k, False: 1.77M]
  |  |  ------------------
  ------------------
  334|  1.41k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.41k|    }
  336|       |
  337|  1.77M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 892k, False: 883k]
  |  |  ------------------
  ------------------
  338|  1.77M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   892k|        return unexpected(parse_error::error);
  340|   892k|    }
  341|       |
  342|   883k|    return *it;
  343|  1.77M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   172k|{
  300|   172k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   172k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   172k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   172k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   172k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   172k|        return ranges::next(ranges::begin(range),
  306|   172k|                            ranges::distance(buf.view().begin(), it));
  307|   172k|    }
  308|   172k|    else {
  309|   172k|        auto it = ranges::begin(range);
  310|       |
  311|   172k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   172k|            auto seg = get_contiguous_beginning(range);
  313|   172k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   172k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 172k, False: 0]
  ------------------
  315|   172k|                return ranges_polyfill::batch_next(
  316|   172k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   172k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   172k|    }
  325|   172k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   172k|{
  459|   172k|    auto it = read_code_unit(range);
  460|   172k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   344k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 344k, False: 172k]
  ------------------
  465|   344k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 344k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   344k|    }
  469|       |
  470|   172k|    return unexpected(parse_error::error);
  471|   172k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  68.8k|{
  482|  68.8k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 68.8k, False: 0]
  ------------------
  483|  68.8k|        return ranges::begin(range);
  484|  68.8k|    }
  485|      0|    return *result;
  486|  68.8k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   309k|{
  418|   309k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   309k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   309k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   309k|        if (ranges::size(range) < str.size()) {
  423|   309k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   309k|        }
  425|   309k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   309k|            return unexpected(parse_error::error);
  427|   309k|        }
  428|   309k|        return ranges::next(ranges::begin(range), str.size());
  429|   309k|    }
  430|   309k|    else {
  431|   309k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   309k|            if (ch < 'A' || ch > 'Z') {
  433|   309k|                return ch;
  434|   309k|            }
  435|   309k|            return static_cast<char_type>(ch +
  436|   309k|                                          static_cast<char_type>('a' - 'A'));
  437|   309k|        };
  438|       |
  439|   309k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 162, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   309k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   309k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 309k, False: 0]
  |  |  ------------------
  ------------------
  443|   309k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   309k|                    return ascii_tolower(a) ==
  445|   309k|                           static_cast<detail::char_t<Range>>(b);
  446|   309k|                }))) {
  447|   309k|            return unexpected(parse_error::error);
  448|   309k|        }
  449|       |
  450|      0|        return it;
  451|   309k|    }
  452|   309k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   309k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   309k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 309k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   309k|                return ch;
  434|   309k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   309k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   103k|{
  332|   103k|    auto it = read_code_unit(range);
  333|   103k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   103k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 103k, False: 0]
  |  |  ------------------
  ------------------
  338|   103k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   103k|        return unexpected(parse_error::error);
  340|   103k|    }
  341|       |
  342|      0|    return *it;
  343|   103k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   149k|{
  159|   149k|    auto it = read_while_code_unit(range, pred);
  160|   149k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 149k, False: 0]
  ------------------
  161|   149k|        return unexpected(parse_error::error);
  162|   149k|    }
  163|      0|    return it;
  164|   149k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   149k|{
  139|   149k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   149k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   149k|{
  131|   149k|    return ranges::find_if(range, pred);
  132|   149k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.45M|{
  300|  2.45M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.45M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.45M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.45M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.45M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.45M|        return ranges::next(ranges::begin(range),
  306|  2.45M|                            ranges::distance(buf.view().begin(), it));
  307|  2.45M|    }
  308|  2.45M|    else {
  309|  2.45M|        auto it = ranges::begin(range);
  310|       |
  311|  2.45M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.45M|            auto seg = get_contiguous_beginning(range);
  313|  2.45M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.45M|                seg_it != seg.end()) {
  315|  2.45M|                return ranges_polyfill::batch_next(
  316|  2.45M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.45M|            }
  318|  2.45M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.45M|        }
  320|       |
  321|  2.45M|        return read_while_code_point(
  322|  2.45M|            SCN_FWD(range),
  ------------------
  |  |  252|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.45M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.45M|    }
  325|  2.45M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.45M|{
  264|  2.45M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.45M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.45M|{
  231|  2.45M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.45M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.45M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  252|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.45M|    }
  235|  2.45M|    else {
  236|  2.45M|        auto it = ranges::begin(range);
  237|  2.45M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.45M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.45M|            seg_it != seg.end()) {
  241|  2.45M|            return ranges_polyfill::batch_next(
  242|  2.45M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.45M|        }
  244|       |
  245|  2.45M|        while (it != ranges::end(range)) {
  246|  2.45M|            const auto [iter, value] =
  247|  2.45M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.45M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.45M|            if (pred(cp)) {
  250|  2.45M|                return it;
  251|  2.45M|            }
  252|  2.45M|            it = iter;
  253|  2.45M|        }
  254|       |
  255|  2.45M|        return it;
  256|  2.45M|    }
  257|  2.45M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.45M|{
  178|  2.45M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.45M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.45M|    std::array<char32_t, 16> cp_buf{};
  182|  2.45M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.45M|    auto it = ranges::begin(range);
  184|  2.46M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.46M, False: 7.16k]
  ------------------
  185|  2.46M|        auto chunk_begin = it;
  186|  2.46M|        size_t code_point_count = 0;
  187|  2.46M|        uint8_t code_unit_idx = 0;
  188|  38.4M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 36.3M, False: 2.09M]
  |  Branch (188:52): [True: 35.9M, False: 370k]
  ------------------
  189|  35.9M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 35.9M, False: 0]
  ------------------
  190|  35.9M|                idx_buf[code_point_count] = code_unit_idx;
  191|  35.9M|                ++code_point_count;
  192|  35.9M|            }
  193|  35.9M|            ++it;
  194|  35.9M|            ++code_unit_idx;
  195|  35.9M|        }
  196|       |
  197|  2.46M|        auto input = detail::make_string_view_from_pointers(
  198|  2.46M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.46M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.46M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.46M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|  2.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.46M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  4.83M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 4.82M, False: 15.2k]
  ------------------
  217|  4.82M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.44M, False: 2.37M]
  ------------------
  218|  2.44M|                return chunk_begin + idx_buf[i];
  219|  2.44M|            }
  220|  4.82M|        }
  221|  2.46M|    }
  222|       |
  223|  7.16k|    return it;
  224|  2.45M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  4.82M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.44M|{
  459|  2.44M|    auto it = read_code_unit(range);
  460|  2.44M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.44M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  4.85M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.85M, False: 2.31M]
  ------------------
  465|  4.85M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 134k, False: 4.71M]
  ------------------
  466|   134k|            return *it;
  467|   134k|        }
  468|  4.85M|    }
  469|       |
  470|  2.31M|    return unexpected(parse_error::error);
  471|  2.44M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   582k|{
  482|   582k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 518k, False: 64.2k]
  ------------------
  483|   518k|        return ranges::begin(range);
  484|   518k|    }
  485|  64.2k|    return *result;
  486|   582k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.23M|{
  418|  5.23M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.23M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.23M|        if (ranges::size(range) < str.size()) {
  423|  5.23M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  5.23M|        }
  425|  5.23M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  5.23M|            return unexpected(parse_error::error);
  427|  5.23M|        }
  428|  5.23M|        return ranges::next(ranges::begin(range), str.size());
  429|  5.23M|    }
  430|  5.23M|    else {
  431|  5.23M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.23M|            if (ch < 'A' || ch > 'Z') {
  433|  5.23M|                return ch;
  434|  5.23M|            }
  435|  5.23M|            return static_cast<char_type>(ch +
  436|  5.23M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.23M|        };
  438|       |
  439|  5.23M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  5.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 112k, False: 5.11M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   112k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   112k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   112k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   112k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   112k|    }                                                  \
  |  |  |  |   70|  5.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  5.11M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.11M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|  5.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.06M, False: 57.9k]
  |  |  ------------------
  ------------------
  443|  5.11M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.11M|                    return ascii_tolower(a) ==
  445|  5.11M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.11M|                }))) {
  447|  5.06M|            return unexpected(parse_error::error);
  448|  5.06M|        }
  449|       |
  450|  57.9k|        return it;
  451|  5.11M|    }
  452|  5.23M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  7.68M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  7.68M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 7.29M, False: 388k]
  |  Branch (432:29): [True: 362k, False: 25.8k]
  ------------------
  433|  7.66M|                return ch;
  434|  7.66M|            }
  435|  25.8k|            return static_cast<char_type>(ch +
  436|  25.8k|                                          static_cast<char_type>('a' - 'A'));
  437|  7.68M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  1.65M|{
  332|  1.65M|    auto it = read_code_unit(range);
  333|  1.65M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.68k, False: 1.65M]
  |  |  ------------------
  ------------------
  334|  1.68k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.68k|    }
  336|       |
  337|  1.65M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 872k, False: 784k]
  |  |  ------------------
  ------------------
  338|  1.65M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   872k|        return unexpected(parse_error::error);
  340|   872k|    }
  341|       |
  342|   784k|    return *it;
  343|  1.65M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   308k|{
  178|   308k|    static_assert(ranges::contiguous_range<Range> &&
  179|   308k|                  ranges::sized_range<Range>);
  180|       |
  181|   308k|    std::array<char32_t, 16> cp_buf{};
  182|   308k|    std::array<uint8_t, 16> idx_buf{};
  183|   308k|    auto it = ranges::begin(range);
  184|   308k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 308k, False: 0]
  ------------------
  185|   308k|        auto chunk_begin = it;
  186|   308k|        size_t code_point_count = 0;
  187|   308k|        uint8_t code_unit_idx = 0;
  188|   617k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 617k, False: 0]
  |  Branch (188:52): [True: 308k, False: 308k]
  ------------------
  189|   308k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 308k, False: 0]
  ------------------
  190|   308k|                idx_buf[code_point_count] = code_unit_idx;
  191|   308k|                ++code_point_count;
  192|   308k|            }
  193|   308k|            ++it;
  194|   308k|            ++code_unit_idx;
  195|   308k|        }
  196|       |
  197|   308k|        auto input = detail::make_string_view_from_pointers(
  198|   308k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   308k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   308k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   308k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   308k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 308k, False: 0]
  ------------------
  217|   308k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 308k, False: 0]
  ------------------
  218|   308k|                return chunk_begin + idx_buf[i];
  219|   308k|            }
  220|   308k|        }
  221|   308k|    }
  222|       |
  223|      0|    return it;
  224|   308k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   308k|{
  300|   308k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   308k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   308k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   308k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   308k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   308k|        return ranges::next(ranges::begin(range),
  306|   308k|                            ranges::distance(buf.view().begin(), it));
  307|   308k|    }
  308|   308k|    else {
  309|   308k|        auto it = ranges::begin(range);
  310|       |
  311|   308k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   308k|            auto seg = get_contiguous_beginning(range);
  313|   308k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   308k|                seg_it != seg.end()) {
  315|   308k|                return ranges_polyfill::batch_next(
  316|   308k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   308k|            }
  318|   308k|            ranges_polyfill::batch_next(it, seg.size());
  319|   308k|        }
  320|       |
  321|   308k|        return read_while_code_point(
  322|   308k|            SCN_FWD(range),
  ------------------
  |  |  252|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   308k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   308k|    }
  325|   308k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   308k|{
  264|   308k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   308k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   308k|{
  231|   308k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   308k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   308k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   308k|    }
  235|   308k|    else {
  236|   308k|        auto it = ranges::begin(range);
  237|   308k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   308k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   308k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 308k, False: 0]
  ------------------
  241|   308k|            return ranges_polyfill::batch_next(
  242|   308k|                it, ranges::distance(seg.begin(), seg_it));
  243|   308k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   308k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   308k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   308k|{
  459|   308k|    auto it = read_code_unit(range);
  460|   308k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   617k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 617k, False: 308k]
  ------------------
  465|   617k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 617k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   617k|    }
  469|       |
  470|   308k|    return unexpected(parse_error::error);
  471|   308k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   123k|{
  482|   123k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 123k, False: 0]
  ------------------
  483|   123k|        return ranges::begin(range);
  484|   123k|    }
  485|      0|    return *result;
  486|   123k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   555k|{
  418|   555k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   555k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   555k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   555k|        if (ranges::size(range) < str.size()) {
  423|   555k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   555k|        }
  425|   555k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   555k|            return unexpected(parse_error::error);
  427|   555k|        }
  428|   555k|        return ranges::next(ranges::begin(range), str.size());
  429|   555k|    }
  430|   555k|    else {
  431|   555k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   555k|            if (ch < 'A' || ch > 'Z') {
  433|   555k|                return ch;
  434|   555k|            }
  435|   555k|            return static_cast<char_type>(ch +
  436|   555k|                                          static_cast<char_type>('a' - 'A'));
  437|   555k|        };
  438|       |
  439|   555k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 162, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   555k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   555k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 555k, False: 0]
  |  |  ------------------
  ------------------
  443|   555k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   555k|                    return ascii_tolower(a) ==
  445|   555k|                           static_cast<detail::char_t<Range>>(b);
  446|   555k|                }))) {
  447|   555k|            return unexpected(parse_error::error);
  448|   555k|        }
  449|       |
  450|      0|        return it;
  451|   555k|    }
  452|   555k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   555k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   555k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 0, False: 555k]
  |  Branch (432:29): [True: 555k, False: 0]
  ------------------
  433|   555k|                return ch;
  434|   555k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   555k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   185k|{
  332|   185k|    auto it = read_code_unit(range);
  333|   185k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   185k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 185k, False: 0]
  |  |  ------------------
  ------------------
  338|   185k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   185k|        return unexpected(parse_error::error);
  340|   185k|    }
  341|       |
  342|      0|    return *it;
  343|   185k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   267k|{
  159|   267k|    auto it = read_while_code_unit(range, pred);
  160|   267k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 267k, False: 0]
  ------------------
  161|   267k|        return unexpected(parse_error::error);
  162|   267k|    }
  163|      0|    return it;
  164|   267k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   267k|{
  139|   267k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   267k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   267k|{
  131|   267k|    return ranges::find_if(range, pred);
  132|   267k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  4.37M|{
   36|  4.37M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.41k, False: 4.37M]
  |  |  ------------------
  ------------------
   37|  1.41k|        return unexpected(e);
   38|  1.41k|    }
   39|       |
   40|  4.37M|    return ranges::next(ranges::begin(range));
   41|  4.37M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   275k|{
   36|   275k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 275k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   275k|    return ranges::next(ranges::begin(range));
   41|   275k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   309k|{
   48|   309k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   309k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   309k|        const auto sz = ranges::ssize(range);
   52|   309k|        if (sz < count) {
   53|   309k|            return unexpected(eof_error::eof);
   54|   309k|        }
   55|       |
   56|   309k|        return ranges::next(ranges::begin(range), count);
   57|   309k|    }
   58|   309k|    else {
   59|   309k|        auto it = ranges::begin(range);
   60|   309k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 309k, False: 162]
  ------------------
   61|   309k|            return ranges_polyfill::batch_next(it, count);
   62|   309k|        }
   63|       |
   64|    324|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 324, False: 0]
  ------------------
   65|    324|             ++i, (void)++it) {
   66|    324|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 162, False: 162]
  ------------------
   67|    162|                return unexpected(eof_error::eof);
   68|    162|            }
   69|    324|        }
   70|       |
   71|      0|        return it;
   72|    162|    }
   73|   309k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  4.10M|{
   36|  4.10M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.68k, False: 4.10M]
  |  |  ------------------
  ------------------
   37|  1.68k|        return unexpected(e);
   38|  1.68k|    }
   39|       |
   40|  4.10M|    return ranges::next(ranges::begin(range));
   41|  4.10M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  5.23M|{
   48|  5.23M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|  5.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  5.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  5.23M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  5.23M|        const auto sz = ranges::ssize(range);
   52|  5.23M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 112k, False: 5.11M]
  ------------------
   53|   112k|            return unexpected(eof_error::eof);
   54|   112k|        }
   55|       |
   56|  5.11M|        return ranges::next(ranges::begin(range), count);
   57|  5.23M|    }
   58|  5.23M|    else {
   59|  5.23M|        auto it = ranges::begin(range);
   60|  5.23M|        if (guaranteed_minimum_size(range) >= count) {
   61|  5.23M|            return ranges_polyfill::batch_next(it, count);
   62|  5.23M|        }
   63|       |
   64|  5.23M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  5.23M|             ++i, (void)++it) {
   66|  5.23M|            if (it == ranges::end(range)) {
   67|  5.23M|                return unexpected(eof_error::eof);
   68|  5.23M|            }
   69|  5.23M|        }
   70|       |
   71|  5.23M|        return it;
   72|  5.23M|    }
   73|  5.23M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   494k|{
   36|   494k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 494k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   494k|    return ranges::next(ranges::begin(range));
   41|   494k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   555k|{
   48|   555k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   555k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   555k|        const auto sz = ranges::ssize(range);
   52|   555k|        if (sz < count) {
   53|   555k|            return unexpected(eof_error::eof);
   54|   555k|        }
   55|       |
   56|   555k|        return ranges::next(ranges::begin(range), count);
   57|   555k|    }
   58|   555k|    else {
   59|   555k|        auto it = ranges::begin(range);
   60|   555k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 555k, False: 162]
  ------------------
   61|   555k|            return ranges_polyfill::batch_next(it, count);
   62|   555k|        }
   63|       |
   64|    324|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 324, False: 0]
  ------------------
   65|    324|             ++i, (void)++it) {
   66|    324|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 162, False: 162]
  ------------------
   67|    162|                return unexpected(eof_error::eof);
   68|    162|            }
   69|    324|        }
   70|       |
   71|      0|        return it;
   72|    162|    }
   73|   555k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.73M|{
   33|  2.73M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.73M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   751k|{
   39|   751k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   751k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 375k, False: 375k]
  ------------------
   41|   751k|                    : std::locale{};
   42|   751k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   377k|    {
  112|   377k|        auto stdloc = loc.get<std::locale>();
  113|   377k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   377k|        grouping = numpunct.grouping();
  115|   377k|        thousands_sep =
  116|   377k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 377k]
  ------------------
  117|   377k|        decimal_point = numpunct.decimal_point();
  118|   377k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   377k|{
   49|   377k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 377k, False: 0]
  ------------------
   50|   377k|        return std::use_facet<Facet>(stdloc);
   51|   377k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   377k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   373k|    {
  112|   373k|        auto stdloc = loc.get<std::locale>();
  113|   373k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   373k|        grouping = numpunct.grouping();
  115|   373k|        thousands_sep =
  116|   373k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 373k]
  ------------------
  117|   373k|        decimal_point = numpunct.decimal_point();
  118|   373k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   373k|{
   49|   373k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 373k, False: 0]
  ------------------
   50|   373k|        return std::use_facet<Facet>(stdloc);
   51|   373k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   373k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.60M|{
   46|  2.60M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.60M, False: 0]
  ------------------
   47|  2.60M|        auto it = read_while_classic_space(range);
   48|  2.60M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.60M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.03k, False: 2.60M]
  |  |  ------------------
  ------------------
   50|  6.03k|            return unexpected(e);
   51|  6.03k|        }
   52|       |
   53|  2.60M|        return it;
   54|  2.60M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.60M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  2.79M|    {
  126|  2.79M|        return true;
  127|  2.79M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   172k|{
   46|   172k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 172k, False: 0]
  ------------------
   47|   172k|        auto it = read_while_classic_space(range);
   48|   172k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   172k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   172k|        return it;
   54|   172k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   172k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.03M|    {
  131|  2.03M|        reader_error_handler eh{};
  132|  2.03M|        get_derived().check_specs_impl(specs, eh);
  133|  2.03M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.03M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.03M|        return {};
  137|  2.03M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  2.03M|    {
  142|  2.03M|        return static_cast<Derived&>(*this);
  143|  2.03M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  4.07M|    {
   35|  4.07M|        return m_msg == nullptr;
   36|  4.07M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.45M|{
   46|  2.45M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.45M, False: 0]
  ------------------
   47|  2.45M|        auto it = read_while_classic_space(range);
   48|  2.45M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.45M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 7.16k, False: 2.44M]
  |  |  ------------------
  ------------------
   50|  7.16k|            return unexpected(e);
   51|  7.16k|        }
   52|       |
   53|  2.44M|        return it;
   54|  2.45M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.45M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  2.78M|    {
  126|  2.78M|        return true;
  127|  2.78M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.04M|    {
  131|  2.04M|        reader_error_handler eh{};
  132|  2.04M|        get_derived().check_specs_impl(specs, eh);
  133|  2.04M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.04M|        return {};
  137|  2.04M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.04M|    {
  142|  2.04M|        return static_cast<Derived&>(*this);
  143|  2.04M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   308k|{
   46|   308k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 308k, False: 0]
  ------------------
   47|   308k|        auto it = read_while_classic_space(range);
   48|   308k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   308k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   308k|        return it;
   54|   308k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   308k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   305k|{
  218|   305k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   305k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   305k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   305k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   305k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.0k, False: 292k]
  ------------------
  224|  13.0k|        SCN_UNLIKELY_ATTR
  225|  13.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.0k|                                     "Invalid integer value");
  227|  13.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   292k|    auto start = source.data();
  231|   292k|    const auto end = source.data() + source.size();
  232|   292k|    {
  233|   709k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 698k, False: 10.3k]
  ------------------
  234|   698k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 281k, False: 416k]
  ------------------
  235|   281k|                break;
  236|   281k|            }
  237|   698k|        }
  238|   292k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   574k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.8k, False: 223k]
  |  |  |  Branch (157:45): [True: 10.3k, False: 281k]
  |  |  |  Branch (157:45): [True: 58.5k, False: 223k]
  |  |  ------------------
  ------------------
  239|  68.8k|            value = 0;
  240|  68.8k|            return ranges::next(source.begin(),
  241|  68.8k|                                ranges::distance(source.data(), start));
  242|  68.8k|        }
  243|   292k|    }
  244|       |
  245|   223k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   223k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 157k, False: 66.1k]
  ------------------
  247|   157k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.84k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.84k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   151k|                             detail::make_string_view_from_pointers(start, end),
  249|   151k|                             value, sign == sign_type::minus_sign));
  250|   151k|            return ranges::next(source.begin(),
  251|   151k|                                ranges::distance(source.data(), ptr));
  252|   157k|        }
  253|   223k|    }
  254|       |
  255|  66.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  66.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.36k, False: 61.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.36k|    }                                                  \
  |  |  |  |   70|  66.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  61.7k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  61.7k|                     base, sign == sign_type::minus_sign));
  258|  61.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  66.1k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   289k|{
  218|   289k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   289k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   289k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   289k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   289k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 33.9k, False: 255k]
  ------------------
  224|  33.9k|        SCN_UNLIKELY_ATTR
  225|  33.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  33.9k|                                     "Invalid integer value");
  227|  33.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   255k|    auto start = source.data();
  231|   255k|    const auto end = source.data() + source.size();
  232|   255k|    {
  233|   625k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 615k, False: 9.55k]
  ------------------
  234|   615k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 245k, False: 369k]
  ------------------
  235|   245k|                break;
  236|   245k|            }
  237|   615k|        }
  238|   255k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 63.1k, False: 192k]
  |  |  |  Branch (157:45): [True: 9.55k, False: 245k]
  |  |  |  Branch (157:45): [True: 53.6k, False: 192k]
  |  |  ------------------
  ------------------
  239|  63.1k|            value = 0;
  240|  63.1k|            return ranges::next(source.begin(),
  241|  63.1k|                                ranges::distance(source.data(), start));
  242|  63.1k|        }
  243|   255k|    }
  244|       |
  245|   192k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   192k|        if (base == 10) {
  247|   192k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   192k|                             detail::make_string_view_from_pointers(start, end),
  249|   192k|                             value, sign == sign_type::minus_sign));
  250|   192k|            return ranges::next(source.begin(),
  251|   192k|                                ranges::distance(source.data(), ptr));
  252|   192k|        }
  253|   192k|    }
  254|       |
  255|   192k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.43k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.43k|    }                                                  \
  |  |  |  |   70|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   183k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   183k|                     base, sign == sign_type::minus_sign));
  258|   183k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   192k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   408k|{
  218|   408k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   408k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   408k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   408k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   408k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.9k, False: 392k]
  ------------------
  224|  15.9k|        SCN_UNLIKELY_ATTR
  225|  15.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.9k|                                     "Invalid integer value");
  227|  15.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   392k|    auto start = source.data();
  231|   392k|    const auto end = source.data() + source.size();
  232|   392k|    {
  233|   884k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 870k, False: 14.2k]
  ------------------
  234|   870k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 378k, False: 491k]
  ------------------
  235|   378k|                break;
  236|   378k|            }
  237|   870k|        }
  238|   392k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 98.5k, False: 294k]
  |  |  |  Branch (157:45): [True: 14.2k, False: 378k]
  |  |  |  Branch (157:45): [True: 84.3k, False: 294k]
  |  |  ------------------
  ------------------
  239|  98.5k|            value = 0;
  240|  98.5k|            return ranges::next(source.begin(),
  241|  98.5k|                                ranges::distance(source.data(), start));
  242|  98.5k|        }
  243|   392k|    }
  244|       |
  245|   294k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   294k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 192k, False: 101k]
  ------------------
  247|   192k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.29k, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   190k|                             detail::make_string_view_from_pointers(start, end),
  249|   190k|                             value, sign == sign_type::minus_sign));
  250|   190k|            return ranges::next(source.begin(),
  251|   190k|                                ranges::distance(source.data(), ptr));
  252|   192k|        }
  253|   294k|    }
  254|       |
  255|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.29k, False: 99.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.29k|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  99.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  99.0k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  99.0k|                     base, sign == sign_type::minus_sign));
  258|  99.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   101k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   376k|{
  218|   376k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   376k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   376k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   376k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   376k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.0k, False: 340k]
  ------------------
  224|  36.0k|        SCN_UNLIKELY_ATTR
  225|  36.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.0k|                                     "Invalid integer value");
  227|  36.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   340k|    auto start = source.data();
  231|   340k|    const auto end = source.data() + source.size();
  232|   340k|    {
  233|   775k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 762k, False: 12.8k]
  ------------------
  234|   762k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 327k, False: 434k]
  ------------------
  235|   327k|                break;
  236|   327k|            }
  237|   762k|        }
  238|   340k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 88.6k, False: 251k]
  |  |  |  Branch (157:45): [True: 12.8k, False: 327k]
  |  |  |  Branch (157:45): [True: 75.7k, False: 251k]
  |  |  ------------------
  ------------------
  239|  88.6k|            value = 0;
  240|  88.6k|            return ranges::next(source.begin(),
  241|  88.6k|                                ranges::distance(source.data(), start));
  242|  88.6k|        }
  243|   340k|    }
  244|       |
  245|   251k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   251k|        if (base == 10) {
  247|   251k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   251k|                             detail::make_string_view_from_pointers(start, end),
  249|   251k|                             value, sign == sign_type::minus_sign));
  250|   251k|            return ranges::next(source.begin(),
  251|   251k|                                ranges::distance(source.data(), ptr));
  252|   251k|        }
  253|   251k|    }
  254|       |
  255|   251k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.70k, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.70k|    }                                                  \
  |  |  |  |   70|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   248k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   248k|                     base, sign == sign_type::minus_sign));
  258|   248k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   251k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   420k|{
  218|   420k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   420k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   420k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   420k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   420k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 17.1k, False: 403k]
  ------------------
  224|  17.1k|        SCN_UNLIKELY_ATTR
  225|  17.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  17.1k|                                     "Invalid integer value");
  227|  17.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   403k|    auto start = source.data();
  231|   403k|    const auto end = source.data() + source.size();
  232|   403k|    {
  233|   897k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 883k, False: 14.3k]
  ------------------
  234|   883k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 388k, False: 494k]
  ------------------
  235|   388k|                break;
  236|   388k|            }
  237|   883k|        }
  238|   403k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 99.5k, False: 303k]
  |  |  |  Branch (157:45): [True: 14.3k, False: 388k]
  |  |  |  Branch (157:45): [True: 85.1k, False: 303k]
  |  |  ------------------
  ------------------
  239|  99.5k|            value = 0;
  240|  99.5k|            return ranges::next(source.begin(),
  241|  99.5k|                                ranges::distance(source.data(), start));
  242|  99.5k|        }
  243|   403k|    }
  244|       |
  245|   303k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   303k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 198k, False: 104k]
  ------------------
  247|   198k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.47k, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   197k|                             detail::make_string_view_from_pointers(start, end),
  249|   197k|                             value, sign == sign_type::minus_sign));
  250|   197k|            return ranges::next(source.begin(),
  251|   197k|                                ranges::distance(source.data(), ptr));
  252|   198k|        }
  253|   303k|    }
  254|       |
  255|   104k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.13k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.13k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   103k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   103k|                     base, sign == sign_type::minus_sign));
  258|   103k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   104k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   385k|{
  218|   385k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   385k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   385k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   385k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   385k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.8k, False: 348k]
  ------------------
  224|  36.8k|        SCN_UNLIKELY_ATTR
  225|  36.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.8k|                                     "Invalid integer value");
  227|  36.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   348k|    auto start = source.data();
  231|   348k|    const auto end = source.data() + source.size();
  232|   348k|    {
  233|   785k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 772k, False: 13.0k]
  ------------------
  234|   772k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 335k, False: 436k]
  ------------------
  235|   335k|                break;
  236|   335k|            }
  237|   772k|        }
  238|   348k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 89.3k, False: 259k]
  |  |  |  Branch (157:45): [True: 13.0k, False: 335k]
  |  |  |  Branch (157:45): [True: 76.2k, False: 259k]
  |  |  ------------------
  ------------------
  239|  89.3k|            value = 0;
  240|  89.3k|            return ranges::next(source.begin(),
  241|  89.3k|                                ranges::distance(source.data(), start));
  242|  89.3k|        }
  243|   348k|    }
  244|       |
  245|   259k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   259k|        if (base == 10) {
  247|   259k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   259k|                             detail::make_string_view_from_pointers(start, end),
  249|   259k|                             value, sign == sign_type::minus_sign));
  250|   259k|            return ranges::next(source.begin(),
  251|   259k|                                ranges::distance(source.data(), ptr));
  252|   259k|        }
  253|   259k|    }
  254|       |
  255|   259k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.11k, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.11k|    }                                                  \
  |  |  |  |   70|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   257k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   257k|                     base, sign == sign_type::minus_sign));
  258|   257k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   259k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   280k|{
  218|   280k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   280k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   280k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   280k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   280k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 9.99k, False: 270k]
  ------------------
  224|  9.99k|        SCN_UNLIKELY_ATTR
  225|  9.99k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  9.99k|                                     "Invalid integer value");
  227|  9.99k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   270k|    auto start = source.data();
  231|   270k|    const auto end = source.data() + source.size();
  232|   270k|    {
  233|   662k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 652k, False: 9.63k]
  ------------------
  234|   652k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 260k, False: 392k]
  ------------------
  235|   260k|                break;
  236|   260k|            }
  237|   652k|        }
  238|   270k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 72.0k, False: 198k]
  |  |  |  Branch (157:45): [True: 9.63k, False: 260k]
  |  |  |  Branch (157:45): [True: 62.4k, False: 198k]
  |  |  ------------------
  ------------------
  239|  72.0k|            value = 0;
  240|  72.0k|            return ranges::next(source.begin(),
  241|  72.0k|                                ranges::distance(source.data(), start));
  242|  72.0k|        }
  243|   270k|    }
  244|       |
  245|   198k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   198k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 131k, False: 66.9k]
  ------------------
  247|   131k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.48k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.48k|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   128k|                             detail::make_string_view_from_pointers(start, end),
  249|   128k|                             value, sign == sign_type::minus_sign));
  250|   128k|            return ranges::next(source.begin(),
  251|   128k|                                ranges::distance(source.data(), ptr));
  252|   131k|        }
  253|   198k|    }
  254|       |
  255|  66.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.89k, False: 65.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.89k|    }                                                  \
  |  |  |  |   70|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  65.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  65.0k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  65.0k|                     base, sign == sign_type::minus_sign));
  258|  65.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  66.9k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   270k|{
  218|   270k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   270k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   270k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   270k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   270k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 31.8k, False: 238k]
  ------------------
  224|  31.8k|        SCN_UNLIKELY_ATTR
  225|  31.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  31.8k|                                     "Invalid integer value");
  227|  31.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   238k|    auto start = source.data();
  231|   238k|    const auto end = source.data() + source.size();
  232|   238k|    {
  233|   589k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 580k, False: 8.97k]
  ------------------
  234|   580k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 229k, False: 350k]
  ------------------
  235|   229k|                break;
  236|   229k|            }
  237|   580k|        }
  238|   238k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 66.4k, False: 172k]
  |  |  |  Branch (157:45): [True: 8.97k, False: 229k]
  |  |  |  Branch (157:45): [True: 57.4k, False: 172k]
  |  |  ------------------
  ------------------
  239|  66.4k|            value = 0;
  240|  66.4k|            return ranges::next(source.begin(),
  241|  66.4k|                                ranges::distance(source.data(), start));
  242|  66.4k|        }
  243|   238k|    }
  244|       |
  245|   172k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   172k|        if (base == 10) {
  247|   172k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   172k|                             detail::make_string_view_from_pointers(start, end),
  249|   172k|                             value, sign == sign_type::minus_sign));
  250|   172k|            return ranges::next(source.begin(),
  251|   172k|                                ranges::distance(source.data(), ptr));
  252|   172k|        }
  253|   172k|    }
  254|       |
  255|   172k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.09k, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.09k|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   168k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   168k|                     base, sign == sign_type::minus_sign));
  258|   168k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   172k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   332k|{
  218|   332k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   332k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   332k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   332k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   332k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.0k, False: 320k]
  ------------------
  224|  11.0k|        SCN_UNLIKELY_ATTR
  225|  11.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.0k|                                     "Invalid integer value");
  227|  11.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   320k|    auto start = source.data();
  231|   320k|    const auto end = source.data() + source.size();
  232|   320k|    {
  233|   748k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 736k, False: 12.2k]
  ------------------
  234|   736k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 308k, False: 427k]
  ------------------
  235|   308k|                break;
  236|   308k|            }
  237|   736k|        }
  238|   320k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.5k, False: 234k]
  |  |  |  Branch (157:45): [True: 12.2k, False: 308k]
  |  |  |  Branch (157:45): [True: 74.3k, False: 234k]
  |  |  ------------------
  ------------------
  239|  86.5k|            value = 0;
  240|  86.5k|            return ranges::next(source.begin(),
  241|  86.5k|                                ranges::distance(source.data(), start));
  242|  86.5k|        }
  243|   320k|    }
  244|       |
  245|   234k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   234k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 152k, False: 81.8k]
  ------------------
  247|   152k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 891, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    891|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    891|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    891|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    891|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    891|    }                                                  \
  |  |  |  |   70|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   151k|                             detail::make_string_view_from_pointers(start, end),
  249|   151k|                             value, sign == sign_type::minus_sign));
  250|   151k|            return ranges::next(source.begin(),
  251|   151k|                                ranges::distance(source.data(), ptr));
  252|   152k|        }
  253|   234k|    }
  254|       |
  255|  81.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  81.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  81.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 826, False: 81.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    826|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    826|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    826|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    826|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    826|    }                                                  \
  |  |  |  |   70|  81.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  81.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  81.0k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  81.0k|                     base, sign == sign_type::minus_sign));
  258|  81.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  81.8k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   319k|{
  218|   319k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   319k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   319k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   319k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   319k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 32.7k, False: 286k]
  ------------------
  224|  32.7k|        SCN_UNLIKELY_ATTR
  225|  32.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  32.7k|                                     "Invalid integer value");
  227|  32.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   286k|    auto start = source.data();
  231|   286k|    const auto end = source.data() + source.size();
  232|   286k|    {
  233|   671k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 660k, False: 11.5k]
  ------------------
  234|   660k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 275k, False: 385k]
  ------------------
  235|   275k|                break;
  236|   275k|            }
  237|   660k|        }
  238|   286k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.7k, False: 205k]
  |  |  |  Branch (157:45): [True: 11.5k, False: 275k]
  |  |  |  Branch (157:45): [True: 69.2k, False: 205k]
  |  |  ------------------
  ------------------
  239|  80.7k|            value = 0;
  240|  80.7k|            return ranges::next(source.begin(),
  241|  80.7k|                                ranges::distance(source.data(), start));
  242|  80.7k|        }
  243|   286k|    }
  244|       |
  245|   205k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   205k|        if (base == 10) {
  247|   205k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   205k|                             detail::make_string_view_from_pointers(start, end),
  249|   205k|                             value, sign == sign_type::minus_sign));
  250|   205k|            return ranges::next(source.begin(),
  251|   205k|                                ranges::distance(source.data(), ptr));
  252|   205k|        }
  253|   205k|    }
  254|       |
  255|   205k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.66k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.66k|    }                                                  \
  |  |  |  |   70|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   204k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   204k|                     base, sign == sign_type::minus_sign));
  258|   204k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   205k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   335k|{
  218|   335k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   335k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   335k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   335k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   335k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.3k, False: 324k]
  ------------------
  224|  11.3k|        SCN_UNLIKELY_ATTR
  225|  11.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.3k|                                     "Invalid integer value");
  227|  11.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   324k|    auto start = source.data();
  231|   324k|    const auto end = source.data() + source.size();
  232|   324k|    {
  233|   752k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 740k, False: 12.2k]
  ------------------
  234|   740k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 311k, False: 428k]
  ------------------
  235|   311k|                break;
  236|   311k|            }
  237|   740k|        }
  238|   324k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   636k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 86.5k, False: 237k]
  |  |  |  Branch (157:45): [True: 12.2k, False: 311k]
  |  |  |  Branch (157:45): [True: 74.3k, False: 237k]
  |  |  ------------------
  ------------------
  239|  86.5k|            value = 0;
  240|  86.5k|            return ranges::next(source.begin(),
  241|  86.5k|                                ranges::distance(source.data(), start));
  242|  86.5k|        }
  243|   324k|    }
  244|       |
  245|   237k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   237k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 154k, False: 82.9k]
  ------------------
  247|   154k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 451, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    451|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    451|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    451|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    451|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    451|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   154k|                             detail::make_string_view_from_pointers(start, end),
  249|   154k|                             value, sign == sign_type::minus_sign));
  250|   154k|            return ranges::next(source.begin(),
  251|   154k|                                ranges::distance(source.data(), ptr));
  252|   154k|        }
  253|   237k|    }
  254|       |
  255|  82.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  82.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 450, False: 82.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    450|    }                                                  \
  |  |  |  |   70|  82.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  82.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  82.4k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  82.4k|                     base, sign == sign_type::minus_sign));
  258|  82.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  82.9k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   323k|{
  218|   323k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   323k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   323k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   323k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   323k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 33.0k, False: 289k]
  ------------------
  224|  33.0k|        SCN_UNLIKELY_ATTR
  225|  33.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  33.0k|                                     "Invalid integer value");
  227|  33.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   289k|    auto start = source.data();
  231|   289k|    const auto end = source.data() + source.size();
  232|   289k|    {
  233|   675k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 663k, False: 11.5k]
  ------------------
  234|   663k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 278k, False: 385k]
  ------------------
  235|   278k|                break;
  236|   278k|            }
  237|   663k|        }
  238|   289k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 80.8k, False: 209k]
  |  |  |  Branch (157:45): [True: 11.5k, False: 278k]
  |  |  |  Branch (157:45): [True: 69.2k, False: 209k]
  |  |  ------------------
  ------------------
  239|  80.8k|            value = 0;
  240|  80.8k|            return ranges::next(source.begin(),
  241|  80.8k|                                ranges::distance(source.data(), start));
  242|  80.8k|        }
  243|   289k|    }
  244|       |
  245|   209k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   209k|        if (base == 10) {
  247|   209k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   209k|                             detail::make_string_view_from_pointers(start, end),
  249|   209k|                             value, sign == sign_type::minus_sign));
  250|   209k|            return ranges::next(source.begin(),
  251|   209k|                                ranges::distance(source.data(), ptr));
  252|   209k|        }
  253|   209k|    }
  254|       |
  255|   209k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   209k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   209k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   209k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 824, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    824|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    824|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    824|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    824|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    824|    }                                                  \
  |  |  |  |   70|   209k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   208k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   208k|                     base, sign == sign_type::minus_sign));
  258|   208k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   209k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   415k|{
  126|   415k|    auto max_digits = maxdigits_u64(base);
  127|   415k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.54k, False: 412k]
  ------------------
  128|  3.54k|        return true;
  129|  3.54k|    }
  130|   412k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 720, False: 411k]
  |  Branch (130:39): [True: 160, False: 560]
  ------------------
  131|    160|        return true;
  132|    160|    }
  133|   412k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   412k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 14.9k, False: 397k]
  ------------------
  135|   412k|                      static_cast<uint64_t>(is_negative)) {
  136|  14.9k|            SCN_UNLIKELY_ATTR
  137|  14.9k|            return true;
  138|  14.9k|        }
  139|   412k|    }
  140|       |
  141|   397k|    return false;
  142|   412k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  2.78M|{
   96|  2.78M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  246|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|  2.78M|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  2.78M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  4.37k|{
  116|  4.37k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  246|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|  4.37k|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  4.37k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   397k|{
  147|   397k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 35.4k, False: 361k]
  ------------------
  148|  35.4k|        SCN_MSVC_PUSH
  149|  35.4k|        SCN_MSVC_IGNORE(4146)
  150|  35.4k|        return static_cast<T>(
  151|  35.4k|            -std::numeric_limits<T>::max() -
  152|  35.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  35.4k|        SCN_MSVC_POP
  154|  35.4k|    }
  155|       |
  156|   361k|    return static_cast<T>(u64val);
  157|   397k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   546k|{
  126|   546k|    auto max_digits = maxdigits_u64(base);
  127|   546k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.76k, False: 542k]
  ------------------
  128|  3.76k|        return true;
  129|  3.76k|    }
  130|   542k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 911, False: 541k]
  |  Branch (130:39): [True: 186, False: 725]
  ------------------
  131|    186|        return true;
  132|    186|    }
  133|   542k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   542k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.34k, False: 537k]
  ------------------
  135|   542k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.34k|            SCN_UNLIKELY_ATTR
  137|  4.34k|            return true;
  138|  4.34k|        }
  139|   542k|    }
  140|       |
  141|   537k|    return false;
  142|   542k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   537k|{
  147|   537k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 40.7k, False: 497k]
  ------------------
  148|  40.7k|        SCN_MSVC_PUSH
  149|  40.7k|        SCN_MSVC_IGNORE(4146)
  150|  40.7k|        return static_cast<T>(
  151|  40.7k|            -std::numeric_limits<T>::max() -
  152|  40.7k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  40.7k|        SCN_MSVC_POP
  154|  40.7k|    }
  155|       |
  156|   497k|    return static_cast<T>(u64val);
  157|   537k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   563k|{
  126|   563k|    auto max_digits = maxdigits_u64(base);
  127|   563k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 4.22k, False: 558k]
  ------------------
  128|  4.22k|        return true;
  129|  4.22k|    }
  130|   558k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.50k, False: 557k]
  |  Branch (130:39): [True: 198, False: 1.30k]
  ------------------
  131|    198|        return true;
  132|    198|    }
  133|   558k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   558k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 297, False: 558k]
  ------------------
  135|   558k|                      static_cast<uint64_t>(is_negative)) {
  136|    297|            SCN_UNLIKELY_ATTR
  137|    297|            return true;
  138|    297|        }
  139|   558k|    }
  140|       |
  141|   558k|    return false;
  142|   558k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   558k|{
  147|   558k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 44.8k, False: 513k]
  ------------------
  148|  44.8k|        SCN_MSVC_PUSH
  149|  44.8k|        SCN_MSVC_IGNORE(4146)
  150|  44.8k|        return static_cast<T>(
  151|  44.8k|            -std::numeric_limits<T>::max() -
  152|  44.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  44.8k|        SCN_MSVC_POP
  154|  44.8k|    }
  155|       |
  156|   513k|    return static_cast<T>(u64val);
  157|   558k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   370k|{
  126|   370k|    auto max_digits = maxdigits_u64(base);
  127|   370k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.55k, False: 369k]
  ------------------
  128|  1.55k|        return true;
  129|  1.55k|    }
  130|   369k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 345, False: 368k]
  |  Branch (130:39): [True: 116, False: 229]
  ------------------
  131|    116|        return true;
  132|    116|    }
  133|   368k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   368k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 6.80k, False: 362k]
  ------------------
  135|   368k|                      static_cast<uint64_t>(is_negative)) {
  136|  6.80k|            SCN_UNLIKELY_ATTR
  137|  6.80k|            return true;
  138|  6.80k|        }
  139|   368k|    }
  140|       |
  141|   362k|    return false;
  142|   368k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   362k|{
  147|   362k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 362k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   362k|    return static_cast<T>(u64val);
  157|   362k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   440k|{
  126|   440k|    auto max_digits = maxdigits_u64(base);
  127|   440k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.57k, False: 438k]
  ------------------
  128|  1.57k|        return true;
  129|  1.57k|    }
  130|   438k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 345, False: 438k]
  |  Branch (130:39): [True: 116, False: 229]
  ------------------
  131|    116|        return true;
  132|    116|    }
  133|   438k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   438k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.69k, False: 436k]
  ------------------
  135|   438k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.69k|            SCN_UNLIKELY_ATTR
  137|  1.69k|            return true;
  138|  1.69k|        }
  139|   438k|    }
  140|       |
  141|   436k|    return false;
  142|   438k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   436k|{
  147|   436k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 436k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   436k|    return static_cast<T>(u64val);
  157|   436k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   446k|{
  126|   446k|    auto max_digits = maxdigits_u64(base);
  127|   446k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.60k, False: 445k]
  ------------------
  128|  1.60k|        return true;
  129|  1.60k|    }
  130|   445k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 543, False: 444k]
  |  Branch (130:39): [True: 116, False: 427]
  ------------------
  131|    116|        return true;
  132|    116|    }
  133|   445k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   445k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 445k]
  ------------------
  135|   445k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   445k|    }
  140|       |
  141|   445k|    return false;
  142|   445k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   445k|{
  147|   445k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 445k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   445k|    return static_cast<T>(u64val);
  157|   445k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|   969k|{
   34|   969k|    uint64_t val{};
   35|   969k|    std::memcpy(&val, input, sizeof(uint64_t));
   36|   969k|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  543|   969k|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (543:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|   969k|    return val;
   40|   969k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|   121k|{
   44|   121k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|   121k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|   121k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|   121k|    word -= 0x3030303030303030;
   48|   121k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|   121k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|   121k|    return static_cast<uint32_t>(word);
   51|   121k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|   848k|{
   55|   848k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|   848k|              0x8080808080808080));
   57|   848k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   157k|{
  164|   157k|    uint64_t u64val{};
  165|   157k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   157k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   157k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   157k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.84k, False: 151k]
  |  |  ------------------
  ------------------
  170|   157k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  5.84k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  5.84k|                                     "Integer overflow");
  173|  5.84k|    }
  174|       |
  175|   151k|    val = store_result<T>(u64val, is_negative);
  176|   151k|    return ptr;
  177|   157k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|   987k|{
   76|   987k|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  2.30M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 2.07M, False: 226k]
  ------------------
   79|  2.07M|        const auto digit = char_to_int(*begin);
   80|  2.07M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 760k, False: 1.31M]
  ------------------
   81|   760k|            break;
   82|   760k|        }
   83|  1.31M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.31M|        ++begin;
   85|  1.31M|    }
   86|       |
   87|   987k|    return begin;
   88|   987k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|   987k|{
   63|   987k|    while (
   64|  1.10M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 848k, False: 259k]
  ------------------
   65|  1.10M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 121k, False: 727k]
  ------------------
   66|   121k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|   121k|                                      get_eight_digits_word(p));
   68|   121k|        p += 8;
   69|   121k|    }
   70|   987k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  66.1k|{
  185|  66.1k|    uint64_t u64val{};
  186|  66.1k|    const CharT* begin = input.data();
  187|  66.1k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   288k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 278k, False: 10.0k]
  ------------------
  190|   278k|        const auto digit = char_to_int(*begin);
  191|   278k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 56.0k, False: 222k]
  ------------------
  192|  56.0k|            break;
  193|  56.0k|        }
  194|   222k|        u64val =
  195|   222k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   222k|        ++begin;
  197|   222k|    }
  198|       |
  199|  66.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  66.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.36k, False: 61.7k]
  |  |  ------------------
  ------------------
  201|  66.1k|                                               is_negative))) {
  202|  4.36k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.36k|                                     "Integer overflow");
  204|  4.36k|    }
  205|       |
  206|  61.7k|    val = store_result<T>(u64val, is_negative);
  207|  61.7k|    return begin;
  208|  66.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   192k|{
  185|   192k|    uint64_t u64val{};
  186|   192k|    const CharT* begin = input.data();
  187|   192k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   797k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 757k, False: 40.7k]
  ------------------
  190|   757k|        const auto digit = char_to_int(*begin);
  191|   757k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 151k, False: 605k]
  ------------------
  192|   151k|            break;
  193|   151k|        }
  194|   605k|        u64val =
  195|   605k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   605k|        ++begin;
  197|   605k|    }
  198|       |
  199|   192k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   192k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.43k, False: 183k]
  |  |  ------------------
  ------------------
  201|   192k|                                               is_negative))) {
  202|  8.43k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  8.43k|                                     "Integer overflow");
  204|  8.43k|    }
  205|       |
  206|   183k|    val = store_result<T>(u64val, is_negative);
  207|   183k|    return begin;
  208|   192k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   192k|{
  164|   192k|    uint64_t u64val{};
  165|   192k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   192k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   192k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   192k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.29k, False: 190k]
  |  |  ------------------
  ------------------
  170|   192k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.29k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.29k|                                     "Integer overflow");
  173|  2.29k|    }
  174|       |
  175|   190k|    val = store_result<T>(u64val, is_negative);
  176|   190k|    return ptr;
  177|   192k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   101k|{
  185|   101k|    uint64_t u64val{};
  186|   101k|    const CharT* begin = input.data();
  187|   101k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   377k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 366k, False: 11.3k]
  ------------------
  190|   366k|        const auto digit = char_to_int(*begin);
  191|   366k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 90.0k, False: 276k]
  ------------------
  192|  90.0k|            break;
  193|  90.0k|        }
  194|   276k|        u64val =
  195|   276k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   276k|        ++begin;
  197|   276k|    }
  198|       |
  199|   101k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   101k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.29k, False: 99.0k]
  |  |  ------------------
  ------------------
  201|   101k|                                               is_negative))) {
  202|  2.29k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.29k|                                     "Integer overflow");
  204|  2.29k|    }
  205|       |
  206|  99.0k|    val = store_result<T>(u64val, is_negative);
  207|  99.0k|    return begin;
  208|   101k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   251k|{
  185|   251k|    uint64_t u64val{};
  186|   251k|    const CharT* begin = input.data();
  187|   251k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   958k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 910k, False: 48.3k]
  ------------------
  190|   910k|        const auto digit = char_to_int(*begin);
  191|   910k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 203k, False: 706k]
  ------------------
  192|   203k|            break;
  193|   203k|        }
  194|   706k|        u64val =
  195|   706k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   706k|        ++begin;
  197|   706k|    }
  198|       |
  199|   251k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   251k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.70k, False: 248k]
  |  |  ------------------
  ------------------
  201|   251k|                                               is_negative))) {
  202|  3.70k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.70k|                                     "Integer overflow");
  204|  3.70k|    }
  205|       |
  206|   248k|    val = store_result<T>(u64val, is_negative);
  207|   248k|    return begin;
  208|   251k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   198k|{
  164|   198k|    uint64_t u64val{};
  165|   198k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   198k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   198k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   198k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.47k, False: 197k]
  |  |  ------------------
  ------------------
  170|   198k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.47k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.47k|                                     "Integer overflow");
  173|  1.47k|    }
  174|       |
  175|   197k|    val = store_result<T>(u64val, is_negative);
  176|   197k|    return ptr;
  177|   198k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   104k|{
  185|   104k|    uint64_t u64val{};
  186|   104k|    const CharT* begin = input.data();
  187|   104k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   404k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 392k, False: 11.6k]
  ------------------
  190|   392k|        const auto digit = char_to_int(*begin);
  191|   392k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 93.0k, False: 299k]
  ------------------
  192|  93.0k|            break;
  193|  93.0k|        }
  194|   299k|        u64val =
  195|   299k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   299k|        ++begin;
  197|   299k|    }
  198|       |
  199|   104k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   104k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.13k, False: 103k]
  |  |  ------------------
  ------------------
  201|   104k|                                               is_negative))) {
  202|  1.13k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.13k|                                     "Integer overflow");
  204|  1.13k|    }
  205|       |
  206|   103k|    val = store_result<T>(u64val, is_negative);
  207|   103k|    return begin;
  208|   104k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   259k|{
  185|   259k|    uint64_t u64val{};
  186|   259k|    const CharT* begin = input.data();
  187|   259k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   996k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 946k, False: 49.8k]
  ------------------
  190|   946k|        const auto digit = char_to_int(*begin);
  191|   946k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 209k, False: 736k]
  ------------------
  192|   209k|            break;
  193|   209k|        }
  194|   736k|        u64val =
  195|   736k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   736k|        ++begin;
  197|   736k|    }
  198|       |
  199|   259k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   259k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.11k, False: 257k]
  |  |  ------------------
  ------------------
  201|   259k|                                               is_negative))) {
  202|  2.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.11k|                                     "Integer overflow");
  204|  2.11k|    }
  205|       |
  206|   257k|    val = store_result<T>(u64val, is_negative);
  207|   257k|    return begin;
  208|   259k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   131k|{
  164|   131k|    uint64_t u64val{};
  165|   131k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   131k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   131k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   131k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.48k, False: 128k]
  |  |  ------------------
  ------------------
  170|   131k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.48k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.48k|                                     "Integer overflow");
  173|  2.48k|    }
  174|       |
  175|   128k|    val = store_result<T>(u64val, is_negative);
  176|   128k|    return ptr;
  177|   131k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  66.9k|{
  185|  66.9k|    uint64_t u64val{};
  186|  66.9k|    const CharT* begin = input.data();
  187|  66.9k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   184k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 175k, False: 8.94k]
  ------------------
  190|   175k|        const auto digit = char_to_int(*begin);
  191|   175k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 58.0k, False: 117k]
  ------------------
  192|  58.0k|            break;
  193|  58.0k|        }
  194|   117k|        u64val =
  195|   117k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   117k|        ++begin;
  197|   117k|    }
  198|       |
  199|  66.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  66.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.89k, False: 65.0k]
  |  |  ------------------
  ------------------
  201|  66.9k|                                               is_negative))) {
  202|  1.89k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.89k|                                     "Integer overflow");
  204|  1.89k|    }
  205|       |
  206|  65.0k|    val = store_result<T>(u64val, is_negative);
  207|  65.0k|    return begin;
  208|  66.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   172k|{
  185|   172k|    uint64_t u64val{};
  186|   172k|    const CharT* begin = input.data();
  187|   172k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   463k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 428k, False: 34.6k]
  ------------------
  190|   428k|        const auto digit = char_to_int(*begin);
  191|   428k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 137k, False: 290k]
  ------------------
  192|   137k|            break;
  193|   137k|        }
  194|   290k|        u64val =
  195|   290k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   290k|        ++begin;
  197|   290k|    }
  198|       |
  199|   172k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   172k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.09k, False: 168k]
  |  |  ------------------
  ------------------
  201|   172k|                                               is_negative))) {
  202|  4.09k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.09k|                                     "Integer overflow");
  204|  4.09k|    }
  205|       |
  206|   168k|    val = store_result<T>(u64val, is_negative);
  207|   168k|    return begin;
  208|   172k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   152k|{
  164|   152k|    uint64_t u64val{};
  165|   152k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   152k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   152k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   152k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 891, False: 151k]
  |  |  ------------------
  ------------------
  170|   152k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    891|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    891|                                     "Integer overflow");
  173|    891|    }
  174|       |
  175|   151k|    val = store_result<T>(u64val, is_negative);
  176|   151k|    return ptr;
  177|   152k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  81.8k|{
  185|  81.8k|    uint64_t u64val{};
  186|  81.8k|    const CharT* begin = input.data();
  187|  81.8k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   224k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 215k, False: 9.56k]
  ------------------
  190|   215k|        const auto digit = char_to_int(*begin);
  191|   215k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 72.3k, False: 142k]
  ------------------
  192|  72.3k|            break;
  193|  72.3k|        }
  194|   142k|        u64val =
  195|   142k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   142k|        ++begin;
  197|   142k|    }
  198|       |
  199|  81.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  81.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  81.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 826, False: 81.0k]
  |  |  ------------------
  ------------------
  201|  81.8k|                                               is_negative))) {
  202|    826|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    826|                                     "Integer overflow");
  204|    826|    }
  205|       |
  206|  81.0k|    val = store_result<T>(u64val, is_negative);
  207|  81.0k|    return begin;
  208|  81.8k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   205k|{
  185|   205k|    uint64_t u64val{};
  186|   205k|    const CharT* begin = input.data();
  187|   205k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   563k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 523k, False: 39.5k]
  ------------------
  190|   523k|        const auto digit = char_to_int(*begin);
  191|   523k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 166k, False: 357k]
  ------------------
  192|   166k|            break;
  193|   166k|        }
  194|   357k|        u64val =
  195|   357k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   357k|        ++begin;
  197|   357k|    }
  198|       |
  199|   205k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   205k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.66k, False: 204k]
  |  |  ------------------
  ------------------
  201|   205k|                                               is_negative))) {
  202|  1.66k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.66k|                                     "Integer overflow");
  204|  1.66k|    }
  205|       |
  206|   204k|    val = store_result<T>(u64val, is_negative);
  207|   204k|    return begin;
  208|   205k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   154k|{
  164|   154k|    uint64_t u64val{};
  165|   154k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   154k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   154k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   154k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 451, False: 154k]
  |  |  ------------------
  ------------------
  170|   154k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    451|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    451|                                     "Integer overflow");
  173|    451|    }
  174|       |
  175|   154k|    val = store_result<T>(u64val, is_negative);
  176|   154k|    return ptr;
  177|   154k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  82.9k|{
  185|  82.9k|    uint64_t u64val{};
  186|  82.9k|    const CharT* begin = input.data();
  187|  82.9k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   230k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 220k, False: 9.62k]
  ------------------
  190|   220k|        const auto digit = char_to_int(*begin);
  191|   220k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 73.2k, False: 147k]
  ------------------
  192|  73.2k|            break;
  193|  73.2k|        }
  194|   147k|        u64val =
  195|   147k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   147k|        ++begin;
  197|   147k|    }
  198|       |
  199|  82.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  82.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 450, False: 82.4k]
  |  |  ------------------
  ------------------
  201|  82.9k|                                               is_negative))) {
  202|    450|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    450|                                     "Integer overflow");
  204|    450|    }
  205|       |
  206|  82.4k|    val = store_result<T>(u64val, is_negative);
  207|  82.4k|    return begin;
  208|  82.9k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   209k|{
  185|   209k|    uint64_t u64val{};
  186|   209k|    const CharT* begin = input.data();
  187|   209k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   575k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 535k, False: 40.0k]
  ------------------
  190|   535k|        const auto digit = char_to_int(*begin);
  191|   535k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 169k, False: 366k]
  ------------------
  192|   169k|            break;
  193|   169k|        }
  194|   366k|        u64val =
  195|   366k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   366k|        ++begin;
  197|   366k|    }
  198|       |
  199|   209k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   209k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 824, False: 208k]
  |  |  ------------------
  ------------------
  201|   209k|                                               is_negative))) {
  202|    824|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    824|                                     "Integer overflow");
  204|    824|    }
  205|       |
  206|   208k|    val = store_result<T>(u64val, is_negative);
  207|   208k|    return begin;
  208|   209k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   111k|    {
  324|   111k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   111k|        return read_default_with_base(range, value, 0);
  326|   111k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   111k|    {
  287|   111k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   111k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   111k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   111k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   111k|                return unexpected_scan_error(
  293|   111k|                    scan_error::invalid_scanned_value,
  294|   111k|                    "Unexpected '-' sign when parsing an "
  295|   111k|                    "unsigned value");
  296|   111k|            }
  297|   111k|        }
  298|       |
  299|   111k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.0k, False: 83.4k]
  ------------------
  300|  28.0k|            value = T{0};
  301|  28.0k|            return std::next(prefix_result.iterator);
  302|  28.0k|        }
  303|       |
  304|   166k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  83.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 75, False: 83.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     75|    }                                                  \
  |  |  |  |   70|  83.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   166k|                                     ranges::subrange{prefix_result.iterator,
  306|   166k|                                                      ranges::end(range)},
  307|   166k|                                     prefix_result.parsed_base));
  308|       |
  309|   166k|        auto buf = make_contiguous_buffer(
  310|   166k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   166k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  83.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.74k, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.74k|    }                                                  \
  |  |  |  |   70|  83.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  78.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  78.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  78.6k|        return ranges_polyfill::batch_next(
  316|  78.6k|            prefix_result.iterator,
  317|  78.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   166k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.60M|{
  121|  2.60M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.60M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.60M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.60M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.60M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.60M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.60M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.60M|        parse_integer_base_prefix(
  126|  2.60M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.60M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 883k, False: 1.71M]
  ------------------
  129|   883k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.86k, False: 880k]
  ------------------
  130|   883k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 474k, False: 406k]
  ------------------
  131|   477k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   477k|                digits_begin_it, ranges::begin(range));
  133|   477k|        }
  134|   406k|        else {
  135|   406k|            parsed_zero = false;
  136|   406k|        }
  137|   883k|    }
  138|  1.71M|    else {
  139|  1.71M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.98k, False: 1.71M]
  ------------------
  140|  1.71M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 93.3k, False: 1.61M]
  ------------------
  141|  98.3k|            digits_begin_it = base_prefix_begin_it;
  142|  98.3k|        }
  143|  1.71M|    }
  144|       |
  145|  2.60M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.43M, False: 167k]
  ------------------
  146|  2.43M|        sign = sign_type::plus_sign;
  147|  2.43M|    }
  148|  2.60M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.60M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.60M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.60M|{
   88|  2.60M|    switch (base) {
   89|  71.8k|        case 2:
  ------------------
  |  Branch (89:9): [True: 71.8k, False: 2.52M]
  ------------------
   90|       |            // allow 0b/0B
   91|  71.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  71.8k|                    false};
   93|       |
   94|   142k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 142k, False: 2.45M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   142k|            bool zero_parsed = false;
   97|   142k|            auto it = apply_opt(
   98|   142k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   142k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   376k|        case 16:
  ------------------
  |  Branch (102:9): [True: 376k, False: 2.22M]
  ------------------
  103|       |            // allow 0x/0X
  104|   376k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   376k|                    false};
  106|       |
  107|  1.69M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.69M, False: 910k]
  ------------------
  108|       |            // detect base
  109|  1.69M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   319k|        default:
  ------------------
  |  Branch (111:9): [True: 319k, False: 2.28M]
  ------------------
  112|       |            // no base prefix allowed
  113|   319k|            return {ranges::begin(range), base, false};
  114|  2.60M|    }
  115|  2.60M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.73M|{
   38|  1.73M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.73M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  1.80M|{
   53|  1.80M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 23.6k, False: 1.77M]
  ------------------
   54|  23.6k|        return *r;
   55|  23.6k|    }
   56|       |
   57|  1.77M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 883k, False: 893k]
  ------------------
   58|   883k|        zero_parsed = true;
   59|   883k|        return *r;
   60|   883k|    }
   61|       |
   62|   893k|    return unexpected(parse_error::error);
   63|  1.77M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.06M|{
   45|  2.06M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.06M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.69M|{
   69|  1.69M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 22.8k, False: 1.66M]
  ------------------
   70|  22.8k|        return {*r, 16, false};
   71|  22.8k|    }
   72|  1.66M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 8.78k, False: 1.65M]
  ------------------
   73|  8.78k|        return {*r, 2, false};
   74|  8.78k|    }
   75|  1.65M|    {
   76|  1.65M|        bool zero_parsed{false};
   77|  1.65M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 841k, False: 817k]
  ------------------
   78|   841k|            return {*r, 8, zero_parsed};
   79|   841k|        }
   80|  1.65M|    }
   81|   817k|    return {ranges::begin(range), 10, false};
   82|  1.65M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.73M|{
  156|  1.73M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.73M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.73M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.26k, False: 1.73M]
  |  |  ------------------
  ------------------
  160|  1.26k|            return unexpected_scan_error(
  161|  1.26k|                scan_error::invalid_scanned_value,
  162|  1.26k|                "Failed to parse integer: No digits found");
  163|  1.26k|        }
  164|  1.73M|        return ranges::end(range);
  165|  1.73M|    }
  166|  1.73M|    else {
  167|  1.73M|        return read_while1_code_unit(
  168|  1.73M|                   range, [&](char_type ch)
  169|  1.73M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.73M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.73M|                scan_error::invalid_scanned_value,
  172|  1.73M|                "Failed to parse integer: No digits found"));
  173|  1.73M|    }
  174|  1.73M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   137k|    {
  324|   137k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   137k|        return read_default_with_base(range, value, 0);
  326|   137k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   137k|    {
  287|   137k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   137k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   137k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   137k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   137k|                return unexpected_scan_error(
  293|   137k|                    scan_error::invalid_scanned_value,
  294|   137k|                    "Unexpected '-' sign when parsing an "
  295|   137k|                    "unsigned value");
  296|   137k|            }
  297|   137k|        }
  298|       |
  299|   137k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 34.9k, False: 102k]
  ------------------
  300|  34.9k|            value = T{0};
  301|  34.9k|            return std::next(prefix_result.iterator);
  302|  34.9k|        }
  303|       |
  304|   204k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 117, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    117|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    117|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    117|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    117|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    117|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   204k|                                     ranges::subrange{prefix_result.iterator,
  306|   204k|                                                      ranges::end(range)},
  307|   204k|                                     prefix_result.parsed_base));
  308|       |
  309|   204k|        auto buf = make_contiguous_buffer(
  310|   204k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   204k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.22k, False: 98.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.22k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  98.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  98.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  98.0k|        return ranges_polyfill::batch_next(
  316|  98.0k|            prefix_result.iterator,
  317|  98.0k|            ranges::distance(buf.view().begin(), result_it));
  318|   204k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   140k|    {
  324|   140k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   140k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   140k|        return read_default_with_base(range, value, 0);
  326|   140k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   140k|    {
  287|   140k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   140k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   140k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   140k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   140k|                return unexpected_scan_error(
  293|   140k|                    scan_error::invalid_scanned_value,
  294|   140k|                    "Unexpected '-' sign when parsing an "
  295|   140k|                    "unsigned value");
  296|   140k|            }
  297|   140k|        }
  298|       |
  299|   140k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 35.1k, False: 105k]
  ------------------
  300|  35.1k|            value = T{0};
  301|  35.1k|            return std::next(prefix_result.iterator);
  302|  35.1k|        }
  303|       |
  304|   210k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 132, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   210k|                                     ranges::subrange{prefix_result.iterator,
  306|   210k|                                                      ranges::end(range)},
  307|   210k|                                     prefix_result.parsed_base));
  308|       |
  309|   210k|        auto buf = make_contiguous_buffer(
  310|   210k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   210k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.08k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.08k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   100k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   100k|                                    prefix_result.parsed_base));
  314|       |
  315|   100k|        return ranges_polyfill::batch_next(
  316|   100k|            prefix_result.iterator,
  317|   100k|            ranges::distance(buf.view().begin(), result_it));
  318|   210k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   100k|    {
  324|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   100k|        return read_default_with_base(range, value, 0);
  326|   100k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   100k|    {
  287|   100k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   100k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   100k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   100k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.20k, False: 98.2k]
  ------------------
  292|  2.20k|                return unexpected_scan_error(
  293|  2.20k|                    scan_error::invalid_scanned_value,
  294|  2.20k|                    "Unexpected '-' sign when parsing an "
  295|  2.20k|                    "unsigned value");
  296|  2.20k|            }
  297|   100k|        }
  298|       |
  299|  98.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 26.4k, False: 71.8k]
  ------------------
  300|  26.4k|            value = T{0};
  301|  26.4k|            return std::next(prefix_result.iterator);
  302|  26.4k|        }
  303|       |
  304|   143k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  71.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 71.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  71.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   143k|                                     ranges::subrange{prefix_result.iterator,
  306|   143k|                                                      ranges::end(range)},
  307|   143k|                                     prefix_result.parsed_base));
  308|       |
  309|   143k|        auto buf = make_contiguous_buffer(
  310|   143k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   143k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.79k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.79k|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  68.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  68.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  68.9k|        return ranges_polyfill::batch_next(
  316|  68.9k|            prefix_result.iterator,
  317|  68.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   143k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   116k|    {
  324|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   116k|        return read_default_with_base(range, value, 0);
  326|   116k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   116k|    {
  287|   116k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   116k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   116k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   116k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.29k, False: 114k]
  ------------------
  292|  2.29k|                return unexpected_scan_error(
  293|  2.29k|                    scan_error::invalid_scanned_value,
  294|  2.29k|                    "Unexpected '-' sign when parsing an "
  295|  2.29k|                    "unsigned value");
  296|  2.29k|            }
  297|   116k|        }
  298|       |
  299|   114k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 31.4k, False: 83.0k]
  ------------------
  300|  31.4k|            value = T{0};
  301|  31.4k|            return std::next(prefix_result.iterator);
  302|  31.4k|        }
  303|       |
  304|   166k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   166k|                                     ranges::subrange{prefix_result.iterator,
  306|   166k|                                                      ranges::end(range)},
  307|   166k|                                     prefix_result.parsed_base));
  308|       |
  309|   166k|        auto buf = make_contiguous_buffer(
  310|   166k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   166k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.45k, False: 80.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.45k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  80.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  80.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  80.5k|        return ranges_polyfill::batch_next(
  316|  80.5k|            prefix_result.iterator,
  317|  80.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   166k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   117k|    {
  324|   117k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   117k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   117k|        return read_default_with_base(range, value, 0);
  326|   117k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   117k|    {
  287|   117k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   117k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   117k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   117k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.34k, False: 115k]
  ------------------
  292|  2.34k|                return unexpected_scan_error(
  293|  2.34k|                    scan_error::invalid_scanned_value,
  294|  2.34k|                    "Unexpected '-' sign when parsing an "
  295|  2.34k|                    "unsigned value");
  296|  2.34k|            }
  297|   117k|        }
  298|       |
  299|   115k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 31.4k, False: 83.8k]
  ------------------
  300|  31.4k|            value = T{0};
  301|  31.4k|            return std::next(prefix_result.iterator);
  302|  31.4k|        }
  303|       |
  304|   167k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  83.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  83.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   167k|                                     ranges::subrange{prefix_result.iterator,
  306|   167k|                                                      ranges::end(range)},
  307|   167k|                                     prefix_result.parsed_base));
  308|       |
  309|   167k|        auto buf = make_contiguous_buffer(
  310|   167k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   167k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  83.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.33k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.33k|    }                                                  \
  |  |  |  |   70|  83.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  81.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  81.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  81.5k|        return ranges_polyfill::batch_next(
  316|  81.5k|            prefix_result.iterator,
  317|  81.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   167k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   354k|{
  185|   354k|    std::basic_string<CharT> output;
  186|   354k|    std::string thsep_indices;
  187|   354k|    auto it = ranges::begin(range);
  188|   354k|    bool digit_matched = false;
  189|  1.62M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.61M, False: 4.62k]
  ------------------
  190|  1.61M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 72.1k, False: 1.54M]
  ------------------
  191|  72.1k|            thsep_indices.push_back(static_cast<char>(
  192|  72.1k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  72.1k|        }
  194|  1.54M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 349k, False: 1.19M]
  ------------------
  195|   349k|            break;
  196|   349k|        }
  197|  1.19M|        else {
  198|  1.19M|            output.push_back(*it);
  199|  1.19M|            digit_matched = true;
  200|  1.19M|        }
  201|  1.61M|    }
  202|   354k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.11k, False: 346k]
  |  |  ------------------
  ------------------
  203|  8.11k|        return unexpected_scan_error(
  204|  8.11k|            scan_error::invalid_scanned_value,
  205|  8.11k|            "Failed to parse integer: No digits found");
  206|  8.11k|    }
  207|   346k|    return std::tuple{it, output, thsep_indices};
  208|   354k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.73k|                return unexpected_scan_error(
  293|  5.73k|                    scan_error::invalid_scanned_value,
  294|  5.73k|                    "Unexpected '-' sign when parsing an "
  295|  5.73k|                    "unsigned value");
  296|  5.73k|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   172k|{
  121|   172k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   172k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   172k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   172k|        parse_integer_base_prefix(
  126|   172k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   172k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 172k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   172k|    else {
  139|   172k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 172k]
  ------------------
  140|   172k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 172k, False: 0]
  ------------------
  141|   172k|            digits_begin_it = base_prefix_begin_it;
  142|   172k|        }
  143|   172k|    }
  144|       |
  145|   172k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 172k, False: 0]
  ------------------
  146|   172k|        sign = sign_type::plus_sign;
  147|   172k|    }
  148|   172k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   172k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   172k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   172k|{
   88|   172k|    switch (base) {
   89|  22.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 22.9k, False: 149k]
  ------------------
   90|       |            // allow 0b/0B
   91|  22.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  22.9k|                    false};
   93|       |
   94|  22.9k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 22.9k, False: 149k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  22.9k|            bool zero_parsed = false;
   97|  22.9k|            auto it = apply_opt(
   98|  22.9k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  22.9k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  22.9k|        case 16:
  ------------------
  |  Branch (102:9): [True: 22.9k, False: 149k]
  ------------------
  103|       |            // allow 0x/0X
  104|  22.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  22.9k|                    false};
  106|       |
  107|  80.3k|        case 0:
  ------------------
  |  Branch (107:9): [True: 80.3k, False: 91.8k]
  ------------------
  108|       |            // detect base
  109|  80.3k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  22.9k|        default:
  ------------------
  |  Branch (111:9): [True: 22.9k, False: 149k]
  ------------------
  112|       |            // no base prefix allowed
  113|  22.9k|            return {ranges::begin(range), base, false};
  114|   172k|    }
  115|   172k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   103k|{
   38|   103k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   103k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   103k|{
   53|   103k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 103k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   103k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 103k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   103k|    return unexpected(parse_error::error);
   63|   103k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   103k|{
   45|   103k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   103k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  80.3k|{
   69|  80.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 80.3k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  80.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 80.3k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  80.3k|    {
   76|  80.3k|        bool zero_parsed{false};
   77|  80.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 80.3k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  80.3k|    }
   81|  80.3k|    return {ranges::begin(range), 10, false};
   82|  80.3k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   149k|{
  156|   149k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   149k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   149k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   149k|            return unexpected_scan_error(
  161|   149k|                scan_error::invalid_scanned_value,
  162|   149k|                "Failed to parse integer: No digits found");
  163|   149k|        }
  164|   149k|        return ranges::end(range);
  165|   149k|    }
  166|   149k|    else {
  167|   149k|        return read_while1_code_unit(
  168|   149k|                   range, [&](char_type ch)
  169|   149k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   149k|            .transform_error(map_parse_error_to_scan_error(
  171|   149k|                scan_error::invalid_scanned_value,
  172|   149k|                "Failed to parse integer: No digits found"));
  173|   149k|    }
  174|   149k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   149k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.73k|                return unexpected_scan_error(
  293|  5.73k|                    scan_error::invalid_scanned_value,
  294|  5.73k|                    "Unexpected '-' sign when parsing an "
  295|  5.73k|                    "unsigned value");
  296|  5.73k|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.73k|                return unexpected_scan_error(
  293|  5.73k|                    scan_error::invalid_scanned_value,
  294|  5.73k|                    "Unexpected '-' sign when parsing an "
  295|  5.73k|                    "unsigned value");
  296|  5.73k|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.73k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.73k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.73k|    {
  324|  5.73k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.73k|        return read_default_with_base(range, value, 0);
  326|  5.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.73k|    {
  287|  5.73k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.73k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.73k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.73k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.73k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.73k|        }
  298|       |
  299|  5.73k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.73k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.73k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.73k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.73k|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.73k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.73k|                                                      ranges::end(range)},
  307|  5.73k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.73k|        auto buf = make_contiguous_buffer(
  310|  5.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.73k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.73k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  22.9k|{
  185|  22.9k|    std::basic_string<CharT> output;
  186|  22.9k|    std::string thsep_indices;
  187|  22.9k|    auto it = ranges::begin(range);
  188|  22.9k|    bool digit_matched = false;
  189|  22.9k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 22.9k, False: 0]
  ------------------
  190|  22.9k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 22.9k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  22.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 22.9k, False: 0]
  ------------------
  195|  22.9k|            break;
  196|  22.9k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  22.9k|    }
  202|  22.9k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 22.9k, False: 0]
  |  |  ------------------
  ------------------
  203|  22.9k|        return unexpected_scan_error(
  204|  22.9k|            scan_error::invalid_scanned_value,
  205|  22.9k|            "Failed to parse integer: No digits found");
  206|  22.9k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  22.9k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.03M|    {
  280|  2.03M|        detail::check_int_type_specs(specs, eh);
  281|  2.03M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   267k|    {
  335|   267k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   267k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   267k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 20.8k, False: 246k]
  ------------------
  339|  20.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  20.8k|                return unexpected_scan_error(
  341|  20.8k|                    scan_error::invalid_scanned_value,
  342|  20.8k|                    "Unexpected '-' sign when parsing an "
  343|  20.8k|                    "unsigned value");
  344|  20.8k|            }
  345|  20.8k|            else {
  346|  20.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 20.8k]
  ------------------
  347|  20.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  20.8k|            }
  353|  20.8k|        }
  354|       |
  355|   267k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 43.7k, False: 223k]
  ------------------
  356|  43.7k|            value = T{0};
  357|  43.7k|            return std::next(prefix_result.iterator);
  358|  43.7k|        }
  359|       |
  360|   223k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   223k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 167k, False: 55.8k]
  |  |  ------------------
  ------------------
  361|   167k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 180, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    180|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   167k|                    parse_integer_digits_without_thsep(
  363|   167k|                        ranges::subrange{prefix_result.iterator,
  364|   167k|                                         ranges::end(range)},
  365|   167k|                        prefix_result.parsed_base));
  366|       |
  367|   167k|            auto buf = make_contiguous_buffer(
  368|   167k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   167k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 17.0k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.0k|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   150k|                                        prefix_result.parsed_base));
  372|       |
  373|   150k|            return ranges_polyfill::batch_next(
  374|   150k|                prefix_result.iterator,
  375|   150k|                ranges::distance(buf.view().begin(), result_it));
  376|   167k|        }
  377|       |
  378|  55.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  55.8k|            localized_number_formatting_options<CharT>{loc};
  383|  55.8k|#endif
  384|       |
  385|  55.8k|        SCN_TRY(
  ------------------
  |  |   71|  55.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.30k, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.30k|    }                                                  \
  |  |  |  |   70|  55.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  54.5k|            parse_digits_result,
  387|  54.5k|            parse_integer_digits_with_thsep(
  388|  54.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  54.5k|                prefix_result.parsed_base, locale_options));
  390|  54.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  54.5k|            parse_digits_result;
  392|       |
  393|  54.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 828, False: 53.7k]
  ------------------
  394|    828|            if (auto e = check_thsep_grouping(
  395|    828|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    828|                    thsep_indices, locale_options.grouping);
  397|    828|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 394, False: 434]
  |  |  ------------------
  ------------------
  398|    394|                return unexpected(e);
  399|    394|            }
  400|    828|        }
  401|       |
  402|  54.1k|        auto nothsep_source_view =
  403|  54.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  54.1k|        SCN_TRY(
  ------------------
  |  |   71|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.49k, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.49k|    }                                                  \
  |  |  |  |   70|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  52.6k|            nothsep_source_it,
  406|  52.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  52.6k|                                prefix_result.parsed_base));
  408|       |
  409|  52.6k|        return ranges_polyfill::batch_next(
  410|  52.6k|            prefix_result.iterator,
  411|  52.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  52.6k|                ranges::ssize(thsep_indices));
  413|  54.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   362k|    {
  335|   362k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   362k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 362k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   362k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   362k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 22.4k, False: 339k]
  ------------------
  339|  22.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  22.4k|                return unexpected_scan_error(
  341|  22.4k|                    scan_error::invalid_scanned_value,
  342|  22.4k|                    "Unexpected '-' sign when parsing an "
  343|  22.4k|                    "unsigned value");
  344|  22.4k|            }
  345|  22.4k|            else {
  346|  22.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 22.4k]
  ------------------
  347|  22.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  22.4k|            }
  353|  22.4k|        }
  354|       |
  355|   362k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 53.1k, False: 309k]
  ------------------
  356|  53.1k|            value = T{0};
  357|  53.1k|            return std::next(prefix_result.iterator);
  358|  53.1k|        }
  359|       |
  360|   309k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 240k, False: 68.3k]
  |  |  ------------------
  ------------------
  361|   240k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 276, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   240k|                    parse_integer_digits_without_thsep(
  363|   240k|                        ranges::subrange{prefix_result.iterator,
  364|   240k|                                         ranges::end(range)},
  365|   240k|                        prefix_result.parsed_base));
  366|       |
  367|   240k|            auto buf = make_contiguous_buffer(
  368|   240k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   240k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15.6k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.6k|    }                                                  \
  |  |  |  |   70|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   224k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   224k|                                        prefix_result.parsed_base));
  372|       |
  373|   224k|            return ranges_polyfill::batch_next(
  374|   224k|                prefix_result.iterator,
  375|   224k|                ranges::distance(buf.view().begin(), result_it));
  376|   240k|        }
  377|       |
  378|  68.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  68.3k|            localized_number_formatting_options<CharT>{loc};
  383|  68.3k|#endif
  384|       |
  385|  68.3k|        SCN_TRY(
  ------------------
  |  |   71|  68.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.73k, False: 66.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.73k|    }                                                  \
  |  |  |  |   70|  68.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  66.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  66.6k|            parse_digits_result,
  387|  66.6k|            parse_integer_digits_with_thsep(
  388|  66.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  66.6k|                prefix_result.parsed_base, locale_options));
  390|  66.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  66.6k|            parse_digits_result;
  392|       |
  393|  66.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 910, False: 65.7k]
  ------------------
  394|    910|            if (auto e = check_thsep_grouping(
  395|    910|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    910|                    thsep_indices, locale_options.grouping);
  397|    910|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 464, False: 446]
  |  |  ------------------
  ------------------
  398|    464|                return unexpected(e);
  399|    464|            }
  400|    910|        }
  401|       |
  402|  66.1k|        auto nothsep_source_view =
  403|  66.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.1k|        SCN_TRY(
  ------------------
  |  |   71|  66.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 672, False: 65.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    672|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    672|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    672|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    672|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    672|    }                                                  \
  |  |  |  |   70|  66.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.5k|            nothsep_source_it,
  406|  65.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.5k|                                prefix_result.parsed_base));
  408|       |
  409|  65.5k|        return ranges_polyfill::batch_next(
  410|  65.5k|            prefix_result.iterator,
  411|  65.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.5k|                ranges::ssize(thsep_indices));
  413|  66.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   371k|    {
  335|   371k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   371k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   371k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   371k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 23.6k, False: 347k]
  ------------------
  339|  23.6k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  23.6k|                return unexpected_scan_error(
  341|  23.6k|                    scan_error::invalid_scanned_value,
  342|  23.6k|                    "Unexpected '-' sign when parsing an "
  343|  23.6k|                    "unsigned value");
  344|  23.6k|            }
  345|  23.6k|            else {
  346|  23.6k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 23.6k]
  ------------------
  347|  23.6k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  23.6k|            }
  353|  23.6k|        }
  354|       |
  355|   371k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 53.5k, False: 317k]
  ------------------
  356|  53.5k|            value = T{0};
  357|  53.5k|            return std::next(prefix_result.iterator);
  358|  53.5k|        }
  359|       |
  360|   317k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   317k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 247k, False: 70.2k]
  |  |  ------------------
  ------------------
  361|   247k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 324, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    324|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   247k|                    parse_integer_digits_without_thsep(
  363|   247k|                        ranges::subrange{prefix_result.iterator,
  364|   247k|                                         ranges::end(range)},
  365|   247k|                        prefix_result.parsed_base));
  366|       |
  367|   247k|            auto buf = make_contiguous_buffer(
  368|   247k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   247k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15.2k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.2k|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   232k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   232k|                                        prefix_result.parsed_base));
  372|       |
  373|   232k|            return ranges_polyfill::batch_next(
  374|   232k|                prefix_result.iterator,
  375|   232k|                ranges::distance(buf.view().begin(), result_it));
  376|   247k|        }
  377|       |
  378|  70.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  70.2k|            localized_number_formatting_options<CharT>{loc};
  383|  70.2k|#endif
  384|       |
  385|  70.2k|        SCN_TRY(
  ------------------
  |  |   71|  70.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 68.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  70.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  68.3k|            parse_digits_result,
  387|  68.3k|            parse_integer_digits_with_thsep(
  388|  68.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  68.3k|                prefix_result.parsed_base, locale_options));
  390|  68.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  68.3k|            parse_digits_result;
  392|       |
  393|  68.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 946, False: 67.3k]
  ------------------
  394|    946|            if (auto e = check_thsep_grouping(
  395|    946|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    946|                    thsep_indices, locale_options.grouping);
  397|    946|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    946|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 498, False: 448]
  |  |  ------------------
  ------------------
  398|    498|                return unexpected(e);
  399|    498|            }
  400|    946|        }
  401|       |
  402|  67.8k|        auto nothsep_source_view =
  403|  67.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  67.8k|        SCN_TRY(
  ------------------
  |  |   71|  67.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 360, False: 67.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    360|    }                                                  \
  |  |  |  |   70|  67.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  67.4k|            nothsep_source_it,
  406|  67.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  67.4k|                                prefix_result.parsed_base));
  408|       |
  409|  67.4k|        return ranges_polyfill::batch_next(
  410|  67.4k|            prefix_result.iterator,
  411|  67.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  67.4k|                ranges::ssize(thsep_indices));
  413|  67.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   259k|    {
  335|   259k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   259k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   259k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.03k, False: 251k]
  ------------------
  339|  8.03k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.03k|                return unexpected_scan_error(
  341|  8.03k|                    scan_error::invalid_scanned_value,
  342|  8.03k|                    "Unexpected '-' sign when parsing an "
  343|  8.03k|                    "unsigned value");
  344|  8.03k|            }
  345|  8.03k|            else {
  346|  8.03k|                if (specs.type ==
  347|  8.03k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.03k|                    return unexpected_scan_error(
  349|  8.03k|                        scan_error::invalid_scanned_value,
  350|  8.03k|                        "'u'-option disallows negative values");
  351|  8.03k|                }
  352|  8.03k|            }
  353|  8.03k|        }
  354|       |
  355|   251k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 41.4k, False: 209k]
  ------------------
  356|  41.4k|            value = T{0};
  357|  41.4k|            return std::next(prefix_result.iterator);
  358|  41.4k|        }
  359|       |
  360|   209k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   209k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 161k, False: 48.1k]
  |  |  ------------------
  ------------------
  361|   161k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 38, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     38|    }                                                  \
  |  |  |  |   70|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   161k|                    parse_integer_digits_without_thsep(
  363|   161k|                        ranges::subrange{prefix_result.iterator,
  364|   161k|                                         ranges::end(range)},
  365|   161k|                        prefix_result.parsed_base));
  366|       |
  367|   161k|            auto buf = make_contiguous_buffer(
  368|   161k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   161k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.9k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   150k|                                        prefix_result.parsed_base));
  372|       |
  373|   150k|            return ranges_polyfill::batch_next(
  374|   150k|                prefix_result.iterator,
  375|   150k|                ranges::distance(buf.view().begin(), result_it));
  376|   161k|        }
  377|       |
  378|  48.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  48.1k|            localized_number_formatting_options<CharT>{loc};
  383|  48.1k|#endif
  384|       |
  385|  48.1k|        SCN_TRY(
  ------------------
  |  |   71|  48.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 966, False: 47.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    966|    }                                                  \
  |  |  |  |   70|  48.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  47.1k|            parse_digits_result,
  387|  47.1k|            parse_integer_digits_with_thsep(
  388|  47.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  47.1k|                prefix_result.parsed_base, locale_options));
  390|  47.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  47.1k|            parse_digits_result;
  392|       |
  393|  47.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 674, False: 46.4k]
  ------------------
  394|    674|            if (auto e = check_thsep_grouping(
  395|    674|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    674|                    thsep_indices, locale_options.grouping);
  397|    674|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 254, False: 420]
  |  |  ------------------
  ------------------
  398|    254|                return unexpected(e);
  399|    254|            }
  400|    674|        }
  401|       |
  402|  46.8k|        auto nothsep_source_view =
  403|  46.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  46.8k|        SCN_TRY(
  ------------------
  |  |   71|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 616, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    616|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    616|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    616|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    616|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    616|    }                                                  \
  |  |  |  |   70|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  46.2k|            nothsep_source_it,
  406|  46.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  46.2k|                                prefix_result.parsed_base));
  408|       |
  409|  46.2k|        return ranges_polyfill::batch_next(
  410|  46.2k|            prefix_result.iterator,
  411|  46.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  46.2k|                ranges::ssize(thsep_indices));
  413|  46.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   306k|    {
  335|   306k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   306k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   306k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.31k, False: 298k]
  ------------------
  339|  8.31k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.31k|                return unexpected_scan_error(
  341|  8.31k|                    scan_error::invalid_scanned_value,
  342|  8.31k|                    "Unexpected '-' sign when parsing an "
  343|  8.31k|                    "unsigned value");
  344|  8.31k|            }
  345|  8.31k|            else {
  346|  8.31k|                if (specs.type ==
  347|  8.31k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.31k|                    return unexpected_scan_error(
  349|  8.31k|                        scan_error::invalid_scanned_value,
  350|  8.31k|                        "'u'-option disallows negative values");
  351|  8.31k|                }
  352|  8.31k|            }
  353|  8.31k|        }
  354|       |
  355|   298k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 48.0k, False: 250k]
  ------------------
  356|  48.0k|            value = T{0};
  357|  48.0k|            return std::next(prefix_result.iterator);
  358|  48.0k|        }
  359|       |
  360|   250k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   250k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 194k, False: 55.5k]
  |  |  ------------------
  ------------------
  361|   194k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 40, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     40|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   194k|                    parse_integer_digits_without_thsep(
  363|   194k|                        ranges::subrange{prefix_result.iterator,
  364|   194k|                                         ranges::end(range)},
  365|   194k|                        prefix_result.parsed_base));
  366|       |
  367|   194k|            auto buf = make_contiguous_buffer(
  368|   194k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   194k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.1k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   184k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   184k|                                        prefix_result.parsed_base));
  372|       |
  373|   184k|            return ranges_polyfill::batch_next(
  374|   184k|                prefix_result.iterator,
  375|   184k|                ranges::distance(buf.view().begin(), result_it));
  376|   194k|        }
  377|       |
  378|  55.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  55.5k|            localized_number_formatting_options<CharT>{loc};
  383|  55.5k|#endif
  384|       |
  385|  55.5k|        SCN_TRY(
  ------------------
  |  |   71|  55.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.07k, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|  55.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  54.5k|            parse_digits_result,
  387|  54.5k|            parse_integer_digits_with_thsep(
  388|  54.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  54.5k|                prefix_result.parsed_base, locale_options));
  390|  54.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  54.5k|            parse_digits_result;
  392|       |
  393|  54.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 724, False: 53.7k]
  ------------------
  394|    724|            if (auto e = check_thsep_grouping(
  395|    724|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    724|                    thsep_indices, locale_options.grouping);
  397|    724|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    724|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 296, False: 428]
  |  |  ------------------
  ------------------
  398|    296|                return unexpected(e);
  399|    296|            }
  400|    724|        }
  401|       |
  402|  54.2k|        auto nothsep_source_view =
  403|  54.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  54.2k|        SCN_TRY(
  ------------------
  |  |   71|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 242, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    242|    }                                                  \
  |  |  |  |   70|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  53.9k|            nothsep_source_it,
  406|  53.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  53.9k|                                prefix_result.parsed_base));
  408|       |
  409|  53.9k|        return ranges_polyfill::batch_next(
  410|  53.9k|            prefix_result.iterator,
  411|  53.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  53.9k|                ranges::ssize(thsep_indices));
  413|  54.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   309k|    {
  335|   309k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   309k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   309k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.50k, False: 301k]
  ------------------
  339|  8.50k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.50k|                return unexpected_scan_error(
  341|  8.50k|                    scan_error::invalid_scanned_value,
  342|  8.50k|                    "Unexpected '-' sign when parsing an "
  343|  8.50k|                    "unsigned value");
  344|  8.50k|            }
  345|  8.50k|            else {
  346|  8.50k|                if (specs.type ==
  347|  8.50k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.50k|                    return unexpected_scan_error(
  349|  8.50k|                        scan_error::invalid_scanned_value,
  350|  8.50k|                        "'u'-option disallows negative values");
  351|  8.50k|                }
  352|  8.50k|            }
  353|  8.50k|        }
  354|       |
  355|   301k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 48.0k, False: 253k]
  ------------------
  356|  48.0k|            value = T{0};
  357|  48.0k|            return std::next(prefix_result.iterator);
  358|  48.0k|        }
  359|       |
  360|   253k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 197k, False: 56.1k]
  |  |  ------------------
  ------------------
  361|   197k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 40, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     40|    }                                                  \
  |  |  |  |   70|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   197k|                    parse_integer_digits_without_thsep(
  363|   197k|                        ranges::subrange{prefix_result.iterator,
  364|   197k|                                         ranges::end(range)},
  365|   197k|                        prefix_result.parsed_base));
  366|       |
  367|   197k|            auto buf = make_contiguous_buffer(
  368|   197k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   197k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9.80k, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.80k|    }                                                  \
  |  |  |  |   70|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   187k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   187k|                                        prefix_result.parsed_base));
  372|       |
  373|   187k|            return ranges_polyfill::batch_next(
  374|   187k|                prefix_result.iterator,
  375|   187k|                ranges::distance(buf.view().begin(), result_it));
  376|   197k|        }
  377|       |
  378|  56.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  56.1k|            localized_number_formatting_options<CharT>{loc};
  383|  56.1k|#endif
  384|       |
  385|  56.1k|        SCN_TRY(
  ------------------
  |  |   71|  56.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.10k, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|  56.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  54.9k|            parse_digits_result,
  387|  54.9k|            parse_integer_digits_with_thsep(
  388|  54.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  54.9k|                prefix_result.parsed_base, locale_options));
  390|  54.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  54.9k|            parse_digits_result;
  392|       |
  393|  54.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 724, False: 54.2k]
  ------------------
  394|    724|            if (auto e = check_thsep_grouping(
  395|    724|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    724|                    thsep_indices, locale_options.grouping);
  397|    724|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    724|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 296, False: 428]
  |  |  ------------------
  ------------------
  398|    296|                return unexpected(e);
  399|    296|            }
  400|    724|        }
  401|       |
  402|  54.7k|        auto nothsep_source_view =
  403|  54.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  54.7k|        SCN_TRY(
  ------------------
  |  |   71|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 128, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    128|    }                                                  \
  |  |  |  |   70|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  54.5k|            nothsep_source_it,
  406|  54.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  54.5k|                                prefix_result.parsed_base));
  408|       |
  409|  54.5k|        return ranges_polyfill::batch_next(
  410|  54.5k|            prefix_result.iterator,
  411|  54.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  54.5k|                ranges::ssize(thsep_indices));
  413|  54.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  22.9k|    {
  335|  22.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  22.9k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  22.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22.9k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  22.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22.9k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  22.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  22.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.1k, False: 3.82k]
  |  |  ------------------
  ------------------
  361|  19.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  3.82k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.82k|            localized_number_formatting_options<CharT>{loc};
  383|  3.82k|#endif
  384|       |
  385|  3.82k|        SCN_TRY(
  ------------------
  |  |   71|  3.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.82k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.82k|    }                                                  \
  |  |  |  |   70|  3.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   103k|    {
  324|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   103k|        return read_default_with_base(range, value, 0);
  326|   103k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   103k|    {
  287|   103k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   103k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   103k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   103k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   103k|                return unexpected_scan_error(
  293|   103k|                    scan_error::invalid_scanned_value,
  294|   103k|                    "Unexpected '-' sign when parsing an "
  295|   103k|                    "unsigned value");
  296|   103k|            }
  297|   103k|        }
  298|       |
  299|   103k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 25.1k, False: 78.4k]
  ------------------
  300|  25.1k|            value = T{0};
  301|  25.1k|            return std::next(prefix_result.iterator);
  302|  25.1k|        }
  303|       |
  304|   156k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  78.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 90, False: 78.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|  78.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   156k|                                     ranges::subrange{prefix_result.iterator,
  306|   156k|                                                      ranges::end(range)},
  307|   156k|                                     prefix_result.parsed_base));
  308|       |
  309|   156k|        auto buf = make_contiguous_buffer(
  310|   156k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   156k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  78.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9.20k, False: 69.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.20k|    }                                                  \
  |  |  |  |   70|  78.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  69.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  69.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  69.1k|                                    prefix_result.parsed_base));
  314|       |
  315|  69.1k|        return ranges_polyfill::batch_next(
  316|  69.1k|            prefix_result.iterator,
  317|  69.1k|            ranges::distance(buf.view().begin(), result_it));
  318|   156k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.44M|{
  121|  2.44M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.44M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.44M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.44M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.44M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.44M|        parse_integer_base_prefix(
  126|  2.44M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.44M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 784k, False: 1.66M]
  ------------------
  129|   784k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 3.08k, False: 781k]
  ------------------
  130|   784k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 425k, False: 356k]
  ------------------
  131|   428k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   428k|                digits_begin_it, ranges::begin(range));
  133|   428k|        }
  134|   356k|        else {
  135|   356k|            parsed_zero = false;
  136|   356k|        }
  137|   784k|    }
  138|  1.66M|    else {
  139|  1.66M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.43k, False: 1.65M]
  ------------------
  140|  1.66M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 236k, False: 1.42M]
  ------------------
  141|   242k|            digits_begin_it = base_prefix_begin_it;
  142|   242k|        }
  143|  1.66M|    }
  144|       |
  145|  2.44M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.31M, False: 134k]
  ------------------
  146|  2.31M|        sign = sign_type::plus_sign;
  147|  2.31M|    }
  148|  2.44M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.44M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.44M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.44M|{
   88|  2.44M|    switch (base) {
   89|  85.7k|        case 2:
  ------------------
  |  Branch (89:9): [True: 85.7k, False: 2.36M]
  ------------------
   90|       |            // allow 0b/0B
   91|  85.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  85.7k|                    false};
   93|       |
   94|   144k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 144k, False: 2.30M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   144k|            bool zero_parsed = false;
   97|   144k|            auto it = apply_opt(
   98|   144k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   144k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   353k|        case 16:
  ------------------
  |  Branch (102:9): [True: 353k, False: 2.09M]
  ------------------
  103|       |            // allow 0x/0X
  104|   353k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   353k|                    false};
  106|       |
  107|  1.56M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.56M, False: 880k]
  ------------------
  108|       |            // detect base
  109|  1.56M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   297k|        default:
  ------------------
  |  Branch (111:9): [True: 297k, False: 2.14M]
  ------------------
  112|       |            // no base prefix allowed
  113|   297k|            return {ranges::begin(range), base, false};
  114|  2.44M|    }
  115|  2.44M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.63M|{
   38|  1.63M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.63M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  1.68M|{
   53|  1.68M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 23.3k, False: 1.65M]
  ------------------
   54|  23.3k|        return *r;
   55|  23.3k|    }
   56|       |
   57|  1.65M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 784k, False: 873k]
  ------------------
   58|   784k|        zero_parsed = true;
   59|   784k|        return *r;
   60|   784k|    }
   61|       |
   62|   873k|    return unexpected(parse_error::error);
   63|  1.65M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  1.91M|{
   45|  1.91M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  1.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.91M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.56M|{
   69|  1.56M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 20.8k, False: 1.54M]
  ------------------
   70|  20.8k|        return {*r, 16, false};
   71|  20.8k|    }
   72|  1.54M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 7.56k, False: 1.53M]
  ------------------
   73|  7.56k|        return {*r, 2, false};
   74|  7.56k|    }
   75|  1.53M|    {
   76|  1.53M|        bool zero_parsed{false};
   77|  1.53M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 749k, False: 787k]
  ------------------
   78|   749k|            return {*r, 8, zero_parsed};
   79|   749k|        }
   80|  1.53M|    }
   81|   787k|    return {ranges::begin(range), 10, false};
   82|  1.53M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.66M|{
  156|  1.66M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.66M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.66M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.50k, False: 1.66M]
  |  |  ------------------
  ------------------
  160|  1.50k|            return unexpected_scan_error(
  161|  1.50k|                scan_error::invalid_scanned_value,
  162|  1.50k|                "Failed to parse integer: No digits found");
  163|  1.50k|        }
  164|  1.66M|        return ranges::end(range);
  165|  1.66M|    }
  166|  1.66M|    else {
  167|  1.66M|        return read_while1_code_unit(
  168|  1.66M|                   range, [&](char_type ch)
  169|  1.66M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.66M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.66M|                scan_error::invalid_scanned_value,
  172|  1.66M|                "Failed to parse integer: No digits found"));
  173|  1.66M|    }
  174|  1.66M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   124k|    {
  324|   124k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   124k|        return read_default_with_base(range, value, 0);
  326|   124k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   124k|    {
  287|   124k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   124k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   124k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   124k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   124k|                return unexpected_scan_error(
  293|   124k|                    scan_error::invalid_scanned_value,
  294|   124k|                    "Unexpected '-' sign when parsing an "
  295|   124k|                    "unsigned value");
  296|   124k|            }
  297|   124k|        }
  298|       |
  299|   124k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.8k, False: 93.9k]
  ------------------
  300|  30.8k|            value = T{0};
  301|  30.8k|            return std::next(prefix_result.iterator);
  302|  30.8k|        }
  303|       |
  304|   187k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  93.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 132, False: 93.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|  93.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   187k|                                     ranges::subrange{prefix_result.iterator,
  306|   187k|                                                      ranges::end(range)},
  307|   187k|                                     prefix_result.parsed_base));
  308|       |
  309|   187k|        auto buf = make_contiguous_buffer(
  310|   187k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   187k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  93.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.68k, False: 85.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.68k|    }                                                  \
  |  |  |  |   70|  93.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  85.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  85.1k|                                    prefix_result.parsed_base));
  314|       |
  315|  85.1k|        return ranges_polyfill::batch_next(
  316|  85.1k|            prefix_result.iterator,
  317|  85.1k|            ranges::distance(buf.view().begin(), result_it));
  318|   187k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   127k|    {
  324|   127k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   127k|        return read_default_with_base(range, value, 0);
  326|   127k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   127k|    {
  287|   127k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   127k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   127k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   127k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   127k|                return unexpected_scan_error(
  293|   127k|                    scan_error::invalid_scanned_value,
  294|   127k|                    "Unexpected '-' sign when parsing an "
  295|   127k|                    "unsigned value");
  296|   127k|            }
  297|   127k|        }
  298|       |
  299|   127k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 31.0k, False: 96.2k]
  ------------------
  300|  31.0k|            value = T{0};
  301|  31.0k|            return std::next(prefix_result.iterator);
  302|  31.0k|        }
  303|       |
  304|   192k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 147, False: 96.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    147|    }                                                  \
  |  |  |  |   70|  96.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   192k|                                     ranges::subrange{prefix_result.iterator,
  306|   192k|                                                      ranges::end(range)},
  307|   192k|                                     prefix_result.parsed_base));
  308|       |
  309|   192k|        auto buf = make_contiguous_buffer(
  310|   192k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   192k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.54k, False: 87.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.54k|    }                                                  \
  |  |  |  |   70|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  87.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  87.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  87.5k|        return ranges_polyfill::batch_next(
  316|  87.5k|            prefix_result.iterator,
  317|  87.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   192k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  94.2k|    {
  324|  94.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  94.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  94.2k|        return read_default_with_base(range, value, 0);
  326|  94.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  94.2k|    {
  287|  94.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 94.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  94.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  94.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  94.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.68k, False: 92.6k]
  ------------------
  292|  1.68k|                return unexpected_scan_error(
  293|  1.68k|                    scan_error::invalid_scanned_value,
  294|  1.68k|                    "Unexpected '-' sign when parsing an "
  295|  1.68k|                    "unsigned value");
  296|  1.68k|            }
  297|  94.2k|        }
  298|       |
  299|  92.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 23.7k, False: 68.8k]
  ------------------
  300|  23.7k|            value = T{0};
  301|  23.7k|            return std::next(prefix_result.iterator);
  302|  23.7k|        }
  303|       |
  304|   137k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 68.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  68.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   137k|                                     ranges::subrange{prefix_result.iterator,
  306|   137k|                                                      ranges::end(range)},
  307|   137k|                                     prefix_result.parsed_base));
  308|       |
  309|   137k|        auto buf = make_contiguous_buffer(
  310|   137k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   137k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.79k, False: 61.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.79k|    }                                                  \
  |  |  |  |   70|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  61.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  61.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  61.0k|        return ranges_polyfill::batch_next(
  316|  61.0k|            prefix_result.iterator,
  317|  61.0k|            ranges::distance(buf.view().begin(), result_it));
  318|   137k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   109k|    {
  324|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   109k|        return read_default_with_base(range, value, 0);
  326|   109k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   109k|    {
  287|   109k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   109k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   109k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   109k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.77k, False: 108k]
  ------------------
  292|  1.77k|                return unexpected_scan_error(
  293|  1.77k|                    scan_error::invalid_scanned_value,
  294|  1.77k|                    "Unexpected '-' sign when parsing an "
  295|  1.77k|                    "unsigned value");
  296|  1.77k|            }
  297|   109k|        }
  298|       |
  299|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.5k, False: 79.6k]
  ------------------
  300|  28.5k|            value = T{0};
  301|  28.5k|            return std::next(prefix_result.iterator);
  302|  28.5k|        }
  303|       |
  304|   159k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  79.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 79.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  79.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   159k|                                     ranges::subrange{prefix_result.iterator,
  306|   159k|                                                      ranges::end(range)},
  307|   159k|                                     prefix_result.parsed_base));
  308|       |
  309|   159k|        auto buf = make_contiguous_buffer(
  310|   159k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   159k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  79.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.46k, False: 72.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.46k|    }                                                  \
  |  |  |  |   70|  79.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  72.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  72.1k|                                    prefix_result.parsed_base));
  314|       |
  315|  72.1k|        return ranges_polyfill::batch_next(
  316|  72.1k|            prefix_result.iterator,
  317|  72.1k|            ranges::distance(buf.view().begin(), result_it));
  318|   159k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   110k|    {
  324|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   110k|        return read_default_with_base(range, value, 0);
  326|   110k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   110k|    {
  287|   110k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   110k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   110k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   110k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.82k, False: 108k]
  ------------------
  292|  1.82k|                return unexpected_scan_error(
  293|  1.82k|                    scan_error::invalid_scanned_value,
  294|  1.82k|                    "Unexpected '-' sign when parsing an "
  295|  1.82k|                    "unsigned value");
  296|  1.82k|            }
  297|   110k|        }
  298|       |
  299|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.5k, False: 80.4k]
  ------------------
  300|  28.5k|            value = T{0};
  301|  28.5k|            return std::next(prefix_result.iterator);
  302|  28.5k|        }
  303|       |
  304|   160k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  80.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 80.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  80.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   160k|                                     ranges::subrange{prefix_result.iterator,
  306|   160k|                                                      ranges::end(range)},
  307|   160k|                                     prefix_result.parsed_base));
  308|       |
  309|   160k|        auto buf = make_contiguous_buffer(
  310|   160k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   160k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  80.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.34k, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.34k|    }                                                  \
  |  |  |  |   70|  80.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  73.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  73.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  73.0k|        return ranges_polyfill::batch_next(
  316|  73.0k|            prefix_result.iterator,
  317|  73.0k|            ranges::distance(buf.view().begin(), result_it));
  318|   160k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   332k|{
  185|   332k|    std::basic_string<CharT> output;
  186|   332k|    std::string thsep_indices;
  187|   332k|    auto it = ranges::begin(range);
  188|   332k|    bool digit_matched = false;
  189|  1.43M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.42M, False: 4.95k]
  ------------------
  190|  1.42M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 56.3k, False: 1.37M]
  ------------------
  191|  56.3k|            thsep_indices.push_back(static_cast<char>(
  192|  56.3k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  56.3k|        }
  194|  1.37M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 327k, False: 1.04M]
  ------------------
  195|   327k|            break;
  196|   327k|        }
  197|  1.04M|        else {
  198|  1.04M|            output.push_back(*it);
  199|  1.04M|            digit_matched = true;
  200|  1.04M|        }
  201|  1.42M|    }
  202|   332k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 27.9k, False: 304k]
  |  |  ------------------
  ------------------
  203|  27.9k|        return unexpected_scan_error(
  204|  27.9k|            scan_error::invalid_scanned_value,
  205|  27.9k|            "Failed to parse integer: No digits found");
  206|  27.9k|    }
  207|   304k|    return std::tuple{it, output, thsep_indices};
  208|   332k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.04M|    {
  280|  2.04M|        detail::check_int_type_specs(specs, eh);
  281|  2.04M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   255k|    {
  335|   255k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   255k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   255k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 16.1k, False: 239k]
  ------------------
  339|  16.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  16.1k|                return unexpected_scan_error(
  341|  16.1k|                    scan_error::invalid_scanned_value,
  342|  16.1k|                    "Unexpected '-' sign when parsing an "
  343|  16.1k|                    "unsigned value");
  344|  16.1k|            }
  345|  16.1k|            else {
  346|  16.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 16.1k]
  ------------------
  347|  16.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  16.1k|            }
  353|  16.1k|        }
  354|       |
  355|   255k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 39.3k, False: 216k]
  ------------------
  356|  39.3k|            value = T{0};
  357|  39.3k|            return std::next(prefix_result.iterator);
  358|  39.3k|        }
  359|       |
  360|   216k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   216k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 163k, False: 52.4k]
  |  |  ------------------
  ------------------
  361|   163k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 230, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    230|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   163k|                    parse_integer_digits_without_thsep(
  363|   163k|                        ranges::subrange{prefix_result.iterator,
  364|   163k|                                         ranges::end(range)},
  365|   163k|                        prefix_result.parsed_base));
  366|       |
  367|   163k|            auto buf = make_contiguous_buffer(
  368|   163k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   163k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 31.8k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.8k|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   131k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   131k|                                        prefix_result.parsed_base));
  372|       |
  373|   131k|            return ranges_polyfill::batch_next(
  374|   131k|                prefix_result.iterator,
  375|   131k|                ranges::distance(buf.view().begin(), result_it));
  376|   163k|        }
  377|       |
  378|  52.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  52.4k|            localized_number_formatting_options<CharT>{loc};
  383|  52.4k|#endif
  384|       |
  385|  52.4k|        SCN_TRY(
  ------------------
  |  |   71|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.61k, False: 47.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  47.8k|            parse_digits_result,
  387|  47.8k|            parse_integer_digits_with_thsep(
  388|  47.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  47.8k|                prefix_result.parsed_base, locale_options));
  390|  47.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  47.8k|            parse_digits_result;
  392|       |
  393|  47.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 706, False: 47.1k]
  ------------------
  394|    706|            if (auto e = check_thsep_grouping(
  395|    706|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    706|                    thsep_indices, locale_options.grouping);
  397|    706|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 336, False: 370]
  |  |  ------------------
  ------------------
  398|    336|                return unexpected(e);
  399|    336|            }
  400|    706|        }
  401|       |
  402|  47.5k|        auto nothsep_source_view =
  403|  47.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  47.5k|        SCN_TRY(
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.23k, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.23k|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  46.3k|            nothsep_source_it,
  406|  46.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  46.3k|                                prefix_result.parsed_base));
  408|       |
  409|  46.3k|        return ranges_polyfill::batch_next(
  410|  46.3k|            prefix_result.iterator,
  411|  46.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  46.3k|                ranges::ssize(thsep_indices));
  413|  47.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   335k|    {
  335|   335k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   335k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   335k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 17.3k, False: 318k]
  ------------------
  339|  17.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  17.3k|                return unexpected_scan_error(
  341|  17.3k|                    scan_error::invalid_scanned_value,
  342|  17.3k|                    "Unexpected '-' sign when parsing an "
  343|  17.3k|                    "unsigned value");
  344|  17.3k|            }
  345|  17.3k|            else {
  346|  17.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 17.3k]
  ------------------
  347|  17.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  17.3k|            }
  353|  17.3k|        }
  354|       |
  355|   335k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.2k, False: 288k]
  ------------------
  356|  47.2k|            value = T{0};
  357|  47.2k|            return std::next(prefix_result.iterator);
  358|  47.2k|        }
  359|       |
  360|   288k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   288k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 225k, False: 62.8k]
  |  |  ------------------
  ------------------
  361|   225k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 326, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    326|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   225k|                    parse_integer_digits_without_thsep(
  363|   225k|                        ranges::subrange{prefix_result.iterator,
  364|   225k|                                         ranges::end(range)},
  365|   225k|                        prefix_result.parsed_base));
  366|       |
  367|   225k|            auto buf = make_contiguous_buffer(
  368|   225k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   225k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 30.5k, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.5k|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   194k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   194k|                                        prefix_result.parsed_base));
  372|       |
  373|   194k|            return ranges_polyfill::batch_next(
  374|   194k|                prefix_result.iterator,
  375|   194k|                ranges::distance(buf.view().begin(), result_it));
  376|   225k|        }
  377|       |
  378|  62.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  62.8k|            localized_number_formatting_options<CharT>{loc};
  383|  62.8k|#endif
  384|       |
  385|  62.8k|        SCN_TRY(
  ------------------
  |  |   71|  62.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.92k, False: 57.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.92k|    }                                                  \
  |  |  |  |   70|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  57.8k|            parse_digits_result,
  387|  57.8k|            parse_integer_digits_with_thsep(
  388|  57.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  57.8k|                prefix_result.parsed_base, locale_options));
  390|  57.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  57.8k|            parse_digits_result;
  392|       |
  393|  57.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 780, False: 57.1k]
  ------------------
  394|    780|            if (auto e = check_thsep_grouping(
  395|    780|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    780|                    thsep_indices, locale_options.grouping);
  397|    780|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    780|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 398, False: 382]
  |  |  ------------------
  ------------------
  398|    398|                return unexpected(e);
  399|    398|            }
  400|    780|        }
  401|       |
  402|  57.4k|        auto nothsep_source_view =
  403|  57.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  57.4k|        SCN_TRY(
  ------------------
  |  |   71|  57.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  57.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  57.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 532, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    532|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    532|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    532|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    532|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    532|    }                                                  \
  |  |  |  |   70|  57.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  56.9k|            nothsep_source_it,
  406|  56.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  56.9k|                                prefix_result.parsed_base));
  408|       |
  409|  56.9k|        return ranges_polyfill::batch_next(
  410|  56.9k|            prefix_result.iterator,
  411|  56.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  56.9k|                ranges::ssize(thsep_indices));
  413|  57.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   342k|    {
  335|   342k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   342k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   342k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 18.3k, False: 324k]
  ------------------
  339|  18.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  18.3k|                return unexpected_scan_error(
  341|  18.3k|                    scan_error::invalid_scanned_value,
  342|  18.3k|                    "Unexpected '-' sign when parsing an "
  343|  18.3k|                    "unsigned value");
  344|  18.3k|            }
  345|  18.3k|            else {
  346|  18.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 18.3k]
  ------------------
  347|  18.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  18.3k|            }
  353|  18.3k|        }
  354|       |
  355|   342k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.4k, False: 295k]
  ------------------
  356|  47.4k|            value = T{0};
  357|  47.4k|            return std::next(prefix_result.iterator);
  358|  47.4k|        }
  359|       |
  360|   295k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 231k, False: 64.2k]
  |  |  ------------------
  ------------------
  361|   231k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 374, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    374|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   230k|                    parse_integer_digits_without_thsep(
  363|   230k|                        ranges::subrange{prefix_result.iterator,
  364|   230k|                                         ranges::end(range)},
  365|   230k|                        prefix_result.parsed_base));
  366|       |
  367|   230k|            auto buf = make_contiguous_buffer(
  368|   230k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   230k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 30.1k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.1k|    }                                                  \
  |  |  |  |   70|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   200k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   200k|                                        prefix_result.parsed_base));
  372|       |
  373|   200k|            return ranges_polyfill::batch_next(
  374|   200k|                prefix_result.iterator,
  375|   200k|                ranges::distance(buf.view().begin(), result_it));
  376|   230k|        }
  377|       |
  378|  64.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  64.2k|            localized_number_formatting_options<CharT>{loc};
  383|  64.2k|#endif
  384|       |
  385|  64.2k|        SCN_TRY(
  ------------------
  |  |   71|  64.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.05k, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.05k|    }                                                  \
  |  |  |  |   70|  64.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  59.2k|            parse_digits_result,
  387|  59.2k|            parse_integer_digits_with_thsep(
  388|  59.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  59.2k|                prefix_result.parsed_base, locale_options));
  390|  59.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  59.2k|            parse_digits_result;
  392|       |
  393|  59.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 816, False: 58.4k]
  ------------------
  394|    816|            if (auto e = check_thsep_grouping(
  395|    816|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    816|                    thsep_indices, locale_options.grouping);
  397|    816|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 432, False: 384]
  |  |  ------------------
  ------------------
  398|    432|                return unexpected(e);
  399|    432|            }
  400|    816|        }
  401|       |
  402|  58.7k|        auto nothsep_source_view =
  403|  58.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  58.7k|        SCN_TRY(
  ------------------
  |  |   71|  58.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 288, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    288|    }                                                  \
  |  |  |  |   70|  58.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  58.5k|            nothsep_source_it,
  406|  58.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  58.5k|                                prefix_result.parsed_base));
  408|       |
  409|  58.5k|        return ranges_polyfill::batch_next(
  410|  58.5k|            prefix_result.iterator,
  411|  58.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  58.5k|                ranges::ssize(thsep_indices));
  413|  58.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   249k|    {
  335|   249k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   249k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   249k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.05k, False: 243k]
  ------------------
  339|  6.05k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.05k|                return unexpected_scan_error(
  341|  6.05k|                    scan_error::invalid_scanned_value,
  342|  6.05k|                    "Unexpected '-' sign when parsing an "
  343|  6.05k|                    "unsigned value");
  344|  6.05k|            }
  345|  6.05k|            else {
  346|  6.05k|                if (specs.type ==
  347|  6.05k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.05k|                    return unexpected_scan_error(
  349|  6.05k|                        scan_error::invalid_scanned_value,
  350|  6.05k|                        "'u'-option disallows negative values");
  351|  6.05k|                }
  352|  6.05k|            }
  353|  6.05k|        }
  354|       |
  355|   243k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 37.3k, False: 206k]
  ------------------
  356|  37.3k|            value = T{0};
  357|  37.3k|            return std::next(prefix_result.iterator);
  358|  37.3k|        }
  359|       |
  360|   206k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   206k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 160k, False: 46.1k]
  |  |  ------------------
  ------------------
  361|   160k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 48, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   160k|                    parse_integer_digits_without_thsep(
  363|   160k|                        ranges::subrange{prefix_result.iterator,
  364|   160k|                                         ranges::end(range)},
  365|   160k|                        prefix_result.parsed_base));
  366|       |
  367|   160k|            auto buf = make_contiguous_buffer(
  368|   160k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   160k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.5k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.5k|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   132k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   132k|                                        prefix_result.parsed_base));
  372|       |
  373|   132k|            return ranges_polyfill::batch_next(
  374|   132k|                prefix_result.iterator,
  375|   132k|                ranges::distance(buf.view().begin(), result_it));
  376|   160k|        }
  377|       |
  378|  46.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  46.1k|            localized_number_formatting_options<CharT>{loc};
  383|  46.1k|#endif
  384|       |
  385|  46.1k|        SCN_TRY(
  ------------------
  |  |   71|  46.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.36k, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.36k|    }                                                  \
  |  |  |  |   70|  46.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  41.7k|            parse_digits_result,
  387|  41.7k|            parse_integer_digits_with_thsep(
  388|  41.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  41.7k|                prefix_result.parsed_base, locale_options));
  390|  41.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  41.7k|            parse_digits_result;
  392|       |
  393|  41.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 576, False: 41.1k]
  ------------------
  394|    576|            if (auto e = check_thsep_grouping(
  395|    576|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    576|                    thsep_indices, locale_options.grouping);
  397|    576|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 220, False: 356]
  |  |  ------------------
  ------------------
  398|    220|                return unexpected(e);
  399|    220|            }
  400|    576|        }
  401|       |
  402|  41.5k|        auto nothsep_source_view =
  403|  41.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  41.5k|        SCN_TRY(
  ------------------
  |  |   71|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 592, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    592|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    592|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    592|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    592|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    592|    }                                                  \
  |  |  |  |   70|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  40.9k|            nothsep_source_it,
  406|  40.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  40.9k|                                prefix_result.parsed_base));
  408|       |
  409|  40.9k|        return ranges_polyfill::batch_next(
  410|  40.9k|            prefix_result.iterator,
  411|  40.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  40.9k|                ranges::ssize(thsep_indices));
  413|  41.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   294k|    {
  335|   294k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   294k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   294k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.32k, False: 288k]
  ------------------
  339|  6.32k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.32k|                return unexpected_scan_error(
  341|  6.32k|                    scan_error::invalid_scanned_value,
  342|  6.32k|                    "Unexpected '-' sign when parsing an "
  343|  6.32k|                    "unsigned value");
  344|  6.32k|            }
  345|  6.32k|            else {
  346|  6.32k|                if (specs.type ==
  347|  6.32k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.32k|                    return unexpected_scan_error(
  349|  6.32k|                        scan_error::invalid_scanned_value,
  350|  6.32k|                        "'u'-option disallows negative values");
  351|  6.32k|                }
  352|  6.32k|            }
  353|  6.32k|        }
  354|       |
  355|   288k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 43.7k, False: 244k]
  ------------------
  356|  43.7k|            value = T{0};
  357|  43.7k|            return std::next(prefix_result.iterator);
  358|  43.7k|        }
  359|       |
  360|   244k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   244k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 191k, False: 53.2k]
  |  |  ------------------
  ------------------
  361|   191k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 50, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   191k|                    parse_integer_digits_without_thsep(
  363|   191k|                        ranges::subrange{prefix_result.iterator,
  364|   191k|                                         ranges::end(range)},
  365|   191k|                        prefix_result.parsed_base));
  366|       |
  367|   191k|            auto buf = make_contiguous_buffer(
  368|   191k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   191k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.7k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.7k|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   164k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   164k|                                        prefix_result.parsed_base));
  372|       |
  373|   164k|            return ranges_polyfill::batch_next(
  374|   164k|                prefix_result.iterator,
  375|   164k|                ranges::distance(buf.view().begin(), result_it));
  376|   191k|        }
  377|       |
  378|  53.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  53.2k|            localized_number_formatting_options<CharT>{loc};
  383|  53.2k|#endif
  384|       |
  385|  53.2k|        SCN_TRY(
  ------------------
  |  |   71|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.45k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  48.8k|            parse_digits_result,
  387|  48.8k|            parse_integer_digits_with_thsep(
  388|  48.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  48.8k|                prefix_result.parsed_base, locale_options));
  390|  48.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  48.8k|            parse_digits_result;
  392|       |
  393|  48.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 624, False: 48.2k]
  ------------------
  394|    624|            if (auto e = check_thsep_grouping(
  395|    624|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    624|                    thsep_indices, locale_options.grouping);
  397|    624|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 260, False: 364]
  |  |  ------------------
  ------------------
  398|    260|                return unexpected(e);
  399|    260|            }
  400|    624|        }
  401|       |
  402|  48.5k|        auto nothsep_source_view =
  403|  48.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  48.5k|        SCN_TRY(
  ------------------
  |  |   71|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 234, False: 48.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  48.3k|            nothsep_source_it,
  406|  48.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  48.3k|                                prefix_result.parsed_base));
  408|       |
  409|  48.3k|        return ranges_polyfill::batch_next(
  410|  48.3k|            prefix_result.iterator,
  411|  48.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  48.3k|                ranges::ssize(thsep_indices));
  413|  48.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   297k|    {
  335|   297k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   297k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   297k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.50k, False: 291k]
  ------------------
  339|  6.50k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.50k|                return unexpected_scan_error(
  341|  6.50k|                    scan_error::invalid_scanned_value,
  342|  6.50k|                    "Unexpected '-' sign when parsing an "
  343|  6.50k|                    "unsigned value");
  344|  6.50k|            }
  345|  6.50k|            else {
  346|  6.50k|                if (specs.type ==
  347|  6.50k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.50k|                    return unexpected_scan_error(
  349|  6.50k|                        scan_error::invalid_scanned_value,
  350|  6.50k|                        "'u'-option disallows negative values");
  351|  6.50k|                }
  352|  6.50k|            }
  353|  6.50k|        }
  354|       |
  355|   291k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 43.7k, False: 247k]
  ------------------
  356|  43.7k|            value = T{0};
  357|  43.7k|            return std::next(prefix_result.iterator);
  358|  43.7k|        }
  359|       |
  360|   247k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   247k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 193k, False: 53.8k]
  |  |  ------------------
  ------------------
  361|   193k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 50, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   193k|                    parse_integer_digits_without_thsep(
  363|   193k|                        ranges::subrange{prefix_result.iterator,
  364|   193k|                                         ranges::end(range)},
  365|   193k|                        prefix_result.parsed_base));
  366|       |
  367|   193k|            auto buf = make_contiguous_buffer(
  368|   193k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   193k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.4k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.4k|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   167k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   167k|                                        prefix_result.parsed_base));
  372|       |
  373|   167k|            return ranges_polyfill::batch_next(
  374|   167k|                prefix_result.iterator,
  375|   167k|                ranges::distance(buf.view().begin(), result_it));
  376|   193k|        }
  377|       |
  378|  53.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  53.8k|            localized_number_formatting_options<CharT>{loc};
  383|  53.8k|#endif
  384|       |
  385|  53.8k|        SCN_TRY(
  ------------------
  |  |   71|  53.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.49k, False: 49.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  53.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  49.3k|            parse_digits_result,
  387|  49.3k|            parse_integer_digits_with_thsep(
  388|  49.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  49.3k|                prefix_result.parsed_base, locale_options));
  390|  49.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  49.3k|            parse_digits_result;
  392|       |
  393|  49.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 624, False: 48.6k]
  ------------------
  394|    624|            if (auto e = check_thsep_grouping(
  395|    624|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    624|                    thsep_indices, locale_options.grouping);
  397|    624|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 260, False: 364]
  |  |  ------------------
  ------------------
  398|    260|                return unexpected(e);
  399|    260|            }
  400|    624|        }
  401|       |
  402|  49.0k|        auto nothsep_source_view =
  403|  49.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  49.0k|        SCN_TRY(
  ------------------
  |  |   71|  49.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 114, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  48.9k|            nothsep_source_it,
  406|  48.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  48.9k|                                prefix_result.parsed_base));
  408|       |
  409|  48.9k|        return ranges_polyfill::batch_next(
  410|  48.9k|            prefix_result.iterator,
  411|  48.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  48.9k|                ranges::ssize(thsep_indices));
  413|  49.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   308k|{
  121|   308k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   308k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   308k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   308k|        parse_integer_base_prefix(
  126|   308k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   308k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 308k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   308k|    else {
  139|   308k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 308k]
  ------------------
  140|   308k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 308k, False: 0]
  ------------------
  141|   308k|            digits_begin_it = base_prefix_begin_it;
  142|   308k|        }
  143|   308k|    }
  144|       |
  145|   308k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 308k, False: 0]
  ------------------
  146|   308k|        sign = sign_type::plus_sign;
  147|   308k|    }
  148|   308k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   308k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   308k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   308k|{
   88|   308k|    switch (base) {
   89|  41.1k|        case 2:
  ------------------
  |  Branch (89:9): [True: 41.1k, False: 267k]
  ------------------
   90|       |            // allow 0b/0B
   91|  41.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  41.1k|                    false};
   93|       |
   94|  41.1k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 41.1k, False: 267k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  41.1k|            bool zero_parsed = false;
   97|  41.1k|            auto it = apply_opt(
   98|  41.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  41.1k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  41.1k|        case 16:
  ------------------
  |  Branch (102:9): [True: 41.1k, False: 267k]
  ------------------
  103|       |            // allow 0x/0X
  104|  41.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  41.1k|                    false};
  106|       |
  107|   144k|        case 0:
  ------------------
  |  Branch (107:9): [True: 144k, False: 164k]
  ------------------
  108|       |            // detect base
  109|   144k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  41.1k|        default:
  ------------------
  |  Branch (111:9): [True: 41.1k, False: 267k]
  ------------------
  112|       |            // no base prefix allowed
  113|  41.1k|            return {ranges::begin(range), base, false};
  114|   308k|    }
  115|   308k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   185k|{
   38|   185k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   185k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   185k|{
   53|   185k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 185k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   185k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 185k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   185k|    return unexpected(parse_error::error);
   63|   185k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   185k|{
   45|   185k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   185k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   144k|{
   69|   144k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 144k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   144k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 144k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   144k|    {
   76|   144k|        bool zero_parsed{false};
   77|   144k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 144k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   144k|    }
   81|   144k|    return {ranges::begin(range), 10, false};
   82|   144k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   267k|{
  156|   267k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   267k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   267k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   267k|            return unexpected_scan_error(
  161|   267k|                scan_error::invalid_scanned_value,
  162|   267k|                "Failed to parse integer: No digits found");
  163|   267k|        }
  164|   267k|        return ranges::end(range);
  165|   267k|    }
  166|   267k|    else {
  167|   267k|        return read_while1_code_unit(
  168|   267k|                   range, [&](char_type ch)
  169|   267k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   267k|            .transform_error(map_parse_error_to_scan_error(
  171|   267k|                scan_error::invalid_scanned_value,
  172|   267k|                "Failed to parse integer: No digits found"));
  173|   267k|    }
  174|   267k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   267k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  41.1k|{
  185|  41.1k|    std::basic_string<CharT> output;
  186|  41.1k|    std::string thsep_indices;
  187|  41.1k|    auto it = ranges::begin(range);
  188|  41.1k|    bool digit_matched = false;
  189|  41.1k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 41.1k, False: 0]
  ------------------
  190|  41.1k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 41.1k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  41.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 41.1k, False: 0]
  ------------------
  195|  41.1k|            break;
  196|  41.1k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  41.1k|    }
  202|  41.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 41.1k, False: 0]
  |  |  ------------------
  ------------------
  203|  41.1k|        return unexpected_scan_error(
  204|  41.1k|            scan_error::invalid_scanned_value,
  205|  41.1k|            "Failed to parse integer: No digits found");
  206|  41.1k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  41.1k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  41.1k|    {
  335|  41.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  41.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  41.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 41.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  41.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 41.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  41.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  41.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.3k, False: 6.86k]
  |  |  ------------------
  ------------------
  361|  34.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.3k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  6.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.86k|            localized_number_formatting_options<CharT>{loc};
  383|  6.86k|#endif
  384|       |
  385|  6.86k|        SCN_TRY(
  ------------------
  |  |   71|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.86k|    }                                                  \
  |  |  |  |   70|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.60M|{
   69|  2.60M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.60M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.43M, False: 167k]
  ------------------
   71|  2.43M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.43M, False: 0]
  ------------------
   72|  2.43M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.43M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.43M|    }
   76|       |
   77|   167k|    auto& it = *r;
   78|   167k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 118k, False: 49.2k]
  ------------------
   79|   118k|        return std::pair{it, sign_type::minus_sign};
   80|   118k|    }
   81|  49.2k|    return std::pair{it, sign_type::plus_sign};
   82|   167k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  24.0M|{
   51|  24.0M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  24.0M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.80k|{
  140|  4.80k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  246|  4.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.80k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.20k, False: 2.60k]
  ------------------
  143|  2.20k|        SCN_UNLIKELY_ATTR
  144|  2.20k|        return {scan_error::invalid_scanned_value,
  145|  2.20k|                "Invalid thousands separator grouping"};
  146|  2.20k|    }
  147|       |
  148|  2.60k|    return {};
  149|  4.80k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.80k|{
  101|  4.80k|    transform_thsep_indices(
  102|  4.80k|        thsep_indices,
  103|  4.80k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.80k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.80k|    for (auto grouping_it = grouping.begin();
  107|  4.80k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.80k]
  |  Branch (107:10): [True: 0, False: 4.80k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.80k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.80k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.80k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  57.8k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 54.0k, False: 3.77k]
  ------------------
  119|  54.0k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.03k, False: 53.0k]
  ------------------
  120|  1.03k|            return false;
  121|  1.03k|        }
  122|  54.0k|    }
  123|       |
  124|  3.77k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.77k, False: 0]
  ------------------
  125|  3.77k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.17k, False: 2.60k]
  ------------------
  126|  1.17k|            return false;
  127|  1.17k|        }
  128|  3.77k|    }
  129|       |
  130|  2.60k|    SCN_CLANG_POP
  131|       |
  132|  2.60k|    return true;
  133|  3.77k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  8.93k|{
   87|   130k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 121k, False: 8.93k]
  ------------------
   88|   121k|         ++thsep_it) {
   89|   121k|        const auto tmp = *thsep_it;
   90|   121k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   121k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   121k|    }
   93|  8.93k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  8.93k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   172k|{
   69|   172k|    auto r = read_one_of_code_unit(range, "+-");
   70|   172k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 172k, False: 0]
  ------------------
   71|   172k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 172k, False: 0]
  ------------------
   72|   172k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   172k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   172k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.44M|{
   69|  2.44M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.44M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.31M, False: 134k]
  ------------------
   71|  2.31M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.31M, False: 0]
  ------------------
   72|  2.31M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.31M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.31M|    }
   76|       |
   77|   134k|    auto& it = *r;
   78|   134k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 91.7k, False: 42.8k]
  ------------------
   79|  91.7k|        return std::pair{it, sign_type::minus_sign};
   80|  91.7k|    }
   81|  42.8k|    return std::pair{it, sign_type::plus_sign};
   82|   134k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  12.1M|{
   55|  12.1M|#if WCHAR_MIN < 0
   56|  12.1M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 12.1M, False: 28.4k]
  |  Branch (56:20): [True: 11.8M, False: 321k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  11.8M|        return char_to_int(static_cast<char>(ch));
   61|  11.8M|    }
   62|   349k|    return 255;
   63|  12.1M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.12k|{
  140|  4.12k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  246|  4.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.12k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.90k, False: 2.22k]
  ------------------
  143|  1.90k|        SCN_UNLIKELY_ATTR
  144|  1.90k|        return {scan_error::invalid_scanned_value,
  145|  1.90k|                "Invalid thousands separator grouping"};
  146|  1.90k|    }
  147|       |
  148|  2.22k|    return {};
  149|  4.12k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.12k|{
  101|  4.12k|    transform_thsep_indices(
  102|  4.12k|        thsep_indices,
  103|  4.12k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.12k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.12k|    for (auto grouping_it = grouping.begin();
  107|  4.12k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.12k]
  |  Branch (107:10): [True: 0, False: 4.12k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.12k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.12k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.12k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  46.0k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 42.7k, False: 3.35k]
  ------------------
  119|  42.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 776, False: 41.9k]
  ------------------
  120|    776|            return false;
  121|    776|        }
  122|  42.7k|    }
  123|       |
  124|  3.35k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.35k, False: 0]
  ------------------
  125|  3.35k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.13k, False: 2.22k]
  ------------------
  126|  1.13k|            return false;
  127|  1.13k|        }
  128|  3.35k|    }
  129|       |
  130|  2.22k|    SCN_CLANG_POP
  131|       |
  132|  2.22k|    return true;
  133|  3.35k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   308k|{
   69|   308k|    auto r = read_one_of_code_unit(range, "+-");
   70|   308k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 308k, False: 0]
  ------------------
   71|   308k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 308k, False: 0]
  ------------------
   72|   308k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   308k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   308k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   112k|    {
  122|   112k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   112k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   112k|                          basic_contiguous_scan_context<char_type>>) {
  126|   112k|            auto rd = make_reader<T, char_type>();
  127|   112k|            return impl(rd, range, value);
  128|   112k|        }
  129|   112k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   112k|            auto rd = make_reader<T, char_type>();
  131|   112k|            if (!is_segment_contiguous(range)) {
  132|   112k|                return impl(rd, range, value);
  133|   112k|            }
  134|   112k|            auto crange = get_as_contiguous(range);
  135|   112k|            SCN_TRY(it, impl(rd, crange, value));
  136|   112k|            return ranges_polyfill::batch_next(
  137|   112k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   112k|        }
  139|   112k|        else {
  140|   112k|            SCN_EXPECT(false);
  141|   112k|            SCN_UNREACHABLE;
  142|   112k|        }
  143|   112k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   112k|    {
  112|   112k|        SCN_TRY(it,
  ------------------
  |  |   71|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 921, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    921|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    921|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    921|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    921|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    921|    }                                                  \
  |  |  |  |   70|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   111k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   111k|                    .transform_error(make_eof_scan_error));
  115|   111k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   111k|                               loc);
  117|   112k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.62M|{
   43|  2.62M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 19.9k, False: 2.60M]
  |  |  ------------------
  ------------------
   44|  19.9k|        return unexpected(e);
   45|  19.9k|    }
   46|       |
   47|  2.60M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.60M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.60M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.60M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   138k|    {
  122|   138k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   138k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   138k|                          basic_contiguous_scan_context<char_type>>) {
  126|   138k|            auto rd = make_reader<T, char_type>();
  127|   138k|            return impl(rd, range, value);
  128|   138k|        }
  129|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   138k|            auto rd = make_reader<T, char_type>();
  131|   138k|            if (!is_segment_contiguous(range)) {
  132|   138k|                return impl(rd, range, value);
  133|   138k|            }
  134|   138k|            auto crange = get_as_contiguous(range);
  135|   138k|            SCN_TRY(it, impl(rd, crange, value));
  136|   138k|            return ranges_polyfill::batch_next(
  137|   138k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   138k|        }
  139|   138k|        else {
  140|   138k|            SCN_EXPECT(false);
  141|   138k|            SCN_UNREACHABLE;
  142|   138k|        }
  143|   138k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   138k|    {
  112|   138k|        SCN_TRY(it,
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.39k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.39k|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   137k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   137k|                    .transform_error(make_eof_scan_error));
  115|   137k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   137k|                               loc);
  117|   138k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   141k|    {
  122|   141k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   141k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   141k|                          basic_contiguous_scan_context<char_type>>) {
  126|   141k|            auto rd = make_reader<T, char_type>();
  127|   141k|            return impl(rd, range, value);
  128|   141k|        }
  129|   141k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   141k|            auto rd = make_reader<T, char_type>();
  131|   141k|            if (!is_segment_contiguous(range)) {
  132|   141k|                return impl(rd, range, value);
  133|   141k|            }
  134|   141k|            auto crange = get_as_contiguous(range);
  135|   141k|            SCN_TRY(it, impl(rd, crange, value));
  136|   141k|            return ranges_polyfill::batch_next(
  137|   141k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   141k|        }
  139|   141k|        else {
  140|   141k|            SCN_EXPECT(false);
  141|   141k|            SCN_UNREACHABLE;
  142|   141k|        }
  143|   141k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   141k|    {
  112|   141k|        SCN_TRY(it,
  ------------------
  |  |   71|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.52k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   140k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   140k|                    .transform_error(make_eof_scan_error));
  115|   140k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   140k|                               loc);
  117|   141k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   101k|    {
  122|   101k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   101k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   101k|                          basic_contiguous_scan_context<char_type>>) {
  126|   101k|            auto rd = make_reader<T, char_type>();
  127|   101k|            return impl(rd, range, value);
  128|   101k|        }
  129|   101k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   101k|            auto rd = make_reader<T, char_type>();
  131|   101k|            if (!is_segment_contiguous(range)) {
  132|   101k|                return impl(rd, range, value);
  133|   101k|            }
  134|   101k|            auto crange = get_as_contiguous(range);
  135|   101k|            SCN_TRY(it, impl(rd, crange, value));
  136|   101k|            return ranges_polyfill::batch_next(
  137|   101k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   101k|        }
  139|   101k|        else {
  140|   101k|            SCN_EXPECT(false);
  141|   101k|            SCN_UNREACHABLE;
  142|   101k|        }
  143|   101k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   101k|    {
  112|   101k|        SCN_TRY(it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 729, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    729|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    729|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    729|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    729|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    729|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   100k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   100k|                    .transform_error(make_eof_scan_error));
  115|   100k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   100k|                               loc);
  117|   101k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   117k|    {
  122|   117k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   117k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   117k|                          basic_contiguous_scan_context<char_type>>) {
  126|   117k|            auto rd = make_reader<T, char_type>();
  127|   117k|            return impl(rd, range, value);
  128|   117k|        }
  129|   117k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   117k|            auto rd = make_reader<T, char_type>();
  131|   117k|            if (!is_segment_contiguous(range)) {
  132|   117k|                return impl(rd, range, value);
  133|   117k|            }
  134|   117k|            auto crange = get_as_contiguous(range);
  135|   117k|            SCN_TRY(it, impl(rd, crange, value));
  136|   117k|            return ranges_polyfill::batch_next(
  137|   117k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   117k|        }
  139|   117k|        else {
  140|   117k|            SCN_EXPECT(false);
  141|   117k|            SCN_UNREACHABLE;
  142|   117k|        }
  143|   117k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   117k|    {
  112|   117k|        SCN_TRY(it,
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 972, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    972|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    972|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    972|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    972|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    972|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   116k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   116k|                    .transform_error(make_eof_scan_error));
  115|   116k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   116k|                               loc);
  117|   117k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   118k|    {
  122|   118k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   118k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   118k|                          basic_contiguous_scan_context<char_type>>) {
  126|   118k|            auto rd = make_reader<T, char_type>();
  127|   118k|            return impl(rd, range, value);
  128|   118k|        }
  129|   118k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   118k|            auto rd = make_reader<T, char_type>();
  131|   118k|            if (!is_segment_contiguous(range)) {
  132|   118k|                return impl(rd, range, value);
  133|   118k|            }
  134|   118k|            auto crange = get_as_contiguous(range);
  135|   118k|            SCN_TRY(it, impl(rd, crange, value));
  136|   118k|            return ranges_polyfill::batch_next(
  137|   118k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   118k|        }
  139|   118k|        else {
  140|   118k|            SCN_EXPECT(false);
  141|   118k|            SCN_UNREACHABLE;
  142|   118k|        }
  143|   118k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   118k|    {
  112|   118k|        SCN_TRY(it,
  ------------------
  |  |   71|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.04k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.04k|    }                                                  \
  |  |  |  |   70|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   117k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   117k|                    .transform_error(make_eof_scan_error));
  115|   117k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   117k|                               loc);
  117|   118k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   172k|{
   43|   172k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   172k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 172k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   172k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   172k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.73k|    {
  122|  5.73k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.73k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.73k|            auto rd = make_reader<T, char_type>();
  127|  5.73k|            return impl(rd, range, value);
  128|  5.73k|        }
  129|  5.73k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.73k|            auto rd = make_reader<T, char_type>();
  131|  5.73k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.73k, False: 0]
  ------------------
  132|  5.73k|                return impl(rd, range, value);
  133|  5.73k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.73k|        else {
  140|  5.73k|            SCN_EXPECT(false);
  141|  5.73k|            SCN_UNREACHABLE;
  142|  5.73k|        }
  143|  5.73k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.73k|    {
  112|  5.73k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.73k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.73k|                    .transform_error(make_eof_scan_error));
  115|  5.73k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.73k|                               loc);
  117|  5.73k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   270k|    {
  223|   270k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   270k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   270k|                          basic_contiguous_scan_context<char_type>>) {
  227|   270k|            auto rd = make_reader<T, char_type>();
  228|   270k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 270k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   270k|            return impl(rd, range, value);
  233|   270k|        }
  234|   270k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   270k|            auto rd = make_reader<T, char_type>();
  236|   270k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   270k|                return unexpected(e);
  238|   270k|            }
  239|       |
  240|   270k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   270k|                return impl(rd, range, value);
  242|   270k|            }
  243|       |
  244|   270k|            auto crange = get_as_contiguous(range);
  245|   270k|            SCN_TRY(it, impl(rd, crange, value));
  246|   270k|            return ranges_polyfill::batch_next(
  247|   270k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   270k|        }
  249|   270k|        else {
  250|   270k|            SCN_EXPECT(false);
  251|   270k|            SCN_UNREACHABLE;
  252|   270k|        }
  253|   270k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   270k|    {
  205|   270k|        SCN_TRY(it,
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.57k, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.57k|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   267k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   267k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   267k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   267k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 267k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   267k|        return rd.read_specs(subr, specs, value, loc);
  218|   267k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   366k|    {
  223|   366k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   366k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   366k|                          basic_contiguous_scan_context<char_type>>) {
  227|   366k|            auto rd = make_reader<T, char_type>();
  228|   366k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   366k|            return impl(rd, range, value);
  233|   366k|        }
  234|   366k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   366k|            auto rd = make_reader<T, char_type>();
  236|   366k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   366k|                return unexpected(e);
  238|   366k|            }
  239|       |
  240|   366k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   366k|                return impl(rd, range, value);
  242|   366k|            }
  243|       |
  244|   366k|            auto crange = get_as_contiguous(range);
  245|   366k|            SCN_TRY(it, impl(rd, crange, value));
  246|   366k|            return ranges_polyfill::batch_next(
  247|   366k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   366k|        }
  249|   366k|        else {
  250|   366k|            SCN_EXPECT(false);
  251|   366k|            SCN_UNREACHABLE;
  252|   366k|        }
  253|   366k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   366k|    {
  205|   366k|        SCN_TRY(it,
  ------------------
  |  |   71|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.16k, False: 362k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.16k|    }                                                  \
  |  |  |  |   70|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   362k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   362k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   362k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   362k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 362k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   362k|        return rd.read_specs(subr, specs, value, loc);
  218|   362k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   376k|    {
  223|   376k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   376k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   376k|                          basic_contiguous_scan_context<char_type>>) {
  227|   376k|            auto rd = make_reader<T, char_type>();
  228|   376k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   376k|            return impl(rd, range, value);
  233|   376k|        }
  234|   376k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   376k|            auto rd = make_reader<T, char_type>();
  236|   376k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   376k|                return unexpected(e);
  238|   376k|            }
  239|       |
  240|   376k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   376k|                return impl(rd, range, value);
  242|   376k|            }
  243|       |
  244|   376k|            auto crange = get_as_contiguous(range);
  245|   376k|            SCN_TRY(it, impl(rd, crange, value));
  246|   376k|            return ranges_polyfill::batch_next(
  247|   376k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   376k|        }
  249|   376k|        else {
  250|   376k|            SCN_EXPECT(false);
  251|   376k|            SCN_UNREACHABLE;
  252|   376k|        }
  253|   376k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   376k|    {
  205|   376k|        SCN_TRY(it,
  ------------------
  |  |   71|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.56k, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.56k|    }                                                  \
  |  |  |  |   70|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   371k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   371k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   371k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   371k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 371k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   371k|        return rd.read_specs(subr, specs, value, loc);
  218|   371k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   261k|    {
  223|   261k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   261k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   261k|                          basic_contiguous_scan_context<char_type>>) {
  227|   261k|            auto rd = make_reader<T, char_type>();
  228|   261k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 261k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   261k|            return impl(rd, range, value);
  233|   261k|        }
  234|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   261k|            auto rd = make_reader<T, char_type>();
  236|   261k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   261k|                return unexpected(e);
  238|   261k|            }
  239|       |
  240|   261k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   261k|                return impl(rd, range, value);
  242|   261k|            }
  243|       |
  244|   261k|            auto crange = get_as_contiguous(range);
  245|   261k|            SCN_TRY(it, impl(rd, crange, value));
  246|   261k|            return ranges_polyfill::batch_next(
  247|   261k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   261k|        }
  249|   261k|        else {
  250|   261k|            SCN_EXPECT(false);
  251|   261k|            SCN_UNREACHABLE;
  252|   261k|        }
  253|   261k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   261k|    {
  205|   261k|        SCN_TRY(it,
  ------------------
  |  |   71|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.09k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.09k|    }                                                  \
  |  |  |  |   70|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   259k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   259k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   259k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   259k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 259k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   259k|        return rd.read_specs(subr, specs, value, loc);
  218|   259k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   309k|    {
  223|   309k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   309k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   309k|                          basic_contiguous_scan_context<char_type>>) {
  227|   309k|            auto rd = make_reader<T, char_type>();
  228|   309k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   309k|            return impl(rd, range, value);
  233|   309k|        }
  234|   309k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   309k|            auto rd = make_reader<T, char_type>();
  236|   309k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   309k|                return unexpected(e);
  238|   309k|            }
  239|       |
  240|   309k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   309k|                return impl(rd, range, value);
  242|   309k|            }
  243|       |
  244|   309k|            auto crange = get_as_contiguous(range);
  245|   309k|            SCN_TRY(it, impl(rd, crange, value));
  246|   309k|            return ranges_polyfill::batch_next(
  247|   309k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   309k|        }
  249|   309k|        else {
  250|   309k|            SCN_EXPECT(false);
  251|   309k|            SCN_UNREACHABLE;
  252|   309k|        }
  253|   309k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   309k|    {
  205|   309k|        SCN_TRY(it,
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.87k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.87k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   306k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   306k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   306k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   306k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 306k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   306k|        return rd.read_specs(subr, specs, value, loc);
  218|   306k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   312k|    {
  223|   312k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   312k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   312k|                          basic_contiguous_scan_context<char_type>>) {
  227|   312k|            auto rd = make_reader<T, char_type>();
  228|   312k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   312k|            return impl(rd, range, value);
  233|   312k|        }
  234|   312k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   312k|            auto rd = make_reader<T, char_type>();
  236|   312k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   312k|                return unexpected(e);
  238|   312k|            }
  239|       |
  240|   312k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   312k|                return impl(rd, range, value);
  242|   312k|            }
  243|       |
  244|   312k|            auto crange = get_as_contiguous(range);
  245|   312k|            SCN_TRY(it, impl(rd, crange, value));
  246|   312k|            return ranges_polyfill::batch_next(
  247|   312k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   312k|        }
  249|   312k|        else {
  250|   312k|            SCN_EXPECT(false);
  251|   312k|            SCN_UNREACHABLE;
  252|   312k|        }
  253|   312k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   312k|    {
  205|   312k|        SCN_TRY(it,
  ------------------
  |  |   71|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.08k, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.08k|    }                                                  \
  |  |  |  |   70|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   309k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   309k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   309k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   309k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 309k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   309k|        return rd.read_specs(subr, specs, value, loc);
  218|   309k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  22.9k|    {
  223|  22.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  22.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  22.9k|            auto rd = make_reader<T, char_type>();
  228|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  22.9k|                return unexpected(e);
  230|  22.9k|            }
  231|       |
  232|  22.9k|            return impl(rd, range, value);
  233|  22.9k|        }
  234|  22.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  22.9k|            auto rd = make_reader<T, char_type>();
  236|  22.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  22.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 22.9k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  22.9k|                return impl(rd, range, value);
  242|  22.9k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  22.9k|        else {
  250|  22.9k|            SCN_EXPECT(false);
  251|  22.9k|            SCN_UNREACHABLE;
  252|  22.9k|        }
  253|  22.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  22.9k|    {
  205|  22.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  22.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  22.9k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  22.9k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  22.9k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 22.9k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  22.9k|        return rd.read_specs(subr, specs, value, loc);
  218|  22.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   104k|    {
  122|   104k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   104k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   104k|                          basic_contiguous_scan_context<char_type>>) {
  126|   104k|            auto rd = make_reader<T, char_type>();
  127|   104k|            return impl(rd, range, value);
  128|   104k|        }
  129|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   104k|            auto rd = make_reader<T, char_type>();
  131|   104k|            if (!is_segment_contiguous(range)) {
  132|   104k|                return impl(rd, range, value);
  133|   104k|            }
  134|   104k|            auto crange = get_as_contiguous(range);
  135|   104k|            SCN_TRY(it, impl(rd, crange, value));
  136|   104k|            return ranges_polyfill::batch_next(
  137|   104k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   104k|        }
  139|   104k|        else {
  140|   104k|            SCN_EXPECT(false);
  141|   104k|            SCN_UNREACHABLE;
  142|   104k|        }
  143|   104k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   104k|    {
  112|   104k|        SCN_TRY(it,
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 996, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    996|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   103k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   103k|                    .transform_error(make_eof_scan_error));
  115|   103k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   103k|                               loc);
  117|   104k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.47M|{
   43|  2.47M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.9k, False: 2.45M]
  |  |  ------------------
  ------------------
   44|  20.9k|        return unexpected(e);
   45|  20.9k|    }
   46|       |
   47|  2.45M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.45M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.45M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.45M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   126k|    {
  122|   126k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   126k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   126k|                          basic_contiguous_scan_context<char_type>>) {
  126|   126k|            auto rd = make_reader<T, char_type>();
  127|   126k|            return impl(rd, range, value);
  128|   126k|        }
  129|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   126k|            auto rd = make_reader<T, char_type>();
  131|   126k|            if (!is_segment_contiguous(range)) {
  132|   126k|                return impl(rd, range, value);
  133|   126k|            }
  134|   126k|            auto crange = get_as_contiguous(range);
  135|   126k|            SCN_TRY(it, impl(rd, crange, value));
  136|   126k|            return ranges_polyfill::batch_next(
  137|   126k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   126k|        }
  139|   126k|        else {
  140|   126k|            SCN_EXPECT(false);
  141|   126k|            SCN_UNREACHABLE;
  142|   126k|        }
  143|   126k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   126k|    {
  112|   126k|        SCN_TRY(it,
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.47k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   124k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   124k|                    .transform_error(make_eof_scan_error));
  115|   124k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   124k|                               loc);
  117|   126k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   128k|    {
  122|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   128k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   128k|                          basic_contiguous_scan_context<char_type>>) {
  126|   128k|            auto rd = make_reader<T, char_type>();
  127|   128k|            return impl(rd, range, value);
  128|   128k|        }
  129|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   128k|            auto rd = make_reader<T, char_type>();
  131|   128k|            if (!is_segment_contiguous(range)) {
  132|   128k|                return impl(rd, range, value);
  133|   128k|            }
  134|   128k|            auto crange = get_as_contiguous(range);
  135|   128k|            SCN_TRY(it, impl(rd, crange, value));
  136|   128k|            return ranges_polyfill::batch_next(
  137|   128k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   128k|        }
  139|   128k|        else {
  140|   128k|            SCN_EXPECT(false);
  141|   128k|            SCN_UNREACHABLE;
  142|   128k|        }
  143|   128k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   128k|    {
  112|   128k|        SCN_TRY(it,
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.60k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.60k|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   127k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   127k|                    .transform_error(make_eof_scan_error));
  115|   127k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   127k|                               loc);
  117|   128k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|  95.0k|    {
  122|  95.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  95.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  95.0k|                          basic_contiguous_scan_context<char_type>>) {
  126|  95.0k|            auto rd = make_reader<T, char_type>();
  127|  95.0k|            return impl(rd, range, value);
  128|  95.0k|        }
  129|  95.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  95.0k|            auto rd = make_reader<T, char_type>();
  131|  95.0k|            if (!is_segment_contiguous(range)) {
  132|  95.0k|                return impl(rd, range, value);
  133|  95.0k|            }
  134|  95.0k|            auto crange = get_as_contiguous(range);
  135|  95.0k|            SCN_TRY(it, impl(rd, crange, value));
  136|  95.0k|            return ranges_polyfill::batch_next(
  137|  95.0k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  95.0k|        }
  139|  95.0k|        else {
  140|  95.0k|            SCN_EXPECT(false);
  141|  95.0k|            SCN_UNREACHABLE;
  142|  95.0k|        }
  143|  95.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  95.0k|    {
  112|  95.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  95.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 795, False: 94.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    795|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    795|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    795|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    795|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    795|    }                                                  \
  |  |  |  |   70|  95.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  94.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  94.2k|                    .transform_error(make_eof_scan_error));
  115|  94.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  94.2k|                               loc);
  117|  95.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   110k|    {
  122|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   110k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   110k|                          basic_contiguous_scan_context<char_type>>) {
  126|   110k|            auto rd = make_reader<T, char_type>();
  127|   110k|            return impl(rd, range, value);
  128|   110k|        }
  129|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   110k|            auto rd = make_reader<T, char_type>();
  131|   110k|            if (!is_segment_contiguous(range)) {
  132|   110k|                return impl(rd, range, value);
  133|   110k|            }
  134|   110k|            auto crange = get_as_contiguous(range);
  135|   110k|            SCN_TRY(it, impl(rd, crange, value));
  136|   110k|            return ranges_polyfill::batch_next(
  137|   110k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   110k|        }
  139|   110k|        else {
  140|   110k|            SCN_EXPECT(false);
  141|   110k|            SCN_UNREACHABLE;
  142|   110k|        }
  143|   110k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   110k|    {
  112|   110k|        SCN_TRY(it,
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.03k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.03k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   109k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   109k|                    .transform_error(make_eof_scan_error));
  115|   109k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   109k|                               loc);
  117|   110k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   111k|    {
  122|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   111k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   111k|                          basic_contiguous_scan_context<char_type>>) {
  126|   111k|            auto rd = make_reader<T, char_type>();
  127|   111k|            return impl(rd, range, value);
  128|   111k|        }
  129|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   111k|            auto rd = make_reader<T, char_type>();
  131|   111k|            if (!is_segment_contiguous(range)) {
  132|   111k|                return impl(rd, range, value);
  133|   111k|            }
  134|   111k|            auto crange = get_as_contiguous(range);
  135|   111k|            SCN_TRY(it, impl(rd, crange, value));
  136|   111k|            return ranges_polyfill::batch_next(
  137|   111k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   111k|        }
  139|   111k|        else {
  140|   111k|            SCN_EXPECT(false);
  141|   111k|            SCN_UNREACHABLE;
  142|   111k|        }
  143|   111k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   111k|    {
  112|   111k|        SCN_TRY(it,
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.10k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   110k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   110k|                    .transform_error(make_eof_scan_error));
  115|   110k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   110k|                               loc);
  117|   111k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   258k|    {
  223|   258k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   258k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   258k|                          basic_contiguous_scan_context<char_type>>) {
  227|   258k|            auto rd = make_reader<T, char_type>();
  228|   258k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 258k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   258k|            return impl(rd, range, value);
  233|   258k|        }
  234|   258k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   258k|            auto rd = make_reader<T, char_type>();
  236|   258k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   258k|                return unexpected(e);
  238|   258k|            }
  239|       |
  240|   258k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   258k|                return impl(rd, range, value);
  242|   258k|            }
  243|       |
  244|   258k|            auto crange = get_as_contiguous(range);
  245|   258k|            SCN_TRY(it, impl(rd, crange, value));
  246|   258k|            return ranges_polyfill::batch_next(
  247|   258k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   258k|        }
  249|   258k|        else {
  250|   258k|            SCN_EXPECT(false);
  251|   258k|            SCN_UNREACHABLE;
  252|   258k|        }
  253|   258k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   258k|    {
  205|   258k|        SCN_TRY(it,
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.87k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.87k|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   255k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   255k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   255k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   255k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 255k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   255k|        return rd.read_specs(subr, specs, value, loc);
  218|   255k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   340k|    {
  223|   340k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   340k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   340k|                          basic_contiguous_scan_context<char_type>>) {
  227|   340k|            auto rd = make_reader<T, char_type>();
  228|   340k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 340k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   340k|            return impl(rd, range, value);
  233|   340k|        }
  234|   340k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   340k|            auto rd = make_reader<T, char_type>();
  236|   340k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   340k|                return unexpected(e);
  238|   340k|            }
  239|       |
  240|   340k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   340k|                return impl(rd, range, value);
  242|   340k|            }
  243|       |
  244|   340k|            auto crange = get_as_contiguous(range);
  245|   340k|            SCN_TRY(it, impl(rd, crange, value));
  246|   340k|            return ranges_polyfill::batch_next(
  247|   340k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   340k|        }
  249|   340k|        else {
  250|   340k|            SCN_EXPECT(false);
  251|   340k|            SCN_UNREACHABLE;
  252|   340k|        }
  253|   340k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   340k|    {
  205|   340k|        SCN_TRY(it,
  ------------------
  |  |   71|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.47k, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.47k|    }                                                  \
  |  |  |  |   70|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   335k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   335k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   335k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   335k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 335k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   335k|        return rd.read_specs(subr, specs, value, loc);
  218|   335k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   347k|    {
  223|   347k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   347k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   347k|                          basic_contiguous_scan_context<char_type>>) {
  227|   347k|            auto rd = make_reader<T, char_type>();
  228|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   347k|            return impl(rd, range, value);
  233|   347k|        }
  234|   347k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   347k|            auto rd = make_reader<T, char_type>();
  236|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   347k|                return unexpected(e);
  238|   347k|            }
  239|       |
  240|   347k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   347k|                return impl(rd, range, value);
  242|   347k|            }
  243|       |
  244|   347k|            auto crange = get_as_contiguous(range);
  245|   347k|            SCN_TRY(it, impl(rd, crange, value));
  246|   347k|            return ranges_polyfill::batch_next(
  247|   347k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   347k|        }
  249|   347k|        else {
  250|   347k|            SCN_EXPECT(false);
  251|   347k|            SCN_UNREACHABLE;
  252|   347k|        }
  253|   347k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   347k|    {
  205|   347k|        SCN_TRY(it,
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.87k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   342k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   342k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   342k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   342k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 342k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   342k|        return rd.read_specs(subr, specs, value, loc);
  218|   342k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   252k|    {
  223|   252k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   252k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   252k|                          basic_contiguous_scan_context<char_type>>) {
  227|   252k|            auto rd = make_reader<T, char_type>();
  228|   252k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   252k|            return impl(rd, range, value);
  233|   252k|        }
  234|   252k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   252k|            auto rd = make_reader<T, char_type>();
  236|   252k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   252k|                return unexpected(e);
  238|   252k|            }
  239|       |
  240|   252k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   252k|                return impl(rd, range, value);
  242|   252k|            }
  243|       |
  244|   252k|            auto crange = get_as_contiguous(range);
  245|   252k|            SCN_TRY(it, impl(rd, crange, value));
  246|   252k|            return ranges_polyfill::batch_next(
  247|   252k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   252k|        }
  249|   252k|        else {
  250|   252k|            SCN_EXPECT(false);
  251|   252k|            SCN_UNREACHABLE;
  252|   252k|        }
  253|   252k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   252k|    {
  205|   252k|        SCN_TRY(it,
  ------------------
  |  |   71|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.35k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.35k|    }                                                  \
  |  |  |  |   70|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   249k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   249k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   249k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   249k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 249k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   249k|        return rd.read_specs(subr, specs, value, loc);
  218|   249k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   297k|    {
  223|   297k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   297k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   297k|                          basic_contiguous_scan_context<char_type>>) {
  227|   297k|            auto rd = make_reader<T, char_type>();
  228|   297k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   297k|            return impl(rd, range, value);
  233|   297k|        }
  234|   297k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   297k|            auto rd = make_reader<T, char_type>();
  236|   297k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   297k|                return unexpected(e);
  238|   297k|            }
  239|       |
  240|   297k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   297k|                return impl(rd, range, value);
  242|   297k|            }
  243|       |
  244|   297k|            auto crange = get_as_contiguous(range);
  245|   297k|            SCN_TRY(it, impl(rd, crange, value));
  246|   297k|            return ranges_polyfill::batch_next(
  247|   297k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   297k|        }
  249|   297k|        else {
  250|   297k|            SCN_EXPECT(false);
  251|   297k|            SCN_UNREACHABLE;
  252|   297k|        }
  253|   297k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   297k|    {
  205|   297k|        SCN_TRY(it,
  ------------------
  |  |   71|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.14k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   294k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   294k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   294k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   294k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 294k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   294k|        return rd.read_specs(subr, specs, value, loc);
  218|   294k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   300k|    {
  223|   300k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   300k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   300k|                          basic_contiguous_scan_context<char_type>>) {
  227|   300k|            auto rd = make_reader<T, char_type>();
  228|   300k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   300k|            return impl(rd, range, value);
  233|   300k|        }
  234|   300k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   300k|            auto rd = make_reader<T, char_type>();
  236|   300k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   300k|                return unexpected(e);
  238|   300k|            }
  239|       |
  240|   300k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   300k|                return impl(rd, range, value);
  242|   300k|            }
  243|       |
  244|   300k|            auto crange = get_as_contiguous(range);
  245|   300k|            SCN_TRY(it, impl(rd, crange, value));
  246|   300k|            return ranges_polyfill::batch_next(
  247|   300k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   300k|        }
  249|   300k|        else {
  250|   300k|            SCN_EXPECT(false);
  251|   300k|            SCN_UNREACHABLE;
  252|   300k|        }
  253|   300k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   300k|    {
  205|   300k|        SCN_TRY(it,
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.34k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.34k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   297k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   297k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   297k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   297k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 297k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   297k|        return rd.read_specs(subr, specs, value, loc);
  218|   297k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   308k|{
   43|   308k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   308k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 308k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   308k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   308k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  41.1k|    {
  223|  41.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  41.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  41.1k|            auto rd = make_reader<T, char_type>();
  228|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  41.1k|                return unexpected(e);
  230|  41.1k|            }
  231|       |
  232|  41.1k|            return impl(rd, range, value);
  233|  41.1k|        }
  234|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  41.1k|            auto rd = make_reader<T, char_type>();
  236|  41.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  41.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 41.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  41.1k|                return impl(rd, range, value);
  242|  41.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  41.1k|        else {
  250|  41.1k|            SCN_EXPECT(false);
  251|  41.1k|            SCN_UNREACHABLE;
  252|  41.1k|        }
  253|  41.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  41.1k|    {
  205|  41.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  41.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 41.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  41.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  41.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  41.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  41.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  41.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 41.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  41.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  41.1k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   334k|{
  110|   334k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   334k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   285k|{
  263|   285k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|   285k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   285k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.50k, False: 280k]
  |  |  ------------------
  ------------------
  267|  4.50k|        return {get_start_of_next_code_point(input),
  268|  4.50k|                detail::invalid_code_point};
  269|  4.50k|    }
  270|   280k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  157|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 173k, False: 107k]
  |  |  ------------------
  ------------------
  271|   173k|        return {input.end(), detail::invalid_code_point};
  272|   173k|    }
  273|       |
  274|   107k|    constexpr auto enc = get_encoding<CharT>();
  275|   107k|    std::size_t result{1};
  276|   107k|    char32_t output{};
  277|   107k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   107k|        result = simdutf::convert_utf8_to_utf32(
  279|   107k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   107k|    }
  281|   107k|    else if constexpr (enc == encoding::utf16) {
  282|   107k|        result = simdutf::convert_utf16_to_utf32(
  283|   107k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   107k|    }
  285|   107k|    else if constexpr (enc == encoding::utf32) {
  286|   107k|        SCN_EXPECT(len == 1);
  287|   107k|        output = static_cast<char32_t>(input[0]);
  288|   107k|    }
  289|       |
  290|   107k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  157|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.64k, False: 103k]
  |  |  ------------------
  ------------------
  291|  3.64k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  3.64k|                detail::invalid_code_point};
  293|  3.64k|    }
  294|       |
  295|   103k|    return {input.begin() + len, output};
  296|   107k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  8.15k|{
  248|  8.15k|    auto it = input.begin();
  249|  52.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 49.6k, False: 2.36k]
  ------------------
  250|  49.6k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 5.79k, False: 43.8k]
  ------------------
  251|  5.79k|            break;
  252|  5.79k|        }
  253|  49.6k|    }
  254|       |
  255|  8.15k|    return it;
  256|  8.15k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  36.2M|{
  110|  36.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  36.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  2.77M|{
  449|  2.77M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 2.77M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  2.77M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  2.77M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  246|  2.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|  2.77M|        std::memcpy(output.data(), input.data(),
  456|  2.77M|                    input.size() * sizeof(SourceCharT));
  457|  2.77M|        return input.size();
  458|  2.77M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  5.41M|{
   29|       |    // Pattern_White_Space property
   30|  5.41M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 5.40M, False: 14.4k]
  |  Branch (30:27): [True: 2.34M, False: 3.05M]
  ------------------
   31|  5.41M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 35.6k, False: 3.03M]
  ------------------
   32|  5.41M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 9.23k, False: 3.02M]
  ------------------
   33|  5.41M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.45k, False: 3.02M]
  ------------------
   34|  5.41M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 22.8k, False: 2.99M]
  ------------------
   35|  5.41M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.44k, False: 2.99M]
  ------------------
   36|  5.41M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 2.99M]
  ------------------
   37|  5.41M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  5.17M|{
   58|  5.17M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  5.17M|        static_cast<unsigned char>(ch))];
   60|  5.17M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  2.81M|{
   92|  2.81M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  2.81M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.96M|    {
   57|  1.96M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  5.62M|    {
   61|  5.62M|        return m_current;
   62|  5.62M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.65M|    {
   66|  3.65M|        return m_range.end();
   67|  3.65M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.75M|    {
   81|  1.75M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.75M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.75M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.75M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.75M|        }
   87|  1.75M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.75M|    static_cast<    \
  |  |  251|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.75M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.89M|    {
   71|  1.89M|        return ranges::subrange{begin(), end()};
   72|  1.89M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.92M|    {
   57|  1.92M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  5.26M|    {
   61|  5.26M|        return m_current;
   62|  5.26M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  3.34M|    {
   66|  3.34M|        return m_range.end();
   67|  3.34M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.55M|    {
   81|  1.55M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.55M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.55M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.55M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.55M|        }
   87|  1.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.55M|    static_cast<    \
  |  |  251|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.55M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.79M|    {
   71|  1.79M|        return ranges::subrange{begin(), end()};
   72|  1.79M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   298k|    {
  205|   298k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   298k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   149k|    {
  196|   149k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   149k|              cvref<T> obj = *get<T>(fn);
  187|   149k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   149k|                  obj(static_cast<decltype(args)>(args)...);
  189|   149k|              }
  190|   149k|              else {
  191|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   149k|              }
  193|   149k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   149k|    {
  126|   149k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   149k|            return static_cast<T*>(s.m_cp);
  128|   149k|        }
  129|   149k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   149k|            return static_cast<T*>(s.m_p);
  131|   149k|        }
  132|   149k|        else {
  133|   149k|            return reinterpret_cast<T*>(s.m_fp);
  134|   149k|        }
  135|   149k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   149k|        {
  104|   149k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  10.2M|    {
  205|  10.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  10.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  10.2M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.76M|    {
  196|  2.76M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  5.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.13M|              cvref<T> obj = *get<T>(fn);
  187|  5.13M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.13M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.13M|              }
  190|  5.13M|              else {
  191|  5.13M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.13M|              }
  193|  5.13M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  5.13M|    {
  126|  5.13M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.13M|            return static_cast<T*>(s.m_cp);
  128|  5.13M|        }
  129|  5.13M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.13M|            return static_cast<T*>(s.m_p);
  131|  5.13M|        }
  132|  5.13M|        else {
  133|  5.13M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.13M|        }
  135|  5.13M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.76M|        {
  104|  2.76M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   149k|    {
  196|   149k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   149k|              cvref<T> obj = *get<T>(fn);
  187|   149k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   149k|                  obj(static_cast<decltype(args)>(args)...);
  189|   149k|              }
  190|   149k|              else {
  191|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   149k|              }
  193|   149k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   149k|    {
  126|   149k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   149k|            return static_cast<T*>(s.m_cp);
  128|   149k|        }
  129|   149k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   149k|            return static_cast<T*>(s.m_p);
  131|   149k|        }
  132|   149k|        else {
  133|   149k|            return reinterpret_cast<T*>(s.m_fp);
  134|   149k|        }
  135|   149k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   149k|        {
  104|   149k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.45M|    {
  196|  2.45M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  4.82M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.82M|              cvref<T> obj = *get<T>(fn);
  187|  4.82M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.82M|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.82M|              }
  190|  4.82M|              else {
  191|  4.82M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.82M|              }
  193|  4.82M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  4.82M|    {
  126|  4.82M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.82M|            return static_cast<T*>(s.m_cp);
  128|  4.82M|        }
  129|  4.82M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  4.82M|            return static_cast<T*>(s.m_p);
  131|  4.82M|        }
  132|  4.82M|        else {
  133|  4.82M|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.82M|        }
  135|  4.82M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.45M|        {
  104|  2.45M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|   535k|    {
  205|   535k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   535k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   535k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   267k|    {
  196|   267k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   267k|              cvref<T> obj = *get<T>(fn);
  187|   267k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   267k|                  obj(static_cast<decltype(args)>(args)...);
  189|   267k|              }
  190|   267k|              else {
  191|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   267k|              }
  193|   267k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   267k|    {
  126|   267k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   267k|            return static_cast<T*>(s.m_cp);
  128|   267k|        }
  129|   267k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   267k|            return static_cast<T*>(s.m_p);
  131|   267k|        }
  132|   267k|        else {
  133|   267k|            return reinterpret_cast<T*>(s.m_fp);
  134|   267k|        }
  135|   267k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   267k|        {
  104|   267k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   308k|    {
  196|   308k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   308k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   308k|              cvref<T> obj = *get<T>(fn);
  187|   308k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   308k|                  obj(static_cast<decltype(args)>(args)...);
  189|   308k|              }
  190|   308k|              else {
  191|   308k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   308k|              }
  193|   308k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   308k|    {
  126|   308k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   308k|            return static_cast<T*>(s.m_cp);
  128|   308k|        }
  129|   308k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   308k|            return static_cast<T*>(s.m_p);
  131|   308k|        }
  132|   308k|        else {
  133|   308k|            return reinterpret_cast<T*>(s.m_fp);
  134|   308k|        }
  135|   308k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   308k|        {
  104|   308k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   267k|    {
  196|   267k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   267k|              cvref<T> obj = *get<T>(fn);
  187|   267k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   267k|                  obj(static_cast<decltype(args)>(args)...);
  189|   267k|              }
  190|   267k|              else {
  191|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   267k|              }
  193|   267k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   267k|    {
  126|   267k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   267k|            return static_cast<T*>(s.m_cp);
  128|   267k|        }
  129|   267k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   267k|            return static_cast<T*>(s.m_p);
  131|   267k|        }
  132|   267k|        else {
  133|   267k|            return reinterpret_cast<T*>(s.m_fp);
  134|   267k|        }
  135|   267k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   267k|        {
  104|   267k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  54.0k|{
   44|  54.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|  54.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  54.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|  54.0k|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  54.0k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  23.7M|{
   30|  23.7M|    return e != eof_error::good;
   31|  23.7M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   169k|{
   91|   169k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|   169k|    return parse_error::eof;
   93|   169k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  6.06M|    {
   69|  6.06M|        return a.m_code == b.m_code;
   70|  6.06M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  27.4M|    {
   55|  27.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  27.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  27.4M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   416k|    return [code, msg](parse_error err) {
  115|   416k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   416k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   416k|{
  100|   416k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 416k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   416k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 416k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   416k|    return scan_error{code, msg};
  109|   416k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   416k|{
  114|   416k|    return [code, msg](parse_error err) {
  115|   416k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   416k|    };
  117|   416k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.22M|{
  587|  1.22M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.22M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   114k|{
  595|   114k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   114k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|   114k|    else {
  600|   114k|        source.sync_all();
  601|   114k|    }
  602|   114k|    return n;
  603|   114k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.18M|{
  611|  1.18M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.18M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   205k|{
  619|   205k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   205k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   205k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 205k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   205k|    else {
  624|   205k|        source.sync_all();
  625|   205k|    }
  626|   205k|    return n;
  627|   205k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.22M|{
  544|  1.22M|    return vscan_internal(source, format, args);
  545|  1.22M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   114k|{
  550|   114k|    auto n = vscan_internal(source, format, args);
  551|   114k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|   114k|    else {
  555|   114k|        source.sync_all();
  556|   114k|    }
  557|   114k|    return n;
  558|   114k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.18M|{
  564|  1.18M|    return vscan_internal(source, format, args);
  565|  1.18M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   205k|{
  570|   205k|    auto n = vscan_internal(source, format, args);
  571|   205k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   205k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 205k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   205k|    else {
  575|   205k|        source.sync_all();
  576|   205k|    }
  577|   205k|    return n;
  578|   205k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   243k|{
  654|   243k|    return vscan_value_internal(source, arg);
  655|   243k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  11.4k|{
  659|  11.4k|    auto n = vscan_value_internal(source, arg);
  660|  11.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  11.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  11.4k|    else {
  664|  11.4k|        source.sync_all();
  665|  11.4k|    }
  666|  11.4k|    return n;
  667|  11.4k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   225k|{
  673|   225k|    return vscan_value_internal(source, arg);
  674|   225k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  20.5k|{
  679|  20.5k|    auto n = vscan_value_internal(source, arg);
  680|  20.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  20.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 20.5k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  20.5k|    else {
  684|  20.5k|        source.sync_all();
  685|  20.5k|    }
  686|  20.5k|    return n;
  687|  20.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   229k|{
  476|   229k|    const auto argcount = args.size();
  477|   229k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 22.9k, False: 206k]
  |  Branch (477:60): [True: 22.9k, False: 0]
  ------------------
  478|  22.9k|        auto arg = args.get(0);
  479|  22.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  22.9k|    static_cast<    \
  |  |  251|  22.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  22.9k|    }
  481|       |
  482|   206k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 206k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   206k|    SCN_UNLIKELY_ATTR
  490|   206k|    {
  491|   206k|        auto handler = format_handler<false, CharT>{
  492|   206k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   206k|        return vscan_parse_format_string(format, handler);
  494|   206k|    }
  495|   206k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.68M|{
   36|  2.68M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.17M, False: 510k]
  ------------------
   37|  2.17M|        return false;
   38|  2.17M|    }
   39|   510k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 510k, False: 0]
  |  Branch (39:39): [True: 510k, False: 0]
  ------------------
   40|  2.68M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  34.4k|{
   69|  34.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 34.4k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  34.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|  34.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 34.4k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  34.4k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  34.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|  34.4k|    static_cast<    \
  |  |  251|  34.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  34.4k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  34.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.4k|    }                                                  \
  |  |  |  |   70|  34.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  34.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.96M|    {
  314|  1.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  4.46M|    {
  133|  4.46M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  157|  4.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.46M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  4.46M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.96M|    {
  264|  1.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.96M|{
  441|  1.96M|    const auto beg = handler.get_ctx().begin();
  442|  1.96M|    detail::parse_format_string<false>(format, handler);
  443|  1.96M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 206k, False: 1.75M]
  |  |  ------------------
  ------------------
  444|   206k|        return unexpected(handler.error);
  445|   206k|    }
  446|  1.75M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.96M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  13.2M|    {
  425|  13.2M|        return ctx.get();
  426|  13.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  13.2M|    {
  268|  13.2M|        return contiguous_ctx;
  269|  13.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.72M|    {
  318|  3.72M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.72M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.72M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.96M|{
   92|  1.96M|    auto arg = ctx.arg(id);
   93|  1.96M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.96M|    return arg;
   97|  1.96M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  4.46M|    {
  208|  4.46M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  4.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.46M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  4.46M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  157|  4.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.46M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  4.46M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  4.46M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.46M, False: 0]
  |  |  ------------------
  ------------------
  218|  4.46M|            visited_args_lower64 |= (1ull << id);
  219|  4.46M|            return;
  220|  4.46M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  4.46M|    {
  193|  4.46M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  4.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.46M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  4.46M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  4.46M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.46M, False: 0]
  |  |  ------------------
  ------------------
  199|  4.46M|            return (visited_args_lower64 >> id) & 1ull;
  200|  4.46M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  4.46M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   769k|    {
  177|   769k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  157|   769k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 769k, False: 0]
  |  |  ------------------
  ------------------
  178|   769k|            error = err;
  179|   769k|        }
  180|   769k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.96M|    {
  347|  1.96M|        return parse_ctx.next_arg_id();
  348|  1.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.96M|    {
  388|  1.96M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.96M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.96M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.96M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.96M|        auto specs = detail::format_specs{};
  401|  1.96M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.96M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.96M|            arg.type()};
  404|       |
  405|  1.96M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.96M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.96M]
  |  Branch (406:29): [True: 45.9k, False: 1.91M]
  ------------------
  407|  45.9k|            SCN_UNLIKELY_ATTR
  408|  45.9k|            on_error("Missing '}' in format string");
  409|  45.9k|            return parse_ctx.begin();
  410|  45.9k|        }
  411|  1.91M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 22.9k, False: 1.89M]
  |  |  ------------------
  ------------------
  412|  22.9k|            return parse_ctx.begin();
  413|  22.9k|        }
  414|  1.89M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.89M|        on_visit_scan_arg(
  417|  1.89M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.89M|                                           get_ctx().locale()},
  419|  1.89M|            arg);
  420|  1.89M|        return parse_ctx.begin();
  421|  1.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.96M|    {
  112|  1.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.89M|    {
  359|  1.89M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.89M]
  |  Branch (359:23): [True: 0, False: 1.89M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.89M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.89M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 137k, False: 1.75M]
  |  |  ------------------
  ------------------
  366|   137k|            on_error(r.error());
  367|   137k|        }
  368|  1.75M|        else {
  369|  1.75M|            get_ctx().advance_to(*r);
  370|  1.75M|        }
  371|  1.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   641k|    {
  172|   641k|        SCN_UNLIKELY_ATTR
  173|   641k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   641k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  4.46M|    {
  140|  4.46M|        {
  141|  4.46M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 4.46M]
  ------------------
  142|  4.46M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 4.46M]
  ------------------
  143|  4.46M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  4.46M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  4.46M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 4.46M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  4.46M|        }
  150|       |
  151|  4.46M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 4.46M, False: 0]
  ------------------
  152|  4.46M|            return;
  153|  4.46M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  4.46M|    {
  188|  4.46M|        return error;
  189|  4.46M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  13.0M|    {
  184|  13.0M|        return static_cast<bool>(error);
  185|  13.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   206k|    {
  314|   206k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   206k|    {
  241|   206k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   206k|{
  441|   206k|    const auto beg = handler.get_ctx().begin();
  442|   206k|    detail::parse_format_string<false>(format, handler);
  443|   206k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 206k, False: 0]
  |  |  ------------------
  ------------------
  444|   206k|        return unexpected(handler.error);
  445|   206k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   206k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   895k|    {
  425|   895k|        return ctx.get();
  426|   895k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   895k|    {
  245|   895k|        return ctx;
  246|   895k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   206k|    {
  318|   206k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 206k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   206k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   206k|{
   92|   206k|    auto arg = ctx.arg(id);
   93|   206k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   206k|    return arg;
   97|   206k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   206k|    {
  347|   206k|        return parse_ctx.next_arg_id();
  348|   206k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   206k|    {
  388|   206k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   206k|        set_arg_as_visited(arg_id);
  390|       |
  391|   206k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 206k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   206k|        auto specs = detail::format_specs{};
  401|   206k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   206k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   206k|            arg.type()};
  404|       |
  405|   206k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   206k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 206k]
  |  Branch (406:29): [True: 45.9k, False: 160k]
  ------------------
  407|  45.9k|            SCN_UNLIKELY_ATTR
  408|  45.9k|            on_error("Missing '}' in format string");
  409|  45.9k|            return parse_ctx.begin();
  410|  45.9k|        }
  411|   160k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 22.9k, False: 137k]
  |  |  ------------------
  ------------------
  412|  22.9k|            return parse_ctx.begin();
  413|  22.9k|        }
  414|   137k|        parse_ctx.advance_to(begin);
  415|       |
  416|   137k|        on_visit_scan_arg(
  417|   137k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   137k|                                           get_ctx().locale()},
  419|   137k|            arg);
  420|   137k|        return parse_ctx.begin();
  421|   160k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   206k|    {
  112|   206k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   137k|    {
  359|   137k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 137k]
  |  Branch (359:23): [True: 0, False: 137k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   137k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   137k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 137k, False: 0]
  |  |  ------------------
  ------------------
  366|   137k|            on_error(r.error());
  367|   137k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   137k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.45M|{
  456|  2.45M|    const auto argcount = args.size();
  457|  2.45M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 487k, False: 1.96M]
  |  Branch (457:60): [True: 487k, False: 0]
  ------------------
  458|   487k|        auto arg = args.get(0);
  459|   487k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   487k|    static_cast<    \
  |  |  251|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   487k|    }
  461|       |
  462|  1.96M|    auto handler = format_handler<true, CharT>{
  463|  1.96M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.96M|                                       source.data() + source.size()},
  465|  1.96M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.96M|    static_cast<    \
  |  |  251|  1.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.96M|    static_cast<    \
  |  |  251|  1.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.96M|    return vscan_parse_format_string(format, handler);
  467|  2.45M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   730k|{
   49|   730k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 730k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   730k|    auto reader =
   55|   730k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   730k|            ranges::subrange<const CharT*>{source.data(),
   57|   730k|                                           source.data() + source.size()},
   58|   730k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   730k|    static_cast<    \
  |  |  251|   730k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   730k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   730k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   730k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   730k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.4k, False: 696k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.4k|    }                                                  \
  |  |  |  |   70|   730k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   696k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   696k|    return ranges::distance(source.data(), it);
   61|   730k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.37M|{
  456|  2.37M|    const auto argcount = args.size();
  457|  2.37M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 451k, False: 1.92M]
  |  Branch (457:60): [True: 451k, False: 0]
  ------------------
  458|   451k|        auto arg = args.get(0);
  459|   451k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   451k|    static_cast<    \
  |  |  251|   451k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   451k|    }
  461|       |
  462|  1.92M|    auto handler = format_handler<true, CharT>{
  463|  1.92M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.92M|                                       source.data() + source.size()},
  465|  1.92M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.92M|    static_cast<    \
  |  |  251|  1.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.92M|    static_cast<    \
  |  |  251|  1.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.92M|    return vscan_parse_format_string(format, handler);
  467|  2.37M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.78M|{
   36|  2.78M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.29M, False: 492k]
  ------------------
   37|  2.29M|        return false;
   38|  2.29M|    }
   39|   492k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 492k, False: 0]
  |  Branch (39:39): [True: 492k, False: 0]
  ------------------
   40|  2.78M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   677k|{
   49|   677k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 677k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   677k|    auto reader =
   55|   677k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   677k|            ranges::subrange<const CharT*>{source.data(),
   57|   677k|                                           source.data() + source.size()},
   58|   677k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   677k|    static_cast<    \
  |  |  251|   677k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   677k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   677k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   677k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   677k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 61.7k, False: 615k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.7k|    }                                                  \
  |  |  |  |   70|   677k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   615k|    return ranges::distance(source.data(), it);
   61|   677k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.92M|    {
  314|  1.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.92M|    {
  264|  1.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.92M|{
  441|  1.92M|    const auto beg = handler.get_ctx().begin();
  442|  1.92M|    detail::parse_format_string<false>(format, handler);
  443|  1.92M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 370k, False: 1.55M]
  |  |  ------------------
  ------------------
  444|   370k|        return unexpected(handler.error);
  445|   370k|    }
  446|  1.55M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.92M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  12.4M|    {
  425|  12.4M|        return ctx.get();
  426|  12.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  12.4M|    {
  268|  12.4M|        return contiguous_ctx;
  269|  12.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  3.47M|    {
  318|  3.47M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.47M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.47M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.92M|{
   92|  1.92M|    auto arg = ctx.arg(id);
   93|  1.92M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.92M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.92M|    return arg;
   97|  1.92M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.92M|    {
  347|  1.92M|        return parse_ctx.next_arg_id();
  348|  1.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.92M|    {
  388|  1.92M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.92M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.92M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.92M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.92M|        auto specs = detail::format_specs{};
  401|  1.92M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.92M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.92M|            arg.type()};
  404|       |
  405|  1.92M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.92M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.92M]
  |  Branch (406:29): [True: 82.3k, False: 1.83M]
  ------------------
  407|  82.3k|            SCN_UNLIKELY_ATTR
  408|  82.3k|            on_error("Missing '}' in format string");
  409|  82.3k|            return parse_ctx.begin();
  410|  82.3k|        }
  411|  1.83M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 41.1k, False: 1.79M]
  |  |  ------------------
  ------------------
  412|  41.1k|            return parse_ctx.begin();
  413|  41.1k|        }
  414|  1.79M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.79M|        on_visit_scan_arg(
  417|  1.79M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.79M|                                           get_ctx().locale()},
  419|  1.79M|            arg);
  420|  1.79M|        return parse_ctx.begin();
  421|  1.83M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.92M|    {
  112|  1.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.79M|    {
  359|  1.79M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.79M]
  |  Branch (359:23): [True: 0, False: 1.79M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.79M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.79M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 247k, False: 1.55M]
  |  |  ------------------
  ------------------
  366|   247k|            on_error(r.error());
  367|   247k|        }
  368|  1.55M|        else {
  369|  1.55M|            get_ctx().advance_to(*r);
  370|  1.55M|        }
  371|  1.79M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   411k|{
  476|   411k|    const auto argcount = args.size();
  477|   411k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 41.1k, False: 370k]
  |  Branch (477:60): [True: 41.1k, False: 0]
  ------------------
  478|  41.1k|        auto arg = args.get(0);
  479|  41.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  41.1k|    static_cast<    \
  |  |  251|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  41.1k|    }
  481|       |
  482|   370k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 370k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   370k|    SCN_UNLIKELY_ATTR
  490|   370k|    {
  491|   370k|        auto handler = format_handler<false, CharT>{
  492|   370k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   370k|    static_cast<    \
  |  |  251|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   370k|    static_cast<    \
  |  |  251|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   370k|        return vscan_parse_format_string(format, handler);
  494|   370k|    }
  495|   370k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  61.7k|{
   69|  61.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 61.7k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  61.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|  61.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 61.7k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  61.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  61.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|  61.7k|    static_cast<    \
  |  |  251|  61.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  61.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  61.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 61.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.7k|    }                                                  \
  |  |  |  |   70|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  61.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   370k|    {
  314|   370k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   370k|    {
  241|   370k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   370k|{
  441|   370k|    const auto beg = handler.get_ctx().begin();
  442|   370k|    detail::parse_format_string<false>(format, handler);
  443|   370k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 370k, False: 0]
  |  |  ------------------
  ------------------
  444|   370k|        return unexpected(handler.error);
  445|   370k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   370k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.60M|    {
  425|  1.60M|        return ctx.get();
  426|  1.60M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.60M|    {
  245|  1.60M|        return ctx;
  246|  1.60M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   370k|    {
  318|   370k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 370k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   370k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   370k|{
   92|   370k|    auto arg = ctx.arg(id);
   93|   370k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   370k|    return arg;
   97|   370k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   370k|    {
  347|   370k|        return parse_ctx.next_arg_id();
  348|   370k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   370k|    {
  388|   370k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   370k|        set_arg_as_visited(arg_id);
  390|       |
  391|   370k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 370k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   370k|        auto specs = detail::format_specs{};
  401|   370k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   370k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   370k|            arg.type()};
  404|       |
  405|   370k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   370k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 370k]
  |  Branch (406:29): [True: 82.3k, False: 288k]
  ------------------
  407|  82.3k|            SCN_UNLIKELY_ATTR
  408|  82.3k|            on_error("Missing '}' in format string");
  409|  82.3k|            return parse_ctx.begin();
  410|  82.3k|        }
  411|   288k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 41.1k, False: 247k]
  |  |  ------------------
  ------------------
  412|  41.1k|            return parse_ctx.begin();
  413|  41.1k|        }
  414|   247k|        parse_ctx.advance_to(begin);
  415|       |
  416|   247k|        on_visit_scan_arg(
  417|   247k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   247k|                                           get_ctx().locale()},
  419|   247k|            arg);
  420|   247k|        return parse_ctx.begin();
  421|   288k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   370k|    {
  112|   370k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   247k|    {
  359|   247k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 247k]
  |  Branch (359:23): [True: 0, False: 247k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   247k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   247k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 247k, False: 0]
  |  |  ------------------
  ------------------
  366|   247k|            on_error(r.error());
  367|   247k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   247k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   243k|{
  502|   243k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   243k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  11.4k|{
  502|  11.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  11.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   225k|{
  502|   225k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   225k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  20.5k|{
  502|  20.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  20.5k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  1.91k|{
   52|  1.91k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  246|  1.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.91k|    string_buffer.resize(data.size());
   56|  1.91k|    std::copy(data.begin(), data.end(),
   57|  1.91k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.91k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.91k|    const auto wsv_reinterpret_size =
   62|  1.91k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 126, False: 1.78k]
  ------------------
   63|  1.91k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.91k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  1.91k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.91k|    std::wstring_view wsv_transcoded;
   69|  1.91k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.51k, False: 395]
  ------------------
   70|  1.51k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.51k|        else {
   79|  1.51k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.51k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.51k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.51k|                sv.data(), sv.size(),
   83|  1.51k|                reinterpret_cast<char32_t*>(
   84|  1.51k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.51k|        }
   86|  1.51k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.51k|    }
   88|       |
   89|  1.91k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  1.91k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.91k|{
  140|  1.91k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.91k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.91k|    buf.resize(sizeof...(Args));
  143|  1.91k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.91k|    return {buf.data(), buf.size()};
  145|  1.91k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  1.91k|{
  126|  1.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.91k|        return format_string_view_buffer;
  128|  1.91k|    }
  129|  1.91k|    else {
  130|  1.91k|        return wformat_string_view_buffer;
  131|  1.91k|    }
  132|  1.91k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  1.91k|{
  200|  1.91k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  1.91k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  1.91k|                                   format_strings);
  203|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   178k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   178k|            auto result = scn::scan<T>(
  156|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   178k|                scn::runtime_format(f));
  158|   178k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 159k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   159k|            it = result->begin();
  162|   159k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   178k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   178k|            auto result = scn::scan<T>(
  170|   178k|                global_locale,
  171|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   178k|                scn::runtime_format(f));
  173|   178k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 159k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   159k|            it = result->begin();
  177|   159k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  37.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  37.4k|            auto result = scn::scan_value<T>(
  185|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  37.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 35.5k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  35.5k|            it = result->begin();
  190|  35.5k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   170k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   170k|            auto result = scn::scan<T>(
  156|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   170k|                scn::runtime_format(f));
  158|   170k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 150k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   150k|            it = result->begin();
  162|   150k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   170k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   170k|            auto result = scn::scan<T>(
  170|   170k|                global_locale,
  171|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   170k|                scn::runtime_format(f));
  173|   170k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 150k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   150k|            it = result->begin();
  177|   150k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  33.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  33.7k|            auto result = scn::scan_value<T>(
  185|  33.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  33.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 31.8k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  31.8k|            it = result->begin();
  190|  31.8k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   235k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   235k|            auto result = scn::scan<T>(
  156|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   235k|                scn::runtime_format(f));
  158|   235k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 216k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   216k|            it = result->begin();
  162|   216k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   235k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   235k|            auto result = scn::scan<T>(
  170|   235k|                global_locale,
  171|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   235k|                scn::runtime_format(f));
  173|   235k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 216k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   216k|            it = result->begin();
  177|   216k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  46.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  46.2k|            auto result = scn::scan_value<T>(
  185|  46.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  46.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 44.3k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  44.3k|            it = result->begin();
  190|  44.3k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   199k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   199k|            auto result = scn::scan<T>(
  156|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   199k|                scn::runtime_format(f));
  158|   199k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 180k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   180k|            it = result->begin();
  162|   180k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   199k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   199k|            auto result = scn::scan<T>(
  170|   199k|                global_locale,
  171|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   199k|                scn::runtime_format(f));
  173|   199k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 180k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   180k|            it = result->begin();
  177|   180k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  39.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  39.2k|            auto result = scn::scan_value<T>(
  185|  39.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  39.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 37.3k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  37.3k|            it = result->begin();
  190|  37.3k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   241k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   241k|            auto result = scn::scan<T>(
  156|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   241k|                scn::runtime_format(f));
  158|   241k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 221k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   221k|            it = result->begin();
  162|   221k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   241k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   241k|            auto result = scn::scan<T>(
  170|   241k|                global_locale,
  171|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   241k|                scn::runtime_format(f));
  173|   241k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 221k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   221k|            it = result->begin();
  177|   221k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  47.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  47.3k|            auto result = scn::scan_value<T>(
  185|  47.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  47.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 45.3k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  45.3k|            it = result->begin();
  190|  45.3k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|   201k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   201k|            auto result = scn::scan<T>(
  156|   201k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   201k|                scn::runtime_format(f));
  158|   201k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 182k]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|   182k|            it = result->begin();
  162|   182k|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|   201k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   201k|            auto result = scn::scan<T>(
  170|   201k|                global_locale,
  171|   201k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   201k|                scn::runtime_format(f));
  173|   201k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 182k]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|   182k|            it = result->begin();
  177|   182k|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  39.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  39.5k|            auto result = scn::scan_value<T>(
  185|  39.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  39.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 37.6k]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|  37.6k|            it = result->begin();
  190|  37.6k|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.91k|{
  151|       |    // Regular scan
  152|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.1k, False: 1.91k]
  ------------------
  153|  19.1k|        auto it = scn::ranges::begin(source);
  154|  19.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.1k|            auto result = scn::scan<T>(
  156|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.1k|                scn::runtime_format(f));
  158|  19.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.1k, False: 0]
  ------------------
  159|  19.1k|                break;
  160|  19.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  19.1k|    }
  164|       |
  165|       |    // scan localized
  166|  19.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.1k, False: 1.91k]
  ------------------
  167|  19.1k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            auto result = scn::scan<T>(
  170|  19.1k|                global_locale,
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.1k|                scn::runtime_format(f));
  173|  19.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.1k, False: 0]
  ------------------
  174|  19.1k|                break;
  175|  19.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  19.1k|    }
  179|       |
  180|       |    // scan_value
  181|  1.91k|    {
  182|  1.91k|        auto it = scn::ranges::begin(source);
  183|  1.91k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.91k|            auto result = scn::scan_value<T>(
  185|  1.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.91k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.91k, False: 0]
  ------------------
  187|  1.91k|                break;
  188|  1.91k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.91k|    }
  192|  1.91k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  1.91k|{
  109|  1.91k|    using char_type = ranges::range_value_t<Source>;
  110|  1.91k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  1.91k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  1.91k|              std::back_inserter(deque));
  113|  1.91k|    return deque;
  114|  1.91k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  1.91k|{
   98|  1.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  1.91k|        return noncontiguous_buffer;
  100|  1.91k|    }
  101|  1.91k|    else {
  102|  1.91k|        return wnoncontiguous_buffer;
  103|  1.91k|    }
  104|  1.91k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.91k|{
  140|  1.91k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.91k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.91k|    buf.resize(sizeof...(Args));
  143|  1.91k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.91k|    return {buf.data(), buf.size()};
  145|  1.91k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  1.91k|{
  126|  1.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.91k|        return format_string_view_buffer;
  128|  1.91k|    }
  129|  1.91k|    else {
  130|  1.91k|        return wformat_string_view_buffer;
  131|  1.91k|    }
  132|  1.91k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.43k|{
  200|  3.43k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.43k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.43k|                                   format_strings);
  203|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   174k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   174k|            auto result = scn::scan<T>(
  156|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   174k|                scn::runtime_format(f));
  158|   174k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 140k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   140k|            it = result->begin();
  162|   140k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   174k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   174k|            auto result = scn::scan<T>(
  170|   174k|                global_locale,
  171|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   174k|                scn::runtime_format(f));
  173|   174k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 140k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   140k|            it = result->begin();
  177|   140k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  34.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  34.8k|            auto result = scn::scan_value<T>(
  185|  34.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  34.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 31.4k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  31.4k|            it = result->begin();
  190|  31.4k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   168k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   168k|            auto result = scn::scan<T>(
  156|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   168k|                scn::runtime_format(f));
  158|   168k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 133k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   133k|            it = result->begin();
  162|   133k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   168k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   168k|            auto result = scn::scan<T>(
  170|   168k|                global_locale,
  171|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   168k|                scn::runtime_format(f));
  173|   168k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 133k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   133k|            it = result->begin();
  177|   133k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  31.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  31.6k|            auto result = scn::scan_value<T>(
  185|  31.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  31.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 28.2k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  28.2k|            it = result->begin();
  190|  28.2k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   222k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   222k|            auto result = scn::scan<T>(
  156|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   222k|                scn::runtime_format(f));
  158|   222k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 188k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   188k|            it = result->begin();
  162|   188k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   222k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   222k|            auto result = scn::scan<T>(
  170|   222k|                global_locale,
  171|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   222k|                scn::runtime_format(f));
  173|   222k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 188k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   188k|            it = result->begin();
  177|   188k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  42.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  42.1k|            auto result = scn::scan_value<T>(
  185|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  42.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 38.6k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  38.6k|            it = result->begin();
  190|  38.6k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   196k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   196k|            auto result = scn::scan<T>(
  156|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   196k|                scn::runtime_format(f));
  158|   196k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 161k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   161k|            it = result->begin();
  162|   161k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   196k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   196k|            auto result = scn::scan<T>(
  170|   196k|                global_locale,
  171|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   196k|                scn::runtime_format(f));
  173|   196k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 161k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   161k|            it = result->begin();
  177|   161k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  36.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  36.9k|            auto result = scn::scan_value<T>(
  185|  36.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  36.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 33.5k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  33.5k|            it = result->begin();
  190|  33.5k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   227k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   227k|            auto result = scn::scan<T>(
  156|   227k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   227k|                scn::runtime_format(f));
  158|   227k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 192k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   192k|            it = result->begin();
  162|   192k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   227k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   227k|            auto result = scn::scan<T>(
  170|   227k|                global_locale,
  171|   227k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   227k|                scn::runtime_format(f));
  173|   227k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 192k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   192k|            it = result->begin();
  177|   192k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  42.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  42.9k|            auto result = scn::scan_value<T>(
  185|  42.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  42.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 39.5k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  39.5k|            it = result->begin();
  190|  39.5k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|   198k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   198k|            auto result = scn::scan<T>(
  156|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   198k|                scn::runtime_format(f));
  158|   198k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 163k]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|   163k|            it = result->begin();
  162|   163k|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|   198k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   198k|            auto result = scn::scan<T>(
  170|   198k|                global_locale,
  171|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   198k|                scn::runtime_format(f));
  173|   198k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 163k]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|   163k|            it = result->begin();
  177|   163k|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  37.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  37.2k|            auto result = scn::scan_value<T>(
  185|  37.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  37.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 33.8k]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|  33.8k|            it = result->begin();
  190|  33.8k|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.43k|{
  151|       |    // Regular scan
  152|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.3k, False: 3.43k]
  ------------------
  153|  34.3k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.3k, False: 0]
  ------------------
  159|  34.3k|                break;
  160|  34.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  34.3k|    }
  164|       |
  165|       |    // scan localized
  166|  34.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.3k, False: 3.43k]
  ------------------
  167|  34.3k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.3k, False: 0]
  ------------------
  174|  34.3k|                break;
  175|  34.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  34.3k|    }
  179|       |
  180|       |    // scan_value
  181|  3.43k|    {
  182|  3.43k|        auto it = scn::ranges::begin(source);
  183|  3.43k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.43k|            auto result = scn::scan_value<T>(
  185|  3.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.43k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.43k, False: 0]
  ------------------
  187|  3.43k|                break;
  188|  3.43k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.43k|    }
  192|  3.43k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.43k|{
  109|  3.43k|    using char_type = ranges::range_value_t<Source>;
  110|  3.43k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.43k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.43k|              std::back_inserter(deque));
  113|  3.43k|    return deque;
  114|  3.43k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.43k|{
   98|  3.43k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.43k|        return noncontiguous_buffer;
  100|  3.43k|    }
  101|  3.43k|    else {
  102|  3.43k|        return wnoncontiguous_buffer;
  103|  3.43k|    }
  104|  3.43k|}

LLVMFuzzerTestOneInput:
   59|  1.91k|{
   60|  1.91k|    scn::fuzz::run({data, size});
   61|  1.91k|    return 0;
   62|  1.91k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  1.91k|{
   36|  1.91k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 1.91k]
  |  Branch (36:42): [True: 0, False: 1.91k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  1.91k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  1.91k|    auto f =
   43|  1.91k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  1.91k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  1.91k|    do_basic_run(sv, f);
   46|       |
   47|  1.91k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  1.91k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  1.91k|                                          L"{:'}", L"{:'L}");
   50|  1.91k|    do_basic_run(wsv_reinterpret, wf);
   51|  1.91k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.51k, False: 395]
  ------------------
   52|  1.51k|        do_basic_run(wsv_transcode, wf);
   53|  1.51k|    }
   54|  1.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  1.91k|{
   25|  1.91k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.91k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.91k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.91k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.91k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.91k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  1.91k|{
   25|  1.91k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.91k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.91k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.91k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.91k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.91k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.43k|{
   25|  3.43k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.43k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.43k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.43k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.43k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.43k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.43k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.43k|{
   25|  3.43k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.43k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.43k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.43k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.43k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.43k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.43k|}

