_ZN7simdutf6resultC2ENS_10error_codeEm:
   29|   386k|  simdutf_really_inline result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  1.46M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   388k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   392k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   392k|  return idx < lenminusstep;
   70|   392k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  3.88k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  3.88k|  return &buf[idx];
   75|  3.88k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   392k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   392k|  idx += STEP_SIZE;
   88|   392k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   388k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   388k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 388k]
  ------------------
   80|   388k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   388k|  std::memcpy(dst, buf + idx, len - idx);
   82|   388k|  return len - idx;
   83|   388k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   387k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   387k|    size_t pos = 0;
   12|   387k|    size_t count = 0;
   13|   390k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 3.06k, False: 387k]
  ------------------
   14|  3.06k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  3.06k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  3.06k|      count += count_ones(utf8_continuation_mask);
   17|  3.06k|    }
   18|   387k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   387k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   686k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   493k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   493k|      size_t pos = 0;
  131|   493k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|   493k|      size_t leading_byte = 0;
  139|   493k|      size_t margin = size;
  140|  1.02M|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 529k, False: 493k]
  |  Branch (140:27): [True: 529k, False: 0]
  ------------------
  141|   529k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   529k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   493k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   493k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 493k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   493k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 493k]
  ------------------
  195|   493k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 493k, False: 0]
  ------------------
  196|   493k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   493k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.20k, False: 489k]
  ------------------
  198|   489k|        utf32_output += howmany;
  199|   489k|      }
  200|   489k|      return utf32_output - start;
  201|   493k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   686k|    simdutf_really_inline bool errors() const {
  291|   686k|      return this->error.any_bits_set_anywhere();
  292|   686k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|   193k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|   193k|      size_t pos = 0;
  205|   193k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  211|       |      // to give us a good margin.
  212|   193k|      size_t leading_byte = 0;
  213|   193k|      size_t margin = size;
  214|   386k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (214:13): [True: 193k, False: 193k]
  |  Branch (214:27): [True: 193k, False: 0]
  ------------------
  215|   193k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   193k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|   193k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|   193k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 193k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|   193k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 193k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|   193k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 193k, False: 0]
  ------------------
  279|   193k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|   193k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 193k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|   193k|        } else {    // In case of success, we want the number of word written
  284|   193k|          utf32_output += res.count;
  285|   193k|        }
  286|   193k|      }
  287|   193k|      return result(error_code::SUCCESS, utf32_output - start);
  288|   193k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.47k|    char32_t* utf32_output) noexcept {
   13|  1.47k|  size_t pos = 0;
   14|  1.47k|  char32_t* start{utf32_output};
   15|  1.47k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  4.47k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 3.00k, False: 1.47k]
  ------------------
   17|  3.00k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  3.00k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 2.21k, False: 790]
  ------------------
   19|  2.21k|      in.store_ascii_as_utf32(utf32_output);
   20|  2.21k|      utf32_output += 64;
   21|  2.21k|      pos += 64;
   22|  2.21k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    790|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    790|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    790|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    790|    size_t max_starting_point = (pos + 64) - 12;
   28|  5.84k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.05k, False: 790]
  ------------------
   29|  5.05k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.05k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.05k|      pos += consumed;
   32|  5.05k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.05k|      }
   34|    790|    }
   35|  3.00k|  }
   36|  1.47k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.47k|  return utf32_output - start;
   38|  1.47k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   392k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   392k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   392k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 390k, False: 1.64k]
  |  |  ------------------
  ------------------
  154|   390k|        this->error |= this->prev_incomplete;
  155|   390k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.64k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.64k|            "We support either two or four chunks per 64-byte block.");
  159|  1.64k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.64k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.64k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.64k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.64k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.64k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.64k|      }
  172|   392k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.29k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.29k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.29k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.29k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.29k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.29k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.29k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.29k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.29k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.29k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.29k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.29k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.29k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.29k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.29k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.29k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.29k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.29k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.29k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.29k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.29k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.29k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.29k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.29k|    );
   51|  3.29k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.29k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.29k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.29k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.29k|      CARRY,
   59|  3.29k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.29k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.29k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.29k|    );
   80|  3.29k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.29k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.29k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.29k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.29k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.29k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.29k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.29k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.29k|    );
   96|  3.29k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.29k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.29k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.29k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.29k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.29k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.29k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.29k|    return must23_80 ^ sc;
  105|  3.29k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.64k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.64k|    static const uint8_t max_array[32] = {
  115|  1.64k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.64k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.64k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.64k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.64k|    };
  120|  1.64k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.64k|    return input.gt_bits(max_value);
  122|  1.64k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   388k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   388k|      this->error |= this->prev_incomplete;
  150|   388k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   388k|    simdutf_really_inline bool errors() const {
  176|   388k|      return this->error.any_bits_set_anywhere();
  177|   388k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   388k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   388k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   388k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   388k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   388k|    checker c{};
   12|   388k|    buf_block_reader<64> reader(input, length);
   13|   392k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 3.88k, False: 388k]
  ------------------
   14|  3.88k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  3.88k|      c.check_next_input(in);
   16|  3.88k|      reader.advance();
   17|  3.88k|    }
   18|   388k|    uint8_t block[64]{};
   19|   388k|    reader.get_remainder(block);
   20|   388k|    simd::simd8x64<uint8_t> in(block);
   21|   388k|    c.check_next_input(in);
   22|   388k|    reader.advance();
   23|   388k|    c.check_eof();
   24|   388k|    return !c.errors();
   25|   388k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.05k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.05k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.05k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.05k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.05k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.20k, False: 3.84k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.20k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.20k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.20k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.20k|    return 16; // We consumed 16 bytes.
   30|  1.20k|  }
   31|  3.84k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 3.77k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  3.77k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 3.71k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.71k|  const uint8_t idx =
   65|  3.71k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.71k|  const uint8_t consumed =
   67|  3.71k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.71k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.36k, False: 1.34k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.36k|    const __m128i sh =
   75|  2.36k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.36k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.36k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.36k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.36k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.36k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.36k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.36k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.26k, False: 86]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.26k|    const __m128i sh =
   86|  1.26k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.26k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.26k|    const __m128i ascii =
   89|  1.26k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.26k|    const __m128i middlebyte =
   91|  1.26k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.26k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.26k|    const __m128i highbyte =
   94|  1.26k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.26k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.26k|    const __m128i composed =
   97|  1.26k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.26k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.26k|    utf32_output += 4;
  100|  1.26k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 86, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     86|    const __m128i sh =
  103|     86|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     86|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     86|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     86|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     86|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     86|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     86|    const __m128i correct =
  111|     86|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     86|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     86|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     86|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     86|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     86|    const __m128i composed =
  117|     86|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     86|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     86|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     86|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     86|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.71k|  return consumed;
  125|  3.77k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|   388k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|   388k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|   388k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|   493k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|   493k|  utf8_to_utf32::validating_transcoder converter;
  277|   493k|  return converter.convert(buf, len, utf32_output);
  278|   493k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  280|   193k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  281|   193k|  utf8_to_utf32::validating_transcoder converter;
  282|   193k|  return converter.convert_with_errors(buf, len, utf32_output);
  283|   193k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  1.47k|    char32_t* utf32_output) const noexcept {
  287|  1.47k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  1.47k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|   387k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|   387k|  return utf8::count_code_points(input, length);
  779|   387k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   392k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   392k|  return input.reduce_or().is_ascii();
   25|   392k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.29k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.29k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  3.29k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  3.29k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  3.29k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  1.46M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  1.46M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  1.46M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  1.46M|    return active_implementation;
  913|  1.46M|#endif
  914|  1.46M|}
_ZN7simdutf26get_default_implementationEv:
  922|  1.46M|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  1.46M|  return get_active_implementation();
  924|  1.46M|}
_ZN7simdutf13validate_utf8EPKcm:
  928|   388k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|   388k|  return get_default_implementation()->validate_utf8(buf, len);
  930|   388k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|   493k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|   493k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|   493k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  990|   193k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  991|   193k|  return get_default_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  992|   193k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  1.47k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  1.47k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  1.47k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|   387k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|   387k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|   387k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   387k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   387k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   387k|    size_t counter{0};
  171|   806k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 419k, False: 387k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   419k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 418k, False: 587]
  ------------------
  174|   419k|    }
  175|   387k|    return counter;
  176|   387k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   493k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   493k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   493k|  size_t pos = 0;
   12|   493k|  char32_t* start{utf32_output};
   13|   983k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 493k, False: 489k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   493k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 493k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   493k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   493k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 472k, False: 20.8k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   472k|      *utf32_output++ = char32_t(leading_byte);
   34|   472k|      pos++;
   35|   472k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 7.67k, False: 13.1k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  7.67k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 7.67k]
  ------------------
   38|  7.67k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.87k, False: 5.80k]
  ------------------
   39|       |      // range check
   40|  5.80k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  5.80k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 5.66k]
  |  Branch (41:32): [True: 0, False: 5.66k]
  ------------------
   42|  5.66k|      *utf32_output++ = char32_t(code_point);
   43|  5.66k|      pos += 2;
   44|  13.1k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 11.2k, False: 1.92k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  11.2k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 11.2k]
  ------------------
   47|       |
   48|  11.2k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 522, False: 10.7k]
  ------------------
   49|  10.7k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 267, False: 10.4k]
  ------------------
   50|       |      // range check
   51|  10.4k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  10.4k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  10.4k|                   (data[pos + 2] & 0b00111111);
   54|  10.4k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 10.3k]
  |  Branch (54:33): [True: 0, False: 10.3k]
  ------------------
   55|  10.4k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 282, False: 10.0k]
  |  Branch (55:35): [True: 141, False: 141]
  ------------------
   56|    282|        return 0;
   57|    282|      }
   58|  10.2k|      *utf32_output++ = char32_t(code_point);
   59|  10.2k|      pos += 3;
   60|  10.2k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.92k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.92k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.92k]
  ------------------
   63|  1.92k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 431, False: 1.48k]
  ------------------
   64|  1.48k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.34k]
  ------------------
   65|  1.34k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.20k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.20k|      uint32_t code_point =
   69|  1.20k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.20k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.20k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 940]
  |  Branch (71:35): [True: 141, False: 799]
  ------------------
   72|    799|      *utf32_output++ = char32_t(code_point);
   73|    799|      pos += 4;
   74|    799|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   493k|  }
   78|   489k|  return utf32_output - start;
   79|   493k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|   193k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|   193k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|   193k|  size_t pos = 0;
   84|   193k|  char32_t* start{utf32_output};
   85|   386k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 193k, False: 193k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   193k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 193k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|   193k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   193k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 193k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   193k|      *utf32_output++ = char32_t(leading_byte);
  106|   193k|      pos++;
  107|   193k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|   193k|  }
  151|   193k|  return result(error_code::SUCCESS, utf32_output - start);
  152|   193k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|   193k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|   193k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|   193k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|   193k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 193k, False: 0]
  ------------------
  172|   193k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|   193k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 193k, False: 0]
  ------------------
  175|   193k|    unsigned char byte = buf[0-i];
  176|   193k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|   193k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 193k, False: 0]
  ------------------
  178|   193k|      buf -= i;
  179|   193k|      extra_len = i;
  180|   193k|      break;
  181|   193k|    }
  182|   193k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|   193k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 193k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|   193k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|   193k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 193k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|   193k|  return res;
  202|   193k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.47k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.47k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.47k|  size_t pos = 0;
   12|  1.47k|  char32_t* start{utf32_output};
   13|  11.8k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 10.3k, False: 1.47k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  10.3k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.34k, False: 4.99k]
  ------------------
   16|  5.34k|      uint64_t v;
   17|  5.34k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.34k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 4.74k, False: 601]
  ------------------
   19|  4.74k|        size_t final_pos = pos + 8;
   20|  42.6k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 37.9k, False: 4.74k]
  ------------------
   21|  37.9k|          *utf32_output++ = char32_t(buf[pos]);
   22|  37.9k|          pos++;
   23|  37.9k|        }
   24|  4.74k|        continue;
   25|  4.74k|      }
   26|  5.34k|    }
   27|  5.59k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.59k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.19k, False: 404]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.19k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.19k|      pos++;
   32|  5.19k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 197, False: 207]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    197|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 197]
  ------------------
   35|    197|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    197|      pos += 2;
   37|    207|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 157, False: 50]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    157|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 157]
  ------------------
   40|    157|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    157|      pos += 3;
   42|    157|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 50, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     50|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 50]
  ------------------
   45|     50|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     50|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     50|      *utf32_output++ = char32_t(code_word);
   48|     50|      pos += 4;
   49|     50|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.59k|  }
   54|  1.47k|  return utf32_output - start;
   55|  1.47k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  3.06k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  3.06k|  return _popcnt64(input_num);
   16|  3.06k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  1.16M|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  1.16M|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  1.16M|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  1.16M|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   392k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   785k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   785k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   785k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  2.74M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  2.74M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  2.74M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  2.74M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   392k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   392k|      return this->chunks[0] | this->chunks[1];
  297|   392k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.17M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  5.00M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   392k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   781k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.29k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.29k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.29k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  6.58k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  9.88k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  9.88k|      return lookup_16(simd8<L>::repeat_16(
  140|  9.88k|        replace0,  replace1,  replace2,  replace3,
  141|  9.88k|        replace4,  replace5,  replace6,  replace7,
  142|  9.88k|        replace8,  replace9,  replace10, replace11,
  143|  9.88k|        replace12, replace13, replace14, replace15
  144|  9.88k|      ));
  145|  9.88k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  9.88k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  9.88k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  9.88k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  13.1k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  9.88k|    ) {
  218|  9.88k|      return simd8<uint8_t>(
  219|  9.88k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  9.88k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  9.88k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  9.88k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  9.88k|      );
  224|  9.88k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  9.88k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  19.7k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   706k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   706k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.29k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.29k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.29k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.29k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.29k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.29k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  8.23k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  11.0k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  11.0k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  11.0k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.29k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.29k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.64k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.64k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  1.07M|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  1.07M|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  6.06k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  12.1k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  12.1k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  12.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  18.9k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  18.9k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  18.9k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  18.9k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  3.00k|    simdutf_really_inline bool is_ascii() const {
  300|  3.00k|      return this->reduce_or().is_ascii();
  301|  3.00k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  3.00k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  3.00k|      return this->chunks[0] | this->chunks[1];
  297|  3.00k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  3.00k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  42.1k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  3.00k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    790|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    790|      const simd8<T> mask = simd8<T>::splat(m);
  364|    790|      return  simd8x64<bool>(
  365|    790|        this->chunks[0] < mask,
  366|    790|        this->chunks[1] < mask
  367|    790|      ).to_bitmask();
  368|    790|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  3.85k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.58k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  3.85k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  3.85k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  3.85k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  3.85k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  3.85k|      return r_lo | (r_hi << 32);
  287|  3.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  7.71k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  7.71k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  2.21k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  2.21k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  2.21k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  2.21k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  4.42k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  4.42k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  4.42k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  4.42k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  4.42k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  4.42k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  3.06k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  3.06k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  3.06k|      return  simd8x64<bool>(
  373|  3.06k|        this->chunks[0] > mask,
  374|  3.06k|        this->chunks[1] > mask
  375|  3.06k|      ).to_bitmask();
  376|  3.06k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  6.13k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   394k|{
  627|   394k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   394k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   394k|    static_cast<    \
  |  |  251|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   394k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  394|   875k|{
  395|   875k|    static_assert(
  396|   875k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|   875k|        "Scan argument types must be default constructible");
  398|   875k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|   875k|                  "Scan argument types must be Destructible");
  400|   875k|    static_assert(
  401|   875k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|   875k|        "Scan argument types must not be references");
  403|   875k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  571|   394k|    {
  572|   394k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   394k|    {
  582|   394k|        return {
  583|   394k|            detail::make_arg<base::is_packed, Context,
  584|   394k|                             detail::mapped_type_constant<
  585|   394k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   394k|                args)...};
  587|   394k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  422|   394k|{
  423|   394k|    return make_value<Context>(value);
  424|   394k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  379|   432k|{
  380|   432k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   432k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   432k|                                  needs_context_tag>) {
  384|   432k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   432k|    }
  386|   432k|    else {
  387|   432k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   432k|            value, context_tag<Context>{}));
  389|   432k|    }
  390|   432k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  219|   432k|    {                                                                        \
  220|   432k|        return val;                                                          \
  221|   432k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  348|   875k|{
  349|   875k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|   875k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|   875k|    constexpr bool scannable_char =
  353|   875k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|   875k|    static_assert(scannable_char,
  355|   875k|                  "Cannot scan an argument of an unsupported character "
  356|   875k|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|   875k|    constexpr bool scannable_const =
  359|   875k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|   875k|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|   875k|    constexpr bool scannable_disabled =
  363|   875k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|   875k|    static_assert(scannable_disabled,
  365|   875k|                  "Cannot scan an argument that has been disabled by "
  366|   875k|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|   875k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|   875k|    static_assert(
  370|   875k|        scannable,
  371|   875k|        "Cannot scan an argument. To make a type T scannable, provide "
  372|   875k|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|   875k|    return arg_value{arg};
  375|   875k|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|   875k|    {
  160|   875k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   394k|    {
  655|   394k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  701|  2.60M|    {
  702|  2.60M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  561|   316k|    {
  562|   316k|        return m_args;
  563|   316k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  407|  38.8k|{
  408|  38.8k|    check_scan_arg_types<T>();
  409|       |
  410|  38.8k|    basic_scan_arg<Context> arg;
  411|  38.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  38.8k|    arg.m_value = make_value<Context>(value);
  413|  38.8k|    return arg;
  414|  38.8k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  484|  2.84M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  5.75M|    arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   377k|{
  627|   377k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   377k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   377k|    static_cast<    \
  |  |  251|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   377k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  394|   839k|{
  395|   839k|    static_assert(
  396|   839k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|   839k|        "Scan argument types must be default constructible");
  398|   839k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|   839k|                  "Scan argument types must be Destructible");
  400|   839k|    static_assert(
  401|   839k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|   839k|        "Scan argument types must not be references");
  403|   839k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  571|   377k|    {
  572|   377k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   377k|    {
  582|   377k|        return {
  583|   377k|            detail::make_arg<base::is_packed, Context,
  584|   377k|                             detail::mapped_type_constant<
  585|   377k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   377k|                args)...};
  587|   377k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  422|   377k|{
  423|   377k|    return make_value<Context>(value);
  424|   377k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  379|   412k|{
  380|   412k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   412k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   412k|                                  needs_context_tag>) {
  384|   412k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   412k|    }
  386|   412k|    else {
  387|   412k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   412k|            value, context_tag<Context>{}));
  389|   412k|    }
  390|   412k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  219|   412k|    {                                                                        \
  220|   412k|        return val;                                                          \
  221|   412k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  348|   839k|{
  349|   839k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|   839k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|   839k|    constexpr bool scannable_char =
  353|   839k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|   839k|    static_assert(scannable_char,
  355|   839k|                  "Cannot scan an argument of an unsupported character "
  356|   839k|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|   839k|    constexpr bool scannable_const =
  359|   839k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|   839k|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|   839k|    constexpr bool scannable_disabled =
  363|   839k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|   839k|    static_assert(scannable_disabled,
  365|   839k|                  "Cannot scan an argument that has been disabled by "
  366|   839k|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|   839k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|   839k|    static_assert(
  370|   839k|        scannable,
  371|   839k|        "Cannot scan an argument. To make a type T scannable, provide "
  372|   839k|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|   839k|    return arg_value{arg};
  375|   839k|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|   839k|    {
  160|   839k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   377k|    {
  655|   377k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  561|   299k|    {
  562|   299k|        return m_args;
  563|   299k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  407|  35.1k|{
  408|  35.1k|    check_scan_arg_types<T>();
  409|       |
  410|  35.1k|    basic_scan_arg<Context> arg;
  411|  35.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  35.1k|    arg.m_value = make_value<Context>(value);
  413|  35.1k|    return arg;
  414|  35.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   487k|{
  627|   487k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   487k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   487k|    static_cast<    \
  |  |  251|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   487k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  394|  1.06M|{
  395|  1.06M|    static_assert(
  396|  1.06M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|  1.06M|        "Scan argument types must be default constructible");
  398|  1.06M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|  1.06M|                  "Scan argument types must be Destructible");
  400|  1.06M|    static_assert(
  401|  1.06M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|  1.06M|        "Scan argument types must not be references");
  403|  1.06M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  571|   487k|    {
  572|   487k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   487k|    {
  582|   487k|        return {
  583|   487k|            detail::make_arg<base::is_packed, Context,
  584|   487k|                             detail::mapped_type_constant<
  585|   487k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   487k|                args)...};
  587|   487k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  422|   487k|{
  423|   487k|    return make_value<Context>(value);
  424|   487k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  379|   531k|{
  380|   531k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   531k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   531k|                                  needs_context_tag>) {
  384|   531k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   531k|    }
  386|   531k|    else {
  387|   531k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   531k|            value, context_tag<Context>{}));
  389|   531k|    }
  390|   531k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  219|   531k|    {                                                                        \
  220|   531k|        return val;                                                          \
  221|   531k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  348|  1.06M|{
  349|  1.06M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|  1.06M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|  1.06M|    constexpr bool scannable_char =
  353|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|  1.06M|    static_assert(scannable_char,
  355|  1.06M|                  "Cannot scan an argument of an unsupported character "
  356|  1.06M|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|  1.06M|    constexpr bool scannable_const =
  359|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|  1.06M|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|  1.06M|    constexpr bool scannable_disabled =
  363|  1.06M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|  1.06M|    static_assert(scannable_disabled,
  365|  1.06M|                  "Cannot scan an argument that has been disabled by "
  366|  1.06M|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|  1.06M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|  1.06M|    static_assert(
  370|  1.06M|        scannable,
  371|  1.06M|        "Cannot scan an argument. To make a type T scannable, provide "
  372|  1.06M|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|  1.06M|    return arg_value{arg};
  375|  1.06M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.06M|    {
  160|  1.06M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   487k|    {
  655|   487k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  561|   409k|    {
  562|   409k|        return m_args;
  563|   409k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  407|  44.7k|{
  408|  44.7k|    check_scan_arg_types<T>();
  409|       |
  410|  44.7k|    basic_scan_arg<Context> arg;
  411|  44.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  44.7k|    arg.m_value = make_value<Context>(value);
  413|  44.7k|    return arg;
  414|  44.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   424k|{
  627|   424k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   424k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   424k|    static_cast<    \
  |  |  251|   424k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   424k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  394|   945k|{
  395|   945k|    static_assert(
  396|   945k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|   945k|        "Scan argument types must be default constructible");
  398|   945k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|   945k|                  "Scan argument types must be Destructible");
  400|   945k|    static_assert(
  401|   945k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|   945k|        "Scan argument types must not be references");
  403|   945k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  571|   424k|    {
  572|   424k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   424k|    {
  582|   424k|        return {
  583|   424k|            detail::make_arg<base::is_packed, Context,
  584|   424k|                             detail::mapped_type_constant<
  585|   424k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   424k|                args)...};
  587|   424k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  422|   424k|{
  423|   424k|    return make_value<Context>(value);
  424|   424k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  379|   464k|{
  380|   464k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   464k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   464k|                                  needs_context_tag>) {
  384|   464k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   464k|    }
  386|   464k|    else {
  387|   464k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   464k|            value, context_tag<Context>{}));
  389|   464k|    }
  390|   464k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  219|   464k|    {                                                                        \
  220|   464k|        return val;                                                          \
  221|   464k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  348|   945k|{
  349|   945k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|   945k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|   945k|    constexpr bool scannable_char =
  353|   945k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|   945k|    static_assert(scannable_char,
  355|   945k|                  "Cannot scan an argument of an unsupported character "
  356|   945k|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|   945k|    constexpr bool scannable_const =
  359|   945k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|   945k|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|   945k|    constexpr bool scannable_disabled =
  363|   945k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|   945k|    static_assert(scannable_disabled,
  365|   945k|                  "Cannot scan an argument that has been disabled by "
  366|   945k|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|   945k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|   945k|    static_assert(
  370|   945k|        scannable,
  371|   945k|        "Cannot scan an argument. To make a type T scannable, provide "
  372|   945k|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|   945k|    return arg_value{arg};
  375|   945k|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|   945k|    {
  160|   945k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   424k|    {
  655|   424k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  561|   347k|    {
  562|   347k|        return m_args;
  563|   347k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  407|  39.0k|{
  408|  39.0k|    check_scan_arg_types<T>();
  409|       |
  410|  39.0k|    basic_scan_arg<Context> arg;
  411|  39.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  39.0k|    arg.m_value = make_value<Context>(value);
  413|  39.0k|    return arg;
  414|  39.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   495k|{
  627|   495k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   495k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   495k|    static_cast<    \
  |  |  251|   495k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   495k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  394|  1.07M|{
  395|  1.07M|    static_assert(
  396|  1.07M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|  1.07M|        "Scan argument types must be default constructible");
  398|  1.07M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|  1.07M|                  "Scan argument types must be Destructible");
  400|  1.07M|    static_assert(
  401|  1.07M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|  1.07M|        "Scan argument types must not be references");
  403|  1.07M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  571|   495k|    {
  572|   495k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   495k|    {
  582|   495k|        return {
  583|   495k|            detail::make_arg<base::is_packed, Context,
  584|   495k|                             detail::mapped_type_constant<
  585|   495k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   495k|                args)...};
  587|   495k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  422|   495k|{
  423|   495k|    return make_value<Context>(value);
  424|   495k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  379|   541k|{
  380|   541k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   541k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   541k|                                  needs_context_tag>) {
  384|   541k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   541k|    }
  386|   541k|    else {
  387|   541k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   541k|            value, context_tag<Context>{}));
  389|   541k|    }
  390|   541k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  219|   541k|    {                                                                        \
  220|   541k|        return val;                                                          \
  221|   541k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  348|  1.07M|{
  349|  1.07M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|  1.07M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|  1.07M|    constexpr bool scannable_char =
  353|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|  1.07M|    static_assert(scannable_char,
  355|  1.07M|                  "Cannot scan an argument of an unsupported character "
  356|  1.07M|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|  1.07M|    constexpr bool scannable_const =
  359|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|  1.07M|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|  1.07M|    constexpr bool scannable_disabled =
  363|  1.07M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|  1.07M|    static_assert(scannable_disabled,
  365|  1.07M|                  "Cannot scan an argument that has been disabled by "
  366|  1.07M|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|  1.07M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|  1.07M|    static_assert(
  370|  1.07M|        scannable,
  371|  1.07M|        "Cannot scan an argument. To make a type T scannable, provide "
  372|  1.07M|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|  1.07M|    return arg_value{arg};
  375|  1.07M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.07M|    {
  160|  1.07M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   495k|    {
  655|   495k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  561|   418k|    {
  562|   418k|        return m_args;
  563|   418k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  407|  45.5k|{
  408|  45.5k|    check_scan_arg_types<T>();
  409|       |
  410|  45.5k|    basic_scan_arg<Context> arg;
  411|  45.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  45.5k|    arg.m_value = make_value<Context>(value);
  413|  45.5k|    return arg;
  414|  45.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   427k|{
  627|   427k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   427k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   427k|    static_cast<    \
  |  |  251|   427k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   427k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  394|   950k|{
  395|   950k|    static_assert(
  396|   950k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  397|   950k|        "Scan argument types must be default constructible");
  398|   950k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  399|   950k|                  "Scan argument types must be Destructible");
  400|   950k|    static_assert(
  401|   950k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  402|   950k|        "Scan argument types must not be references");
  403|   950k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  571|   427k|    {
  572|   427k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   427k|    {
  582|   427k|        return {
  583|   427k|            detail::make_arg<base::is_packed, Context,
  584|   427k|                             detail::mapped_type_constant<
  585|   427k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   427k|                args)...};
  587|   427k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  422|   427k|{
  423|   427k|    return make_value<Context>(value);
  424|   427k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  379|   466k|{
  380|   466k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   466k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   466k|                                  needs_context_tag>) {
  384|   466k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   466k|    }
  386|   466k|    else {
  387|   466k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   466k|            value, context_tag<Context>{}));
  389|   466k|    }
  390|   466k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  219|   466k|    {                                                                        \
  220|   466k|        return val;                                                          \
  221|   466k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  348|   950k|{
  349|   950k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  350|   950k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  351|       |
  352|   950k|    constexpr bool scannable_char =
  353|   950k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  354|   950k|    static_assert(scannable_char,
  355|   950k|                  "Cannot scan an argument of an unsupported character "
  356|   950k|                  "type (i.e. char from a wchar_t source)");
  357|       |
  358|   950k|    constexpr bool scannable_const =
  359|   950k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  360|   950k|    static_assert(scannable_const, "Cannot scan a const argument");
  361|       |
  362|   950k|    constexpr bool scannable_disabled =
  363|   950k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  364|   950k|    static_assert(scannable_disabled,
  365|   950k|                  "Cannot scan an argument that has been disabled by "
  366|   950k|                  "flag (SCN_DISABLE_TYPE_*)");
  367|       |
  368|   950k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  369|   950k|    static_assert(
  370|   950k|        scannable,
  371|   950k|        "Cannot scan an argument. To make a type T scannable, provide "
  372|   950k|        "a scn::scanner<T, CharT> specialization.");
  373|       |
  374|   950k|    return arg_value{arg};
  375|   950k|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|   950k|    {
  160|   950k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   427k|    {
  655|   427k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  561|   349k|    {
  562|   349k|        return m_args;
  563|   349k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  407|  39.2k|{
  408|  39.2k|    check_scan_arg_types<T>();
  409|       |
  410|  39.2k|    basic_scan_arg<Context> arg;
  411|  39.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  39.2k|    arg.m_value = make_value<Context>(value);
  413|  39.2k|    return arg;
  414|  39.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   405k|{
  627|   405k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   405k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   405k|    static_cast<    \
  |  |  251|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   405k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  571|   405k|    {
  572|   405k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   405k|    {
  582|   405k|        return {
  583|   405k|            detail::make_arg<base::is_packed, Context,
  584|   405k|                             detail::mapped_type_constant<
  585|   405k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   405k|                args)...};
  587|   405k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  422|   405k|{
  423|   405k|    return make_value<Context>(value);
  424|   405k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  379|   442k|{
  380|   442k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   442k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   442k|                                  needs_context_tag>) {
  384|   442k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   442k|    }
  386|   442k|    else {
  387|   442k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   442k|            value, context_tag<Context>{}));
  389|   442k|    }
  390|   442k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  219|   442k|    {                                                                        \
  220|   442k|        return val;                                                          \
  221|   442k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   405k|    {
  655|   405k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  701|  2.67M|    {
  702|  2.67M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  561|   269k|    {
  562|   269k|        return m_args;
  563|   269k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  407|  36.9k|{
  408|  36.9k|    check_scan_arg_types<T>();
  409|       |
  410|  36.9k|    basic_scan_arg<Context> arg;
  411|  36.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  36.9k|    arg.m_value = make_value<Context>(value);
  413|  36.9k|    return arg;
  414|  36.9k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  484|  2.90M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   393k|{
  627|   393k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   393k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   393k|    static_cast<    \
  |  |  251|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   393k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  571|   393k|    {
  572|   393k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   393k|    {
  582|   393k|        return {
  583|   393k|            detail::make_arg<base::is_packed, Context,
  584|   393k|                             detail::mapped_type_constant<
  585|   393k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   393k|                args)...};
  587|   393k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  422|   393k|{
  423|   393k|    return make_value<Context>(value);
  424|   393k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  379|   427k|{
  380|   427k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   427k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   427k|                                  needs_context_tag>) {
  384|   427k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   427k|    }
  386|   427k|    else {
  387|   427k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   427k|            value, context_tag<Context>{}));
  389|   427k|    }
  390|   427k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  219|   427k|    {                                                                        \
  220|   427k|        return val;                                                          \
  221|   427k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   393k|    {
  655|   393k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  561|   256k|    {
  562|   256k|        return m_args;
  563|   256k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  407|  34.0k|{
  408|  34.0k|    check_scan_arg_types<T>();
  409|       |
  410|  34.0k|    basic_scan_arg<Context> arg;
  411|  34.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  34.0k|    arg.m_value = make_value<Context>(value);
  413|  34.0k|    return arg;
  414|  34.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   488k|{
  627|   488k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   488k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   488k|    static_cast<    \
  |  |  251|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   488k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  571|   488k|    {
  572|   488k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   488k|    {
  582|   488k|        return {
  583|   488k|            detail::make_arg<base::is_packed, Context,
  584|   488k|                             detail::mapped_type_constant<
  585|   488k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   488k|                args)...};
  587|   488k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  422|   488k|{
  423|   488k|    return make_value<Context>(value);
  424|   488k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  379|   529k|{
  380|   529k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   529k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   529k|                                  needs_context_tag>) {
  384|   529k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   529k|    }
  386|   529k|    else {
  387|   529k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   529k|            value, context_tag<Context>{}));
  389|   529k|    }
  390|   529k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  219|   529k|    {                                                                        \
  220|   529k|        return val;                                                          \
  221|   529k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   488k|    {
  655|   488k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  561|   351k|    {
  562|   351k|        return m_args;
  563|   351k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  407|  41.7k|{
  408|  41.7k|    check_scan_arg_types<T>();
  409|       |
  410|  41.7k|    basic_scan_arg<Context> arg;
  411|  41.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  41.7k|    arg.m_value = make_value<Context>(value);
  413|  41.7k|    return arg;
  414|  41.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   444k|{
  627|   444k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   444k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   444k|    static_cast<    \
  |  |  251|   444k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   444k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  571|   444k|    {
  572|   444k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   444k|    {
  582|   444k|        return {
  583|   444k|            detail::make_arg<base::is_packed, Context,
  584|   444k|                             detail::mapped_type_constant<
  585|   444k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   444k|                args)...};
  587|   444k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  422|   444k|{
  423|   444k|    return make_value<Context>(value);
  424|   444k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  379|   481k|{
  380|   481k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   481k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   481k|                                  needs_context_tag>) {
  384|   481k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   481k|    }
  386|   481k|    else {
  387|   481k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   481k|            value, context_tag<Context>{}));
  389|   481k|    }
  390|   481k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  219|   481k|    {                                                                        \
  220|   481k|        return val;                                                          \
  221|   481k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   444k|    {
  655|   444k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  561|   308k|    {
  562|   308k|        return m_args;
  563|   308k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  407|  37.7k|{
  408|  37.7k|    check_scan_arg_types<T>();
  409|       |
  410|  37.7k|    basic_scan_arg<Context> arg;
  411|  37.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  37.7k|    arg.m_value = make_value<Context>(value);
  413|  37.7k|    return arg;
  414|  37.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   495k|{
  627|   495k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   495k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   495k|    static_cast<    \
  |  |  251|   495k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   495k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  571|   495k|    {
  572|   495k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   495k|    {
  582|   495k|        return {
  583|   495k|            detail::make_arg<base::is_packed, Context,
  584|   495k|                             detail::mapped_type_constant<
  585|   495k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   495k|                args)...};
  587|   495k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  422|   495k|{
  423|   495k|    return make_value<Context>(value);
  424|   495k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  379|   537k|{
  380|   537k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   537k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   537k|                                  needs_context_tag>) {
  384|   537k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   537k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   537k|    }
  386|   537k|    else {
  387|   537k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   537k|            value, context_tag<Context>{}));
  389|   537k|    }
  390|   537k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  219|   537k|    {                                                                        \
  220|   537k|        return val;                                                          \
  221|   537k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   495k|    {
  655|   495k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  561|   358k|    {
  562|   358k|        return m_args;
  563|   358k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  407|  42.4k|{
  408|  42.4k|    check_scan_arg_types<T>();
  409|       |
  410|  42.4k|    basic_scan_arg<Context> arg;
  411|  42.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  42.4k|    arg.m_value = make_value<Context>(value);
  413|  42.4k|    return arg;
  414|  42.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  626|   446k|{
  627|   446k|    detail::check_scan_arg_types<Args...>();
  628|       |
  629|   446k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  250|   446k|    static_cast<    \
  |  |  251|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  630|   446k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  571|   446k|    {
  572|   446k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  581|   446k|    {
  582|   446k|        return {
  583|   446k|            detail::make_arg<base::is_packed, Context,
  584|   446k|                             detail::mapped_type_constant<
  585|   446k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  586|   446k|                args)...};
  587|   446k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  422|   446k|{
  423|   446k|    return make_value<Context>(value);
  424|   446k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  379|   484k|{
  380|   484k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  381|       |
  382|   484k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|   484k|                                  needs_context_tag>) {
  384|   484k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  252|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  385|   484k|    }
  386|   484k|    else {
  387|   484k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  388|   484k|            value, context_tag<Context>{}));
  389|   484k|    }
  390|   484k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  219|   484k|    {                                                                        \
  220|   484k|        return val;                                                          \
  221|   484k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  654|   446k|    {
  655|   446k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  561|   309k|    {
  562|   309k|        return m_args;
  563|   309k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  407|  37.8k|{
  408|  37.8k|    check_scan_arg_types<T>();
  409|       |
  410|  37.8k|    basic_scan_arg<Context> arg;
  411|  37.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  412|  37.8k|    arg.m_value = make_value<Context>(value);
  413|  37.8k|    return arg;
  414|  37.8k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  689|  2.60M|    {
  690|  2.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  ------------------
  ------------------
  691|      0|            return max_size();
  692|      0|        }
  693|       |
  694|  2.60M|        return static_cast<std::size_t>(m_desc &
  695|  2.60M|                                        ((1 << detail::packed_arg_bits) - 1));
  696|  2.60M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  709|  5.21M|    {
  710|  5.21M|        return (m_desc & detail::is_unpacked_bit) == 0;
  711|  5.21M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  662|  2.60M|    {
  663|  2.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  ------------------
  ------------------
  664|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  665|      0|                return m_args[id];
  666|      0|            }
  667|      0|            return {};
  668|      0|        }
  669|       |
  670|  2.60M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.60M|        const auto t = type(id);
  675|  2.60M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.60M]
  |  |  ------------------
  ------------------
  676|      0|            return {};
  677|      0|        }
  678|       |
  679|  2.60M|        basic_scan_arg<Context> arg;
  680|  2.60M|        arg.m_type = t;
  681|  2.60M|        arg.m_value = m_values[id];
  682|  2.60M|        return arg;
  683|  2.60M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  714|  2.60M|    {
  715|       |        // First (0th) index is size, types start after that
  716|  2.60M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  717|  2.60M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  718|  2.60M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  719|  2.60M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  490|  4.83M|    {
  491|  4.83M|        return m_type != detail::arg_type::none_type;
  492|  4.83M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  495|  4.24M|    {
  496|  4.24M|        return m_type;
  497|  4.24M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  689|  2.67M|    {
  690|  2.67M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.67M]
  |  |  ------------------
  ------------------
  691|      0|            return max_size();
  692|      0|        }
  693|       |
  694|  2.67M|        return static_cast<std::size_t>(m_desc &
  695|  2.67M|                                        ((1 << detail::packed_arg_bits) - 1));
  696|  2.67M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  709|  5.34M|    {
  710|  5.34M|        return (m_desc & detail::is_unpacked_bit) == 0;
  711|  5.34M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  662|  2.67M|    {
  663|  2.67M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  157|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.67M]
  |  |  ------------------
  ------------------
  664|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  665|      0|                return m_args[id];
  666|      0|            }
  667|      0|            return {};
  668|      0|        }
  669|       |
  670|  2.67M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  157|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.67M]
  |  |  ------------------
  ------------------
  671|      0|            return {};
  672|      0|        }
  673|       |
  674|  2.67M|        const auto t = type(id);
  675|  2.67M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  157|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.67M]
  |  |  ------------------
  ------------------
  676|      0|            return {};
  677|      0|        }
  678|       |
  679|  2.67M|        basic_scan_arg<Context> arg;
  680|  2.67M|        arg.m_type = t;
  681|  2.67M|        arg.m_value = m_values[id];
  682|  2.67M|        return arg;
  683|  2.67M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  714|  2.67M|    {
  715|       |        // First (0th) index is size, types start after that
  716|  2.67M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  717|  2.67M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  718|  2.67M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  719|  2.67M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  490|  4.86M|    {
  491|  4.86M|        return m_type != detail::arg_type::none_type;
  492|  4.86M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  495|  4.42M|    {
  496|  4.42M|        return m_type;
  497|  4.42M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  642|   242k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  642|   230k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   227k|    {
  109|   227k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.12M|    {
   60|  2.12M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   405k|    {
  124|   405k|        return m_current;
  125|   405k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.12M|    {
   43|  2.12M|        return m_args.get(id);
   44|  2.12M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.98M|    {
   53|  1.98M|        return m_locale;
   54|  1.98M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   158k|    {
  132|   158k|        return ranges_std::default_sentinel;
  133|   158k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  19.3k|    {
  146|  19.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  19.3k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   158k|    {
  140|   158k|        return ranges::subrange{begin(), end()};
  141|   158k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   394k|    {
  109|   394k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.21M|    {
   60|  2.21M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   694k|    {
  124|   694k|        return m_current;
  125|   694k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.21M|    {
   43|  2.21M|        return m_args.get(id);
   44|  2.21M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.96M|    {
   53|  1.96M|        return m_locale;
   54|  1.96M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   272k|    {
  132|   272k|        return ranges_std::default_sentinel;
  133|   272k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  27.2k|    {
  146|  27.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  27.2k|    static_cast<    \
  |  |  251|  27.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  27.2k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   272k|    {
  140|   272k|        return ranges::subrange{begin(), end()};
  141|   272k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  1.85M|    {
   69|  1.85M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  1.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  1.85M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  20.6M|    {
   75|  20.6M|        return m_code == good;
   76|  20.6M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   768k|    {
   86|   768k|        return m_code;
   87|   768k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   768k|{
  111|   768k|    return a.code() == b;
  112|   768k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   768k|{
  116|   768k|    return !(a == b);
  117|   768k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  12.6M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   355k|    {
  675|   355k|        return m_str;
  676|   355k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.60M|{
  385|  2.60M|    return s;
  386|  2.60M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.60M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   355k|    {
  671|   355k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   334k|    {
  675|   334k|        return m_str;
  676|   334k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   334k|    {
  671|   334k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   444k|    {
  675|   444k|        return m_str;
  676|   444k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   444k|    {
  671|   444k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   382k|    {
  675|   382k|        return m_str;
  676|   382k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   382k|    {
  671|   382k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   453k|    {
  675|   453k|        return m_str;
  676|   453k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   453k|    {
  671|   453k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   384k|    {
  675|   384k|        return m_str;
  676|   384k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   384k|    {
  671|   384k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  38.6k|    {
  675|  38.6k|        return m_str;
  676|  38.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  38.6k|    {
  671|  38.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  42.5k|    {
  675|  42.5k|        return m_str;
  676|  42.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  42.5k|    {
  671|  42.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  42.5k|    {
  675|  42.5k|        return m_str;
  676|  42.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  42.5k|    {
  671|  42.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  42.5k|    {
  675|  42.5k|        return m_str;
  676|  42.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  42.5k|    {
  671|  42.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  42.5k|    {
  675|  42.5k|        return m_str;
  676|  42.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  42.5k|    {
  671|  42.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  42.5k|    {
  675|  42.5k|        return m_str;
  676|  42.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  42.5k|    {
  671|  42.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   337k|    {
  675|   337k|        return m_str;
  676|   337k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.67M|{
  390|  2.67M|    return s;
  391|  2.67M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.67M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   337k|    {
  671|   337k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   324k|    {
  675|   324k|        return m_str;
  676|   324k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   324k|    {
  671|   324k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   413k|    {
  675|   413k|        return m_str;
  676|   413k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   413k|    {
  671|   413k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   369k|    {
  675|   369k|        return m_str;
  676|   369k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   369k|    {
  671|   369k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   420k|    {
  675|   420k|        return m_str;
  676|   420k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   420k|    {
  671|   420k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   371k|    {
  675|   371k|        return m_str;
  676|   371k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   371k|    {
  671|   371k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.0k|    {
  675|  68.0k|        return m_str;
  676|  68.0k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.0k|    {
  671|  68.0k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.0k|    {
  675|  68.0k|        return m_str;
  676|  68.0k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.0k|    {
  671|  68.0k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  74.8k|    {
  675|  74.8k|        return m_str;
  676|  74.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  74.8k|    {
  671|  74.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  74.8k|    {
  675|  74.8k|        return m_str;
  676|  74.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  74.8k|    {
  671|  74.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  74.8k|    {
  675|  74.8k|        return m_str;
  676|  74.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  74.8k|    {
  671|  74.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  74.8k|    {
  675|  74.8k|        return m_str;
  676|  74.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  74.8k|    {
  671|  74.8k|    }

_ZNK3scn2v26detail12format_specs8get_baseEv:
  195|  3.90M|    {
  196|  3.90M|        SCN_GCC_COMPAT_PUSH
  197|  3.90M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  3.90M|        switch (type) {
  199|   938k|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 938k, False: 2.96M]
  ------------------
  200|  1.87M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 937k, False: 2.96M]
  ------------------
  201|  1.87M|                return 0;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 3.90M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   210k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 210k, False: 3.69M]
  ------------------
  206|   210k|                return 2;
  207|   343k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 343k, False: 3.56M]
  ------------------
  208|   343k|                return 8;
  209|   678k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 678k, False: 3.22M]
  ------------------
  210|   678k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 3.90M]
  ------------------
  211|   678k|                return 10;
  212|   796k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 796k, False: 3.10M]
  ------------------
  213|   796k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 3.90M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  3.90M|        }
  219|  3.90M|        SCN_GCC_COMPAT_POP
  220|  3.90M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  4.33M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|   948k|    {
  245|   948k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|   948k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|   948k|            m_specs.localized = true;
  247|   948k|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|   948k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  3.12M|    {
  260|  3.12M|        m_specs.type = type;
  261|  3.12M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   256k|    {
  322|   256k|        SCN_UNLIKELY_ATTR
  323|   256k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   256k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  4.07M|    {
  333|  4.07M|        return static_cast<bool>(m_error);
  334|  4.07M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|   948k|{
  987|   948k|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 948k]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   151k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 151k, False: 796k]
  ------------------
  992|   151k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 948k]
  ------------------
  993|   325k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 173k, False: 775k]
  ------------------
  994|   325k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 948k]
  ------------------
  995|   501k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 176k, False: 772k]
  ------------------
  996|   501k|            return arg_type_category::integer;
  997|       |
  998|   138k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 138k, False: 809k]
  ------------------
  999|   138k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 948k]
  ------------------
 1000|   292k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 153k, False: 794k]
  ------------------
 1001|   292k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 948k]
  ------------------
 1002|   447k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 154k, False: 794k]
  ------------------
 1003|   447k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 948k]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 948k]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 948k]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 948k]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 948k]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 948k]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 948k]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 948k]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 948k]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 948k]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 948k]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 948k]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 948k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 948k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|   948k|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|   948k|            SCN_CLANG_POP
 1034|   948k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|   948k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.89M|{
  968|  1.89M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.89M|    handler.check_args_exhausted();
  970|  1.89M|    return handler.get_error();
  971|  1.89M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.89M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.89M|    auto begin = format.data();
  937|  1.89M|    auto it = begin;
  938|  1.89M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.57M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.89M, False: 1.68M]
  ------------------
  941|  1.89M|        const auto ch = *it++;
  942|  1.89M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.89M, False: 0]
  ------------------
  943|  1.89M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.89M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.89M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 208k, False: 1.68M]
  ------------------
  947|   208k|                return;
  948|   208k|            }
  949|  1.89M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.89M|    }
  960|       |
  961|  1.68M|    handler.on_literal_text(begin, end);
  962|  1.68M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.89M|{
  866|  1.89M|    struct id_adapter {
  867|  1.89M|        constexpr void operator()()
  868|  1.89M|        {
  869|  1.89M|            arg_id = handler.on_arg_id();
  870|  1.89M|        }
  871|  1.89M|        constexpr void operator()(std::size_t id)
  872|  1.89M|        {
  873|  1.89M|            arg_id = handler.on_arg_id(id);
  874|  1.89M|        }
  875|       |
  876|  1.89M|        constexpr void on_error(const char* msg)
  877|  1.89M|        {
  878|  1.89M|            SCN_UNLIKELY_ATTR
  879|  1.89M|            handler.on_error(msg);
  880|  1.89M|        }
  881|       |
  882|  1.89M|        Handler& handler;
  883|  1.89M|        std::size_t arg_id;
  884|  1.89M|    };
  885|       |
  886|  1.89M|    ++begin;
  887|  1.89M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.89M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.89M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.89M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.89M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.89M|    else {
  899|  1.89M|        auto adapter = id_adapter{handler, 0};
  900|  1.89M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.89M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.89M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.89M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.89M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.89M, False: 0]
  ------------------
  911|  1.89M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.89M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.89M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 69.5k, False: 1.82M]
  |  |  |  Branch (157:45): [True: 0, False: 1.89M]
  |  |  |  Branch (157:45): [True: 69.5k, False: 1.82M]
  |  |  ------------------
  ------------------
  917|  69.5k|                handler.on_error("Unknown format specifier");
  918|  69.5k|                return begin;
  919|  69.5k|            }
  920|  1.89M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.89M|    }
  927|  1.82M|    return begin + 1;
  928|  1.89M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.89M|{
  400|  1.89M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.89M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.89M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.89M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.89M|    handler();
  406|  1.89M|    return begin;
  407|  1.89M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.89M|        {
  869|  1.89M|            arg_id = handler.on_arg_id();
  870|  1.89M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.89M|    {
 1046|  1.89M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.89M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.89M|{
  795|  1.89M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.89M|        if (*begin == CharT{'['}) {
  797|  1.89M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.89M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.89M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.89M|                return begin;
  803|  1.89M|            }
  804|  1.89M|            handler.on_character_set_string(set);
  805|  1.89M|            return begin;
  806|  1.89M|        }
  807|  1.89M|        if (*begin == CharT{'/'}) {
  808|  1.89M|            return parse_presentation_regex(begin, end, handler);
  809|  1.89M|        }
  810|  1.89M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.89M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.89M|            handler.on_error("Invalid type specifier in format string");
  813|  1.89M|            return begin;
  814|  1.89M|        }
  815|  1.89M|        handler.on_type(type);
  816|  1.89M|        return begin;
  817|  1.89M|    };
  818|       |
  819|  1.89M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.89M, False: 0]
  |  Branch (819:28): [True: 1.84M, False: 46.3k]
  ------------------
  820|  1.89M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.82M, False: 23.1k]
  |  Branch (820:36): [True: 1.36M, False: 462k]
  ------------------
  821|  1.36M|        return do_presentation();
  822|  1.36M|    }
  823|       |
  824|   532k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   532k|    begin = parse_align(begin, end, handler);
  830|   532k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   532k|    begin = parse_width(begin, end, handler);
  836|   532k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   532k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 462k, False: 69.5k]
  ------------------
  842|   462k|        handler.on_localized();
  843|   462k|        ++begin;
  844|   462k|    }
  845|   532k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   532k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 532k, False: 0]
  |  Branch (850:25): [True: 69.5k, False: 462k]
  ------------------
  851|  69.5k|        do_presentation();
  852|  69.5k|    }
  853|   532k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   532k|    return begin;
  859|   532k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.02M|{
  464|  2.02M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.49M, False: 532k]
  |  Branch (464:33): [True: 1.49M, False: 0]
  ------------------
  465|  2.02M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 486k, False: 46.3k]
  |  Branch (465:33): [True: 486k, False: 0]
  ------------------
  466|  2.02M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.42M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.42M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.42M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.42M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.42M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.42M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 46.3k, False: 1.38M]
  |  |  ------------------
  ------------------
  812|  46.3k|            handler.on_error("Invalid type specifier in format string");
  813|  46.3k|            return begin;
  814|  46.3k|        }
  815|  1.38M|        handler.on_type(type);
  816|  1.38M|        return begin;
  817|  1.42M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.63M|{
  412|  1.63M|    switch (type) {
  413|  91.0k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 91.0k, False: 1.54M]
  ------------------
  414|   137k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 46.3k, False: 1.58M]
  ------------------
  415|   137k|            return presentation_type::int_binary;
  416|   347k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 347k, False: 1.28M]
  ------------------
  417|   347k|            return presentation_type::int_decimal;
  418|   485k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 485k, False: 1.14M]
  ------------------
  419|   485k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.63M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   167k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 167k, False: 1.46M]
  ------------------
  423|   167k|            return presentation_type::int_octal;
  424|   404k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 404k, False: 1.23M]
  ------------------
  425|   404k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.63M]
  ------------------
  426|   404k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.63M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.63M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 1.63M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.63M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 1.63M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.63M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 1.63M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.63M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 1.63M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.63M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.63M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.63M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.63M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.63M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.63M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.63M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  92.7k|        default:
  ------------------
  |  Branch (456:9): [True: 92.7k, False: 1.54M]
  ------------------
  457|  92.7k|            return presentation_type::none;
  458|  1.63M|    }
  459|  1.63M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   532k|{
  489|   532k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   532k|    auto check_align = [](wchar_t ch) {
  492|   532k|        switch (ch) {
  493|   532k|            case L'<':
  494|   532k|                return align_type::left;
  495|   532k|            case L'>':
  496|   532k|                return align_type::right;
  497|   532k|            case L'^':
  498|   532k|                return align_type::center;
  499|   532k|            default:
  500|   532k|                return align_type::none;
  501|   532k|        }
  502|   532k|    };
  503|       |
  504|   532k|    auto potential_fill_len = code_point_length(begin, end);
  505|   532k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  |  Branch (157:45): [True: 0, False: 532k]
  |  |  |  Branch (157:45): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  506|   532k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   532k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   532k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   532k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   532k|    const auto begin_before_fill = begin;
  516|   532k|    begin += potential_fill_len;
  517|       |
  518|   532k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 532k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   532k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   532k|    const auto begin_after_fill = begin;
  524|   532k|    ++begin;
  525|       |
  526|   532k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 532k, False: 0]
  ------------------
  527|   532k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   532k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 532k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   532k|    }
  535|       |
  536|   532k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 532k, False: 0]
  ------------------
  537|   532k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 532k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   532k|        return begin_before_fill;
  542|   532k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   532k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   625k|{
  471|   625k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   625k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   625k|        return 1;
  474|   625k|    }
  475|   625k|    else {
  476|   625k|        const auto lengths =
  477|   625k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   625k|            "\3\4";
  479|   625k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   625k|        return len;
  481|   625k|    }
  482|   625k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.06M|    auto check_align = [](wchar_t ch) {
  492|  1.06M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.06M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.06M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.06M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.06M|            default:
  ------------------
  |  Branch (499:13): [True: 1.06M, False: 0]
  ------------------
  500|  1.06M|                return align_type::none;
  501|  1.06M|        }
  502|  1.06M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   532k|{
  554|   532k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   532k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 486k, False: 46.3k]
  |  Branch (556:33): [True: 0, False: 486k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   532k|    return begin;
  567|   532k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   462k|    {
 1051|   462k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   462k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 215k, False: 247k]
  ------------------
 1053|   462k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 215k]
  ------------------
 1054|   462k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   462k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   462k|        Handler::on_localized();
 1063|   462k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  3.94M|{
 1073|  3.94M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  157|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 3.94M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  3.94M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 948k, False: 2.99M]
  ------------------
 1077|   948k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  157|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 948k]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|   948k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  157|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 948k]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|   948k|    }
 1089|  3.94M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   227k|{
  968|   227k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   227k|    handler.check_args_exhausted();
  970|   227k|    return handler.get_error();
  971|   227k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   227k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   227k|    auto begin = format.data();
  937|   227k|    auto it = begin;
  938|   227k|    const auto end = format.data() + format.size();
  939|       |
  940|   247k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 227k, False: 19.3k]
  ------------------
  941|   227k|        const auto ch = *it++;
  942|   227k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 227k, False: 0]
  ------------------
  943|   227k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   227k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   227k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 208k, False: 19.3k]
  ------------------
  947|   208k|                return;
  948|   208k|            }
  949|   227k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   227k|    }
  960|       |
  961|  19.3k|    handler.on_literal_text(begin, end);
  962|  19.3k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   227k|{
  866|   227k|    struct id_adapter {
  867|   227k|        constexpr void operator()()
  868|   227k|        {
  869|   227k|            arg_id = handler.on_arg_id();
  870|   227k|        }
  871|   227k|        constexpr void operator()(std::size_t id)
  872|   227k|        {
  873|   227k|            arg_id = handler.on_arg_id(id);
  874|   227k|        }
  875|       |
  876|   227k|        constexpr void on_error(const char* msg)
  877|   227k|        {
  878|   227k|            SCN_UNLIKELY_ATTR
  879|   227k|            handler.on_error(msg);
  880|   227k|        }
  881|       |
  882|   227k|        Handler& handler;
  883|   227k|        std::size_t arg_id;
  884|   227k|    };
  885|       |
  886|   227k|    ++begin;
  887|   227k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   227k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 227k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   227k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 227k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   227k|    else {
  899|   227k|        auto adapter = id_adapter{handler, 0};
  900|   227k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   227k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   227k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 227k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   227k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 227k, False: 0]
  ------------------
  911|   227k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   227k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   227k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 69.5k, False: 158k]
  |  |  |  Branch (157:45): [True: 0, False: 227k]
  |  |  |  Branch (157:45): [True: 69.5k, False: 158k]
  |  |  ------------------
  ------------------
  917|  69.5k|                handler.on_error("Unknown format specifier");
  918|  69.5k|                return begin;
  919|  69.5k|            }
  920|   227k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   227k|    }
  927|   158k|    return begin + 1;
  928|   227k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   227k|{
  400|   227k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   227k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 227k, False: 0]
  |  Branch (401:26): [True: 0, False: 227k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   227k|    handler();
  406|   227k|    return begin;
  407|   227k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   227k|        {
  869|   227k|            arg_id = handler.on_arg_id();
  870|   227k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   227k|    {
 1046|   227k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   227k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   227k|{
  795|   227k|    auto do_presentation = [&]() -> const CharT* {
  796|   227k|        if (*begin == CharT{'['}) {
  797|   227k|            auto set = parse_presentation_set(begin, end, handler);
  798|   227k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   227k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   227k|                return begin;
  803|   227k|            }
  804|   227k|            handler.on_character_set_string(set);
  805|   227k|            return begin;
  806|   227k|        }
  807|   227k|        if (*begin == CharT{'/'}) {
  808|   227k|            return parse_presentation_regex(begin, end, handler);
  809|   227k|        }
  810|   227k|        presentation_type type = parse_presentation_type(*begin++);
  811|   227k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   227k|            handler.on_error("Invalid type specifier in format string");
  813|   227k|            return begin;
  814|   227k|        }
  815|   227k|        handler.on_type(type);
  816|   227k|        return begin;
  817|   227k|    };
  818|       |
  819|   227k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 227k, False: 0]
  |  Branch (819:28): [True: 181k, False: 46.3k]
  ------------------
  820|   227k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 158k, False: 23.1k]
  |  Branch (820:36): [True: 135k, False: 23.1k]
  ------------------
  821|   135k|        return do_presentation();
  822|   135k|    }
  823|       |
  824|  92.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  92.7k|    begin = parse_align(begin, end, handler);
  830|  92.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  92.7k|    begin = parse_width(begin, end, handler);
  836|  92.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  92.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 23.1k, False: 69.5k]
  ------------------
  842|  23.1k|        handler.on_localized();
  843|  23.1k|        ++begin;
  844|  23.1k|    }
  845|  92.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  92.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 92.7k, False: 0]
  |  Branch (850:25): [True: 69.5k, False: 23.1k]
  ------------------
  851|  69.5k|        do_presentation();
  852|  69.5k|    }
  853|  92.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  92.7k|    return begin;
  859|  92.7k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   204k|    auto do_presentation = [&]() -> const CharT* {
  796|   204k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 204k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   204k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 204k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   204k|        presentation_type type = parse_presentation_type(*begin++);
  811|   204k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 46.3k, False: 158k]
  |  |  ------------------
  ------------------
  812|  46.3k|            handler.on_error("Invalid type specifier in format string");
  813|  46.3k|            return begin;
  814|  46.3k|        }
  815|   158k|        handler.on_type(type);
  816|   158k|        return begin;
  817|   204k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  92.7k|{
  489|  92.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  92.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  92.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  92.7k|    auto check_align = [](wchar_t ch) {
  492|  92.7k|        switch (ch) {
  493|  92.7k|            case L'<':
  494|  92.7k|                return align_type::left;
  495|  92.7k|            case L'>':
  496|  92.7k|                return align_type::right;
  497|  92.7k|            case L'^':
  498|  92.7k|                return align_type::center;
  499|  92.7k|            default:
  500|  92.7k|                return align_type::none;
  501|  92.7k|        }
  502|  92.7k|    };
  503|       |
  504|  92.7k|    auto potential_fill_len = code_point_length(begin, end);
  505|  92.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  |  Branch (157:45): [True: 0, False: 92.7k]
  |  |  |  Branch (157:45): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  506|  92.7k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  92.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  92.7k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  92.7k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  92.7k|    const auto begin_before_fill = begin;
  516|  92.7k|    begin += potential_fill_len;
  517|       |
  518|  92.7k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 92.7k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  92.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  92.7k|    const auto begin_after_fill = begin;
  524|  92.7k|    ++begin;
  525|       |
  526|  92.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 92.7k, False: 0]
  ------------------
  527|  92.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  92.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 92.7k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  92.7k|    }
  535|       |
  536|  92.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 92.7k, False: 0]
  ------------------
  537|  92.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 92.7k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  92.7k|        return begin_before_fill;
  542|  92.7k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  92.7k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   185k|    auto check_align = [](wchar_t ch) {
  492|   185k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 185k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 185k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 185k]
  ------------------
  498|      0|                return align_type::center;
  499|   185k|            default:
  ------------------
  |  Branch (499:13): [True: 185k, False: 0]
  ------------------
  500|   185k|                return align_type::none;
  501|   185k|        }
  502|   185k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  92.7k|{
  554|  92.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  92.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  92.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  92.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 46.3k, False: 46.3k]
  |  Branch (556:33): [True: 0, False: 46.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  92.7k|    return begin;
  567|  92.7k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  23.1k|    {
 1051|  23.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  23.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 11.5k, False: 11.5k]
  ------------------
 1053|  23.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 11.5k]
  ------------------
 1054|  23.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  23.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  23.1k|        Handler::on_localized();
 1063|  23.1k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.81M|{
  968|  1.81M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.81M|    handler.check_args_exhausted();
  970|  1.81M|    return handler.get_error();
  971|  1.81M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.81M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.81M|    auto begin = format.data();
  937|  1.81M|    auto it = begin;
  938|  1.81M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.26M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.81M, False: 1.44M]
  ------------------
  941|  1.81M|        const auto ch = *it++;
  942|  1.81M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.81M, False: 0]
  ------------------
  943|  1.81M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.81M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.81M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 367k, False: 1.44M]
  ------------------
  947|   367k|                return;
  948|   367k|            }
  949|  1.81M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.81M|    }
  960|       |
  961|  1.44M|    handler.on_literal_text(begin, end);
  962|  1.44M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.81M|{
  866|  1.81M|    struct id_adapter {
  867|  1.81M|        constexpr void operator()()
  868|  1.81M|        {
  869|  1.81M|            arg_id = handler.on_arg_id();
  870|  1.81M|        }
  871|  1.81M|        constexpr void operator()(std::size_t id)
  872|  1.81M|        {
  873|  1.81M|            arg_id = handler.on_arg_id(id);
  874|  1.81M|        }
  875|       |
  876|  1.81M|        constexpr void on_error(const char* msg)
  877|  1.81M|        {
  878|  1.81M|            SCN_UNLIKELY_ATTR
  879|  1.81M|            handler.on_error(msg);
  880|  1.81M|        }
  881|       |
  882|  1.81M|        Handler& handler;
  883|  1.81M|        std::size_t arg_id;
  884|  1.81M|    };
  885|       |
  886|  1.81M|    ++begin;
  887|  1.81M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.81M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.81M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.81M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.81M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.81M|    else {
  899|  1.81M|        auto adapter = id_adapter{handler, 0};
  900|  1.81M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.81M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.81M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.81M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.81M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.81M, False: 0]
  ------------------
  911|  1.81M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.81M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.81M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 122k, False: 1.69M]
  |  |  |  Branch (157:45): [True: 0, False: 1.81M]
  |  |  |  Branch (157:45): [True: 122k, False: 1.69M]
  |  |  ------------------
  ------------------
  917|   122k|                handler.on_error("Unknown format specifier");
  918|   122k|                return begin;
  919|   122k|            }
  920|  1.81M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.81M|    }
  927|  1.69M|    return begin + 1;
  928|  1.81M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.81M|{
  400|  1.81M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.81M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.81M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.81M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.81M|    handler();
  406|  1.81M|    return begin;
  407|  1.81M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.81M|        {
  869|  1.81M|            arg_id = handler.on_arg_id();
  870|  1.81M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.81M|    {
 1046|  1.81M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.81M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.81M|{
  795|  1.81M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.81M|        if (*begin == CharT{'['}) {
  797|  1.81M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.81M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.81M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.81M|                return begin;
  803|  1.81M|            }
  804|  1.81M|            handler.on_character_set_string(set);
  805|  1.81M|            return begin;
  806|  1.81M|        }
  807|  1.81M|        if (*begin == CharT{'/'}) {
  808|  1.81M|            return parse_presentation_regex(begin, end, handler);
  809|  1.81M|        }
  810|  1.81M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.81M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.81M|            handler.on_error("Invalid type specifier in format string");
  813|  1.81M|            return begin;
  814|  1.81M|        }
  815|  1.81M|        handler.on_type(type);
  816|  1.81M|        return begin;
  817|  1.81M|    };
  818|       |
  819|  1.81M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.81M, False: 0]
  |  Branch (819:28): [True: 1.73M, False: 81.6k]
  ------------------
  820|  1.81M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.69M, False: 40.8k]
  |  Branch (820:36): [True: 1.27M, False: 421k]
  ------------------
  821|  1.27M|        return do_presentation();
  822|  1.27M|    }
  823|       |
  824|   544k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   544k|    begin = parse_align(begin, end, handler);
  830|   544k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   544k|    begin = parse_width(begin, end, handler);
  836|   544k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   544k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 421k, False: 122k]
  ------------------
  842|   421k|        handler.on_localized();
  843|   421k|        ++begin;
  844|   421k|    }
  845|   544k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   544k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 544k, False: 0]
  |  Branch (850:25): [True: 122k, False: 421k]
  ------------------
  851|   122k|        do_presentation();
  852|   122k|    }
  853|   544k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   544k|    return begin;
  859|   544k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.04M|{
  464|  2.04M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.50M, False: 544k]
  |  Branch (464:33): [True: 1.50M, False: 0]
  ------------------
  465|  2.04M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 462k, False: 81.6k]
  |  Branch (465:33): [True: 462k, False: 0]
  ------------------
  466|  2.04M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.39M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.39M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.39M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.39M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.39M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.39M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.39M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 81.6k, False: 1.31M]
  |  |  ------------------
  ------------------
  812|  81.6k|            handler.on_error("Invalid type specifier in format string");
  813|  81.6k|            return begin;
  814|  81.6k|        }
  815|  1.31M|        handler.on_type(type);
  816|  1.31M|        return begin;
  817|  1.39M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.74M|{
  412|  1.74M|    switch (type) {
  413|   121k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 121k, False: 1.62M]
  ------------------
  414|   203k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 81.6k, False: 1.66M]
  ------------------
  415|   203k|            return presentation_type::int_binary;
  416|   338k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 338k, False: 1.40M]
  ------------------
  417|   338k|            return presentation_type::int_decimal;
  418|   461k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 461k, False: 1.28M]
  ------------------
  419|   461k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.74M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   179k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 179k, False: 1.56M]
  ------------------
  423|   179k|            return presentation_type::int_octal;
  424|   401k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 401k, False: 1.34M]
  ------------------
  425|   401k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.74M]
  ------------------
  426|   401k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.74M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.74M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 1.74M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.74M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 1.74M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.74M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 1.74M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.74M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 1.74M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.74M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.74M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.74M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.74M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.74M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.74M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.74M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   163k|        default:
  ------------------
  |  Branch (456:9): [True: 163k, False: 1.58M]
  ------------------
  457|   163k|            return presentation_type::none;
  458|  1.74M|    }
  459|  1.74M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   544k|{
  489|   544k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   544k|    auto check_align = [](wchar_t ch) {
  492|   544k|        switch (ch) {
  493|   544k|            case L'<':
  494|   544k|                return align_type::left;
  495|   544k|            case L'>':
  496|   544k|                return align_type::right;
  497|   544k|            case L'^':
  498|   544k|                return align_type::center;
  499|   544k|            default:
  500|   544k|                return align_type::none;
  501|   544k|        }
  502|   544k|    };
  503|       |
  504|   544k|    auto potential_fill_len = code_point_length(begin, end);
  505|   544k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  |  Branch (157:45): [True: 0, False: 544k]
  |  |  |  Branch (157:45): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  506|   544k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   544k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   544k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   544k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   544k|    const auto begin_before_fill = begin;
  516|   544k|    begin += potential_fill_len;
  517|       |
  518|   544k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 544k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   544k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   544k|    const auto begin_after_fill = begin;
  524|   544k|    ++begin;
  525|       |
  526|   544k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 544k, False: 0]
  ------------------
  527|   544k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 544k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   544k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 544k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   544k|    }
  535|       |
  536|   544k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 544k, False: 0]
  ------------------
  537|   544k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 544k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   544k|        return begin_before_fill;
  542|   544k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   544k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   707k|{
  471|   707k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   707k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   707k|        return 1;
  474|   707k|    }
  475|   707k|    else {
  476|   707k|        const auto lengths =
  477|   707k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   707k|            "\3\4";
  479|   707k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   707k|        return len;
  481|   707k|    }
  482|   707k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.08M|    auto check_align = [](wchar_t ch) {
  492|  1.08M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.08M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.08M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.08M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.08M|            default:
  ------------------
  |  Branch (499:13): [True: 1.08M, False: 0]
  ------------------
  500|  1.08M|                return align_type::none;
  501|  1.08M|        }
  502|  1.08M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   544k|{
  554|   544k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   544k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 462k, False: 81.6k]
  |  Branch (556:33): [True: 0, False: 462k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   544k|    return begin;
  567|   544k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   421k|    {
 1051|   421k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   421k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 199k, False: 222k]
  ------------------
 1053|   421k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 199k]
  ------------------
 1054|   421k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   421k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   421k|        Handler::on_localized();
 1063|   421k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   394k|{
  968|   394k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   394k|    handler.check_args_exhausted();
  970|   394k|    return handler.get_error();
  971|   394k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   394k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   394k|    auto begin = format.data();
  937|   394k|    auto it = begin;
  938|   394k|    const auto end = format.data() + format.size();
  939|       |
  940|   422k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 394k, False: 27.2k]
  ------------------
  941|   394k|        const auto ch = *it++;
  942|   394k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 394k, False: 0]
  ------------------
  943|   394k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   394k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   394k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 367k, False: 27.2k]
  ------------------
  947|   367k|                return;
  948|   367k|            }
  949|   394k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  |  Branch (157:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   394k|    }
  960|       |
  961|  27.2k|    handler.on_literal_text(begin, end);
  962|  27.2k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   394k|{
  866|   394k|    struct id_adapter {
  867|   394k|        constexpr void operator()()
  868|   394k|        {
  869|   394k|            arg_id = handler.on_arg_id();
  870|   394k|        }
  871|   394k|        constexpr void operator()(std::size_t id)
  872|   394k|        {
  873|   394k|            arg_id = handler.on_arg_id(id);
  874|   394k|        }
  875|       |
  876|   394k|        constexpr void on_error(const char* msg)
  877|   394k|        {
  878|   394k|            SCN_UNLIKELY_ATTR
  879|   394k|            handler.on_error(msg);
  880|   394k|        }
  881|       |
  882|   394k|        Handler& handler;
  883|   394k|        std::size_t arg_id;
  884|   394k|    };
  885|       |
  886|   394k|    ++begin;
  887|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   394k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 394k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   394k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 394k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   394k|    else {
  899|   394k|        auto adapter = id_adapter{handler, 0};
  900|   394k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   394k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   394k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 394k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   394k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 394k, False: 0]
  ------------------
  911|   394k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  157|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   394k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   394k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  157|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 122k, False: 272k]
  |  |  |  Branch (157:45): [True: 0, False: 394k]
  |  |  |  Branch (157:45): [True: 122k, False: 272k]
  |  |  ------------------
  ------------------
  917|   122k|                handler.on_error("Unknown format specifier");
  918|   122k|                return begin;
  919|   122k|            }
  920|   394k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   394k|    }
  927|   272k|    return begin + 1;
  928|   394k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   394k|{
  400|   394k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   394k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 394k, False: 0]
  |  Branch (401:26): [True: 0, False: 394k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   394k|    handler();
  406|   394k|    return begin;
  407|   394k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   394k|        {
  869|   394k|            arg_id = handler.on_arg_id();
  870|   394k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   394k|    {
 1046|   394k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  246|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   394k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   394k|{
  795|   394k|    auto do_presentation = [&]() -> const CharT* {
  796|   394k|        if (*begin == CharT{'['}) {
  797|   394k|            auto set = parse_presentation_set(begin, end, handler);
  798|   394k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   394k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   394k|                return begin;
  803|   394k|            }
  804|   394k|            handler.on_character_set_string(set);
  805|   394k|            return begin;
  806|   394k|        }
  807|   394k|        if (*begin == CharT{'/'}) {
  808|   394k|            return parse_presentation_regex(begin, end, handler);
  809|   394k|        }
  810|   394k|        presentation_type type = parse_presentation_type(*begin++);
  811|   394k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   394k|            handler.on_error("Invalid type specifier in format string");
  813|   394k|            return begin;
  814|   394k|        }
  815|   394k|        handler.on_type(type);
  816|   394k|        return begin;
  817|   394k|    };
  818|       |
  819|   394k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 394k, False: 0]
  |  Branch (819:28): [True: 313k, False: 81.6k]
  ------------------
  820|   394k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 272k, False: 40.8k]
  |  Branch (820:36): [True: 231k, False: 40.8k]
  ------------------
  821|   231k|        return do_presentation();
  822|   231k|    }
  823|       |
  824|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   163k|    begin = parse_align(begin, end, handler);
  830|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   163k|    begin = parse_width(begin, end, handler);
  836|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   163k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 40.8k, False: 122k]
  ------------------
  842|  40.8k|        handler.on_localized();
  843|  40.8k|        ++begin;
  844|  40.8k|    }
  845|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   163k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 163k, False: 0]
  |  Branch (850:25): [True: 122k, False: 40.8k]
  ------------------
  851|   122k|        do_presentation();
  852|   122k|    }
  853|   163k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   163k|    return begin;
  859|   163k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   354k|    auto do_presentation = [&]() -> const CharT* {
  796|   354k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 354k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   354k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 354k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   354k|        presentation_type type = parse_presentation_type(*begin++);
  811|   354k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  157|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 81.6k, False: 272k]
  |  |  ------------------
  ------------------
  812|  81.6k|            handler.on_error("Invalid type specifier in format string");
  813|  81.6k|            return begin;
  814|  81.6k|        }
  815|   272k|        handler.on_type(type);
  816|   272k|        return begin;
  817|   354k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   163k|{
  489|   163k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|   163k|    auto check_align = [](wchar_t ch) {
  492|   163k|        switch (ch) {
  493|   163k|            case L'<':
  494|   163k|                return align_type::left;
  495|   163k|            case L'>':
  496|   163k|                return align_type::right;
  497|   163k|            case L'^':
  498|   163k|                return align_type::center;
  499|   163k|            default:
  500|   163k|                return align_type::none;
  501|   163k|        }
  502|   163k|    };
  503|       |
  504|   163k|    auto potential_fill_len = code_point_length(begin, end);
  505|   163k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  157|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  |  Branch (157:45): [True: 0, False: 163k]
  |  |  |  Branch (157:45): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  506|   163k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   163k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   163k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   163k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   163k|    const auto begin_before_fill = begin;
  516|   163k|    begin += potential_fill_len;
  517|       |
  518|   163k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 163k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   163k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   163k|    const auto begin_after_fill = begin;
  524|   163k|    ++begin;
  525|       |
  526|   163k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 163k, False: 0]
  ------------------
  527|   163k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  157|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   163k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 163k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   163k|    }
  535|       |
  536|   163k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 163k, False: 0]
  ------------------
  537|   163k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 163k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   163k|        return begin_before_fill;
  542|   163k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   163k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   326k|    auto check_align = [](wchar_t ch) {
  492|   326k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 326k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 326k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 326k]
  ------------------
  498|      0|                return align_type::center;
  499|   326k|            default:
  ------------------
  |  Branch (499:13): [True: 326k, False: 0]
  ------------------
  500|   326k|                return align_type::none;
  501|   326k|        }
  502|   326k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   163k|{
  554|   163k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  246|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   163k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 81.6k, False: 81.6k]
  |  Branch (556:33): [True: 0, False: 81.6k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  156|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   163k|    return begin;
  567|   163k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  40.8k|    {
 1051|  40.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  40.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 20.4k, False: 20.4k]
  ------------------
 1053|  40.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 20.4k]
  ------------------
 1054|  40.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  40.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  40.8k|        Handler::on_localized();
 1063|  40.8k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.58M|{
  226|  2.58M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.58M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.58M|                  "\n"
  230|  2.58M|                  "Unsupported range type given as input to a scanning "
  231|  2.58M|                  "function.\n"
  232|  2.58M|                  "A range needs to have a character type (value type) "
  233|  2.58M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.58M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.58M|                  "to be included.\n"
  236|  2.58M|                  "See the scnlib documentation for more details.");
  237|  2.58M|    static_assert(
  238|  2.58M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.58M|        "\n"
  240|  2.58M|        "Unsupported range type given as input to a scanning "
  241|  2.58M|        "function.\n"
  242|  2.58M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.58M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.58M|        "not supported.");
  245|  2.58M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.58M|                  "\n"
  247|  2.58M|                  "Unsupported range type given as input to a scanning "
  248|  2.58M|                  "function.\n"
  249|  2.58M|                  "file_marker_found cannot be used as an "
  250|  2.58M|                  "source range type to scn::scan.\n"
  251|  2.58M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.58M|                  "and do not provide an explicit source range, "
  253|  2.58M|                  "or use scn::scan with a FILE* directly.");
  254|  2.58M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.58M|                  "\n"
  256|  2.58M|                  "Unsupported range type given as input to a scanning "
  257|  2.58M|                  "function.\n"
  258|  2.58M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.58M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.58M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.58M|                  "\n"
  262|  2.58M|                  "Unsupported range type given as input to a scanning "
  263|  2.58M|                  "function.\n"
  264|  2.58M|                  "A range needs to model forward_range and have a valid "
  265|  2.58M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.58M|                  "Examples of scannable ranges are std::string, "
  267|  2.58M|                  "std::string_view, "
  268|  2.58M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.58M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.58M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.58M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.58M|{
  153|  2.58M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.58M|        return std::basic_string_view{ranges::data(r),
  155|  2.58M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.58M|    }
  162|  2.58M|    else {
  163|  2.58M|        return invalid_char_type{};
  164|  2.58M|    }
  165|  2.58M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   262k|{
  226|   262k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   262k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   262k|                  "\n"
  230|   262k|                  "Unsupported range type given as input to a scanning "
  231|   262k|                  "function.\n"
  232|   262k|                  "A range needs to have a character type (value type) "
  233|   262k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   262k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   262k|                  "to be included.\n"
  236|   262k|                  "See the scnlib documentation for more details.");
  237|   262k|    static_assert(
  238|   262k|        !std::is_same_v<T, custom_char_traits>,
  239|   262k|        "\n"
  240|   262k|        "Unsupported range type given as input to a scanning "
  241|   262k|        "function.\n"
  242|   262k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   262k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   262k|        "not supported.");
  245|   262k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   262k|                  "\n"
  247|   262k|                  "Unsupported range type given as input to a scanning "
  248|   262k|                  "function.\n"
  249|   262k|                  "file_marker_found cannot be used as an "
  250|   262k|                  "source range type to scn::scan.\n"
  251|   262k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   262k|                  "and do not provide an explicit source range, "
  253|   262k|                  "or use scn::scan with a FILE* directly.");
  254|   262k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   262k|                  "\n"
  256|   262k|                  "Unsupported range type given as input to a scanning "
  257|   262k|                  "function.\n"
  258|   262k|                  "In order to be scannable, a range needs to satisfy "
  259|   262k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   262k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   262k|                  "\n"
  262|   262k|                  "Unsupported range type given as input to a scanning "
  263|   262k|                  "function.\n"
  264|   262k|                  "A range needs to model forward_range and have a valid "
  265|   262k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   262k|                  "Examples of scannable ranges are std::string, "
  267|   262k|                  "std::string_view, "
  268|   262k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   262k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   262k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   262k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   262k|{
  196|   262k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   262k|        return file_marker_found{};
  198|   262k|    }
  199|   262k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   262k|        if constexpr (ranges::input_range<Range>) {
  201|   262k|            return insufficient_range{};
  202|   262k|        }
  203|   262k|        else {
  204|   262k|            return invalid_input_range{};
  205|   262k|        }
  206|   262k|    }
  207|   262k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   262k|        return invalid_char_type{};
  209|   262k|    }
  210|   262k|    else {
  211|   262k|        return make_forward_scan_buffer(r);
  212|   262k|    }
  213|   262k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.44M|{
  226|  2.44M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.44M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.44M|                  "\n"
  230|  2.44M|                  "Unsupported range type given as input to a scanning "
  231|  2.44M|                  "function.\n"
  232|  2.44M|                  "A range needs to have a character type (value type) "
  233|  2.44M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.44M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.44M|                  "to be included.\n"
  236|  2.44M|                  "See the scnlib documentation for more details.");
  237|  2.44M|    static_assert(
  238|  2.44M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.44M|        "\n"
  240|  2.44M|        "Unsupported range type given as input to a scanning "
  241|  2.44M|        "function.\n"
  242|  2.44M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.44M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.44M|        "not supported.");
  245|  2.44M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.44M|                  "\n"
  247|  2.44M|                  "Unsupported range type given as input to a scanning "
  248|  2.44M|                  "function.\n"
  249|  2.44M|                  "file_marker_found cannot be used as an "
  250|  2.44M|                  "source range type to scn::scan.\n"
  251|  2.44M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.44M|                  "and do not provide an explicit source range, "
  253|  2.44M|                  "or use scn::scan with a FILE* directly.");
  254|  2.44M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.44M|                  "\n"
  256|  2.44M|                  "Unsupported range type given as input to a scanning "
  257|  2.44M|                  "function.\n"
  258|  2.44M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.44M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.44M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.44M|                  "\n"
  262|  2.44M|                  "Unsupported range type given as input to a scanning "
  263|  2.44M|                  "function.\n"
  264|  2.44M|                  "A range needs to model forward_range and have a valid "
  265|  2.44M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.44M|                  "Examples of scannable ranges are std::string, "
  267|  2.44M|                  "std::string_view, "
  268|  2.44M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.44M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.44M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.44M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.44M|{
  153|  2.44M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.44M|        return std::basic_string_view{ranges::data(r),
  155|  2.44M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.44M|    }
  162|  2.44M|    else {
  163|  2.44M|        return invalid_char_type{};
  164|  2.44M|    }
  165|  2.44M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   456k|{
  226|   456k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   456k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   456k|                  "\n"
  230|   456k|                  "Unsupported range type given as input to a scanning "
  231|   456k|                  "function.\n"
  232|   456k|                  "A range needs to have a character type (value type) "
  233|   456k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   456k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   456k|                  "to be included.\n"
  236|   456k|                  "See the scnlib documentation for more details.");
  237|   456k|    static_assert(
  238|   456k|        !std::is_same_v<T, custom_char_traits>,
  239|   456k|        "\n"
  240|   456k|        "Unsupported range type given as input to a scanning "
  241|   456k|        "function.\n"
  242|   456k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   456k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   456k|        "not supported.");
  245|   456k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   456k|                  "\n"
  247|   456k|                  "Unsupported range type given as input to a scanning "
  248|   456k|                  "function.\n"
  249|   456k|                  "file_marker_found cannot be used as an "
  250|   456k|                  "source range type to scn::scan.\n"
  251|   456k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   456k|                  "and do not provide an explicit source range, "
  253|   456k|                  "or use scn::scan with a FILE* directly.");
  254|   456k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   456k|                  "\n"
  256|   456k|                  "Unsupported range type given as input to a scanning "
  257|   456k|                  "function.\n"
  258|   456k|                  "In order to be scannable, a range needs to satisfy "
  259|   456k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   456k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   456k|                  "\n"
  262|   456k|                  "Unsupported range type given as input to a scanning "
  263|   456k|                  "function.\n"
  264|   456k|                  "A range needs to model forward_range and have a valid "
  265|   456k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   456k|                  "Examples of scannable ranges are std::string, "
  267|   456k|                  "std::string_view, "
  268|   456k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   456k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   456k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   456k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   456k|{
  196|   456k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   456k|        return file_marker_found{};
  198|   456k|    }
  199|   456k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   456k|        if constexpr (ranges::input_range<Range>) {
  201|   456k|            return insufficient_range{};
  202|   456k|        }
  203|   456k|        else {
  204|   456k|            return invalid_input_range{};
  205|   456k|        }
  206|   456k|    }
  207|   456k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   456k|        return invalid_char_type{};
  209|   456k|    }
  210|   456k|    else {
  211|   456k|        return make_forward_scan_buffer(r);
  212|   456k|    }
  213|   456k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  4.05M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.12M|    {
   45|  2.12M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.12M|    {
   66|  2.12M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.12M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.12M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.12M|        do_check_arg_id(id);
   74|  2.12M|        return id;
   75|  2.12M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.12M|{
  210|  2.12M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.12M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.12M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.98M|    {
   61|  1.98M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.98M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  4.10M|    {
   50|  4.10M|        return m_format.data();
   51|  4.10M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.21M|    {
   45|  2.21M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.21M|    {
   66|  2.21M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  157|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.21M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.21M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.21M|        do_check_arg_id(id);
   74|  2.21M|        return id;
   75|  2.21M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.21M|{
  210|  2.21M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.21M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   95|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major) * 10000000 /* 10,000,000 */ + (minor) * 10000 /* 10,000 */ + \
  |  |   55|      0|     (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.21M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.96M|    {
   61|  1.96M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.96M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  4.17M|    {
   50|  4.17M|        return m_format.data();
   51|  4.17M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  157|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  157|  6.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  157|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.08M|    {
  482|  5.08M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.08M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  5.08M|    {
  473|  5.08M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.08M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.44M|    {
  482|  2.44M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.44M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  2.44M|    {
  473|  2.44M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.44M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   437k|    {
  594|   437k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   437k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   437k|    {
  564|   437k|        return ranges::prev(it);
  565|   437k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.68M|    {
  482|  1.68M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.68M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  1.68M|    {
  473|  1.68M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.68M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.90M|    {
  513|  1.90M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.90M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.90M|    {
  505|  1.90M|        return ranges::next(it, n);
  506|  1.90M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.75M|    {
  549|  1.75M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.75M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.75M|    {
  541|  1.75M|        return ranges::distance(lhs, rhs);
  542|  1.75M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   544k|    {
  513|   544k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   544k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   544k|    {
  498|   544k|        it.batch_advance(n);
  499|   544k|        return it;
  500|   544k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  19.3k|    {
  549|  19.3k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  19.3k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTmicldtfp0_8positionEcldtfp_8positionEEEET_SC_NS5_12priority_tagILm1EEE:
  533|  19.3k|    {
  534|  19.3k|        return rhs.position() - lhs.position();
  535|  19.3k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.57M|    {
  482|  1.57M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  252|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.57M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  1.57M|    {
  473|  1.57M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  252|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.57M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   384k|    {
  594|   384k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   384k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   384k|    {
  564|   384k|        return ranges::prev(it);
  565|   384k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.63M|    {
  513|  1.63M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.63M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.63M|    {
  505|  1.63M|        return ranges::next(it, n);
  506|  1.63M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.50M|    {
  549|  1.50M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.50M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.50M|    {
  541|  1.50M|        return ranges::distance(lhs, rhs);
  542|  1.50M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   605k|    {
  513|   605k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   605k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTcmcldtfp_13batch_advancefp0_Efp_EEET_lNS5_12priority_tagILm1EEE:
  497|   605k|    {
  498|   605k|        it.batch_advance(n);
  499|   605k|        return it;
  500|   605k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  27.2k|    {
  549|  27.2k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  27.2k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu11__remove_cvIu20__remove_reference_tIDTmicldtfp0_8positionEcldtfp_8positionEEEET_SC_NS5_12priority_tagILm1EEE:
  533|  27.2k|    {
  534|  27.2k|        return rhs.position() - lhs.position();
  535|  27.2k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.34M|{
  343|  2.34M|    return {ranges::next(ranges::begin(source), n),
  344|  2.34M|            make_vscan_result_range_end(source)};
  345|  2.34M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.34M|{
  330|  2.34M|    return ranges::end(source);
  331|  2.34M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   351k|    {
  253|   351k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.34M|    {
  104|  2.34M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   651k|    {
   39|   651k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.34M|    {
  121|  2.34M|        return ranges::begin(m_range);
  122|  2.34M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   327k|    {
  253|   327k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   615k|    {
   39|   615k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   446k|    {
  253|   446k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|   837k|    {
   39|   837k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   379k|    {
  253|   379k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   721k|    {
   39|   721k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   456k|    {
  253|   456k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|   854k|    {
   39|   854k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   381k|    {
  253|   381k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   726k|    {
   39|   726k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  19.3k|{
  343|  19.3k|    return {ranges::next(ranges::begin(source), n),
  344|  19.3k|            make_vscan_result_range_end(source)};
  345|  19.3k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  19.3k|{
  330|  19.3k|    return ranges::end(source);
  331|  19.3k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  19.3k|    {
  104|  19.3k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  19.3k|    {
  121|  19.3k|        return ranges::begin(m_range);
  122|  19.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  3.86k|    {
  253|  3.86k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  3.86k|    {
  253|  3.86k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  3.86k|    {
  253|  3.86k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  3.86k|    {
  253|  3.86k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  3.86k|    {
  253|  3.86k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.01M|{
  343|  2.01M|    return {ranges::next(ranges::begin(source), n),
  344|  2.01M|            make_vscan_result_range_end(source)};
  345|  2.01M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.01M|{
  330|  2.01M|    return ranges::end(source);
  331|  2.01M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   299k|    {
  253|   299k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.01M|    {
  104|  2.01M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.01M|    {
  121|  2.01M|        return ranges::begin(m_range);
  122|  2.01M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   284k|    {
  253|   284k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   380k|    {
  253|   380k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   332k|    {
  253|   332k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   387k|    {
  253|   387k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   334k|    {
  253|   334k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  27.2k|{
  343|  27.2k|    return {ranges::next(ranges::begin(source), n),
  344|  27.2k|            make_vscan_result_range_end(source)};
  345|  27.2k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  27.2k|{
  330|  27.2k|    return ranges::end(source);
  331|  27.2k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  27.2k|    {
  104|  27.2k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  27.2k|    {
  121|  27.2k|        return ranges::begin(m_range);
  122|  27.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|      4|    {
  253|      4|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  6.80k|    {
  253|  6.80k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  6.80k|    {
  253|  6.80k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  6.80k|    {
  253|  6.80k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  6.80k|    {
  253|  6.80k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   177k|{
  117|   177k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   177k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   177k|{
   77|   177k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   177k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   177k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   177k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   177k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   355k|{
   55|   355k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 316k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   316k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   316k|    static_cast<    \
  |  |  251|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   355k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   177k|{
  201|   177k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   177k|                                                      format, {});
  203|   177k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   177k|{
  163|   177k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   177k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   177k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   177k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   177k|    static_cast<    \
  |  |  251|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   177k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  36.9k|{
  248|  36.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  36.9k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  36.9k|{
  229|  36.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  36.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  34.9k|    static_cast<    \
  |  |  251|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  34.9k|    static_cast<    \
  |  |  251|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  36.9k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   167k|{
  117|   167k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   167k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   167k|{
   77|   167k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   167k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   167k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   167k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   167k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   334k|{
   55|   334k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 295k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   295k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   295k|    static_cast<    \
  |  |  251|   295k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   295k|    static_cast<    \
  |  |  251|   295k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   334k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   167k|{
  201|   167k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   167k|                                                      format, {});
  203|   167k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   167k|{
  163|   167k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   167k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   167k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   167k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   167k|    static_cast<    \
  |  |  251|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   167k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  33.2k|{
  248|  33.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  33.2k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  33.2k|{
  229|  33.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  33.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  33.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 31.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  33.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  31.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.3k|    static_cast<    \
  |  |  251|  31.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.3k|    static_cast<    \
  |  |  251|  31.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  33.2k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   222k|{
  117|   222k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   222k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   222k|{
   77|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   222k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   222k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   444k|{
   55|   444k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 406k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   406k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   406k|    static_cast<    \
  |  |  251|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   406k|    static_cast<    \
  |  |  251|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   444k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   222k|{
  201|   222k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   222k|                                                      format, {});
  203|   222k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   222k|{
  163|   222k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   222k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   222k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   222k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   222k|    static_cast<    \
  |  |  251|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   222k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  42.8k|{
  248|  42.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  42.8k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  42.8k|{
  229|  42.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  42.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  42.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  42.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  42.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  42.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  40.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  40.9k|    static_cast<    \
  |  |  251|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  40.9k|    static_cast<    \
  |  |  251|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  42.8k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   191k|{
  117|   191k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   191k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   191k|{
   77|   191k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   191k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   191k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   191k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   382k|{
   55|   382k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 343k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   343k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   343k|    static_cast<    \
  |  |  251|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   343k|    static_cast<    \
  |  |  251|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   382k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   191k|{
  201|   191k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   191k|                                                      format, {});
  203|   191k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   191k|{
  163|   191k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   191k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   191k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   191k|    static_cast<    \
  |  |  251|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   191k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  37.1k|{
  248|  37.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  37.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  37.1k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  37.1k|{
  229|  37.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  37.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  35.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.1k|    static_cast<    \
  |  |  251|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.1k|    static_cast<    \
  |  |  251|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  37.1k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   226k|{
  117|   226k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   226k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   226k|{
   77|   226k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   226k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   226k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   226k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   453k|{
   55|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 414k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   414k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   414k|    static_cast<    \
  |  |  251|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   414k|    static_cast<    \
  |  |  251|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   453k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   226k|{
  201|   226k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   226k|                                                      format, {});
  203|   226k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   226k|{
  163|   226k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   226k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   226k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   226k|    static_cast<    \
  |  |  251|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   226k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  43.6k|{
  248|  43.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  43.6k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  43.6k|{
  229|  43.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  43.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  43.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  43.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  43.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  41.7k|    static_cast<    \
  |  |  251|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  41.7k|    static_cast<    \
  |  |  251|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  43.6k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISE_E4typeEJDpNSV_ISO_E4typeEEEE:
  116|   192k|{
  117|   192k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   192k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   192k|{
   77|   192k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   192k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   192k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   192k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   192k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   384k|{
   55|   384k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 345k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|   345k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   345k|    static_cast<    \
  |  |  251|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   345k|    static_cast<    \
  |  |  251|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   384k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSZ_ISP_E4typeEEEE:
  200|   192k|{
  201|   192k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   192k|                                                      format, {});
  203|   192k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   192k|{
  163|   192k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   192k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   192k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   192k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   192k|    static_cast<    \
  |  |  251|   192k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   192k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  247|  37.2k|{
  248|  37.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  37.2k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  37.2k|{
  229|  37.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  37.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  37.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 35.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  37.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  35.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.3k|    static_cast<    \
  |  |  251|  35.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.3k|    static_cast<    \
  |  |  251|  35.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  37.2k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  19.3k|{
  117|  19.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  19.3k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  19.3k|{
   77|  19.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  19.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  19.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  19.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  19.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  38.6k|{
   55|  38.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 2]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      2|    static_cast<    \
  |  |  251|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      2|    static_cast<    \
  |  |  251|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  38.6k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  19.3k|{
  201|  19.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  19.3k|                                                      format, {});
  203|  19.3k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  19.3k|{
  163|  19.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  19.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  19.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  19.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  19.3k|    static_cast<    \
  |  |  251|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.3k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  21.2k|{
  117|  21.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  21.2k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  21.2k|{
   77|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  21.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  21.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  42.5k|{
   55|  42.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 3.86k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|  3.86k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  42.5k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  21.2k|{
  201|  21.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  21.2k|                                                      format, {});
  203|  21.2k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  21.2k|{
  163|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  21.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.2k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  21.2k|{
  117|  21.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  21.2k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  21.2k|{
   77|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  21.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  21.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  42.5k|{
   55|  42.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 3.86k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|  3.86k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  42.5k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  21.2k|{
  201|  21.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  21.2k|                                                      format, {});
  203|  21.2k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  21.2k|{
  163|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  21.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.2k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  21.2k|{
  117|  21.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  21.2k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  21.2k|{
   77|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  21.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  21.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  42.5k|{
   55|  42.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 3.86k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|  3.86k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  42.5k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  21.2k|{
  201|  21.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  21.2k|                                                      format, {});
  203|  21.2k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  21.2k|{
  163|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  21.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.2k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  21.2k|{
  117|  21.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  21.2k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  21.2k|{
   77|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  21.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  21.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  42.5k|{
   55|  42.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 3.86k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|  3.86k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  42.5k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  21.2k|{
  201|  21.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  21.2k|                                                      format, {});
  203|  21.2k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  21.2k|{
  163|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  21.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.2k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISJ_E4typeEJDpNS10_IST_E4typeEEEE:
  116|  21.2k|{
  117|  21.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  21.2k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  21.2k|{
   77|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  21.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  21.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  42.5k|{
   55|  42.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38.6k, False: 3.86k]
  |  |  ------------------
  ------------------
   56|  38.6k|        return unexpected(result.error());
   57|  38.6k|    }
   58|  3.86k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  3.86k|    static_cast<    \
  |  |  251|  3.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  42.5k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS14_ISU_E4typeEEEE:
  200|  21.2k|{
  201|  21.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  21.2k|                                                      format, {});
  203|  21.2k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  21.2k|{
  163|  21.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  21.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  21.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  21.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  21.2k|    static_cast<    \
  |  |  251|  21.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.2k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  247|  1.93k|{
  248|  1.93k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.93k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  1.93k|{
  229|  1.93k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|  1.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.93k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   168k|{
   77|   168k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   168k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   168k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   168k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   337k|{
   55|   337k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 269k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   269k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   269k|    static_cast<    \
  |  |  251|   269k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   269k|    static_cast<    \
  |  |  251|   269k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   337k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   168k|{
  163|   168k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   168k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   168k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   168k|    static_cast<    \
  |  |  251|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   168k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  33.5k|{
  229|  33.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  33.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  30.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  30.0k|    static_cast<    \
  |  |  251|  30.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  30.0k|    static_cast<    \
  |  |  251|  30.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  33.5k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   162k|{
   77|   162k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   162k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   162k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   162k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   324k|{
   55|   324k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 256k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   256k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   256k|    static_cast<    \
  |  |  251|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   256k|    static_cast<    \
  |  |  251|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   324k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   162k|{
  163|   162k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   162k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   162k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   162k|    static_cast<    \
  |  |  251|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   162k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  30.6k|{
  229|  30.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  30.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 27.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  27.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  27.2k|    static_cast<    \
  |  |  251|  27.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  27.2k|    static_cast<    \
  |  |  251|  27.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  30.6k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   206k|{
   77|   206k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   206k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   206k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   206k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   413k|{
   55|   413k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 345k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   345k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   345k|    static_cast<    \
  |  |  251|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   345k|    static_cast<    \
  |  |  251|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   413k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   206k|{
  163|   206k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   206k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   206k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   206k|    static_cast<    \
  |  |  251|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   206k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  38.3k|{
  229|  38.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  38.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  38.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  38.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  34.9k|    static_cast<    \
  |  |  251|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  34.9k|    static_cast<    \
  |  |  251|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  38.3k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   184k|{
   77|   184k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   184k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   184k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   184k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   369k|{
   55|   369k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 301k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   301k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   301k|    static_cast<    \
  |  |  251|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   301k|    static_cast<    \
  |  |  251|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   369k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   184k|{
  163|   184k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   184k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   184k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   184k|    static_cast<    \
  |  |  251|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   184k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  34.3k|{
  229|  34.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  34.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 30.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  30.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  30.9k|    static_cast<    \
  |  |  251|  30.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  30.9k|    static_cast<    \
  |  |  251|  30.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  34.3k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   210k|{
   77|   210k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   210k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   210k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   210k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   210k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   420k|{
   55|   420k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 352k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   352k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   352k|    static_cast<    \
  |  |  251|   352k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   352k|    static_cast<    \
  |  |  251|   352k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   420k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   210k|{
  163|   210k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   210k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   210k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   210k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   210k|    static_cast<    \
  |  |  251|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   210k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  39.0k|{
  229|  39.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  39.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  39.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  39.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  35.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.6k|    static_cast<    \
  |  |  251|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  35.6k|    static_cast<    \
  |  |  251|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  39.0k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT0_EEEEEOSH_T2_NSF_5tupleIJSS_EEE:
   76|   185k|{
   77|   185k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   185k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   185k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   185k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   185k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   371k|{
   55|   371k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 303k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|   303k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   303k|    static_cast<    \
  |  |  251|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|   303k|    static_cast<    \
  |  |  251|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   371k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSI_T3_NS3_5tupleIJST_EEE:
  162|   185k|{
  163|   185k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   185k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   185k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   185k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|   185k|    static_cast<    \
  |  |  251|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   185k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT0_EEEEEOSF_SP_:
  228|  34.4k|{
  229|  34.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  34.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  34.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  34.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  31.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.0k|    static_cast<    \
  |  |  251|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|  31.0k|    static_cast<    \
  |  |  251|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  34.4k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.0k|{
   77|  34.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.0k|{
   55|  68.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 2]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      2|    static_cast<    \
  |  |  251|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      2|    static_cast<    \
  |  |  251|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.0k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.0k|{
  163|  34.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.0k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  34.0k|{
   77|  34.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.0k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.0k|{
   55|  68.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  68.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 4]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|      4|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      4|    static_cast<    \
  |  |  251|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|      4|    static_cast<    \
  |  |  251|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.0k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  34.0k|{
  163|  34.0k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.0k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  34.0k|    static_cast<    \
  |  |  251|  34.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.0k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  37.4k|{
   77|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  74.8k|{
   55|  74.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 6.80k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|  6.80k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  74.8k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  37.4k|{
  163|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.4k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  37.4k|{
   77|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  74.8k|{
   55|  74.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 6.80k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|  6.80k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  74.8k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  37.4k|{
  163|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.4k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  37.4k|{
   77|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  74.8k|{
   55|  74.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 6.80k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|  6.80k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  74.8k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  37.4k|{
  163|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.4k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT0_EEEEEOSM_T2_NS7_5tupleIJSX_EEE:
   76|  37.4k|{
   77|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  74.8k|{
   55|  74.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 68.0k, False: 6.80k]
  |  |  ------------------
  ------------------
   56|  68.0k|        return unexpected(result.error());
   57|  68.0k|    }
   58|  6.80k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  250|  6.80k|    static_cast<    \
  |  |  251|  6.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  74.8k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSN_T3_NS3_5tupleIJSY_EEE:
  162|  37.4k|{
  163|  37.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  250|  37.4k|    static_cast<    \
  |  |  251|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.4k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT0_EEEEEOSK_SU_:
  228|  3.40k|{
  229|  3.40k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.40k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.40k|    }                                                  \
  |  |  |  |   70|  3.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.40k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   262k|{
  486|   262k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   262k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   262k|    {
  378|   262k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   262k|    {
  360|   262k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   262k|    {
  129|   262k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   262k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   603k|    {
  382|   603k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 980, False: 602k]
  ------------------
  383|    980|            return false;
  384|    980|        }
  385|   602k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 409k, False: 193k]
  ------------------
  386|   409k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   409k|                                          this->m_current_view.begin(),
  388|   409k|                                          this->m_current_view.end());
  389|   409k|        }
  390|   602k|        m_latest = *m_cursor;
  391|   602k|        ++m_cursor;
  392|   602k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   602k|        return true;
  394|   603k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   262k|    {
   49|   262k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   262k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   456k|{
  486|   456k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  252|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   456k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   456k|    {
  378|   456k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   456k|    {
  360|   456k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   456k|    {
  129|   456k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   456k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.45M|    {
  382|  1.45M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.34k, False: 1.45M]
  ------------------
  383|  1.34k|            return false;
  384|  1.34k|        }
  385|  1.45M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.12M, False: 333k]
  ------------------
  386|  1.12M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.12M|                                          this->m_current_view.begin(),
  388|  1.12M|                                          this->m_current_view.end());
  389|  1.12M|        }
  390|  1.45M|        m_latest = *m_cursor;
  391|  1.45M|        ++m_cursor;
  392|  1.45M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.45M|        return true;
  394|  1.45M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   456k|    {
   49|   456k|        SCN_UNUSED(position);
  ------------------
  |  |  231|   456k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   456k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  19.7M|    {
  173|  19.7M|        return m_end == nullptr;
  174|  19.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  1.39M|    {
  189|  1.39M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.39M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.39M|        return parent()->get_segment_starting_at(position());
  195|  1.39M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  10.4M|    {
  183|  10.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  10.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  10.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  1.39M|    {
   79|  1.39M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 409k, False: 989k]
  |  |  ------------------
  ------------------
   80|  1.39M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   409k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   409k|        }
   83|   989k|        const auto start = pos - m_putback_buffer.size();
   84|   989k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|   989k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   989k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|   989k|        return m_current_view.substr(start);
   86|   989k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   332k|    {
  178|   332k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|   332k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   332k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.58M|    {
  168|  2.58M|        return m_position;
  169|  2.58M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   788k|    {
  101|   788k|        return m_is_contiguous;
  102|   788k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  42.5M|    {
  173|  42.5M|        return m_end == nullptr;
  174|  42.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  2.74M|    {
  189|  2.74M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 2.74M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  2.74M|        return parent()->get_segment_starting_at(position());
  195|  2.74M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  22.9M|    {
  183|  22.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|  22.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  22.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  2.74M|    {
   79|  2.74M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  2.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.04M, False: 1.70M]
  |  |  ------------------
  ------------------
   80|  2.74M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  1.04M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  1.04M|        }
   83|  1.70M|        const auto start = pos - m_putback_buffer.size();
   84|  1.70M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  246|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|  1.70M|        return m_current_view.substr(start);
   86|  1.70M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   578k|    {
  178|   578k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  246|   578k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   578k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|   578k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   578k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  5.46M|    {
  168|  5.46M|        return m_position;
  169|  5.46M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.36M|    {
  101|  1.36M|        return m_is_contiguous;
  102|  1.36M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   262k|{
  322|   262k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 262k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   262k|    return ranges::subrange{forward_iterator{this, 0},
  327|   262k|                            ranges_std::default_sentinel};
  328|   262k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   262k|    {
  155|   262k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   262k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   262k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   877k|    {
  258|   877k|        return x.is_at_end();
  259|   877k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.88M|    {
  302|  1.88M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.88M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.88M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.88M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.88M|        return !read_at_position();
  309|  1.88M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  5.14M|    {
  282|  5.14M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  5.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  5.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.14M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.14M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.14M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  5.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.54M, False: 603k]
  |  |  ------------------
  ------------------
  289|  4.54M|            return true;
  290|  4.54M|        }
  291|       |
  292|  1.20M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 603k, False: 602k]
  ------------------
  293|   603k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 980, False: 602k]
  ------------------
  294|    980|                return false;
  295|    980|            }
  296|   603k|        }
  297|   602k|        return true;
  298|   603k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  6.68M|    {
   59|  6.68M|        return m_putback_buffer.size() + m_current_view.size();
   60|  6.68M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.01M|    {
  269|  1.01M|        return !x.is_at_end();
  270|  1.01M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.09M|    {
  217|  2.09M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.09M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.09M|        auto res = read_at_position();
  226|  2.09M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  2.09M|        return parent()->get_character_at(m_position);
  228|  2.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.09M|    {
   90|  2.09M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.66M, False: 433k]
  |  |  ------------------
  ------------------
   91|  2.09M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.66M|            return m_putback_buffer[pos];
   93|  1.66M|        }
   94|   433k|        const auto start = pos - m_putback_buffer.size();
   95|   433k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|   433k|        return m_current_view[start];
   97|   433k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  1.16M|    {
  203|  1.16M|        ++m_position;
  204|  1.16M|        std::ignore = read_at_position();
  205|  1.16M|        return *this;
  206|  1.16M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  1.17M|    {
  252|  1.17M|        return !(lhs == rhs);
  253|  1.17M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.34M|    {
  247|  1.34M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.34M, False: 0]
  |  Branch (247:46): [True: 555k, False: 787k]
  ------------------
  248|  1.34M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   544k|    {
  232|   544k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   544k|        m_position += n;
  234|   544k|        return *this;
  235|   544k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   243k|    {
   54|   243k|        sync(0);
   55|   243k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   456k|{
  322|   456k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 456k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   456k|    return ranges::subrange{forward_iterator{this, 0},
  327|   456k|                            ranges_std::default_sentinel};
  328|   456k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   456k|    {
  155|   456k|        SCN_EXPECT(parent);
  ------------------
  |  |  246|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   456k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  246|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   456k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.51M|    {
  258|  1.51M|        return x.is_at_end();
  259|  1.51M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.01M|    {
  302|  4.01M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.01M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.01M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.01M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.01M|        return !read_at_position();
  309|  4.01M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  11.3M|    {
  282|  11.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  11.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 11.3M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  11.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  156|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 9.86M, False: 1.45M]
  |  |  ------------------
  ------------------
  289|  9.86M|            return true;
  290|  9.86M|        }
  291|       |
  292|  2.91M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.45M, False: 1.45M]
  ------------------
  293|  1.45M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.34k, False: 1.45M]
  ------------------
  294|  1.34k|                return false;
  295|  1.34k|            }
  296|  1.45M|        }
  297|  1.45M|        return true;
  298|  1.45M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  14.8M|    {
   59|  14.8M|        return m_putback_buffer.size() + m_current_view.size();
   60|  14.8M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  2.49M|    {
  269|  2.49M|        return !x.is_at_end();
  270|  2.49M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  4.46M|    {
  217|  4.46M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  246|  4.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  4.46M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 4.46M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  246|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  4.46M|        auto res = read_at_position();
  226|  4.46M|        SCN_EXPECT(res);
  ------------------
  |  |  246|  4.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|  4.46M|        return parent()->get_character_at(m_position);
  228|  4.46M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  4.46M|    {
   90|  4.46M|        if (SCN_UNLIKELY(
  ------------------
  |  |  157|  4.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.29M, False: 1.16M]
  |  |  ------------------
  ------------------
   91|  4.46M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  3.29M|            return m_putback_buffer[pos];
   93|  3.29M|        }
   94|  1.16M|        const auto start = pos - m_putback_buffer.size();
   95|  1.16M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  246|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|  1.16M|        return m_current_view[start];
   97|  1.16M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.84M|    {
  203|  2.84M|        ++m_position;
  204|  2.84M|        std::ignore = read_at_position();
  205|  2.84M|        return *this;
  206|  2.84M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  2.78M|    {
  252|  2.78M|        return !(lhs == rhs);
  253|  2.78M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  3.07M|    {
  247|  3.07M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 3.07M, False: 0]
  |  Branch (247:46): [True: 1.29M, False: 1.78M]
  ------------------
  248|  3.07M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   605k|    {
  232|   605k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  246|   605k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   605k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|   605k|        m_position += n;
  234|   605k|        return *this;
  235|   605k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   428k|    {
   54|   428k|        sync(0);
   55|   428k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  1.13M|{
   72|  1.13M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.13M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.13M|    }
   75|  1.13M|    else if constexpr (sizeof(U) == 2) {
   76|  1.13M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.13M|    }
   78|  1.13M|    else {
   79|       |        // utf-32
   80|  1.13M|        static_assert(sizeof(U) == 4);
   81|  1.13M|        SCN_UNUSED(ch);
   82|  1.13M|        return 1;
   83|  1.13M|    }
   84|  1.13M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  1.13M|{
   36|  1.13M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  1.13M|    SCN_GCC_COMPAT_PUSH
   39|  1.13M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  1.13M|    constexpr char lengths[] =
   41|  1.13M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  1.13M|        "\1\1\1\1\1\1\1\1"
   43|  1.13M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  1.13M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  1.13M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  1.13M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  1.13M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  1.13M|    SCN_GCC_COMPAT_POP
   50|  1.13M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  35.8M|{
   72|  35.8M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  35.8M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  35.8M|    }
   75|  35.8M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  35.8M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  35.8M|    }
   78|  35.8M|    else {
   79|       |        // utf-32
   80|  35.8M|        static_assert(sizeof(U) == 4);
   81|  35.8M|        SCN_UNUSED(ch);
  ------------------
  |  |  231|  35.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  35.8M|        return 1;
   83|  35.8M|    }
   84|  35.8M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   693k|{
   36|   693k|#define SCN_VISIT(Type)                                         \
   37|   693k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   693k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   693k|    }                                                           \
   40|   693k|    else {                                                      \
   41|   693k|        return vis(monostate_val);                              \
   42|   693k|    }
   43|       |
   44|   693k|    monostate monostate_val{};
   45|       |
   46|   693k|    switch (arg.m_type) {
   47|   110k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 110k, False: 582k]
  ------------------
   48|   110k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   110k|    }                                                           \
  |  |   40|   110k|    else {                                                      \
  |  |   41|   110k|        return vis(monostate_val);                              \
  |  |   42|   110k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 693k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   128k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 128k, False: 564k]
  ------------------
   52|   128k|            SCN_VISIT(int);
  ------------------
  |  |   37|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   128k|    }                                                           \
  |  |   40|   128k|    else {                                                      \
  |  |   41|   128k|        return vis(monostate_val);                              \
  |  |   42|   128k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 693k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   130k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 130k, False: 562k]
  ------------------
   56|   130k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   130k|    }                                                           \
  |  |   40|   130k|    else {                                                      \
  |  |   41|   130k|        return vis(monostate_val);                              \
  |  |   42|   130k|    }
  ------------------
   57|  99.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 99.7k, False: 593k]
  ------------------
   58|  99.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  99.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  99.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  99.7k|    }                                                           \
  |  |   40|  99.7k|    else {                                                      \
  |  |   41|  99.7k|        return vis(monostate_val);                              \
  |  |   42|  99.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 693k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   111k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 111k, False: 581k]
  ------------------
   62|   111k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   111k|    }                                                           \
  |  |   40|   111k|    else {                                                      \
  |  |   41|   111k|        return vis(monostate_val);                              \
  |  |   42|   111k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 693k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   111k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 111k, False: 581k]
  ------------------
   66|   111k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   111k|    }                                                           \
  |  |   40|   111k|    else {                                                      \
  |  |   41|   111k|        return vis(monostate_val);                              \
  |  |   42|   111k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 693k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 693k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 693k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 693k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 693k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 693k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 693k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 693k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 693k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 693k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 693k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 693k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 693k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 693k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 693k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 693k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 693k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   693k|            SCN_CLANG_POP
  114|   693k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  34.7k|{
   36|  34.7k|#define SCN_VISIT(Type)                                         \
   37|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  34.7k|    }                                                           \
   40|  34.7k|    else {                                                      \
   41|  34.7k|        return vis(monostate_val);                              \
   42|  34.7k|    }
   43|       |
   44|  34.7k|    monostate monostate_val{};
   45|       |
   46|  34.7k|    switch (arg.m_type) {
   47|  5.79k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 5.79k, False: 28.9k]
  ------------------
   48|  5.79k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 34.7k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  5.79k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 5.79k, False: 28.9k]
  ------------------
   52|  5.79k|            SCN_VISIT(int);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 34.7k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  5.79k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 5.79k, False: 28.9k]
  ------------------
   56|  5.79k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   57|  5.79k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 5.79k, False: 28.9k]
  ------------------
   58|  5.79k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 34.7k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  5.79k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 5.79k, False: 28.9k]
  ------------------
   62|  5.79k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 34.7k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  5.79k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 5.79k, False: 28.9k]
  ------------------
   66|  5.79k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  5.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.79k|    }                                                           \
  |  |   40|  5.79k|    else {                                                      \
  |  |   41|  5.79k|        return vis(monostate_val);                              \
  |  |   42|  5.79k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 34.7k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 34.7k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 34.7k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 34.7k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 34.7k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 34.7k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 34.7k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 34.7k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 34.7k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 34.7k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 34.7k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 34.7k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 34.7k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 34.7k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 34.7k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 34.7k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 34.7k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  34.7k|            SCN_CLANG_POP
  114|  34.7k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.82M|{
   36|  1.82M|#define SCN_VISIT(Type)                                         \
   37|  1.82M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.82M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.82M|    }                                                           \
   40|  1.82M|    else {                                                      \
   41|  1.82M|        return vis(monostate_val);                              \
   42|  1.82M|    }
   43|       |
   44|  1.82M|    monostate monostate_val{};
   45|       |
   46|  1.82M|    switch (arg.m_type) {
   47|   269k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 269k, False: 1.55M]
  ------------------
   48|   269k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   269k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   269k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   269k|    }                                                           \
  |  |   40|   269k|    else {                                                      \
  |  |   41|   269k|        return vis(monostate_val);                              \
  |  |   42|   269k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.82M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   347k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 347k, False: 1.47M]
  ------------------
   52|   347k|            SCN_VISIT(int);
  ------------------
  |  |   37|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   347k|    }                                                           \
  |  |   40|   347k|    else {                                                      \
  |  |   41|   347k|        return vis(monostate_val);                              \
  |  |   42|   347k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.82M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   354k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 354k, False: 1.46M]
  ------------------
   56|   354k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   354k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   354k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   354k|    }                                                           \
  |  |   40|   354k|    else {                                                      \
  |  |   41|   354k|        return vis(monostate_val);                              \
  |  |   42|   354k|    }
  ------------------
   57|   256k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 256k, False: 1.56M]
  ------------------
   58|   256k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   256k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   256k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   256k|    }                                                           \
  |  |   40|   256k|    else {                                                      \
  |  |   41|   256k|        return vis(monostate_val);                              \
  |  |   42|   256k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.82M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   296k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 296k, False: 1.52M]
  ------------------
   62|   296k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   296k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   296k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   296k|    }                                                           \
  |  |   40|   296k|    else {                                                      \
  |  |   41|   296k|        return vis(monostate_val);                              \
  |  |   42|   296k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.82M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   298k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 298k, False: 1.52M]
  ------------------
   66|   298k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   298k|    }                                                           \
  |  |   40|   298k|    else {                                                      \
  |  |   41|   298k|        return vis(monostate_val);                              \
  |  |   42|   298k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.82M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.82M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.82M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.82M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.82M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.82M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.82M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.82M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.82M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.82M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.82M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.82M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.82M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.82M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.82M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.82M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.82M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.82M|            SCN_CLANG_POP
  114|  1.82M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   158k|{
   36|   158k|#define SCN_VISIT(Type)                                         \
   37|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   158k|    }                                                           \
   40|   158k|    else {                                                      \
   41|   158k|        return vis(monostate_val);                              \
   42|   158k|    }
   43|       |
   44|   158k|    monostate monostate_val{};
   45|       |
   46|   158k|    switch (arg.m_type) {
   47|  23.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 23.1k, False: 135k]
  ------------------
   48|  23.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  23.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  23.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  23.1k|    }                                                           \
  |  |   40|  23.1k|    else {                                                      \
  |  |   41|  23.1k|        return vis(monostate_val);                              \
  |  |   42|  23.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 158k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  27.0k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 27.0k, False: 131k]
  ------------------
   52|  27.0k|            SCN_VISIT(int);
  ------------------
  |  |   37|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.0k|    }                                                           \
  |  |   40|  27.0k|    else {                                                      \
  |  |   41|  27.0k|        return vis(monostate_val);                              \
  |  |   42|  27.0k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 158k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  27.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 27.0k, False: 131k]
  ------------------
   56|  27.0k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.0k|    }                                                           \
  |  |   40|  27.0k|    else {                                                      \
  |  |   41|  27.0k|        return vis(monostate_val);                              \
  |  |   42|  27.0k|    }
  ------------------
   57|  27.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 27.0k, False: 131k]
  ------------------
   58|  27.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.0k|    }                                                           \
  |  |   40|  27.0k|    else {                                                      \
  |  |   41|  27.0k|        return vis(monostate_val);                              \
  |  |   42|  27.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 158k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  27.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 27.0k, False: 131k]
  ------------------
   62|  27.0k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.0k|    }                                                           \
  |  |   40|  27.0k|    else {                                                      \
  |  |   41|  27.0k|        return vis(monostate_val);                              \
  |  |   42|  27.0k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 158k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  27.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 27.0k, False: 131k]
  ------------------
   66|  27.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  27.0k|    }                                                           \
  |  |   40|  27.0k|    else {                                                      \
  |  |   41|  27.0k|        return vis(monostate_val);                              \
  |  |   42|  27.0k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 158k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 158k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 158k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 158k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 158k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 158k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 158k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 158k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 158k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 158k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 158k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 158k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 158k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 158k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 158k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 158k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 158k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   158k|            SCN_CLANG_POP
  114|   158k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   631k|{
   36|   631k|#define SCN_VISIT(Type)                                         \
   37|   631k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   631k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   631k|    }                                                           \
   40|   631k|    else {                                                      \
   41|   631k|        return vis(monostate_val);                              \
   42|   631k|    }
   43|       |
   44|   631k|    monostate monostate_val{};
   45|       |
   46|   631k|    switch (arg.m_type) {
   47|   100k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 100k, False: 530k]
  ------------------
   48|   100k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   100k|    }                                                           \
  |  |   40|   100k|    else {                                                      \
  |  |   41|   100k|        return vis(monostate_val);                              \
  |  |   42|   100k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 631k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   115k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 115k, False: 516k]
  ------------------
   52|   115k|            SCN_VISIT(int);
  ------------------
  |  |   37|   115k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   115k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   115k|    }                                                           \
  |  |   40|   115k|    else {                                                      \
  |  |   41|   115k|        return vis(monostate_val);                              \
  |  |   42|   115k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 631k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   117k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 117k, False: 514k]
  ------------------
   56|   117k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   117k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   117k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   117k|    }                                                           \
  |  |   40|   117k|    else {                                                      \
  |  |   41|   117k|        return vis(monostate_val);                              \
  |  |   42|   117k|    }
  ------------------
   57|  92.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 92.0k, False: 539k]
  ------------------
   58|  92.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  92.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  92.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  92.0k|    }                                                           \
  |  |   40|  92.0k|    else {                                                      \
  |  |   41|  92.0k|        return vis(monostate_val);                              \
  |  |   42|  92.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 631k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   103k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 103k, False: 528k]
  ------------------
   62|   103k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   103k|    }                                                           \
  |  |   40|   103k|    else {                                                      \
  |  |   41|   103k|        return vis(monostate_val);                              \
  |  |   42|   103k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 631k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   103k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 103k, False: 527k]
  ------------------
   66|   103k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   103k|    }                                                           \
  |  |   40|   103k|    else {                                                      \
  |  |   41|   103k|        return vis(monostate_val);                              \
  |  |   42|   103k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 631k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 631k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 631k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 631k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 631k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 631k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 631k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 631k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 631k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 631k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 631k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 631k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 631k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 631k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 631k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 631k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 631k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   631k|            SCN_CLANG_POP
  114|   631k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.69M|{
   36|  1.69M|#define SCN_VISIT(Type)                                         \
   37|  1.69M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.69M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.69M|    }                                                           \
   40|  1.69M|    else {                                                      \
   41|  1.69M|        return vis(monostate_val);                              \
   42|  1.69M|    }
   43|       |
   44|  1.69M|    monostate monostate_val{};
   45|       |
   46|  1.69M|    switch (arg.m_type) {
   47|   250k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 250k, False: 1.44M]
  ------------------
   48|   250k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   250k|    }                                                           \
  |  |   40|   250k|    else {                                                      \
  |  |   41|   250k|        return vis(monostate_val);                              \
  |  |   42|   250k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.69M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   316k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 316k, False: 1.37M]
  ------------------
   52|   316k|            SCN_VISIT(int);
  ------------------
  |  |   37|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   316k|    }                                                           \
  |  |   40|   316k|    else {                                                      \
  |  |   41|   316k|        return vis(monostate_val);                              \
  |  |   42|   316k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.69M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   321k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 321k, False: 1.37M]
  ------------------
   56|   321k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   321k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   321k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   321k|    }                                                           \
  |  |   40|   321k|    else {                                                      \
  |  |   41|   321k|        return vis(monostate_val);                              \
  |  |   42|   321k|    }
  ------------------
   57|   243k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 243k, False: 1.45M]
  ------------------
   58|   243k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   243k|    }                                                           \
  |  |   40|   243k|    else {                                                      \
  |  |   41|   243k|        return vis(monostate_val);                              \
  |  |   42|   243k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.69M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   280k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 280k, False: 1.41M]
  ------------------
   62|   280k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   280k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   280k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   280k|    }                                                           \
  |  |   40|   280k|    else {                                                      \
  |  |   41|   280k|        return vis(monostate_val);                              \
  |  |   42|   280k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.69M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   281k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 281k, False: 1.41M]
  ------------------
   66|   281k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   281k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   281k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   281k|    }                                                           \
  |  |   40|   281k|    else {                                                      \
  |  |   41|   281k|        return vis(monostate_val);                              \
  |  |   42|   281k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.69M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.69M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.69M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.69M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.69M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.69M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.69M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.69M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.69M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.69M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.69M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.69M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.69M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.69M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.69M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.69M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.69M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.69M|            SCN_CLANG_POP
  114|  1.69M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  61.2k|{
   36|  61.2k|#define SCN_VISIT(Type)                                         \
   37|  61.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  61.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  61.2k|    }                                                           \
   40|  61.2k|    else {                                                      \
   41|  61.2k|        return vis(monostate_val);                              \
   42|  61.2k|    }
   43|       |
   44|  61.2k|    monostate monostate_val{};
   45|       |
   46|  61.2k|    switch (arg.m_type) {
   47|  10.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 10.2k, False: 51.0k]
  ------------------
   48|  10.2k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 61.2k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  10.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 10.2k, False: 51.0k]
  ------------------
   52|  10.2k|            SCN_VISIT(int);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 61.2k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  10.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 10.2k, False: 51.0k]
  ------------------
   56|  10.2k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   57|  10.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 10.2k, False: 51.0k]
  ------------------
   58|  10.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 61.2k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  10.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 10.2k, False: 51.0k]
  ------------------
   62|  10.2k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 61.2k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  10.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 10.2k, False: 51.0k]
  ------------------
   66|  10.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  10.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.2k|    }                                                           \
  |  |   40|  10.2k|    else {                                                      \
  |  |   41|  10.2k|        return vis(monostate_val);                              \
  |  |   42|  10.2k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 61.2k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 61.2k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 61.2k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 61.2k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 61.2k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 61.2k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 61.2k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 61.2k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 61.2k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 61.2k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 61.2k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 61.2k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 61.2k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 61.2k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 61.2k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 61.2k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 61.2k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  61.2k|            SCN_CLANG_POP
  114|  61.2k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   272k|{
   36|   272k|#define SCN_VISIT(Type)                                         \
   37|   272k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   272k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   272k|    }                                                           \
   40|   272k|    else {                                                      \
   41|   272k|        return vis(monostate_val);                              \
   42|   272k|    }
   43|       |
   44|   272k|    monostate monostate_val{};
   45|       |
   46|   272k|    switch (arg.m_type) {
   47|  40.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 40.8k, False: 231k]
  ------------------
   48|  40.8k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  40.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  40.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  40.8k|    }                                                           \
  |  |   40|  40.8k|    else {                                                      \
  |  |   41|  40.8k|        return vis(monostate_val);                              \
  |  |   42|  40.8k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 272k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  47.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 47.6k, False: 224k]
  ------------------
   52|  47.6k|            SCN_VISIT(int);
  ------------------
  |  |   37|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.6k|    }                                                           \
  |  |   40|  47.6k|    else {                                                      \
  |  |   41|  47.6k|        return vis(monostate_val);                              \
  |  |   42|  47.6k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 272k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  47.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 47.6k, False: 224k]
  ------------------
   56|  47.6k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.6k|    }                                                           \
  |  |   40|  47.6k|    else {                                                      \
  |  |   41|  47.6k|        return vis(monostate_val);                              \
  |  |   42|  47.6k|    }
  ------------------
   57|  40.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 40.8k, False: 231k]
  ------------------
   58|  40.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  40.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  40.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  40.8k|    }                                                           \
  |  |   40|  40.8k|    else {                                                      \
  |  |   41|  40.8k|        return vis(monostate_val);                              \
  |  |   42|  40.8k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 272k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  47.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 47.6k, False: 224k]
  ------------------
   62|  47.6k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.6k|    }                                                           \
  |  |   40|  47.6k|    else {                                                      \
  |  |   41|  47.6k|        return vis(monostate_val);                              \
  |  |   42|  47.6k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 272k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  47.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 47.6k, False: 224k]
  ------------------
   66|  47.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  47.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.6k|    }                                                           \
  |  |   40|  47.6k|    else {                                                      \
  |  |   41|  47.6k|        return vis(monostate_val);                              \
  |  |   42|  47.6k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 272k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 272k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 272k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 272k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 272k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 272k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 272k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 272k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 272k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 272k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 272k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 272k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 272k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 272k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 272k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 272k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 272k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   272k|            SCN_CLANG_POP
  114|   272k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  187|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.17M|{
  174|  1.17M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.17M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.17M|{
  111|  1.17M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.17M|    auto result = vscan_impl(buffer, format, args);
  114|  1.17M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 115k, False: 1.06M]
  |  |  ------------------
  ------------------
  115|   115k|        return unexpected(result.error());
  116|   115k|    }
  117|  1.06M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.17M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.17M|{
  192|  1.17M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.17M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.17M|{
  127|  1.17M|#if !SCN_DISABLE_LOCALE
  128|  1.17M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.17M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.17M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.17M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.17M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 115k, False: 1.06M]
  |  |  ------------------
  ------------------
  135|   115k|        return unexpected(result.error());
  136|   115k|    }
  137|  1.06M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.17M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   231k|{
  205|   231k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   231k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   231k|{
  151|   231k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   231k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 11.5k, False: 219k]
  |  |  ------------------
  ------------------
  155|  11.5k|        return unexpected(result.error());
  156|  11.5k|    }
  157|   219k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   231k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   125k|{
  174|   125k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  252|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   125k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   125k|{
  111|   125k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   125k|    auto result = vscan_impl(buffer, format, args);
  114|   125k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 115k, False: 9.65k]
  |  |  ------------------
  ------------------
  115|   115k|        return unexpected(result.error());
  116|   115k|    }
  117|  9.65k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  9.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   125k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   125k|{
  192|   125k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  252|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   125k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   125k|{
  127|   125k|#if !SCN_DISABLE_LOCALE
  128|   125k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   125k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   125k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   125k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   125k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 115k, False: 9.65k]
  |  |  ------------------
  ------------------
  135|   115k|        return unexpected(result.error());
  136|   115k|    }
  137|  9.65k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  9.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   125k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  11.5k|{
  205|  11.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  252|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  11.5k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  11.5k|{
  151|  11.5k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  11.5k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  11.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 11.5k, False: 0]
  |  |  ------------------
  ------------------
  155|  11.5k|        return unexpected(result.error());
  156|  11.5k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  11.5k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NSC_17basic_string_viewIT0_NSC_11char_traitsISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  110|  1.11M|{
  111|  1.11M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.11M|    auto result = vscan_impl(buffer, format, args);
  114|  1.11M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 204k, False: 914k]
  |  |  ------------------
  ------------------
  115|   204k|        return unexpected(result.error());
  116|   204k|    }
  117|   914k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   914k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.11M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT_OSF_NS3_17basic_string_viewIT1_NS3_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  126|  1.11M|{
  127|  1.11M|#if !SCN_DISABLE_LOCALE
  128|  1.11M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.11M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.11M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.11M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.11M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 204k, False: 914k]
  |  |  ------------------
  ------------------
  135|   204k|        return unexpected(result.error());
  136|   204k|    }
  137|   914k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   914k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.11M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEEOSE_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   210k|{
  151|   210k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   210k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.4k, False: 190k]
  |  |  ------------------
  ------------------
  155|  20.4k|        return unexpected(result.error());
  156|  20.4k|    }
  157|   190k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   210k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS7_17basic_string_viewIT0_NS7_11char_traitsISW_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISW_EEEE:
  110|   217k|{
  111|   217k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   217k|    auto result = vscan_impl(buffer, format, args);
  114|   217k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 204k, False: 13.6k]
  |  |  ------------------
  ------------------
  115|   204k|        return unexpected(result.error());
  116|   204k|    }
  117|  13.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   217k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT_OSK_NS3_17basic_string_viewIT1_NS3_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  126|   217k|{
  127|   217k|#if !SCN_DISABLE_LOCALE
  128|   217k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   217k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   217k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   217k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   217k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 204k, False: 13.6k]
  |  |  ------------------
  ------------------
  135|   204k|        return unexpected(result.error());
  136|   204k|    }
  137|  13.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   217k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEEOSJ_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  20.4k|{
  151|  20.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  20.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  20.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  157|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.4k, False: 0]
  |  |  ------------------
  ------------------
  155|  20.4k|        return unexpected(result.error());
  156|  20.4k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  20.4k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   168k|{
   90|   168k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   168k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.11M|{
   45|  1.11M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.11M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   168k|{
  125|   168k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   168k|                                                         format, {});
  127|   168k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.11M|{
   61|  1.11M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.11M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  33.5k|{
  159|  33.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  33.5k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   210k|{
   73|   210k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   210k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   162k|{
   90|   162k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   162k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   162k|{
  125|   162k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   162k|                                                         format, {});
  127|   162k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  30.6k|{
  159|  30.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  30.6k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   206k|{
   90|   206k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   206k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   206k|{
  125|   206k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   206k|                                                         format, {});
  127|   206k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  38.3k|{
  159|  38.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  38.3k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   184k|{
   90|   184k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   184k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   184k|{
  125|   184k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   184k|                                                         format, {});
  127|   184k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  34.3k|{
  159|  34.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  34.3k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   210k|{
   90|   210k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   210k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   210k|{
  125|   210k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   210k|                                                         format, {});
  127|   210k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  39.0k|{
  159|  39.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  39.0k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
   89|   185k|{
   90|   185k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   185k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  124|   185k|{
  125|   185k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   185k|                                                         format, {});
  127|   185k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  158|  34.4k|{
  159|  34.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  34.4k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.0k|{
   90|  34.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.0k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   217k|{
   45|   217k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  252|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   217k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.0k|{
  125|  34.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.0k|                                                         format, {});
  127|  34.0k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   217k|{
   61|   217k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  252|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   217k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  20.4k|{
   73|  20.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  252|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  20.4k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  34.0k|{
   90|  34.0k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.0k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  34.0k|{
  125|  34.0k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.0k|                                                         format, {});
  127|  34.0k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  37.4k|{
   90|  37.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.4k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  37.4k|{
  125|  37.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  37.4k|                                                         format, {});
  127|  37.4k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  37.4k|{
   90|  37.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.4k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  37.4k|{
  125|  37.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  37.4k|                                                         format, {});
  127|  37.4k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  37.4k|{
   90|  37.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.4k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  37.4k|{
  125|  37.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  37.4k|                                                         format, {});
  127|  37.4k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISK_E4typeEJDpNS11_ISU_E4typeEEEE:
   89|  37.4k|{
   90|  37.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  37.4k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS15_ISV_E4typeEEEE:
  124|  37.4k|{
  125|  37.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  252|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  37.4k|                                                         format, {});
  127|  37.4k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  158|  3.40k|{
  159|  3.40k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  252|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.40k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.09M|            {
 2693|  3.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.09M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.09M|            {
 2672|  3.09M|                return decay_copy(t.begin());
 2673|  3.09M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEEu7__decayIT_EOS5_:
 2605|  83.5M|    {
 2606|  83.5M|        return std::forward<T>(t);
 2607|  83.5M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.08M|            {
 3178|  5.08M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.08M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.08M|            {
 3158|  5.08M|                return t.data();
 3159|  5.08M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.08M|    {
 6095|  5.08M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.1k, False: 5.06M]
  ------------------
 6096|  5.08M|                   ? nullptr
 6097|  5.08M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.08M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.08M|            {
 3127|  5.08M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.08M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.08M|            {
 3098|  5.08M|                return bool((std::forward<T>(t).empty()));
 3099|  5.08M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  12.0M|        {
 6454|  12.0M|            return data_.begin_ == data_.end_;
 6455|  12.0M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  10.1M|    {
 6049|  10.1M|        return static_cast<const D&>(*this);
 6050|  10.1M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  20.7M|            {
 2693|  20.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  20.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  20.7M|            {
 2672|  20.7M|                return decay_copy(t.begin());
 2673|  20.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  47.8M|        {
 6444|  47.8M|            return data_.begin_;
 6445|  47.8M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.08M|            {
 3038|  5.08M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.08M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.08M|            {
 3000|  5.08M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.08M|            }
_ZN4nano6ranges6detail10decay_copyIlEEu7__decayIT_EOS3_:
 2605|  21.0M|    {
 2606|  21.0M|        return std::forward<T>(t);
 2607|  21.0M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  12.1M|        {
 6462|  12.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  12.1M|                return data_.size_;
 6464|  12.1M|            }
 6465|  12.1M|            else {
 6466|  12.1M|                return data_.end_ - data_.begin_;
 6467|  12.1M|            }
 6468|  12.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.72M|            {
 3788|  8.72M|                ranges::advance(x, n);
 3789|  8.72M|                return x;
 3790|  8.72M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.72M|            {
 3678|  8.72M|                fn::impl(i, n);
 3679|  8.72M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.72M|            {
 3562|  8.72M|                r += n;
 3563|  8.72M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  25.2M|            {
 2693|  25.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  25.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  25.2M|            {
 2672|  25.2M|                return decay_copy(t.begin());
 2673|  25.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  12.5M|            {
 2759|  12.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  12.5M|            {
 2739|  12.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  12.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  31.9M|        {
 6449|  31.9M|            return data_.end_;
 6450|  31.9M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  6.01M|            {
 2759|  6.01M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.01M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.01M|            {
 2739|  6.01M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.01M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  20.5M|        {
 6375|  20.5M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  20.5M|        {
 6294|  20.5M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   243k|            {
 2693|   243k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   243k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   243k|            {
 2672|   243k|                return decay_copy(t.begin());
 2673|   243k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEEu7__decayIT_EOSB_:
 2605|  1.43M|    {
 2606|  1.43M|        return std::forward<T>(t);
 2607|  1.43M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   282k|            {
 2693|   282k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   282k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   282k|            {
 2672|   282k|                return decay_copy(t.begin());
 2673|   282k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   301k|        {
 6444|   301k|            return data_.begin_;
 6445|   301k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   622k|            {
 2759|   622k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   622k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   622k|            {
 2739|   622k|                return decay_copy(std::forward<T>(t).end());
 2740|   622k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   622k|        {
 6449|   622k|            return data_.end_;
 6450|   622k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  19.3k|            {
 3788|  19.3k|                ranges::advance(x, n);
 3789|  19.3k|                return x;
 3790|  19.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  19.3k|            {
 3678|  19.3k|                fn::impl(i, n);
 3679|  19.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  19.3k|            {
 3562|  19.3k|                r += n;
 3563|  19.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   262k|            {
 2759|   262k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   262k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   262k|            {
 2739|   262k|                return decay_copy(std::forward<T>(t).end());
 2740|   262k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   282k|        {
 6375|   282k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   282k|        {
 6294|   282k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  19.3k|            {
 2693|  19.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  19.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  19.3k|            {
 2672|  19.3k|                return decay_copy(t.begin());
 2673|  19.3k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   765k|            {
 2693|   765k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   765k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   765k|            {
 2672|   765k|                return decay_copy(t.begin());
 2673|   765k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEEu7__decayIT_EOS5_:
 2605|   113M|    {
 2606|   113M|        return std::forward<T>(t);
 2607|   113M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.44M|            {
 3178|  2.44M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.44M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.44M|            {
 3158|  2.44M|                return t.data();
 3159|  2.44M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.44M|    {
 6095|  2.44M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.1k, False: 2.42M]
  ------------------
 6096|  2.44M|                   ? nullptr
 6097|  2.44M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.44M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.44M|            {
 3127|  2.44M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.44M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.44M|            {
 3098|  2.44M|                return bool((std::forward<T>(t).empty()));
 3099|  2.44M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  4.02M|        {
 6454|  4.02M|            return data_.begin_ == data_.end_;
 6455|  4.02M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  4.87M|    {
 6049|  4.87M|        return static_cast<const D&>(*this);
 6050|  4.87M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  19.1M|            {
 2693|  19.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  19.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  19.1M|            {
 2672|  19.1M|                return decay_copy(t.begin());
 2673|  19.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  48.6M|        {
 6444|  48.6M|            return data_.begin_;
 6445|  48.6M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.44M|            {
 3038|  2.44M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.44M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.44M|            {
 3000|  2.44M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.44M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  8.90M|        {
 6462|  8.90M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  8.90M|                return data_.size_;
 6464|  8.90M|            }
 6465|  8.90M|            else {
 6466|  8.90M|                return data_.end_ - data_.begin_;
 6467|  8.90M|            }
 6468|  8.90M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  10.0M|            {
 3788|  10.0M|                ranges::advance(x, n);
 3789|  10.0M|                return x;
 3790|  10.0M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  10.0M|            {
 3678|  10.0M|                fn::impl(i, n);
 3679|  10.0M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  10.0M|            {
 3562|  10.0M|                r += n;
 3563|  10.0M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  27.7M|            {
 2693|  27.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  27.7M|            {
 2672|  27.7M|                return decay_copy(t.begin());
 2673|  27.7M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  11.3M|            {
 2759|  11.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  11.3M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  11.3M|            {
 2739|  11.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  11.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  65.3M|        {
 6449|  65.3M|            return data_.end_;
 6450|  65.3M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  3.78M|            {
 2759|  3.78M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.78M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  3.78M|            {
 2739|  3.78M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.78M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  18.9M|        {
 6375|  18.9M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  18.9M|        {
 6294|  18.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   428k|            {
 2693|   428k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   428k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   428k|            {
 2672|   428k|                return decay_copy(t.begin());
 2673|   428k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEEu7__decayIT_EOSB_:
 2605|  2.88M|    {
 2606|  2.88M|        return std::forward<T>(t);
 2607|  2.88M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   483k|            {
 2693|   483k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   483k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   483k|            {
 2672|   483k|                return decay_copy(t.begin());
 2673|   483k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   510k|        {
 6444|   510k|            return data_.begin_;
 6445|   510k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.48M|            {
 2759|  1.48M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.48M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.48M|            {
 2739|  1.48M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.48M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.48M|        {
 6449|  1.48M|            return data_.end_;
 6450|  1.48M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  27.2k|            {
 3788|  27.2k|                ranges::advance(x, n);
 3789|  27.2k|                return x;
 3790|  27.2k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  27.2k|            {
 3678|  27.2k|                fn::impl(i, n);
 3679|  27.2k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  27.2k|            {
 3562|  27.2k|                r += n;
 3563|  27.2k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   456k|            {
 2759|   456k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   456k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   456k|            {
 2739|   456k|                return decay_copy(std::forward<T>(t).end());
 2740|   456k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   483k|        {
 6375|   483k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   483k|        {
 6294|   483k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  27.2k|            {
 2693|  27.2k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.2k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  27.2k|            {
 2672|  27.2k|                return decay_copy(t.begin());
 2673|  27.2k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  6.23M|        {
 6444|  6.23M|            return data_.begin_;
 6445|  6.23M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  11.4M|        {
 6444|  11.4M|            return data_.begin_;
 6445|  11.4M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  13.9M|    {
 6044|  13.9M|        return static_cast<D&>(*this);
 6045|  13.9M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  6.97M|            {
 3098|  6.97M|                return bool((std::forward<T>(t).empty()));
 3099|  6.97M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  6.97M|            {
 3127|  6.97M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.97M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  6.97M|    {
 6085|  6.97M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 6.97M]
  ------------------
 6086|  6.97M|                   ? nullptr
 6087|  6.97M|                   : std::addressof(*ranges::begin(derived()));
 6088|  6.97M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  15.8M|            {
 2739|  15.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  15.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  15.8M|            {
 2759|  15.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  15.8M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.15M|    {
 6044|  3.15M|        return static_cast<D&>(*this);
 6045|  3.15M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.57M|            {
 3098|  1.57M|                return bool((std::forward<T>(t).empty()));
 3099|  1.57M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.57M|            {
 3127|  1.57M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.57M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.57M|    {
 6085|  1.57M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 1.57M]
  ------------------
 6086|  1.57M|                   ? nullptr
 6087|  1.57M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.57M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  50.8M|            {
 2739|  50.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  50.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  50.8M|            {
 2759|  50.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  50.8M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  4.18M|            {
 3780|  4.18M|                ++x;
 3781|  4.18M|                return x;
 3782|  4.18M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.02M|            {
 3038|  7.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.02M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.02M|            {
 3000|  7.02M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.02M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  6.97M|            {
 3178|  6.97M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.97M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.97M|            {
 3158|  6.97M|                return t.data();
 3159|  6.97M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   437k|            {
 3828|   437k|                --x;
 3829|   437k|                return x;
 3830|   437k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   606k|            {
 3077|   606k|                return fn::impl(std::forward<T>(t));
 3078|   606k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   606k|            {
 3067|   606k|                return static_cast<ssize_return_t<T>>(
 3068|   606k|                    ranges::size(std::forward<T>(t)));
 3069|   606k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   606k|            {
 3038|   606k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   606k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   606k|            {
 3000|   606k|                return decay_copy(std::forward<T>(t).size());
 3001|   606k|            }
_ZN4nano6ranges6detail10decay_copyImEEu7__decayIT_EOS3_:
 2605|  6.40M|    {
 2606|  6.40M|        return std::forward<T>(t);
 2607|  6.40M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  5.79M|            {
 3077|  5.79M|                return fn::impl(std::forward<T>(t));
 3078|  5.79M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  5.79M|            {
 3067|  5.79M|                return static_cast<ssize_return_t<T>>(
 3068|  5.79M|                    ranges::size(std::forward<T>(t)));
 3069|  5.79M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  5.79M|            {
 3038|  5.79M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.79M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  5.79M|            {
 3000|  5.79M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.79M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  5.13M|            {
 1300|  5.13M|                return fn::impl(std::forward<F>(f),
 1301|  5.13M|                                std::forward<Args>(args)...);
 1302|  5.13M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|  5.13M|            {
 1289|  5.13M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.13M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  5.13M|    {
 1142|  5.13M|        return std::forward<T>(t);
 1143|  5.13M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  8.80M|            {
 3756|  8.80M|                return fn::impl(std::move(first), std::move(last));
 3757|  8.80M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  8.80M|            {
 3716|  8.80M|                return s - i;
 3717|  8.80M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.57M|        {
 6375|  1.57M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.57M|        {
 6294|  1.57M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.64M|            {
 2693|  2.64M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.64M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.64M|            {
 2672|  2.64M|                return decay_copy(t.begin());
 2673|  2.64M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  6.00M|    {
 2606|  6.00M|        return std::forward<T>(t);
 2607|  6.00M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.15M|            {
 2759|  1.15M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.15M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.15M|            {
 2739|  1.15M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.15M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEEu7__decayIT_EOS4_:
 2605|  9.18M|    {
 2606|  9.18M|        return std::forward<T>(t);
 2607|  9.18M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.00M|        {
 6449|  3.00M|            return data_.end_;
 6450|  3.00M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.22M|        {
 6444|  1.22M|            return data_.begin_;
 6445|  1.22M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.22M|        {
 6449|  1.22M|            return data_.end_;
 6450|  1.22M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   409k|        {
 6375|   409k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   409k|        {
 6294|   409k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   297k|            {
 3780|   297k|                ++x;
 3781|   297k|                return x;
 3782|   297k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   169k|        {
 6793|   169k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   169k|                                    proj);
 6795|   169k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   169k|        {
 6761|   216k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 216k, False: 24]
  ------------------
 6762|   216k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 169k, False: 46.3k]
  ------------------
 6763|   169k|                    return first;
 6764|   169k|                }
 6765|  46.3k|                ++first;
 6766|  46.3k|            }
 6767|     24|            return first;
 6768|   169k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   216k|            {
 1300|   216k|                return fn::impl(std::forward<F>(f),
 1301|   216k|                                std::forward<Args>(args)...);
 1302|   216k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|   216k|            {
 1289|   216k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   216k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   216k|            {
 1300|   216k|                return fn::impl(std::forward<F>(f),
 1301|   216k|                                std::forward<Args>(args)...);
 1302|   216k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|   216k|            {
 1289|   216k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   216k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   216k|    {
 1142|   216k|        return std::forward<T>(t);
 1143|   216k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.84M|            {
 2759|  1.84M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.84M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.84M|            {
 2739|  1.84M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.84M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.35M|            {
 2693|  3.35M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.35M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.35M|            {
 2672|  3.35M|                return decay_copy(t.begin());
 2673|  3.35M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.57M|            {
 3178|  1.57M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.57M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.57M|            {
 3158|  1.57M|                return t.data();
 3159|  1.57M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  6.45M|            {
 3038|  6.45M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.45M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  6.45M|            {
 3000|  6.45M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.45M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.84M|            {
 3780|  3.84M|                ++x;
 3781|  3.84M|                return x;
 3782|  3.84M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  4.88M|            {
 3077|  4.88M|                return fn::impl(std::forward<T>(t));
 3078|  4.88M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  4.88M|            {
 3067|  4.88M|                return static_cast<ssize_return_t<T>>(
 3068|  4.88M|                    ranges::size(std::forward<T>(t)));
 3069|  4.88M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   384k|            {
 3828|   384k|                --x;
 3829|   384k|                return x;
 3830|   384k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  5.40M|            {
 3756|  5.40M|                return fn::impl(std::move(first), std::move(last));
 3757|  5.40M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  5.40M|            {
 3716|  5.40M|                return s - i;
 3717|  5.40M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.06M|        {
 6375|  3.06M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.06M|        {
 6294|  3.06M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.25M|            {
 2693|  4.25M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.25M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.25M|            {
 2672|  4.25M|                return decay_copy(t.begin());
 2673|  4.25M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS9_:
 2605|  11.0M|    {
 2606|  11.0M|        return std::forward<T>(t);
 2607|  11.0M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.33M|            {
 2759|  2.33M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.33M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.33M|            {
 2739|  2.33M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.33M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  6.18M|        {
 6449|  6.18M|            return data_.end_;
 6450|  6.18M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  3.12M|        {
 6444|  3.12M|            return data_.begin_;
 6445|  3.12M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  3.12M|        {
 6449|  3.12M|            return data_.end_;
 6450|  3.12M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  1.04M|        {
 6375|  1.04M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  1.04M|        {
 6294|  1.04M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   517k|            {
 3780|   517k|                ++x;
 3781|   517k|                return x;
 3782|   517k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   292k|        {
 6793|   292k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   292k|                                    proj);
 6795|   292k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   292k|        {
 6761|   455k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 455k, False: 48]
  ------------------
 6762|   455k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 292k, False: 163k]
  ------------------
 6763|   292k|                    return first;
 6764|   292k|                }
 6765|   163k|                ++first;
 6766|   163k|            }
 6767|     48|            return first;
 6768|   292k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   455k|            {
 1300|   455k|                return fn::impl(std::forward<F>(f),
 1301|   455k|                                std::forward<Args>(args)...);
 1302|   455k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISE_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSE_DpOSG_:
 1288|   455k|            {
 1289|   455k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   455k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   455k|            {
 1300|   455k|                return fn::impl(std::forward<F>(f),
 1301|   455k|                                std::forward<Args>(args)...);
 1302|   455k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardIS9_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS9_DpOSB_:
 1288|   455k|            {
 1289|   455k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   455k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   455k|    {
 1142|   455k|        return std::forward<T>(t);
 1143|   455k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.85M|            {
 2759|  3.85M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.85M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.85M|            {
 2739|  3.85M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.85M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  6.81M|            {
 2693|  6.81M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.81M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  6.81M|            {
 2672|  6.81M|                return decay_copy(t.begin());
 2673|  6.81M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.65M|        {
 6793|  2.65M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.65M|                                    proj);
 6795|  2.65M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.65M|        {
 6761|  5.37M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.13M, False: 236k]
  ------------------
 6762|  5.13M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.41M, False: 2.72M]
  ------------------
 6763|  2.41M|                    return first;
 6764|  2.41M|                }
 6765|  2.72M|                ++first;
 6766|  2.72M|            }
 6767|   236k|            return first;
 6768|  2.65M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  5.13M|            {
 1300|  5.13M|                return fn::impl(std::forward<F>(f),
 1301|  5.13M|                                std::forward<Args>(args)...);
 1302|  5.13M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|  5.13M|            {
 1289|  5.13M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.13M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   284k|{
   50|   284k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   284k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   103k|{
   50|   103k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   103k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  54.4k|{
   50|  54.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  54.4k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   169k|    {
   44|   169k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   292k|    {
   44|   292k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  60.1k|{
   50|  60.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  252|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  60.1k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  6.47M|    {
 1191|  6.47M|        return has_value();
 1192|  6.47M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  12.2M|    {
  189|  12.2M|        return m_has_value;
  190|  12.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.34M|    {
 1197|  1.34M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.34M|        return this->get_unexpected().error();
 1199|  1.34M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.34M|    {
  172|  1.34M|        return m_unexpected;
  173|  1.34M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.1M|    {
   72|  10.1M|        return m_unexpected;
   73|  10.1M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.00M|    {
   58|  5.00M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  5.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.00M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   243k|    {
 1078|   243k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   243k|    {
  151|   243k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  5.95M|    {
   67|  5.95M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  5.95M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  5.95M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.58M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  4.45M|    {
 1251|  4.45M|        return value();
 1252|  4.45M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  4.45M|    {
 1221|  4.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  4.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  4.45M|        return this->get_value();
 1223|  4.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  4.45M|    {
  155|  4.45M|        return m_value;
  156|  4.45M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.34M|    {
 1034|  2.34M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.34M|    {
  142|  2.34M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.58M|    {
 1191|  2.58M|        return has_value();
 1192|  2.58M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.17M|    {
  189|  5.17M|        return m_has_value;
  190|  5.17M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   243k|    {
 1197|   243k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   243k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   243k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   243k|        return this->get_unexpected().error();
 1199|   243k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   243k|    {
  172|   243k|        return m_unexpected;
  173|   243k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   392k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.12M|    {
 1251|  2.12M|        return value();
 1252|  2.12M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.34M|    {
 1221|  2.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.34M|        return this->get_value();
 1223|  2.34M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.34M|    {
  155|  2.34M|        return m_value;
  156|  2.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   351k|    {
 1034|   351k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   351k|    {
  142|   351k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   392k|    {
 1191|   392k|        return has_value();
 1192|   392k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   744k|    {
  189|   744k|        return m_has_value;
  190|   744k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   351k|    {
 1274|   351k|        return std::addressof(value());
 1275|   351k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   351k|    {
 1221|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   351k|        return this->get_value();
 1223|   351k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   351k|    {
  155|   351k|        return m_value;
  156|   351k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   219k|    {
 1263|   219k|        return std::move(value());
 1264|   219k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   367k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   327k|    {
 1034|   327k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   327k|    {
  142|   327k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   367k|    {
 1191|   367k|        return has_value();
 1192|   367k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   695k|    {
  189|   695k|        return m_has_value;
  190|   695k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   327k|    {
 1274|   327k|        return std::addressof(value());
 1275|   327k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   327k|    {
 1221|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   327k|        return this->get_value();
 1223|   327k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   327k|    {
  155|   327k|        return m_value;
  156|   327k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   487k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   446k|    {
 1034|   446k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   446k|    {
  142|   446k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   487k|    {
 1191|   487k|        return has_value();
 1192|   487k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   934k|    {
  189|   934k|        return m_has_value;
  190|   934k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   446k|    {
 1274|   446k|        return std::addressof(value());
 1275|   446k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   446k|    {
 1221|   446k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   446k|        return this->get_value();
 1223|   446k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   446k|    {
  155|   446k|        return m_value;
  156|   446k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   419k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   379k|    {
 1034|   379k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   379k|    {
  142|   379k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   419k|    {
 1191|   419k|        return has_value();
 1192|   419k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   798k|    {
  189|   798k|        return m_has_value;
  190|   798k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   379k|    {
 1274|   379k|        return std::addressof(value());
 1275|   379k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   379k|    {
 1221|   379k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   379k|        return this->get_value();
 1223|   379k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   379k|    {
  155|   379k|        return m_value;
  156|   379k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   496k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   456k|    {
 1034|   456k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   456k|    {
  142|   456k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   496k|    {
 1191|   496k|        return has_value();
 1192|   496k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   953k|    {
  189|   953k|        return m_has_value;
  190|   953k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   456k|    {
 1274|   456k|        return std::addressof(value());
 1275|   456k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   456k|    {
 1221|   456k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   456k|        return this->get_value();
 1223|   456k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   456k|    {
  155|   456k|        return m_value;
  156|   456k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   421k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   381k|    {
 1034|   381k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   381k|    {
  142|   381k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   421k|    {
 1191|   421k|        return has_value();
 1192|   421k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   803k|    {
  189|   803k|        return m_has_value;
  190|   803k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   381k|    {
 1274|   381k|        return std::addressof(value());
 1275|   381k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   381k|    {
 1221|   381k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   381k|        return this->get_value();
 1223|   381k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   381k|    {
  155|   381k|        return m_value;
  156|   381k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   243k|    {
 1078|   243k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   243k|    {
  151|   243k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   262k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  19.3k|    {
 1034|  19.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  19.3k|    {
  142|  19.3k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   262k|    {
 1191|   262k|        return has_value();
 1192|   262k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   525k|    {
  189|   525k|        return m_has_value;
  190|   525k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   243k|    {
 1197|   243k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   243k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   243k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   243k|        return this->get_unexpected().error();
 1199|   243k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   243k|    {
  172|   243k|        return m_unexpected;
  173|   243k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  19.3k|    {
 1251|  19.3k|        return value();
 1252|  19.3k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  19.3k|    {
 1221|  19.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  19.3k|        return this->get_value();
 1223|  19.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  19.3k|    {
  155|  19.3k|        return m_value;
  156|  19.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  40.5k|    {
 1191|  40.5k|        return has_value();
 1192|  40.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  40.5k|    {
  189|  40.5k|        return m_has_value;
  190|  40.5k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      2|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  44.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  3.86k|    {
 1034|  3.86k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  3.86k|    {
  142|  3.86k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  44.4k|    {
 1191|  44.4k|        return has_value();
 1192|  44.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  48.2k|    {
  189|  48.2k|        return m_has_value;
  190|  48.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  3.86k|    {
 1274|  3.86k|        return std::addressof(value());
 1275|  3.86k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  3.86k|    {
 1221|  3.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.86k|        return this->get_value();
 1223|  3.86k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.86k|    {
  155|  3.86k|        return m_value;
  156|  3.86k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  44.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  3.86k|    {
 1034|  3.86k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  3.86k|    {
  142|  3.86k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  44.4k|    {
 1191|  44.4k|        return has_value();
 1192|  44.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  48.2k|    {
  189|  48.2k|        return m_has_value;
  190|  48.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  3.86k|    {
 1274|  3.86k|        return std::addressof(value());
 1275|  3.86k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  3.86k|    {
 1221|  3.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.86k|        return this->get_value();
 1223|  3.86k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.86k|    {
  155|  3.86k|        return m_value;
  156|  3.86k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  44.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  3.86k|    {
 1034|  3.86k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  3.86k|    {
  142|  3.86k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  44.4k|    {
 1191|  44.4k|        return has_value();
 1192|  44.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  48.2k|    {
  189|  48.2k|        return m_has_value;
  190|  48.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  3.86k|    {
 1274|  3.86k|        return std::addressof(value());
 1275|  3.86k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  3.86k|    {
 1221|  3.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.86k|        return this->get_value();
 1223|  3.86k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.86k|    {
  155|  3.86k|        return m_value;
  156|  3.86k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  44.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  3.86k|    {
 1034|  3.86k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  3.86k|    {
  142|  3.86k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  44.4k|    {
 1191|  44.4k|        return has_value();
 1192|  44.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  48.2k|    {
  189|  48.2k|        return m_has_value;
  190|  48.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  3.86k|    {
 1274|  3.86k|        return std::addressof(value());
 1275|  3.86k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  3.86k|    {
 1221|  3.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.86k|        return this->get_value();
 1223|  3.86k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.86k|    {
  155|  3.86k|        return m_value;
  156|  3.86k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.5k|    {
 1078|  40.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  40.5k|    {
  151|  40.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  44.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  3.86k|    {
 1034|  3.86k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  3.86k|    {
  142|  3.86k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  44.4k|    {
 1191|  44.4k|        return has_value();
 1192|  44.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  48.2k|    {
  189|  48.2k|        return m_has_value;
  190|  48.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  3.86k|    {
 1274|  3.86k|        return std::addressof(value());
 1275|  3.86k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  3.86k|    {
 1221|  3.86k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.86k|        return this->get_value();
 1223|  3.86k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.86k|    {
  155|  3.86k|        return m_value;
  156|  3.86k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   428k|    {
 1078|   428k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   428k|    {
  151|   428k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.01M|    {
 1034|  2.01M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.01M|    {
  142|  2.01M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.44M|    {
 1191|  2.44M|        return has_value();
 1192|  2.44M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.89M|    {
  189|  4.89M|        return m_has_value;
  190|  4.89M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   428k|    {
 1197|   428k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   428k|        return this->get_unexpected().error();
 1199|   428k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   428k|    {
  172|   428k|        return m_unexpected;
  173|   428k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   371k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.82M|    {
 1251|  1.82M|        return value();
 1252|  1.82M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.01M|    {
 1221|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.01M|        return this->get_value();
 1223|  2.01M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.01M|    {
  155|  2.01M|        return m_value;
  156|  2.01M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   299k|    {
 1034|   299k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   299k|    {
  142|   299k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   371k|    {
 1191|   371k|        return has_value();
 1192|   371k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   670k|    {
  189|   670k|        return m_has_value;
  190|   670k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   299k|    {
 1274|   299k|        return std::addressof(value());
 1275|   299k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   299k|    {
 1221|   299k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   299k|        return this->get_value();
 1223|   299k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   299k|    {
  155|   299k|        return m_value;
  156|   299k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   190k|    {
 1263|   190k|        return std::move(value());
 1264|   190k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   355k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   284k|    {
 1034|   284k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   284k|    {
  142|   284k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   355k|    {
 1191|   355k|        return has_value();
 1192|   355k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   639k|    {
  189|   639k|        return m_has_value;
  190|   639k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   284k|    {
 1274|   284k|        return std::addressof(value());
 1275|   284k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   284k|    {
 1221|   284k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   284k|        return this->get_value();
 1223|   284k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   284k|    {
  155|   284k|        return m_value;
  156|   284k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   451k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   380k|    {
 1034|   380k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   380k|    {
  142|   380k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   451k|    {
 1191|   451k|        return has_value();
 1192|   451k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   831k|    {
  189|   831k|        return m_has_value;
  190|   831k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   380k|    {
 1274|   380k|        return std::addressof(value());
 1275|   380k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   380k|    {
 1221|   380k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   380k|        return this->get_value();
 1223|   380k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   380k|    {
  155|   380k|        return m_value;
  156|   380k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   403k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   332k|    {
 1034|   332k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   332k|    {
  142|   332k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   403k|    {
 1191|   403k|        return has_value();
 1192|   403k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   735k|    {
  189|   735k|        return m_has_value;
  190|   735k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   332k|    {
 1274|   332k|        return std::addressof(value());
 1275|   332k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   332k|    {
 1221|   332k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   332k|        return this->get_value();
 1223|   332k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   332k|    {
  155|   332k|        return m_value;
  156|   332k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   459k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   387k|    {
 1034|   387k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   387k|    {
  142|   387k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   459k|    {
 1191|   459k|        return has_value();
 1192|   459k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   847k|    {
  189|   847k|        return m_has_value;
  190|   847k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   387k|    {
 1274|   387k|        return std::addressof(value());
 1275|   387k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   387k|    {
 1221|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   387k|        return this->get_value();
 1223|   387k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   387k|    {
  155|   387k|        return m_value;
  156|   387k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   405k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   334k|    {
 1034|   334k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   334k|    {
  142|   334k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   405k|    {
 1191|   405k|        return has_value();
 1192|   405k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   740k|    {
  189|   740k|        return m_has_value;
  190|   740k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   334k|    {
 1274|   334k|        return std::addressof(value());
 1275|   334k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   334k|    {
 1221|   334k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   334k|        return this->get_value();
 1223|   334k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   334k|    {
  155|   334k|        return m_value;
  156|   334k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   428k|    {
 1078|   428k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   428k|    {
  151|   428k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   456k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  27.2k|    {
 1034|  27.2k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  27.2k|    {
  142|  27.2k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   456k|    {
 1191|   456k|        return has_value();
 1192|   456k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   912k|    {
  189|   912k|        return m_has_value;
  190|   912k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   428k|    {
 1197|   428k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   428k|        return this->get_unexpected().error();
 1199|   428k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   428k|    {
  172|   428k|        return m_unexpected;
  173|   428k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  71.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  27.2k|    {
 1251|  27.2k|        return value();
 1252|  27.2k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  27.2k|    {
 1221|  27.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  27.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  27.2k|        return this->get_value();
 1223|  27.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  27.2k|    {
  155|  27.2k|        return m_value;
  156|  27.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  71.4k|    {
 1191|  71.4k|        return has_value();
 1192|  71.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  71.4k|    {
  189|  71.4k|        return m_has_value;
  190|  71.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      2|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  71.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      4|    {
 1034|      4|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      4|    {
  142|      4|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  71.4k|    {
 1191|  71.4k|        return has_value();
 1192|  71.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  71.4k|    {
  189|  71.4k|        return m_has_value;
  190|  71.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|      4|    {
 1274|      4|        return std::addressof(value());
 1275|      4|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      4|    {
 1221|      4|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      4|        return this->get_value();
 1223|      4|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      4|    {
  155|      4|        return m_value;
  156|      4|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  78.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.80k|    {
 1034|  6.80k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.80k|    {
  142|  6.80k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  78.2k|    {
 1191|  78.2k|        return has_value();
 1192|  78.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  85.0k|    {
  189|  85.0k|        return m_has_value;
  190|  85.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  6.80k|    {
 1274|  6.80k|        return std::addressof(value());
 1275|  6.80k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.80k|    {
 1221|  6.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.80k|        return this->get_value();
 1223|  6.80k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.80k|    {
  155|  6.80k|        return m_value;
  156|  6.80k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  78.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.80k|    {
 1034|  6.80k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.80k|    {
  142|  6.80k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  78.2k|    {
 1191|  78.2k|        return has_value();
 1192|  78.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  85.0k|    {
  189|  85.0k|        return m_has_value;
  190|  85.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  6.80k|    {
 1274|  6.80k|        return std::addressof(value());
 1275|  6.80k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.80k|    {
 1221|  6.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.80k|        return this->get_value();
 1223|  6.80k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.80k|    {
  155|  6.80k|        return m_value;
  156|  6.80k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  78.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.80k|    {
 1034|  6.80k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.80k|    {
  142|  6.80k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  78.2k|    {
 1191|  78.2k|        return has_value();
 1192|  78.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  85.0k|    {
  189|  85.0k|        return m_has_value;
  190|  85.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  6.80k|    {
 1274|  6.80k|        return std::addressof(value());
 1275|  6.80k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.80k|    {
 1221|  6.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.80k|        return this->get_value();
 1223|  6.80k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.80k|    {
  155|  6.80k|        return m_value;
  156|  6.80k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  71.4k|    {
 1078|  71.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  71.4k|    {
  151|  71.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  78.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  6.80k|    {
 1034|  6.80k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  6.80k|    {
  142|  6.80k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  78.2k|    {
 1191|  78.2k|        return has_value();
 1192|  78.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  85.0k|    {
  189|  85.0k|        return m_has_value;
  190|  85.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  6.80k|    {
 1274|  6.80k|        return std::addressof(value());
 1275|  6.80k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  6.80k|    {
 1221|  6.80k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.80k|        return this->get_value();
 1223|  6.80k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.80k|    {
  155|  6.80k|        return m_value;
  156|  6.80k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.51M|    {
 1405|  2.51M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.51M|                                            std::forward<F>(f));
 1407|  2.51M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.51M|{
  927|  2.51M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.51M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.51M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.51M|            return result(*std::forward<Exp>(exp));
  931|  2.51M|        }
  932|       |
  933|  2.51M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.51M|        return result(unexpect, monostate{});
  935|  2.51M|    }
  936|  2.51M|    else {
  937|  2.51M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.51M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.48M, False: 26.7k]
  |  |  ------------------
  ------------------
  939|  2.51M|                   ? result(*std::forward<Exp>(exp))
  940|  2.51M|                   : result(unexpect,
  941|  26.7k|                            std::invoke(std::forward<F>(f),
  942|  26.7k|                                        std::forward<Exp>(exp).error()));
  943|  2.51M|    }
  944|  2.51M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  10.1M|    {
  189|  10.1M|        return m_has_value;
  190|  10.1M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.48M|    {
 1263|  2.48M|        return std::move(value());
 1264|  2.48M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.42M|    {
 1221|  3.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  3.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.42M|        return this->get_value();
 1223|  3.42M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.42M|    {
  155|  3.42M|        return m_value;
  156|  3.42M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  10.0M|    {
 1034|  10.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.0M|    {
  142|  10.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  26.7k|    {
 1207|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|  26.7k|        return std::move(this->get_unexpected().error());
 1209|  26.7k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  28.1k|    {
  172|  28.1k|        return m_unexpected;
  173|  28.1k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   342k|    {
   72|   342k|        return m_unexpected;
   73|   342k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  26.7k|    {
 1088|  26.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   336k|    {
  151|   336k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  10.3M|    {
 1191|  10.3M|        return has_value();
 1192|  10.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  20.7M|    {
  189|  20.7M|        return m_has_value;
  190|  20.7M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   336k|    {
 1197|   336k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   336k|        return this->get_unexpected().error();
 1199|   336k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   336k|    {
  172|   336k|        return m_unexpected;
  173|   336k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   309k|    {
 1078|   309k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.34M|    {
 1263|  8.34M|        return std::move(value());
 1264|  8.34M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.0M|    {
 1221|  10.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  10.0M|        return this->get_value();
 1223|  10.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  10.0M|    {
  155|  10.0M|        return m_value;
  156|  10.0M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   502k|    {
   58|   502k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   502k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.34M|    {
 1078|  1.34M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.34M|    {
  151|  1.34M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.75M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  59.0k|    {
   58|  59.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  59.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  59.0k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  28.1k|    {
 1078|  28.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  28.1k|    {
  151|  28.1k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   171k|    {
   67|   171k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   171k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.70M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  6.67M|    {
 1034|  6.67M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.67M|    {
  142|  6.67M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  4.18M|    {
 1191|  4.18M|        return has_value();
 1192|  4.18M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.36k|    {
 1197|  1.36k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.36k|        return this->get_unexpected().error();
 1199|  1.36k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  55.2k|    {
   58|  55.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  55.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.2k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  53.5k|    {
 1078|  53.5k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  5.68M|    {
   72|  5.68M|        return m_unexpected;
   73|  5.68M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  53.5k|    {
  151|  53.5k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   280k|    {
   67|   280k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   280k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   280k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   930k|    {
 1251|   930k|        return value();
 1252|   930k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.70M|    {
 1034|  1.70M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.70M|    {
  142|  1.70M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  20.5M|    {
   58|  20.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  20.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  20.5M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.44M|    {
 1078|  9.44M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  20.5M|    {
   72|  20.5M|        return m_unexpected;
   73|  20.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.44M|    {
  151|  9.44M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  20.5M|    {
   67|  20.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|  20.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  20.5M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  11.2M|    {
 1191|  11.2M|        return has_value();
 1192|  11.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  15.3M|    {
  189|  15.3M|        return m_has_value;
  190|  15.3M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  2.31M|    {
 1197|  2.31M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  2.31M|        return this->get_unexpected().error();
 1199|  2.31M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.31M|    {
  172|  2.31M|        return m_unexpected;
  173|  2.31M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.48M|    {
 1034|  2.48M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.48M|    {
  142|  2.48M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.48M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   112k|    {
   58|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   112k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.75M|    {
 1251|  1.75M|        return value();
 1252|  1.75M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  1.75M|    {
 1221|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.75M|        return this->get_value();
 1223|  1.75M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.75M|    {
  155|  1.75M|        return m_value;
  156|  1.75M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.48M|    {
 1191|  2.48M|        return has_value();
 1192|  2.48M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.97M|    {
  189|  4.97M|        return m_has_value;
  190|  4.97M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.48M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.48M|    {
 1263|  2.48M|        return std::move(value());
 1264|  2.48M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.48M|    {
 1221|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.48M|        return this->get_value();
 1223|  2.48M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.48M|    {
  155|  2.48M|        return m_value;
  156|  2.48M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  50.1k|    {
 1034|  50.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  50.1k|    {
  142|  50.1k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.48M|    {
 1034|  2.48M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.48M|    {
  142|  2.48M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.48M|    {
 1405|  2.48M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.48M|                                            std::forward<F>(f));
 1407|  2.48M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.48M|{
  927|  2.48M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.48M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.48M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.48M|            return result(*std::forward<Exp>(exp));
  931|  2.48M|        }
  932|       |
  933|  2.48M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.48M|        return result(unexpect, monostate{});
  935|  2.48M|    }
  936|  2.48M|    else {
  937|  2.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.48M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.48M|                   ? result(*std::forward<Exp>(exp))
  940|  2.48M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.48M|    }
  944|  2.48M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  4.97M|    {
  189|  4.97M|        return m_has_value;
  190|  4.97M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.48M|    {
 1263|  2.48M|        return std::move(value());
 1264|  2.48M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.48M|    {
 1221|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.48M|        return this->get_value();
 1223|  2.48M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.48M|    {
  155|  2.48M|        return m_value;
  156|  2.48M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.48M|    {
 1034|  2.48M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.48M|    {
  142|  2.48M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.48M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  2.48M|    {
 1191|  2.48M|        return has_value();
 1192|  2.48M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.97M|    {
  189|  4.97M|        return m_has_value;
  190|  4.97M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.48M|    {
 1263|  2.48M|        return std::move(value());
 1264|  2.48M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.48M|    {
 1221|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.48M|        return this->get_value();
 1223|  2.48M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.48M|    {
  155|  2.48M|        return m_value;
  156|  2.48M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  8.31k|    {
 1078|  8.31k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  8.31k|    {
  312|  8.31k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  8.31k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  8.31k|    {
  373|  8.31k|        scn::detail::construct_at(unexpected_ptr(),
  374|  8.31k|                                  std::forward<Args>(args)...);
  375|  8.31k|        m_has_value = false;
  376|  8.31k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   100k|{
  102|   100k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   100k|        T(std::forward<Args>(args)...);
  104|   100k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  24.9k|    {
  403|  24.9k|        return reinterpret_cast<unexpected<E>*>(
  404|  24.9k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  24.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  24.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   339k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   339k|    {
  317|   339k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 331k, False: 8.31k]
  ------------------
  318|   331k|            destroy_value();
  319|   331k|        }
  320|  8.31k|        else {
  321|  8.31k|            destroy_unexpected();
  322|  8.31k|        }
  323|   339k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.01M|    {
  361|  1.01M|        return m_has_value;
  362|  1.01M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   331k|    {
  380|   331k|        scn::detail::destroy_at(value_ptr());
  381|   331k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   331k|{
  108|   331k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   331k|        for (auto& elem : *p) {
  110|   331k|            scn::detail::destroy_at(std::addressof(elem));
  111|   331k|        }
  112|   331k|    }
  113|   331k|    else {
  114|   331k|        p->~T();
  115|   331k|    }
  116|   331k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   994k|    {
  390|   994k|        return reinterpret_cast<T*>(
  391|   994k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  205|   994k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   994k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  8.31k|    {
  384|  8.31k|        scn::detail::destroy_at(unexpected_ptr());
  385|  8.31k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   100k|{
  108|   100k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   100k|        for (auto& elem : *p) {
  110|   100k|            scn::detail::destroy_at(std::addressof(elem));
  111|   100k|        }
  112|   100k|    }
  113|   100k|    else {
  114|   100k|        p->~T();
  115|   100k|    }
  116|   100k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   331k|    {
 1034|   331k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   331k|    {
  303|   331k|        construct(std::forward<Args>(args)...);
  304|   331k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   331k|    {
  367|   331k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   331k|        m_has_value = true;
  369|   331k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   331k|{
  102|   331k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   331k|        T(std::forward<Args>(args)...);
  104|   331k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   339k|    {
 1191|   339k|        return has_value();
 1192|   339k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  8.31k|    {
 1197|  8.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  8.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  8.31k|        return this->get_unexpected().error();
 1199|  8.31k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  8.31k|    {
  344|  8.31k|        return *unexpected_ptr();
  345|  8.31k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   331k|    {
 1263|   331k|        return std::move(value());
 1264|   331k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   331k|    {
 1221|   331k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   331k|        return this->get_value();
 1223|   331k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   331k|    {
  327|   331k|        return *value_ptr();
  328|   331k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.68M|    {
 1251|  1.68M|        return value();
 1252|  1.68M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   112k|    {
   58|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  231|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   112k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  4.40M|    {
 1034|  4.40M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  4.40M|    {
  142|  4.40M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    294|    {
 1078|    294|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    294|    {
  151|    294|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   822k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   822k|    {
 1034|   822k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   822k|    {
  142|   822k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   193k|    {
 1405|   193k|        return detail::transform_error_impl(std::move(*this),
 1406|   193k|                                            std::forward<F>(f));
 1407|   193k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   193k|{
  927|   193k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   193k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   193k|        if (SCN_LIKELY(exp.has_value())) {
  930|   193k|            return result(*std::forward<Exp>(exp));
  931|   193k|        }
  932|       |
  933|   193k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   193k|        return result(unexpect, monostate{});
  935|   193k|    }
  936|   193k|    else {
  937|   193k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   193k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   193k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 193k, False: 122]
  |  |  ------------------
  ------------------
  939|   193k|                   ? result(*std::forward<Exp>(exp))
  940|   193k|                   : result(unexpect,
  941|    122|                            std::invoke(std::forward<F>(f),
  942|    122|                                        std::forward<Exp>(exp).error()));
  943|   193k|    }
  944|   193k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   525k|    {
 1263|   525k|        return std::move(value());
 1264|   525k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   525k|    {
 1221|   525k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   525k|        return this->get_value();
 1223|   525k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   525k|    {
  155|   525k|        return m_value;
  156|   525k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   235k|    {
 1034|   235k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   235k|    {
  142|   235k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   556k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    294|    {
 1207|    294|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    294|        return std::move(this->get_unexpected().error());
 1209|    294|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    294|    {
  172|    294|        return m_unexpected;
  173|    294|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   146k|    {
 1088|   146k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   320k|    {
  151|   320k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   297k|    {
 1191|   297k|        return has_value();
 1192|   297k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    172|    {
 1078|    172|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    344|    {
  151|    344|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   880k|    {
 1078|   880k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   880k|    {
  151|   880k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.06M|    {
 1191|  1.06M|        return has_value();
 1192|  1.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.93M|    {
  189|  1.93M|        return m_has_value;
  190|  1.93M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   193k|    {
 1197|   193k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   193k|        return this->get_unexpected().error();
 1199|   193k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   339k|    {
  172|   339k|        return m_unexpected;
  173|   339k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   193k|    {
 1034|   193k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   193k|    {
  142|   193k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   193k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   355k|    {
 1221|   355k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   355k|        return this->get_value();
 1223|   355k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   355k|    {
  155|   355k|        return m_value;
  156|   355k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   193k|    {
 1191|   193k|        return has_value();
 1192|   193k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   386k|    {
  189|   386k|        return m_has_value;
  190|   386k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   193k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   193k|    {
 1263|   193k|        return std::move(value());
 1264|   193k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   193k|    {
 1221|   193k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   193k|        return this->get_value();
 1223|   193k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   193k|    {
  155|   193k|        return m_value;
  156|   193k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   332k|    {
 1405|   332k|        return detail::transform_error_impl(std::move(*this),
 1406|   332k|                                            std::forward<F>(f));
 1407|   332k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   332k|{
  927|   332k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   332k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   332k|        if (SCN_LIKELY(exp.has_value())) {
  930|   332k|            return result(*std::forward<Exp>(exp));
  931|   332k|        }
  932|       |
  933|   332k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   332k|        return result(unexpect, monostate{});
  935|   332k|    }
  936|   332k|    else {
  937|   332k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   332k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   332k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 331k, False: 172]
  |  |  ------------------
  ------------------
  939|   332k|                   ? result(*std::forward<Exp>(exp))
  940|   332k|                   : result(unexpect,
  941|    172|                            std::invoke(std::forward<F>(f),
  942|    172|                                        std::forward<Exp>(exp).error()));
  943|   332k|    }
  944|   332k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   355k|    {
 1034|   355k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   355k|    {
  142|   355k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    172|    {
 1088|    172|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   355k|    {
 1263|   355k|        return std::move(value());
 1264|   355k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   193k|    {
 1034|   193k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   193k|    {
  142|   193k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   193k|    {
 1405|   193k|        return detail::transform_error_impl(std::move(*this),
 1406|   193k|                                            std::forward<F>(f));
 1407|   193k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   193k|{
  927|   193k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   193k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   193k|        if (SCN_LIKELY(exp.has_value())) {
  930|   193k|            return result(*std::forward<Exp>(exp));
  931|   193k|        }
  932|       |
  933|   193k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   193k|        return result(unexpect, monostate{});
  935|   193k|    }
  936|   193k|    else {
  937|   193k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   193k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   193k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 193k, False: 0]
  |  |  ------------------
  ------------------
  939|   193k|                   ? result(*std::forward<Exp>(exp))
  940|   193k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   193k|    }
  944|   193k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   386k|    {
  189|   386k|        return m_has_value;
  190|   386k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   193k|    {
 1263|   193k|        return std::move(value());
 1264|   193k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   193k|    {
 1221|   193k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   193k|        return this->get_value();
 1223|   193k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   193k|    {
  155|   193k|        return m_value;
  156|   193k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   193k|    {
 1034|   193k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   193k|    {
  142|   193k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   193k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   193k|    {
 1191|   193k|        return has_value();
 1192|   193k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   386k|    {
  189|   386k|        return m_has_value;
  190|   386k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   193k|    {
 1263|   193k|        return std::move(value());
 1264|   193k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   193k|    {
 1221|   193k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   193k|        return this->get_value();
 1223|   193k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   193k|    {
  155|   193k|        return m_value;
  156|   193k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   169k|    {
 1405|   169k|        return detail::transform_error_impl(std::move(*this),
 1406|   169k|                                            std::forward<F>(f));
 1407|   169k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   169k|{
  927|   169k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   169k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   169k|        if (SCN_LIKELY(exp.has_value())) {
  930|   169k|            return result(*std::forward<Exp>(exp));
  931|   169k|        }
  932|       |
  933|   169k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   169k|        return result(unexpect, monostate{});
  935|   169k|    }
  936|   169k|    else {
  937|   169k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   169k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 146k]
  |  |  ------------------
  ------------------
  939|   169k|                   ? result(*std::forward<Exp>(exp))
  940|   169k|                   : result(unexpect,
  941|   146k|                            std::invoke(std::forward<F>(f),
  942|   146k|                                        std::forward<Exp>(exp).error()));
  943|   169k|    }
  944|   169k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   146k|    {
 1207|   146k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   146k|        return std::move(this->get_unexpected().error());
 1209|   146k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   173k|    {
 1078|   173k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  23.1k|    {
 1078|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  23.1k|    {
  312|  23.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  23.1k|    {
  373|  23.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  23.1k|                                  std::forward<Args>(args)...);
  375|  23.1k|        m_has_value = false;
  376|  23.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  69.5k|    {
  403|  69.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  69.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  69.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  69.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  23.1k|    {
  317|  23.1k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 23.1k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  23.1k|        else {
  321|  23.1k|            destroy_unexpected();
  322|  23.1k|        }
  323|  23.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  69.5k|    {
  361|  69.5k|        return m_has_value;
  362|  69.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  23.1k|    {
  384|  23.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  23.1k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  23.1k|    {
 1191|  23.1k|        return has_value();
 1192|  23.1k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  23.1k|    {
 1197|  23.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  23.1k|        return this->get_unexpected().error();
 1199|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  23.1k|    {
  344|  23.1k|        return *unexpected_ptr();
  345|  23.1k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  19.3k|    {
 1251|  19.3k|        return value();
 1252|  19.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   235k|    {
 1221|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   235k|        return this->get_value();
 1223|   235k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.11M|    {
  189|  1.11M|        return m_has_value;
  190|  1.11M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   235k|    {
  155|   235k|        return m_value;
  156|   235k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   556k|    {
 1191|   556k|        return has_value();
 1192|   556k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   320k|    {
 1197|   320k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   320k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   320k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   320k|        return this->get_unexpected().error();
 1199|   320k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   320k|    {
  172|   320k|        return m_unexpected;
  173|   320k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   216k|    {
 1263|   216k|        return std::move(value());
 1264|   216k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   142k|    {
 1078|   142k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   142k|    {
  151|   142k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  10.9M|    {
 1034|  10.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.9M|    {
  142|  10.9M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.32M|    {
 1405|  2.32M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.32M|                                            std::forward<F>(f));
 1407|  2.32M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.32M|{
  927|  2.32M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.32M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.32M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.32M|            return result(*std::forward<Exp>(exp));
  931|  2.32M|        }
  932|       |
  933|  2.32M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.32M|        return result(unexpect, monostate{});
  935|  2.32M|    }
  936|  2.32M|    else {
  937|  2.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.29M, False: 28.9k]
  |  |  ------------------
  ------------------
  939|  2.32M|                   ? result(*std::forward<Exp>(exp))
  940|  2.32M|                   : result(unexpect,
  941|  28.9k|                            std::invoke(std::forward<F>(f),
  942|  28.9k|                                        std::forward<Exp>(exp).error()));
  943|  2.32M|    }
  944|  2.32M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  19.0M|    {
  189|  19.0M|        return m_has_value;
  190|  19.0M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.06M|    {
 1263|  7.06M|        return std::move(value());
 1264|  7.06M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.85M|    {
 1221|  7.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  7.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  7.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  7.85M|        return this->get_value();
 1223|  7.85M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.85M|    {
  155|  7.85M|        return m_value;
  156|  7.85M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  8.90M|    {
 1034|  8.90M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.90M|    {
  142|  8.90M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.51M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   141k|    {
 1207|   141k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   141k|        return std::move(this->get_unexpected().error());
 1209|   141k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   142k|    {
  172|   142k|        return m_unexpected;
  173|   142k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.9k|    {
 1088|  28.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   606k|    {
  151|   606k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   577k|    {
 1078|   577k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  3.84M|    {
 1191|  3.84M|        return has_value();
 1192|  3.84M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.63k|    {
 1197|  1.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.63k|        return this->get_unexpected().error();
 1199|  1.63k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   113k|    {
 1078|   113k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   225k|    {
  151|   225k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   784k|    {
 1251|   784k|        return value();
 1252|   784k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.46M|    {
 1034|  1.46M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.46M|    {
  142|  1.46M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  8.68M|    {
 1078|  8.68M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  8.68M|    {
  151|  8.68M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  15.1M|    {
 1191|  15.1M|        return has_value();
 1192|  15.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  23.7M|    {
  189|  23.7M|        return m_has_value;
  190|  23.7M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.27M|    {
 1197|  2.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  2.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  2.27M|        return this->get_unexpected().error();
 1199|  2.27M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.27M|    {
  172|  2.27M|        return m_unexpected;
  173|  2.27M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.29M|    {
 1034|  2.29M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.29M|    {
  142|  2.29M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.50M|    {
 1251|  1.50M|        return value();
 1252|  1.50M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.27M|    {
 1221|  6.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  6.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  6.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.27M|        return this->get_value();
 1223|  6.27M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  6.27M|    {
  155|  6.27M|        return m_value;
  156|  6.27M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.29M|    {
 1191|  2.29M|        return has_value();
 1192|  2.29M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.59M|    {
  189|  4.59M|        return m_has_value;
  190|  4.59M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.29M|    {
 1263|  2.29M|        return std::move(value());
 1264|  2.29M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.29M|    {
 1221|  2.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.29M|        return this->get_value();
 1223|  2.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.29M|    {
  155|  2.29M|        return m_value;
  156|  2.29M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  4.88M|    {
 1405|  4.88M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.88M|                                            std::forward<F>(f));
 1407|  4.88M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.88M|{
  927|  4.88M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.88M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.88M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.88M|            return result(*std::forward<Exp>(exp));
  931|  4.88M|        }
  932|       |
  933|  4.88M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.88M|        return result(unexpect, monostate{});
  935|  4.88M|    }
  936|  4.88M|    else {
  937|  4.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  4.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.77M, False: 112k]
  |  |  ------------------
  ------------------
  939|  4.88M|                   ? result(*std::forward<Exp>(exp))
  940|  4.88M|                   : result(unexpect,
  941|   112k|                            std::invoke(std::forward<F>(f),
  942|   112k|                                        std::forward<Exp>(exp).error()));
  943|  4.88M|    }
  944|  4.88M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  4.81M|    {
 1034|  4.81M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.81M|    {
  142|  4.81M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   112k|    {
 1088|   112k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.77M|    {
 1263|  4.77M|        return std::move(value());
 1264|  4.77M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.29M|    {
 1034|  2.29M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.29M|    {
  142|  2.29M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.29M|    {
 1405|  2.29M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.29M|                                            std::forward<F>(f));
 1407|  2.29M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.29M|{
  927|  2.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.29M|            return result(*std::forward<Exp>(exp));
  931|  2.29M|        }
  932|       |
  933|  2.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.29M|        return result(unexpect, monostate{});
  935|  2.29M|    }
  936|  2.29M|    else {
  937|  2.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|  2.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 2.29M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.29M|                   ? result(*std::forward<Exp>(exp))
  940|  2.29M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.29M|    }
  944|  2.29M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  4.59M|    {
  189|  4.59M|        return m_has_value;
  190|  4.59M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.29M|    {
 1263|  2.29M|        return std::move(value());
 1264|  2.29M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.29M|    {
 1221|  2.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.29M|        return this->get_value();
 1223|  2.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.29M|    {
  155|  2.29M|        return m_value;
  156|  2.29M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.29M|    {
 1034|  2.29M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.29M|    {
  142|  2.29M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  2.29M|    {
 1191|  2.29M|        return has_value();
 1192|  2.29M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.59M|    {
  189|  4.59M|        return m_has_value;
  190|  4.59M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.29M|    {
 1263|  2.29M|        return std::move(value());
 1264|  2.29M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.29M|    {
 1221|  2.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.29M|        return this->get_value();
 1223|  2.29M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.29M|    {
  155|  2.29M|        return m_value;
  156|  2.29M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  28.0k|    {
 1078|  28.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  28.0k|    {
  312|  28.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  28.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  28.0k|    {
  373|  28.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  28.0k|                                  std::forward<Args>(args)...);
  375|  28.0k|        m_has_value = false;
  376|  28.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  84.2k|    {
  403|  84.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  84.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|  84.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  84.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   313k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   313k|    {
  317|   313k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 285k, False: 28.0k]
  ------------------
  318|   285k|            destroy_value();
  319|   285k|        }
  320|  28.0k|        else {
  321|  28.0k|            destroy_unexpected();
  322|  28.0k|        }
  323|   313k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   940k|    {
  361|   940k|        return m_has_value;
  362|   940k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   285k|    {
  380|   285k|        scn::detail::destroy_at(value_ptr());
  381|   285k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   285k|{
  108|   285k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   285k|        for (auto& elem : *p) {
  110|   285k|            scn::detail::destroy_at(std::addressof(elem));
  111|   285k|        }
  112|   285k|    }
  113|   285k|    else {
  114|   285k|        p->~T();
  115|   285k|    }
  116|   285k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   855k|    {
  390|   855k|        return reinterpret_cast<T*>(
  391|   855k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  205|   855k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   855k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  28.0k|    {
  384|  28.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  28.0k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   285k|    {
 1034|   285k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   285k|    {
  303|   285k|        construct(std::forward<Args>(args)...);
  304|   285k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   285k|    {
  367|   285k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   285k|        m_has_value = true;
  369|   285k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   285k|{
  102|   285k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   285k|        T(std::forward<Args>(args)...);
  104|   285k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   313k|    {
 1191|   313k|        return has_value();
 1192|   313k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  28.0k|    {
 1197|  28.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  28.0k|        return this->get_unexpected().error();
 1199|  28.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  28.0k|    {
  344|  28.0k|        return *unexpected_ptr();
  345|  28.0k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   285k|    {
 1263|   285k|        return std::move(value());
 1264|   285k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   285k|    {
 1221|   285k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   285k|        return this->get_value();
 1223|   285k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   285k|    {
  327|   285k|        return *value_ptr();
  328|   285k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.44M|    {
 1251|  1.44M|        return value();
 1252|  1.44M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.90M|    {
 1221|  8.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|  8.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  8.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  8.90M|        return this->get_value();
 1223|  8.90M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  19.0M|    {
  189|  19.0M|        return m_has_value;
  190|  19.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  8.90M|    {
  155|  8.90M|        return m_value;
  156|  8.90M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  9.51M|    {
 1191|  9.51M|        return has_value();
 1192|  9.51M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   606k|    {
 1197|   606k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   606k|        return this->get_unexpected().error();
 1199|   606k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   606k|    {
  172|   606k|        return m_unexpected;
  173|   606k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.45M|    {
 1263|  7.45M|        return std::move(value());
 1264|  7.45M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   306k|    {
 1078|   306k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   558k|    {
  151|   558k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   959k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   401k|    {
 1034|   401k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   401k|    {
  142|   401k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   959k|    {
 1191|   959k|        return has_value();
 1192|   959k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.91M|    {
  189|  1.91M|        return m_has_value;
  190|  1.91M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   558k|    {
 1197|   558k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   558k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   558k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   558k|        return this->get_unexpected().error();
 1199|   558k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   558k|    {
  172|   558k|        return m_unexpected;
  173|   558k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  27.2k|    {
 1251|  27.2k|        return value();
 1252|  27.2k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   401k|    {
 1221|   401k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   401k|        return this->get_value();
 1223|   401k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   401k|    {
  155|   401k|        return m_value;
  156|   401k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    404|    {
 1078|    404|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    404|    {
  151|    404|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.42M|    {
 1034|  1.42M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.42M|    {
  142|  1.42M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   333k|    {
 1405|   333k|        return detail::transform_error_impl(std::move(*this),
 1406|   333k|                                            std::forward<F>(f));
 1407|   333k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   333k|{
  927|   333k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   333k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   333k|        if (SCN_LIKELY(exp.has_value())) {
  930|   333k|            return result(*std::forward<Exp>(exp));
  931|   333k|        }
  932|       |
  933|   333k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   333k|        return result(unexpect, monostate{});
  935|   333k|    }
  936|   333k|    else {
  937|   333k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   333k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   333k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 333k, False: 234]
  |  |  ------------------
  ------------------
  939|   333k|                   ? result(*std::forward<Exp>(exp))
  940|   333k|                   : result(unexpect,
  941|    234|                            std::invoke(std::forward<F>(f),
  942|    234|                                        std::forward<Exp>(exp).error()));
  943|   333k|    }
  944|   333k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.34M|    {
  189|  2.34M|        return m_has_value;
  190|  2.34M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   911k|    {
 1263|   911k|        return std::move(value());
 1264|   911k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   911k|    {
 1221|   911k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   911k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   911k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   911k|        return this->get_value();
 1223|   911k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   911k|    {
  155|   911k|        return m_value;
  156|   911k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    404|    {
 1207|    404|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|    404|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|    404|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    404|        return std::move(this->get_unexpected().error());
 1209|    404|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    404|    {
  172|    404|        return m_unexpected;
  173|    404|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   251k|    {
 1088|   251k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   517k|    {
 1191|   517k|        return has_value();
 1192|   517k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    170|    {
 1078|    170|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    340|    {
  151|    340|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.14M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.53M|    {
 1078|  1.53M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.53M|    {
  151|  1.53M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.85M|    {
 1191|  1.85M|        return has_value();
 1192|  1.85M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.35M|    {
  189|  3.35M|        return m_has_value;
  190|  3.35M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   333k|    {
 1197|   333k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   333k|        return this->get_unexpected().error();
 1199|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   585k|    {
  172|   585k|        return m_unexpected;
  173|   585k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   333k|    {
 1034|   333k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   333k|    {
  142|   333k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   333k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   618k|    {
 1221|   618k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   618k|        return this->get_value();
 1223|   618k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   618k|    {
  155|   618k|        return m_value;
  156|   618k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   333k|    {
 1191|   333k|        return has_value();
 1192|   333k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   666k|    {
  189|   666k|        return m_has_value;
  190|   666k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   333k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   333k|    {
 1263|   333k|        return std::move(value());
 1264|   333k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   333k|    {
 1221|   333k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   333k|        return this->get_value();
 1223|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   333k|    {
  155|   333k|        return m_value;
  156|   333k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   578k|    {
 1405|   578k|        return detail::transform_error_impl(std::move(*this),
 1406|   578k|                                            std::forward<F>(f));
 1407|   578k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   578k|{
  927|   578k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   578k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   578k|        if (SCN_LIKELY(exp.has_value())) {
  930|   578k|            return result(*std::forward<Exp>(exp));
  931|   578k|        }
  932|       |
  933|   578k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   578k|        return result(unexpect, monostate{});
  935|   578k|    }
  936|   578k|    else {
  937|   578k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   578k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   578k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 578k, False: 170]
  |  |  ------------------
  ------------------
  939|   578k|                   ? result(*std::forward<Exp>(exp))
  940|   578k|                   : result(unexpect,
  941|    170|                            std::invoke(std::forward<F>(f),
  942|    170|                                        std::forward<Exp>(exp).error()));
  943|   578k|    }
  944|   578k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   618k|    {
 1034|   618k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   618k|    {
  142|   618k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    170|    {
 1088|    170|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   618k|    {
 1263|   618k|        return std::move(value());
 1264|   618k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   333k|    {
 1034|   333k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   333k|    {
  142|   333k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   333k|    {
 1405|   333k|        return detail::transform_error_impl(std::move(*this),
 1406|   333k|                                            std::forward<F>(f));
 1407|   333k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   333k|{
  927|   333k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   333k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   333k|        if (SCN_LIKELY(exp.has_value())) {
  930|   333k|            return result(*std::forward<Exp>(exp));
  931|   333k|        }
  932|       |
  933|   333k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   333k|        return result(unexpect, monostate{});
  935|   333k|    }
  936|   333k|    else {
  937|   333k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   333k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   333k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 333k, False: 0]
  |  |  ------------------
  ------------------
  939|   333k|                   ? result(*std::forward<Exp>(exp))
  940|   333k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   333k|    }
  944|   333k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   666k|    {
  189|   666k|        return m_has_value;
  190|   666k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   333k|    {
 1263|   333k|        return std::move(value());
 1264|   333k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   333k|    {
 1221|   333k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   333k|        return this->get_value();
 1223|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   333k|    {
  155|   333k|        return m_value;
  156|   333k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   333k|    {
 1034|   333k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   333k|    {
  142|   333k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   333k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   333k|    {
 1191|   333k|        return has_value();
 1192|   333k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   666k|    {
  189|   666k|        return m_has_value;
  190|   666k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   333k|    {
 1263|   333k|        return std::move(value());
 1264|   333k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   333k|    {
 1221|   333k|        SCN_EXPECT(has_value());
  ------------------
  |  |  246|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|   333k|        return this->get_value();
 1223|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   333k|    {
  155|   333k|        return m_value;
  156|   333k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   292k|    {
 1405|   292k|        return detail::transform_error_impl(std::move(*this),
 1406|   292k|                                            std::forward<F>(f));
 1407|   292k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   292k|{
  927|   292k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   292k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   292k|        if (SCN_LIKELY(exp.has_value())) {
  930|   292k|            return result(*std::forward<Exp>(exp));
  931|   292k|        }
  932|       |
  933|   292k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   292k|        return result(unexpect, monostate{});
  935|   292k|    }
  936|   292k|    else {
  937|   292k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   292k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  156|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 40.8k, False: 251k]
  |  |  ------------------
  ------------------
  939|   292k|                   ? result(*std::forward<Exp>(exp))
  940|   292k|                   : result(unexpect,
  941|   251k|                            std::invoke(std::forward<F>(f),
  942|   251k|                                        std::forward<Exp>(exp).error()));
  943|   292k|    }
  944|   292k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   251k|    {
 1207|   251k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|   251k|        return std::move(this->get_unexpected().error());
 1209|   251k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  40.8k|    {
 1078|  40.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  40.8k|    {
  312|  40.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  40.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  40.8k|    {
  373|  40.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  40.8k|                                  std::forward<Args>(args)...);
  375|  40.8k|        m_has_value = false;
  376|  40.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   122k|    {
  403|   122k|        return reinterpret_cast<unexpected<E>*>(
  404|   122k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  205|   122k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   122k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.8k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  40.8k|    {
  317|  40.8k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 40.8k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  40.8k|        else {
  321|  40.8k|            destroy_unexpected();
  322|  40.8k|        }
  323|  40.8k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   122k|    {
  361|   122k|        return m_has_value;
  362|   122k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  40.8k|    {
  384|  40.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  40.8k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  40.8k|    {
 1191|  40.8k|        return has_value();
 1192|  40.8k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  40.8k|    {
 1197|  40.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  246|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  40.8k|        return this->get_unexpected().error();
 1199|  40.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  40.8k|    {
  344|  40.8k|        return *unexpected_ptr();
  345|  40.8k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   374k|    {
 1263|   374k|        return std::move(value());
 1264|   374k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.86k|{
  200|  3.86k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.86k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  3.86k|{
  180|  3.86k|    return p;
  181|  3.86k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.86k|{
  200|  3.86k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.86k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  3.86k|{
  180|  3.86k|    return p;
  181|  3.86k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.86k|{
  200|  3.86k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.86k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  3.86k|{
  180|  3.86k|    return p;
  181|  3.86k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.95M|{
  200|  8.95M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  8.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.95M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  9.77M|{
  180|  9.77M|    return p;
  181|  9.77M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.67M|{
  200|  5.67M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.67M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  5.67M|{
  180|  5.67M|    return p;
  181|  5.67M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   818k|{
  200|   818k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   818k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.29M|{
  200|  5.29M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  5.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.29M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  7.37M|{
  180|  7.37M|    return p;
  181|  7.37M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.08M|{
  200|  2.08M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  252|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.08M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  13.3k|    {
  242|  13.3k|        return static_cast<size_type>(m_end - m_ptr);
  243|  13.3k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  1.93k|    {
  181|  1.93k|        return m_ptr;
  182|  1.93k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  1.93k|    {
  185|  1.93k|        return m_end;
  186|  1.93k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  1.93k|    {
  238|  1.93k|        return m_ptr;
  239|  1.93k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  1.93k|    {
  120|  1.93k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  46.3k|    {
  181|  46.3k|        return m_ptr;
  182|  46.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  46.3k|    {
  185|  46.3k|        return m_end;
  186|  46.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  1.93k|    {
  120|  1.93k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  81.6k|    {
  181|  81.6k|        return m_ptr;
  182|  81.6k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  81.6k|    {
  185|  81.6k|        return m_end;
  186|  81.6k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  1.93k|    {
  120|  1.93k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  2.83M|    {
  120|  2.83M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  2.83M|    {
  238|  2.83M|        return m_ptr;
  239|  2.83M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  2.83M|    {
  242|  2.83M|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.83M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  1.81M|{
   60|  1.81M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  1.81M|                                          const CharT*, const CharT*>) {
   62|  1.81M|        return {first, last};
   63|  1.81M|    }
   64|  1.81M|    else {
   65|  1.81M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  1.81M|    }
   67|  1.81M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.03M|{
   60|  4.03M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.03M|                                          const CharT*, const CharT*>) {
   62|  4.03M|        return {first, last};
   63|  4.03M|    }
   64|  4.03M|    else {
   65|  4.03M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.03M|    }
   67|  4.03M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  2.84M|{
   44|  2.84M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  2.84M|                                          decltype(first), decltype(last)> &&
   46|  2.84M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  2.84M|        return {first, last};
   48|  2.84M|    }
   49|  2.84M|    else {
   50|  2.84M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  2.84M|                                       to_address(first), to_address(last)))};
   52|  2.84M|    }
   53|  2.84M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  5.30M|{
   75|  5.30M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  5.30M|                      typename std::basic_string_view<CharT>::iterator,
   77|  5.30M|                      decltype(it)> &&
   78|  5.30M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  153|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  5.30M|        SCN_UNUSED(sv);
  ------------------
  |  |  231|  5.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  5.30M|        return it;
   81|  5.30M|    }
   82|  5.30M|    else {
   83|  5.30M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  5.30M|    }
   85|  5.30M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   193k|{
   54|   193k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   193k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   193k|        return true;
   57|   193k|    }
   58|   193k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   193k|                           ranges::iterator_t<Range>,
   60|   193k|                           typename detail::basic_scan_buffer<
   61|   193k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   193k|        auto beg = ranges::begin(r);
   63|   193k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 193k, False: 0]
  ------------------
   64|   193k|            return false;
   65|   193k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   193k|    else {
   79|   193k|        return false;
   80|   193k|    }
   81|   193k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   386k|{
  112|   386k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   386k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   386k|        return r;
  115|   386k|    }
  116|   386k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   386k|                           ranges::iterator_t<Range>,
  118|   386k|                           typename detail::basic_scan_buffer<
  119|   386k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   386k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   386k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   386k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   386k|                ranges::begin(r), ranges::end(r)));
  124|   386k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   386k|        }
  126|   386k|        else {
  127|   386k|            return ranges::begin(r).contiguous_segment();
  128|   386k|        }
  129|   386k|    }
  130|   386k|    else {
  131|   386k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   386k|    }
  133|   386k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   332k|{
  166|   332k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   332k|        return ranges_polyfill::usize(r);
  168|   332k|    }
  169|   332k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   332k|                           ranges::iterator_t<Range>,
  171|   332k|                           typename detail::basic_scan_buffer<
  172|   332k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   332k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   332k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   332k|                                       ranges::begin(r).position());
  176|   332k|        }
  177|   332k|        else {
  178|   332k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 332k, False: 0]
  ------------------
  179|   332k|                return static_cast<size_t>(
  180|   332k|                    ranges::begin(r).parent()->chars_available() -
  181|   332k|                    ranges::begin(r).position());
  182|   332k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   332k|        }
  185|   332k|    }
  186|   332k|    else {
  187|   332k|        return 0;
  188|   332k|    }
  189|   332k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   333k|{
   54|   333k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   333k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   333k|        return true;
   57|   333k|    }
   58|   333k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   333k|                           ranges::iterator_t<Range>,
   60|   333k|                           typename detail::basic_scan_buffer<
   61|   333k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   333k|        auto beg = ranges::begin(r);
   63|   333k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 333k, False: 0]
  ------------------
   64|   333k|            return false;
   65|   333k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   333k|    else {
   79|   333k|        return false;
   80|   333k|    }
   81|   333k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   333k|{
  112|   333k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   333k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   333k|        return r;
  115|   333k|    }
  116|   333k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   333k|                           ranges::iterator_t<Range>,
  118|   333k|                           typename detail::basic_scan_buffer<
  119|   333k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   333k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   333k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   333k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   333k|                ranges::begin(r), ranges::end(r)));
  124|   333k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   333k|        }
  126|   333k|        else {
  127|   333k|            return ranges::begin(r).contiguous_segment();
  128|   333k|        }
  129|   333k|    }
  130|   333k|    else {
  131|   333k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   333k|    }
  133|   333k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   578k|{
  166|   578k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   578k|        return ranges_polyfill::usize(r);
  168|   578k|    }
  169|   578k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   578k|                           ranges::iterator_t<Range>,
  171|   578k|                           typename detail::basic_scan_buffer<
  172|   578k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   578k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   578k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   578k|                                       ranges::begin(r).position());
  176|   578k|        }
  177|   578k|        else {
  178|   578k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 578k, False: 0]
  ------------------
  179|   578k|                return static_cast<size_t>(
  180|   578k|                    ranges::begin(r).parent()->chars_available() -
  181|   578k|                    ranges::begin(r).position());
  182|   578k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   578k|        }
  185|   578k|    }
  186|   578k|    else {
  187|   578k|        return 0;
  188|   578k|    }
  189|   578k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.49M|{
  235|  2.49M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.49M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.49M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.49M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.49M|    }
  240|  2.49M|    else {
  241|  2.49M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.49M|    }
  243|  2.49M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.49M|    {
   50|  2.49M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  8.25M|    {
   63|  8.25M|        return sv;
   64|  8.25M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.68M|{
  235|  1.68M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.68M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.68M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.68M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.68M|    }
  240|  1.68M|    else {
  241|  1.68M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.68M|    }
  243|  1.68M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.68M|    {
   50|  1.68M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   428k|    {
  142|   428k|        return m_view;
  143|   428k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   409k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   409k|{
  235|   409k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   409k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   409k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   409k|        return string_view_wrapper{SCN_FWD(range)};
  239|   409k|    }
  240|   409k|    else {
  241|   409k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  252|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   409k|    }
  243|   409k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   409k|    {
   97|   409k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   409k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   409k|    {
  181|   409k|        using value_t = ranges::range_value_t<Range>;
  182|   409k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   409k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   409k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   409k|            m_storage.reset();
  186|   409k|            m_view = string_view_type{ranges::data(range),
  187|   409k|                                      ranges_polyfill::usize(range)};
  188|   409k|        }
  189|   409k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   409k|                                          std::basic_string<CharT>>) {
  191|   409k|            m_storage.emplace(SCN_FWD(range));
  192|   409k|            m_view = string_view_type{*m_storage};
  193|   409k|        }
  194|   409k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   409k|                                          typename detail::basic_scan_buffer<
  196|   409k|                                              value_t>::forward_iterator> &&
  197|   409k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   409k|            auto beg_seg = range.begin().contiguous_segment();
  199|   409k|            auto end_seg = range.end().contiguous_segment();
  200|   409k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  157|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 409k, False: 212]
  |  |  ------------------
  ------------------
  201|   409k|                             detail::to_address(end_seg.end()))) {
  202|   409k|                auto& str = m_storage.emplace();
  203|   409k|                str.reserve(range.end().position() - range.begin().position());
  204|   409k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   409k|                m_view = string_view_type{str};
  206|   409k|                return;
  207|   409k|            }
  208|       |
  209|    212|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    212|                                                            end_seg.data());
  211|    212|            m_storage.reset();
  212|    212|        }
  213|   409k|        else {
  214|   409k|            auto& str = m_storage.emplace();
  215|   409k|            if constexpr (ranges::sized_range<Range>) {
  216|   409k|                str.reserve(ranges_polyfill::usize(range));
  217|   409k|            }
  218|   409k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   409k|                      std::back_inserter(str));
  220|   409k|            m_view = string_view_type{str};
  221|   409k|        }
  222|   409k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.57M|{
  235|  1.57M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.57M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.57M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.57M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  252|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.57M|    }
  240|  1.57M|    else {
  241|  1.57M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.57M|    }
  243|  1.57M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.57M|    {
   50|  1.57M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  2.93M|    {
   63|  2.93M|        return sv;
   64|  2.93M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  1.06M|    {
  142|  1.06M|        return m_view;
  143|  1.06M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  1.04M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  1.04M|{
  235|  1.04M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.04M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.04M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.04M|        return string_view_wrapper{SCN_FWD(range)};
  239|  1.04M|    }
  240|  1.04M|    else {
  241|  1.04M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  252|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  1.04M|    }
  243|  1.04M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  1.04M|    {
   97|  1.04M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  252|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  1.04M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  1.04M|    {
  181|  1.04M|        using value_t = ranges::range_value_t<Range>;
  182|  1.04M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.04M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.04M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.04M|            m_storage.reset();
  186|  1.04M|            m_view = string_view_type{ranges::data(range),
  187|  1.04M|                                      ranges_polyfill::usize(range)};
  188|  1.04M|        }
  189|  1.04M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.04M|                                          std::basic_string<CharT>>) {
  191|  1.04M|            m_storage.emplace(SCN_FWD(range));
  192|  1.04M|            m_view = string_view_type{*m_storage};
  193|  1.04M|        }
  194|  1.04M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  1.04M|                                          typename detail::basic_scan_buffer<
  196|  1.04M|                                              value_t>::forward_iterator> &&
  197|  1.04M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  1.04M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.04M|            auto end_seg = range.end().contiguous_segment();
  200|  1.04M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  157|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.04M, False: 306]
  |  |  ------------------
  ------------------
  201|  1.04M|                             detail::to_address(end_seg.end()))) {
  202|  1.04M|                auto& str = m_storage.emplace();
  203|  1.04M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.04M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.04M|                m_view = string_view_type{str};
  206|  1.04M|                return;
  207|  1.04M|            }
  208|       |
  209|    306|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    306|                                                            end_seg.data());
  211|    306|            m_storage.reset();
  212|    306|        }
  213|  1.04M|        else {
  214|  1.04M|            auto& str = m_storage.emplace();
  215|  1.04M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.04M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.04M|            }
  218|  1.04M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.04M|                      std::back_inserter(str));
  220|  1.04M|            m_view = string_view_type{str};
  221|  1.04M|        }
  222|  1.04M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  10.8M|{
   97|  10.8M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  10.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 29.3k, False: 10.8M]
  |  |  ------------------
  ------------------
   98|  29.3k|        return eof_error::eof;
   99|  29.3k|    }
  100|  10.8M|    return eof_error::good;
  101|  10.8M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  10.8M|{
   91|  10.8M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  10.8M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  10.8M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  10.8M|    {
   84|  10.8M|        return begin == end;
   85|  10.8M|    }
   86|  10.8M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   683k|{
   97|   683k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 122, False: 683k]
  |  |  ------------------
  ------------------
   98|    122|        return eof_error::eof;
   99|    122|    }
  100|   683k|    return eof_error::good;
  101|   683k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   683k|{
   91|   683k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   683k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   683k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   683k|    {
   84|   683k|        return begin == end;
   85|   683k|    }
   86|   683k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  10.0M|{
   97|  10.0M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  10.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 31.9k, False: 10.0M]
  |  |  ------------------
  ------------------
   98|  31.9k|        return eof_error::eof;
   99|  31.9k|    }
  100|  10.0M|    return eof_error::good;
  101|  10.0M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  10.0M|{
   91|  10.0M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  10.0M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  10.0M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  10.0M|    {
   84|  10.0M|        return begin == end;
   85|  10.0M|    }
   86|  10.0M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.18M|{
   97|  1.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  157|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 234, False: 1.18M]
  |  |  ------------------
  ------------------
   98|    234|        return eof_error::eof;
   99|    234|    }
  100|  1.18M|    return eof_error::good;
  101|  1.18M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.18M|{
   91|  1.18M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.18M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.18M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.18M|    {
   84|  1.18M|        return begin == end;
   85|  1.18M|    }
   86|  1.18M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.68M|{
  128|  2.68M|    return find_classic_impl(
  129|  2.68M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.68M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.68M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  2.72M|{
   31|  2.72M|    static_assert(sizeof(*source.data()) == 1);
   32|  2.72M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  246|  2.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|  2.72M|    uint64_t word{};
   34|  2.72M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  2.72M|    return has_byte_greater(word, 127) != 0;
   37|  2.72M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|  2.68M|{
   44|  2.68M|    auto it = source.begin();
   45|       |
   46|  2.92M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.72M, False: 199k]
  ------------------
   47|  2.72M|        auto sv =
   48|  2.72M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.72M|                .substr(0, 8);
   50|       |
   51|  2.72M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.65M, False: 76.6k]
  ------------------
   52|  2.65M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.65M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.65M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.41M, False: 236k]
  ------------------
   55|  2.41M|                break;
   56|  2.41M|            }
   57|   236k|            continue;
   58|  2.65M|        }
   59|       |
   60|   116k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 113k, False: 3.30k]
  ------------------
   61|   113k|            auto tmp =
   62|   113k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   113k|            auto res = get_next_code_point(tmp);
   64|   113k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 73.3k, False: 40.0k]
  ------------------
   65|  73.3k|                return it;
   66|  73.3k|            }
   67|  40.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  40.0k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  40.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  247|  40.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  40.0k|        }
   71|  76.6k|    }
   72|       |
   73|  2.61M|    return detail::make_string_view_iterator(source, it);
   74|  2.68M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  129|  5.13M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  130|   113k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.49M|{
  300|  2.49M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.49M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.49M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.49M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.49M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.49M|        return ranges::next(ranges::begin(range),
  306|  2.49M|                            ranges::distance(buf.view().begin(), it));
  307|  2.49M|    }
  308|  2.49M|    else {
  309|  2.49M|        auto it = ranges::begin(range);
  310|       |
  311|  2.49M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.49M|            auto seg = get_contiguous_beginning(range);
  313|  2.49M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.49M|                seg_it != seg.end()) {
  315|  2.49M|                return ranges_polyfill::batch_next(
  316|  2.49M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.49M|            }
  318|  2.49M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.49M|        }
  320|       |
  321|  2.49M|        return read_while_code_point(
  322|  2.49M|            SCN_FWD(range),
  323|  2.49M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.49M|    }
  325|  2.49M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.48M|{
  459|  2.48M|    auto it = read_code_unit(range);
  460|  2.48M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  4.93M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.93M, False: 2.31M]
  ------------------
  465|  4.93M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 177k, False: 4.75M]
  ------------------
  466|   177k|            return *it;
  467|   177k|        }
  468|  4.93M|    }
  469|       |
  470|  2.31M|    return unexpected(parse_error::error);
  471|  2.48M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   566k|{
  482|   566k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 502k, False: 63.9k]
  ------------------
  483|   502k|        return ranges::begin(range);
  484|   502k|    }
  485|  63.9k|    return *result;
  486|   566k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.34M|{
  418|  5.34M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.34M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.34M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.34M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 52.2k, False: 5.28M]
  ------------------
  423|  52.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  52.2k|        }
  425|  5.28M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 5.23M, False: 50.1k]
  ------------------
  426|  5.23M|            return unexpected(parse_error::error);
  427|  5.23M|        }
  428|  50.1k|        return ranges::next(ranges::begin(range), str.size());
  429|  5.28M|    }
  430|  5.34M|    else {
  431|  5.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.34M|            if (ch < 'A' || ch > 'Z') {
  433|  5.34M|                return ch;
  434|  5.34M|            }
  435|  5.34M|            return static_cast<char_type>(ch +
  436|  5.34M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.34M|        };
  438|       |
  439|  5.34M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  5.34M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.34M|        if (SCN_UNLIKELY(!std::equal(
  443|  5.34M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.34M|                    return ascii_tolower(a) ==
  445|  5.34M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.34M|                }))) {
  447|  5.34M|            return unexpected(parse_error::error);
  448|  5.34M|        }
  449|       |
  450|  5.34M|        return it;
  451|  5.34M|    }
  452|  5.34M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  5.28M|{
  407|  5.28M|    unsigned char running_diff{0};
  408|  15.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 10.5M, False: 5.28M]
  ------------------
  409|  10.5M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  10.5M|    }
  411|  5.28M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 46.6k, False: 5.24M]
  |  Branch (411:33): [True: 3.51k, False: 5.23M]
  ------------------
  412|  5.28M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  1.69M|{
  332|  1.69M|    auto it = read_code_unit(range);
  333|  1.69M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.36k, False: 1.69M]
  |  |  ------------------
  ------------------
  334|  1.36k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.36k|    }
  336|       |
  337|  1.69M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 944k, False: 752k]
  |  |  ------------------
  ------------------
  338|  1.69M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   944k|        return unexpected(parse_error::error);
  340|   944k|    }
  341|       |
  342|   752k|    return *it;
  343|  1.69M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   193k|{
  300|   193k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   193k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   193k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   193k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   193k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   193k|        return ranges::next(ranges::begin(range),
  306|   193k|                            ranges::distance(buf.view().begin(), it));
  307|   193k|    }
  308|   193k|    else {
  309|   193k|        auto it = ranges::begin(range);
  310|       |
  311|   193k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   193k|            auto seg = get_contiguous_beginning(range);
  313|   193k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   193k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 0, False: 193k]
  ------------------
  315|      0|                return ranges_polyfill::batch_next(
  316|      0|                    it, ranges::distance(seg.begin(), seg_it));
  317|      0|            }
  318|   193k|            ranges_polyfill::batch_next(it, seg.size());
  319|   193k|        }
  320|       |
  321|   193k|        return read_while_code_point(
  322|   193k|            SCN_FWD(range),
  ------------------
  |  |  252|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   193k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   193k|    }
  325|   193k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   193k|{
  264|   193k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   193k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   193k|{
  231|   193k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   193k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   193k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   193k|    }
  235|   193k|    else {
  236|   193k|        auto it = ranges::begin(range);
  237|   193k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   193k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   193k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 193k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   386k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 386k, False: 100]
  ------------------
  246|   386k|            const auto [iter, value] =
  247|   386k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   386k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   386k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 193k, False: 193k]
  ------------------
  250|   193k|                return it;
  251|   193k|            }
  252|   193k|            it = iter;
  253|   193k|        }
  254|       |
  255|    100|        return it;
  256|   193k|    }
  257|   193k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   193k|{
  178|   193k|    static_assert(ranges::contiguous_range<Range> &&
  179|   193k|                  ranges::sized_range<Range>);
  180|       |
  181|   193k|    std::array<char32_t, 16> cp_buf{};
  182|   193k|    std::array<uint8_t, 16> idx_buf{};
  183|   193k|    auto it = ranges::begin(range);
  184|   386k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 193k, False: 193k]
  ------------------
  185|   193k|        auto chunk_begin = it;
  186|   193k|        size_t code_point_count = 0;
  187|   193k|        uint8_t code_unit_idx = 0;
  188|   386k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 386k, False: 0]
  |  Branch (188:52): [True: 193k, False: 193k]
  ------------------
  189|   193k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 193k, False: 0]
  ------------------
  190|   193k|                idx_buf[code_point_count] = code_unit_idx;
  191|   193k|                ++code_point_count;
  192|   193k|            }
  193|   193k|            ++it;
  194|   193k|            ++code_unit_idx;
  195|   193k|        }
  196|       |
  197|   193k|        auto input = detail::make_string_view_from_pointers(
  198|   193k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   193k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   193k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   193k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   386k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 193k, False: 193k]
  ------------------
  217|   193k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 193k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   193k|        }
  221|   193k|    }
  222|       |
  223|   193k|    return it;
  224|   193k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   386k|{
   42|   386k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  246|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|   386k|    auto it = ranges::begin(range);
   45|   386k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   386k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 386k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   386k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 386k, False: 0]
  ------------------
   59|   386k|        ++it;
   60|   386k|        return {it, make_contiguous_buffer(
   61|   386k|                        ranges::subrange{ranges::begin(range), it})};
   62|   386k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   386k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   579k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   193k|{
  459|   193k|    auto it = read_code_unit(range);
  460|   193k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   386k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 386k, False: 193k]
  ------------------
  465|   386k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 386k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   386k|    }
  469|       |
  470|   193k|    return unexpected(parse_error::error);
  471|   193k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  88.7k|{
  482|  88.7k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 88.7k, False: 0]
  ------------------
  483|  88.7k|        return ranges::begin(range);
  484|  88.7k|    }
  485|      0|    return *result;
  486|  88.7k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   332k|{
  418|   332k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   332k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   332k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   332k|        if (ranges::size(range) < str.size()) {
  423|   332k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   332k|        }
  425|   332k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   332k|            return unexpected(parse_error::error);
  427|   332k|        }
  428|   332k|        return ranges::next(ranges::begin(range), str.size());
  429|   332k|    }
  430|   332k|    else {
  431|   332k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   332k|            if (ch < 'A' || ch > 'Z') {
  433|   332k|                return ch;
  434|   332k|            }
  435|   332k|            return static_cast<char_type>(ch +
  436|   332k|                                          static_cast<char_type>('a' - 'A'));
  437|   332k|        };
  438|       |
  439|   332k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 172, False: 331k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    172|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    172|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    172|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    172|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    172|    }                                                  \
  |  |  |  |   70|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   331k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   331k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 331k, False: 0]
  |  |  ------------------
  ------------------
  443|   331k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   331k|                    return ascii_tolower(a) ==
  445|   331k|                           static_cast<detail::char_t<Range>>(b);
  446|   331k|                }))) {
  447|   331k|            return unexpected(parse_error::error);
  448|   331k|        }
  449|       |
  450|      0|        return it;
  451|   331k|    }
  452|   332k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   331k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   331k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 19.2k, False: 312k]
  |  Branch (432:29): [True: 0, False: 312k]
  ------------------
  433|  19.2k|                return ch;
  434|  19.2k|            }
  435|   312k|            return static_cast<char_type>(ch +
  436|   312k|                                          static_cast<char_type>('a' - 'A'));
  437|   331k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   104k|{
  332|   104k|    auto it = read_code_unit(range);
  333|   104k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   104k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 104k, False: 0]
  |  |  ------------------
  ------------------
  338|   104k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   104k|        return unexpected(parse_error::error);
  340|   104k|    }
  341|       |
  342|      0|    return *it;
  343|   104k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   169k|{
  159|   169k|    auto it = read_while_code_unit(range, pred);
  160|   169k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 146k, False: 23.1k]
  ------------------
  161|   146k|        return unexpected(parse_error::error);
  162|   146k|    }
  163|  23.1k|    return it;
  164|   169k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   169k|{
  139|   169k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   169k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   169k|{
  131|   169k|    return ranges::find_if(range, pred);
  132|   169k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.30M|{
  300|  2.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.30M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.30M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.30M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.30M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.30M|        return ranges::next(ranges::begin(range),
  306|  2.30M|                            ranges::distance(buf.view().begin(), it));
  307|  2.30M|    }
  308|  2.30M|    else {
  309|  2.30M|        auto it = ranges::begin(range);
  310|       |
  311|  2.30M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.30M|            auto seg = get_contiguous_beginning(range);
  313|  2.30M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.30M|                seg_it != seg.end()) {
  315|  2.30M|                return ranges_polyfill::batch_next(
  316|  2.30M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.30M|            }
  318|  2.30M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.30M|        }
  320|       |
  321|  2.30M|        return read_while_code_point(
  322|  2.30M|            SCN_FWD(range),
  ------------------
  |  |  252|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.30M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.30M|    }
  325|  2.30M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.30M|{
  264|  2.30M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.30M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.30M|{
  231|  2.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.30M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.30M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  252|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.30M|    }
  235|  2.30M|    else {
  236|  2.30M|        auto it = ranges::begin(range);
  237|  2.30M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.30M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.30M|            seg_it != seg.end()) {
  241|  2.30M|            return ranges_polyfill::batch_next(
  242|  2.30M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.30M|        }
  244|       |
  245|  2.30M|        while (it != ranges::end(range)) {
  246|  2.30M|            const auto [iter, value] =
  247|  2.30M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.30M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.30M|            if (pred(cp)) {
  250|  2.30M|                return it;
  251|  2.30M|            }
  252|  2.30M|            it = iter;
  253|  2.30M|        }
  254|       |
  255|  2.30M|        return it;
  256|  2.30M|    }
  257|  2.30M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.30M|{
  178|  2.30M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.30M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.30M|    std::array<char32_t, 16> cp_buf{};
  182|  2.30M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.30M|    auto it = ranges::begin(range);
  184|  2.32M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.31M, False: 7.74k]
  ------------------
  185|  2.31M|        auto chunk_begin = it;
  186|  2.31M|        size_t code_point_count = 0;
  187|  2.31M|        uint8_t code_unit_idx = 0;
  188|  35.8M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 33.9M, False: 1.94M]
  |  Branch (188:52): [True: 33.5M, False: 371k]
  ------------------
  189|  33.5M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 33.5M, False: 0]
  ------------------
  190|  33.5M|                idx_buf[code_point_count] = code_unit_idx;
  191|  33.5M|                ++code_point_count;
  192|  33.5M|            }
  193|  33.5M|            ++it;
  194|  33.5M|            ++code_unit_idx;
  195|  33.5M|        }
  196|       |
  197|  2.31M|        auto input = detail::make_string_view_from_pointers(
  198|  2.31M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.31M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.31M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.31M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  4.54M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 4.53M, False: 16.9k]
  ------------------
  217|  4.53M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.29M, False: 2.23M]
  ------------------
  218|  2.29M|                return chunk_begin + idx_buf[i];
  219|  2.29M|            }
  220|  4.53M|        }
  221|  2.31M|    }
  222|       |
  223|  7.74k|    return it;
  224|  2.30M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  4.53M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.29M|{
  459|  2.29M|    auto it = read_code_unit(range);
  460|  2.29M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  4.55M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.55M, False: 2.16M]
  ------------------
  465|  4.55M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 132k, False: 4.42M]
  ------------------
  466|   132k|            return *it;
  467|   132k|        }
  468|  4.55M|    }
  469|       |
  470|  2.16M|    return unexpected(parse_error::error);
  471|  2.29M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   545k|{
  482|   545k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 491k, False: 54.0k]
  ------------------
  483|   491k|        return ranges::begin(range);
  484|   491k|    }
  485|  54.0k|    return *result;
  486|   545k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  4.88M|{
  418|  4.88M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  4.88M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  4.88M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  4.88M|        if (ranges::size(range) < str.size()) {
  423|  4.88M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  4.88M|        }
  425|  4.88M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  4.88M|            return unexpected(parse_error::error);
  427|  4.88M|        }
  428|  4.88M|        return ranges::next(ranges::begin(range), str.size());
  429|  4.88M|    }
  430|  4.88M|    else {
  431|  4.88M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  4.88M|            if (ch < 'A' || ch > 'Z') {
  433|  4.88M|                return ch;
  434|  4.88M|            }
  435|  4.88M|            return static_cast<char_type>(ch +
  436|  4.88M|                                          static_cast<char_type>('a' - 'A'));
  437|  4.88M|        };
  438|       |
  439|  4.88M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  4.88M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.88M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.88M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 112k, False: 4.77M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   112k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   112k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   112k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   112k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   112k|    }                                                  \
  |  |  |  |   70|  4.88M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  4.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  4.77M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  4.77M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.72M, False: 46.5k]
  |  |  ------------------
  ------------------
  443|  4.77M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  4.77M|                    return ascii_tolower(a) ==
  445|  4.77M|                           static_cast<detail::char_t<Range>>(b);
  446|  4.77M|                }))) {
  447|  4.72M|            return unexpected(parse_error::error);
  448|  4.72M|        }
  449|       |
  450|  46.5k|        return it;
  451|  4.77M|    }
  452|  4.88M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  6.91M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.91M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 6.53M, False: 381k]
  |  Branch (432:29): [True: 355k, False: 25.5k]
  ------------------
  433|  6.88M|                return ch;
  434|  6.88M|            }
  435|  25.5k|            return static_cast<char_type>(ch +
  436|  25.5k|                                          static_cast<char_type>('a' - 'A'));
  437|  6.91M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  1.55M|{
  332|  1.55M|    auto it = read_code_unit(range);
  333|  1.55M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.63k, False: 1.54M]
  |  |  ------------------
  ------------------
  334|  1.63k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.63k|    }
  336|       |
  337|  1.54M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 896k, False: 652k]
  |  |  ------------------
  ------------------
  338|  1.54M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   896k|        return unexpected(parse_error::error);
  340|   896k|    }
  341|       |
  342|   652k|    return *it;
  343|  1.54M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   333k|{
  178|   333k|    static_assert(ranges::contiguous_range<Range> &&
  179|   333k|                  ranges::sized_range<Range>);
  180|       |
  181|   333k|    std::array<char32_t, 16> cp_buf{};
  182|   333k|    std::array<uint8_t, 16> idx_buf{};
  183|   333k|    auto it = ranges::begin(range);
  184|   667k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 333k, False: 333k]
  ------------------
  185|   333k|        auto chunk_begin = it;
  186|   333k|        size_t code_point_count = 0;
  187|   333k|        uint8_t code_unit_idx = 0;
  188|   667k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 667k, False: 0]
  |  Branch (188:52): [True: 333k, False: 333k]
  ------------------
  189|   333k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 333k, False: 0]
  ------------------
  190|   333k|                idx_buf[code_point_count] = code_unit_idx;
  191|   333k|                ++code_point_count;
  192|   333k|            }
  193|   333k|            ++it;
  194|   333k|            ++code_unit_idx;
  195|   333k|        }
  196|       |
  197|   333k|        auto input = detail::make_string_view_from_pointers(
  198|   333k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   333k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   333k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   333k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  157|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   667k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 333k, False: 333k]
  ------------------
  217|   333k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 333k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   333k|        }
  221|   333k|    }
  222|       |
  223|   333k|    return it;
  224|   333k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   333k|{
  300|   333k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   333k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   333k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   333k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   333k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   333k|        return ranges::next(ranges::begin(range),
  306|   333k|                            ranges::distance(buf.view().begin(), it));
  307|   333k|    }
  308|   333k|    else {
  309|   333k|        auto it = ranges::begin(range);
  310|       |
  311|   333k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   333k|            auto seg = get_contiguous_beginning(range);
  313|   333k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   333k|                seg_it != seg.end()) {
  315|   333k|                return ranges_polyfill::batch_next(
  316|   333k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   333k|            }
  318|   333k|            ranges_polyfill::batch_next(it, seg.size());
  319|   333k|        }
  320|       |
  321|   333k|        return read_while_code_point(
  322|   333k|            SCN_FWD(range),
  ------------------
  |  |  252|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   333k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   333k|    }
  325|   333k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   333k|{
  264|   333k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   333k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   333k|{
  231|   333k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   333k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   333k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   333k|    }
  235|   333k|    else {
  236|   333k|        auto it = ranges::begin(range);
  237|   333k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   333k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   333k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 333k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  1.00M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 1.00M, False: 196]
  ------------------
  246|  1.00M|            const auto [iter, value] =
  247|  1.00M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.00M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.00M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 333k, False: 666k]
  ------------------
  250|   333k|                return it;
  251|   333k|            }
  252|   666k|            it = iter;
  253|   666k|        }
  254|       |
  255|    196|        return it;
  256|   333k|    }
  257|   333k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  1.00M|{
   42|  1.00M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  246|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|  1.00M|    auto it = ranges::begin(range);
   45|  1.00M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  1.00M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  1.00M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 1.00M, False: 0]
  ------------------
   59|  1.00M|        ++it;
   60|  1.00M|        return {it, make_contiguous_buffer(
   61|  1.00M|                        ranges::subrange{ranges::begin(range), it})};
   62|  1.00M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  1.00M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  1.33M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   333k|{
  459|   333k|    auto it = read_code_unit(range);
  460|   333k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   666k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 666k, False: 333k]
  ------------------
  465|   666k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 666k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   666k|    }
  469|       |
  470|   333k|    return unexpected(parse_error::error);
  471|   333k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   149k|{
  482|   149k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 149k, False: 0]
  ------------------
  483|   149k|        return ranges::begin(range);
  484|   149k|    }
  485|      0|    return *result;
  486|   149k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   578k|{
  418|   578k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   578k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   578k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   578k|        if (ranges::size(range) < str.size()) {
  423|   578k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   578k|        }
  425|   578k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   578k|            return unexpected(parse_error::error);
  427|   578k|        }
  428|   578k|        return ranges::next(ranges::begin(range), str.size());
  429|   578k|    }
  430|   578k|    else {
  431|   578k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   578k|            if (ch < 'A' || ch > 'Z') {
  433|   578k|                return ch;
  434|   578k|            }
  435|   578k|            return static_cast<char_type>(ch +
  436|   578k|                                          static_cast<char_type>('a' - 'A'));
  437|   578k|        };
  438|       |
  439|   578k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   578k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   578k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   578k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 170, False: 578k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    170|    }                                                  \
  |  |  |  |   70|   578k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   578k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   578k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  157|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 578k, False: 0]
  |  |  ------------------
  ------------------
  443|   578k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   578k|                    return ascii_tolower(a) ==
  445|   578k|                           static_cast<detail::char_t<Range>>(b);
  446|   578k|                }))) {
  447|   578k|            return unexpected(parse_error::error);
  448|   578k|        }
  449|       |
  450|      0|        return it;
  451|   578k|    }
  452|   578k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   578k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   578k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 27.1k, False: 550k]
  |  Branch (432:29): [True: 0, False: 550k]
  ------------------
  433|  27.1k|                return ch;
  434|  27.1k|            }
  435|   550k|            return static_cast<char_type>(ch +
  436|   550k|                                          static_cast<char_type>('a' - 'A'));
  437|   578k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   183k|{
  332|   183k|    auto it = read_code_unit(range);
  333|   183k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   183k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 183k, False: 0]
  |  |  ------------------
  ------------------
  338|   183k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   183k|        return unexpected(parse_error::error);
  340|   183k|    }
  341|       |
  342|      0|    return *it;
  343|   183k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   292k|{
  159|   292k|    auto it = read_while_code_unit(range, pred);
  160|   292k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 251k, False: 40.8k]
  ------------------
  161|   251k|        return unexpected(parse_error::error);
  162|   251k|    }
  163|  40.8k|    return it;
  164|   292k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   292k|{
  139|   292k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  252|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   292k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   292k|{
  131|   292k|    return ranges::find_if(range, pred);
  132|   292k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  4.18M|{
   36|  4.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.36k, False: 4.18M]
  |  |  ------------------
  ------------------
   37|  1.36k|        return unexpected(e);
   38|  1.36k|    }
   39|       |
   40|  4.18M|    return ranges::next(ranges::begin(range));
   41|  4.18M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   297k|{
   36|   297k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   297k|    return ranges::next(ranges::begin(range));
   41|   297k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   332k|{
   48|   332k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   332k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   332k|        const auto sz = ranges::ssize(range);
   52|   332k|        if (sz < count) {
   53|   332k|            return unexpected(eof_error::eof);
   54|   332k|        }
   55|       |
   56|   332k|        return ranges::next(ranges::begin(range), count);
   57|   332k|    }
   58|   332k|    else {
   59|   332k|        auto it = ranges::begin(range);
   60|   332k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 331k, False: 172]
  ------------------
   61|   331k|            return ranges_polyfill::batch_next(it, count);
   62|   331k|        }
   63|       |
   64|    344|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 344, False: 0]
  ------------------
   65|    344|             ++i, (void)++it) {
   66|    344|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 172, False: 172]
  ------------------
   67|    172|                return unexpected(eof_error::eof);
   68|    172|            }
   69|    344|        }
   70|       |
   71|      0|        return it;
   72|    172|    }
   73|   332k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.84M|{
   36|  3.84M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.63k, False: 3.84M]
  |  |  ------------------
  ------------------
   37|  1.63k|        return unexpected(e);
   38|  1.63k|    }
   39|       |
   40|  3.84M|    return ranges::next(ranges::begin(range));
   41|  3.84M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  4.88M|{
   48|  4.88M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  4.88M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  4.88M|        const auto sz = ranges::ssize(range);
   52|  4.88M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 112k, False: 4.77M]
  ------------------
   53|   112k|            return unexpected(eof_error::eof);
   54|   112k|        }
   55|       |
   56|  4.77M|        return ranges::next(ranges::begin(range), count);
   57|  4.88M|    }
   58|  4.88M|    else {
   59|  4.88M|        auto it = ranges::begin(range);
   60|  4.88M|        if (guaranteed_minimum_size(range) >= count) {
   61|  4.88M|            return ranges_polyfill::batch_next(it, count);
   62|  4.88M|        }
   63|       |
   64|  4.88M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  4.88M|             ++i, (void)++it) {
   66|  4.88M|            if (it == ranges::end(range)) {
   67|  4.88M|                return unexpected(eof_error::eof);
   68|  4.88M|            }
   69|  4.88M|        }
   70|       |
   71|  4.88M|        return it;
   72|  4.88M|    }
   73|  4.88M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   517k|{
   36|   517k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   517k|    return ranges::next(ranges::begin(range));
   41|   517k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   578k|{
   48|   578k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  246|   578k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   578k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   578k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   578k|        const auto sz = ranges::ssize(range);
   52|   578k|        if (sz < count) {
   53|   578k|            return unexpected(eof_error::eof);
   54|   578k|        }
   55|       |
   56|   578k|        return ranges::next(ranges::begin(range), count);
   57|   578k|    }
   58|   578k|    else {
   59|   578k|        auto it = ranges::begin(range);
   60|   578k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 578k, False: 170]
  ------------------
   61|   578k|            return ranges_polyfill::batch_next(it, count);
   62|   578k|        }
   63|       |
   64|    340|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 340, False: 0]
  ------------------
   65|    340|             ++i, (void)++it) {
   66|    340|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 170, False: 170]
  ------------------
   67|    170|                return unexpected(eof_error::eof);
   68|    170|            }
   69|    340|        }
   70|       |
   71|      0|        return it;
   72|    170|    }
   73|   578k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.63M|{
   33|  2.63M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.63M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   716k|{
   39|   716k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   716k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 358k, False: 358k]
  ------------------
   41|   716k|                    : std::locale{};
   42|   716k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   362k|    {
  112|   362k|        auto stdloc = loc.get<std::locale>();
  113|   362k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   362k|        grouping = numpunct.grouping();
  115|   362k|        thousands_sep =
  116|   362k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 362k]
  ------------------
  117|   362k|        decimal_point = numpunct.decimal_point();
  118|   362k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   362k|{
   49|   362k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 362k, False: 0]
  ------------------
   50|   362k|        return std::use_facet<Facet>(stdloc);
   51|   362k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   362k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   354k|    {
  112|   354k|        auto stdloc = loc.get<std::locale>();
  113|   354k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   354k|        grouping = numpunct.grouping();
  115|   354k|        thousands_sep =
  116|   354k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 354k]
  ------------------
  117|   354k|        decimal_point = numpunct.decimal_point();
  118|   354k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   354k|{
   49|   354k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 354k, False: 0]
  ------------------
   50|   354k|        return std::use_facet<Facet>(stdloc);
   51|   354k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   354k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.49M|{
   46|  2.49M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.49M, False: 0]
  ------------------
   47|  2.49M|        auto it = read_while_classic_space(range);
   48|  2.49M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.49M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 6.61k, False: 2.48M]
  |  |  ------------------
  ------------------
   50|  6.61k|            return unexpected(e);
   51|  6.61k|        }
   52|       |
   53|  2.48M|        return it;
   54|  2.49M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.49M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  2.70M|    {
  126|  2.70M|        return true;
  127|  2.70M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   193k|{
   46|   193k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 193k, False: 0]
  ------------------
   47|   193k|        auto it = read_while_classic_space(range);
   48|   193k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   193k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 100, False: 193k]
  |  |  ------------------
  ------------------
   50|    100|            return unexpected(e);
   51|    100|        }
   52|       |
   53|   193k|        return it;
   54|   193k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   193k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.98M|    {
  131|  1.98M|        reader_error_handler eh{};
  132|  1.98M|        get_derived().check_specs_impl(specs, eh);
  133|  1.98M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.98M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.98M|        return {};
  137|  1.98M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  1.98M|    {
  142|  1.98M|        return static_cast<Derived&>(*this);
  143|  1.98M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  3.94M|    {
   35|  3.94M|        return m_msg == nullptr;
   36|  3.94M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.30M|{
   46|  2.30M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.30M, False: 0]
  ------------------
   47|  2.30M|        auto it = read_while_classic_space(range);
   48|  2.30M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.30M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 7.74k, False: 2.29M]
  |  |  ------------------
  ------------------
   50|  7.74k|            return unexpected(e);
   51|  7.74k|        }
   52|       |
   53|  2.29M|        return it;
   54|  2.30M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.30M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  2.65M|    {
  126|  2.65M|        return true;
  127|  2.65M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.96M|    {
  131|  1.96M|        reader_error_handler eh{};
  132|  1.96M|        get_derived().check_specs_impl(specs, eh);
  133|  1.96M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  157|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.96M|        return {};
  137|  1.96M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  1.96M|    {
  142|  1.96M|        return static_cast<Derived&>(*this);
  143|  1.96M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   333k|{
   46|   333k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 333k, False: 0]
  ------------------
   47|   333k|        auto it = read_while_classic_space(range);
   48|   333k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   333k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 196, False: 333k]
  |  |  ------------------
  ------------------
   50|    196|            return unexpected(e);
   51|    196|        }
   52|       |
   53|   333k|        return it;
   54|   333k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   333k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   310k|{
  218|   310k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   310k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   310k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   310k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   310k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.6k, False: 296k]
  ------------------
  224|  13.6k|        SCN_UNLIKELY_ATTR
  225|  13.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.6k|                                     "Invalid integer value");
  227|  13.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   296k|    auto start = source.data();
  231|   296k|    const auto end = source.data() + source.size();
  232|   296k|    {
  233|   657k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 651k, False: 5.89k]
  ------------------
  234|   651k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 290k, False: 360k]
  ------------------
  235|   290k|                break;
  236|   290k|            }
  237|   651k|        }
  238|   296k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 48.3k, False: 248k]
  |  |  |  Branch (157:45): [True: 5.89k, False: 290k]
  |  |  |  Branch (157:45): [True: 42.4k, False: 248k]
  |  |  ------------------
  ------------------
  239|  48.3k|            value = 0;
  240|  48.3k|            return ranges::next(source.begin(),
  241|  48.3k|                                ranges::distance(source.data(), start));
  242|  48.3k|        }
  243|   296k|    }
  244|       |
  245|   248k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   248k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 171k, False: 76.5k]
  ------------------
  247|   171k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.27k, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.27k|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   166k|                             detail::make_string_view_from_pointers(start, end),
  249|   166k|                             value, sign == sign_type::minus_sign));
  250|   166k|            return ranges::next(source.begin(),
  251|   166k|                                ranges::distance(source.data(), ptr));
  252|   171k|        }
  253|   248k|    }
  254|       |
  255|  76.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  76.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.04k, False: 68.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.04k|    }                                                  \
  |  |  |  |   70|  76.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  68.4k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  68.4k|                     base, sign == sign_type::minus_sign));
  258|  68.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  76.5k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   288k|{
  218|   288k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   288k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   288k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   288k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   288k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 34.1k, False: 254k]
  ------------------
  224|  34.1k|        SCN_UNLIKELY_ATTR
  225|  34.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  34.1k|                                     "Invalid integer value");
  227|  34.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   254k|    auto start = source.data();
  231|   254k|    const auto end = source.data() + source.size();
  232|   254k|    {
  233|   575k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 569k, False: 5.58k]
  ------------------
  234|   569k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 248k, False: 320k]
  ------------------
  235|   248k|                break;
  236|   248k|            }
  237|   569k|        }
  238|   254k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 44.1k, False: 210k]
  |  |  |  Branch (157:45): [True: 5.58k, False: 248k]
  |  |  |  Branch (157:45): [True: 38.5k, False: 210k]
  |  |  ------------------
  ------------------
  239|  44.1k|            value = 0;
  240|  44.1k|            return ranges::next(source.begin(),
  241|  44.1k|                                ranges::distance(source.data(), start));
  242|  44.1k|        }
  243|   254k|    }
  244|       |
  245|   210k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   210k|        if (base == 10) {
  247|   210k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   210k|                             detail::make_string_view_from_pointers(start, end),
  249|   210k|                             value, sign == sign_type::minus_sign));
  250|   210k|            return ranges::next(source.begin(),
  251|   210k|                                ranges::distance(source.data(), ptr));
  252|   210k|        }
  253|   210k|    }
  254|       |
  255|   210k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   210k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 14.2k, False: 196k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.2k|    }                                                  \
  |  |  |  |   70|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   196k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   196k|                     base, sign == sign_type::minus_sign));
  258|   196k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   210k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   393k|{
  218|   393k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   393k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   393k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   393k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   393k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 16.5k, False: 377k]
  ------------------
  224|  16.5k|        SCN_UNLIKELY_ATTR
  225|  16.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  16.5k|                                     "Invalid integer value");
  227|  16.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   377k|    auto start = source.data();
  231|   377k|    const auto end = source.data() + source.size();
  232|   377k|    {
  233|   781k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 774k, False: 7.12k]
  ------------------
  234|   774k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 370k, False: 404k]
  ------------------
  235|   370k|                break;
  236|   370k|            }
  237|   774k|        }
  238|   377k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 61.4k, False: 315k]
  |  |  |  Branch (157:45): [True: 7.12k, False: 370k]
  |  |  |  Branch (157:45): [True: 54.2k, False: 315k]
  |  |  ------------------
  ------------------
  239|  61.4k|            value = 0;
  240|  61.4k|            return ranges::next(source.begin(),
  241|  61.4k|                                ranges::distance(source.data(), start));
  242|  61.4k|        }
  243|   377k|    }
  244|       |
  245|   315k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   315k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 201k, False: 114k]
  ------------------
  247|   201k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.30k, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   199k|                             detail::make_string_view_from_pointers(start, end),
  249|   199k|                             value, sign == sign_type::minus_sign));
  250|   199k|            return ranges::next(source.begin(),
  251|   199k|                                ranges::distance(source.data(), ptr));
  252|   201k|        }
  253|   315k|    }
  254|       |
  255|   114k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.93k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   112k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   112k|                     base, sign == sign_type::minus_sign));
  258|   112k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   114k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   357k|{
  218|   357k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   357k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   357k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   357k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   357k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.9k, False: 321k]
  ------------------
  224|  35.9k|        SCN_UNLIKELY_ATTR
  225|  35.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.9k|                                     "Invalid integer value");
  227|  35.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   321k|    auto start = source.data();
  231|   321k|    const auto end = source.data() + source.size();
  232|   321k|    {
  233|   683k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 676k, False: 6.76k]
  ------------------
  234|   676k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 315k, False: 361k]
  ------------------
  235|   315k|                break;
  236|   315k|            }
  237|   676k|        }
  238|   321k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 56.3k, False: 265k]
  |  |  |  Branch (157:45): [True: 6.76k, False: 315k]
  |  |  |  Branch (157:45): [True: 49.5k, False: 265k]
  |  |  ------------------
  ------------------
  239|  56.3k|            value = 0;
  240|  56.3k|            return ranges::next(source.begin(),
  241|  56.3k|                                ranges::distance(source.data(), start));
  242|  56.3k|        }
  243|   321k|    }
  244|       |
  245|   265k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   265k|        if (base == 10) {
  247|   265k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   265k|                             detail::make_string_view_from_pointers(start, end),
  249|   265k|                             value, sign == sign_type::minus_sign));
  250|   265k|            return ranges::next(source.begin(),
  251|   265k|                                ranges::distance(source.data(), ptr));
  252|   265k|        }
  253|   265k|    }
  254|       |
  255|   265k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   265k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.43k, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.43k|    }                                                  \
  |  |  |  |   70|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   262k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   262k|                     base, sign == sign_type::minus_sign));
  258|   262k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   265k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   401k|{
  218|   401k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   401k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   401k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   401k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   401k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 17.6k, False: 383k]
  ------------------
  224|  17.6k|        SCN_UNLIKELY_ATTR
  225|  17.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  17.6k|                                     "Invalid integer value");
  227|  17.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   383k|    auto start = source.data();
  231|   383k|    const auto end = source.data() + source.size();
  232|   383k|    {
  233|   802k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 795k, False: 7.40k]
  ------------------
  234|   795k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 376k, False: 418k]
  ------------------
  235|   376k|                break;
  236|   376k|            }
  237|   795k|        }
  238|   383k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   760k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 62.9k, False: 320k]
  |  |  |  Branch (157:45): [True: 7.40k, False: 376k]
  |  |  |  Branch (157:45): [True: 55.5k, False: 320k]
  |  |  ------------------
  ------------------
  239|  62.9k|            value = 0;
  240|  62.9k|            return ranges::next(source.begin(),
  241|  62.9k|                                ranges::distance(source.data(), start));
  242|  62.9k|        }
  243|   383k|    }
  244|       |
  245|   320k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   320k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 204k, False: 116k]
  ------------------
  247|   204k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.42k, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.42k|    }                                                  \
  |  |  |  |   70|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   203k|                             detail::make_string_view_from_pointers(start, end),
  249|   203k|                             value, sign == sign_type::minus_sign));
  250|   203k|            return ranges::next(source.begin(),
  251|   203k|                                ranges::distance(source.data(), ptr));
  252|   204k|        }
  253|   320k|    }
  254|       |
  255|   116k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.02k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   115k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   115k|                     base, sign == sign_type::minus_sign));
  258|   115k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   116k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   364k|{
  218|   364k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   364k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   364k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   364k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   364k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.7k, False: 327k]
  ------------------
  224|  36.7k|        SCN_UNLIKELY_ATTR
  225|  36.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.7k|                                     "Invalid integer value");
  227|  36.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   327k|    auto start = source.data();
  231|   327k|    const auto end = source.data() + source.size();
  232|   327k|    {
  233|   701k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 694k, False: 7.00k]
  ------------------
  234|   694k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 320k, False: 374k]
  ------------------
  235|   320k|                break;
  236|   320k|            }
  237|   694k|        }
  238|   327k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   647k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 57.5k, False: 269k]
  |  |  |  Branch (157:45): [True: 7.00k, False: 320k]
  |  |  |  Branch (157:45): [True: 50.5k, False: 269k]
  |  |  ------------------
  ------------------
  239|  57.5k|            value = 0;
  240|  57.5k|            return ranges::next(source.begin(),
  241|  57.5k|                                ranges::distance(source.data(), start));
  242|  57.5k|        }
  243|   327k|    }
  244|       |
  245|   269k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   269k|        if (base == 10) {
  247|   269k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   269k|                             detail::make_string_view_from_pointers(start, end),
  249|   269k|                             value, sign == sign_type::minus_sign));
  250|   269k|            return ranges::next(source.begin(),
  251|   269k|                                ranges::distance(source.data(), ptr));
  252|   269k|        }
  253|   269k|    }
  254|       |
  255|   269k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.03k, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.03k|    }                                                  \
  |  |  |  |   70|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   267k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   267k|                     base, sign == sign_type::minus_sign));
  258|   267k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   269k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   280k|{
  218|   280k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   280k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   280k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   280k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   280k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 9.98k, False: 270k]
  ------------------
  224|  9.98k|        SCN_UNLIKELY_ATTR
  225|  9.98k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  9.98k|                                     "Invalid integer value");
  227|  9.98k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   270k|    auto start = source.data();
  231|   270k|    const auto end = source.data() + source.size();
  232|   270k|    {
  233|   619k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 613k, False: 5.95k]
  ------------------
  234|   613k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 264k, False: 348k]
  ------------------
  235|   264k|                break;
  236|   264k|            }
  237|   613k|        }
  238|   270k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 50.9k, False: 219k]
  |  |  |  Branch (157:45): [True: 5.95k, False: 264k]
  |  |  |  Branch (157:45): [True: 44.9k, False: 219k]
  |  |  ------------------
  ------------------
  239|  50.9k|            value = 0;
  240|  50.9k|            return ranges::next(source.begin(),
  241|  50.9k|                                ranges::distance(source.data(), start));
  242|  50.9k|        }
  243|   270k|    }
  244|       |
  245|   219k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   219k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 142k, False: 76.5k]
  ------------------
  247|   142k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.44k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.44k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   140k|                             detail::make_string_view_from_pointers(start, end),
  249|   140k|                             value, sign == sign_type::minus_sign));
  250|   140k|            return ranges::next(source.begin(),
  251|   140k|                                ranges::distance(source.data(), ptr));
  252|   142k|        }
  253|   219k|    }
  254|       |
  255|  76.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  76.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.83k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.83k|    }                                                  \
  |  |  |  |   70|  76.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  74.7k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  74.7k|                     base, sign == sign_type::minus_sign));
  258|  74.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  76.5k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   269k|{
  218|   269k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   269k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   269k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   269k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   269k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 31.9k, False: 237k]
  ------------------
  224|  31.9k|        SCN_UNLIKELY_ATTR
  225|  31.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  31.9k|                                     "Invalid integer value");
  227|  31.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   237k|    auto start = source.data();
  231|   237k|    const auto end = source.data() + source.size();
  232|   237k|    {
  233|   548k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 542k, False: 5.61k]
  ------------------
  234|   542k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 232k, False: 310k]
  ------------------
  235|   232k|                break;
  236|   232k|            }
  237|   542k|        }
  238|   237k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 46.5k, False: 191k]
  |  |  |  Branch (157:45): [True: 5.61k, False: 232k]
  |  |  |  Branch (157:45): [True: 40.9k, False: 191k]
  |  |  ------------------
  ------------------
  239|  46.5k|            value = 0;
  240|  46.5k|            return ranges::next(source.begin(),
  241|  46.5k|                                ranges::distance(source.data(), start));
  242|  46.5k|        }
  243|   237k|    }
  244|       |
  245|   191k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   191k|        if (base == 10) {
  247|   191k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   191k|                             detail::make_string_view_from_pointers(start, end),
  249|   191k|                             value, sign == sign_type::minus_sign));
  250|   191k|            return ranges::next(source.begin(),
  251|   191k|                                ranges::distance(source.data(), ptr));
  252|   191k|        }
  253|   191k|    }
  254|       |
  255|   191k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.5k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.5k|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   180k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   180k|                     base, sign == sign_type::minus_sign));
  258|   180k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   191k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   323k|{
  218|   323k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   323k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   323k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   323k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   323k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.0k, False: 312k]
  ------------------
  224|  11.0k|        SCN_UNLIKELY_ATTR
  225|  11.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.0k|                                     "Invalid integer value");
  227|  11.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   312k|    auto start = source.data();
  231|   312k|    const auto end = source.data() + source.size();
  232|   312k|    {
  233|   686k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 679k, False: 6.60k]
  ------------------
  234|   679k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 305k, False: 374k]
  ------------------
  235|   305k|                break;
  236|   305k|            }
  237|   679k|        }
  238|   312k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 56.7k, False: 255k]
  |  |  |  Branch (157:45): [True: 6.60k, False: 305k]
  |  |  |  Branch (157:45): [True: 50.1k, False: 255k]
  |  |  ------------------
  ------------------
  239|  56.7k|            value = 0;
  240|  56.7k|            return ranges::next(source.begin(),
  241|  56.7k|                                ranges::distance(source.data(), start));
  242|  56.7k|        }
  243|   312k|    }
  244|       |
  245|   255k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   255k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 161k, False: 94.0k]
  ------------------
  247|   161k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.08k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   160k|                             detail::make_string_view_from_pointers(start, end),
  249|   160k|                             value, sign == sign_type::minus_sign));
  250|   160k|            return ranges::next(source.begin(),
  251|   160k|                                ranges::distance(source.data(), ptr));
  252|   161k|        }
  253|   255k|    }
  254|       |
  255|  94.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  94.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 796, False: 93.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    796|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    796|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    796|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    796|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    796|    }                                                  \
  |  |  |  |   70|  94.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  93.2k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  93.2k|                     base, sign == sign_type::minus_sign));
  258|  93.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  94.0k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   308k|{
  218|   308k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   308k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   308k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   308k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   308k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 32.7k, False: 276k]
  ------------------
  224|  32.7k|        SCN_UNLIKELY_ATTR
  225|  32.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  32.7k|                                     "Invalid integer value");
  227|  32.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   276k|    auto start = source.data();
  231|   276k|    const auto end = source.data() + source.size();
  232|   276k|    {
  233|   611k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 604k, False: 6.25k]
  ------------------
  234|   604k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 270k, False: 334k]
  ------------------
  235|   270k|                break;
  236|   270k|            }
  237|   604k|        }
  238|   276k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 52.3k, False: 223k]
  |  |  |  Branch (157:45): [True: 6.25k, False: 270k]
  |  |  |  Branch (157:45): [True: 46.0k, False: 223k]
  |  |  ------------------
  ------------------
  239|  52.3k|            value = 0;
  240|  52.3k|            return ranges::next(source.begin(),
  241|  52.3k|                                ranges::distance(source.data(), start));
  242|  52.3k|        }
  243|   276k|    }
  244|       |
  245|   223k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   223k|        if (base == 10) {
  247|   223k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   223k|                             detail::make_string_view_from_pointers(start, end),
  249|   223k|                             value, sign == sign_type::minus_sign));
  250|   223k|            return ranges::next(source.begin(),
  251|   223k|                                ranges::distance(source.data(), ptr));
  252|   223k|        }
  253|   223k|    }
  254|       |
  255|   223k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.60k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.60k|    }                                                  \
  |  |  |  |   70|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   222k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   222k|                     base, sign == sign_type::minus_sign));
  258|   222k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   223k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   324k|{
  218|   324k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   324k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   324k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   324k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   324k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 11.2k, False: 313k]
  ------------------
  224|  11.2k|        SCN_UNLIKELY_ATTR
  225|  11.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  11.2k|                                     "Invalid integer value");
  227|  11.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   313k|    auto start = source.data();
  231|   313k|    const auto end = source.data() + source.size();
  232|   313k|    {
  233|   689k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 682k, False: 6.61k]
  ------------------
  234|   682k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 307k, False: 375k]
  ------------------
  235|   307k|                break;
  236|   307k|            }
  237|   682k|        }
  238|   313k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 56.8k, False: 256k]
  |  |  |  Branch (157:45): [True: 6.61k, False: 307k]
  |  |  |  Branch (157:45): [True: 50.1k, False: 256k]
  |  |  ------------------
  ------------------
  239|  56.8k|            value = 0;
  240|  56.8k|            return ranges::next(source.begin(),
  241|  56.8k|                                ranges::distance(source.data(), start));
  242|  56.8k|        }
  243|   313k|    }
  244|       |
  245|   256k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   256k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 162k, False: 94.5k]
  ------------------
  247|   162k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 699, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    699|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    699|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    699|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    699|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    699|    }                                                  \
  |  |  |  |   70|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   161k|                             detail::make_string_view_from_pointers(start, end),
  249|   161k|                             value, sign == sign_type::minus_sign));
  250|   161k|            return ranges::next(source.begin(),
  251|   161k|                                ranges::distance(source.data(), ptr));
  252|   162k|        }
  253|   256k|    }
  254|       |
  255|  94.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 498, False: 94.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    498|    }                                                  \
  |  |  |  |   70|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  94.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  94.0k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  94.0k|                     base, sign == sign_type::minus_sign));
  258|  94.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  94.5k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   310k|{
  218|   310k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   310k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   310k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   310k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  246|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   310k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 32.9k, False: 277k]
  ------------------
  224|  32.9k|        SCN_UNLIKELY_ATTR
  225|  32.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  32.9k|                                     "Invalid integer value");
  227|  32.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   277k|    auto start = source.data();
  231|   277k|    const auto end = source.data() + source.size();
  232|   277k|    {
  233|   612k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 606k, False: 6.26k]
  ------------------
  234|   606k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 271k, False: 335k]
  ------------------
  235|   271k|                break;
  236|   271k|            }
  237|   606k|        }
  238|   277k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  157|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 52.3k, False: 225k]
  |  |  |  Branch (157:45): [True: 6.26k, False: 271k]
  |  |  |  Branch (157:45): [True: 46.0k, False: 225k]
  |  |  ------------------
  ------------------
  239|  52.3k|            value = 0;
  240|  52.3k|            return ranges::next(source.begin(),
  241|  52.3k|                                ranges::distance(source.data(), start));
  242|  52.3k|        }
  243|   277k|    }
  244|       |
  245|   225k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   225k|        if (base == 10) {
  247|   225k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   225k|                             detail::make_string_view_from_pointers(start, end),
  249|   225k|                             value, sign == sign_type::minus_sign));
  250|   225k|            return ranges::next(source.begin(),
  251|   225k|                                ranges::distance(source.data(), ptr));
  252|   225k|        }
  253|   225k|    }
  254|       |
  255|   225k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 934, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    934|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   224k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   224k|                     base, sign == sign_type::minus_sign));
  258|   224k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   225k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   458k|{
  126|   458k|    auto max_digits = maxdigits_u64(base);
  127|   458k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.33k, False: 455k]
  ------------------
  128|  3.33k|        return true;
  129|  3.33k|    }
  130|   455k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 715, False: 454k]
  |  Branch (130:39): [True: 144, False: 571]
  ------------------
  131|    144|        return true;
  132|    144|    }
  133|   455k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   455k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 24.0k, False: 431k]
  ------------------
  135|   455k|                      static_cast<uint64_t>(is_negative)) {
  136|  24.0k|            SCN_UNLIKELY_ATTR
  137|  24.0k|            return true;
  138|  24.0k|        }
  139|   455k|    }
  140|       |
  141|   431k|    return false;
  142|   455k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  3.00M|{
   96|  3.00M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  246|  3.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|  3.00M|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  3.00M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  4.73k|{
  116|  4.73k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  246|  4.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|  4.73k|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  4.73k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   431k|{
  147|   431k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 41.8k, False: 389k]
  ------------------
  148|  41.8k|        SCN_MSVC_PUSH
  149|  41.8k|        SCN_MSVC_IGNORE(4146)
  150|  41.8k|        return static_cast<T>(
  151|  41.8k|            -std::numeric_limits<T>::max() -
  152|  41.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  41.8k|        SCN_MSVC_POP
  154|  41.8k|    }
  155|       |
  156|   389k|    return static_cast<T>(u64val);
  157|   431k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   581k|{
  126|   581k|    auto max_digits = maxdigits_u64(base);
  127|   581k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.38k, False: 578k]
  ------------------
  128|  3.38k|        return true;
  129|  3.38k|    }
  130|   578k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 745, False: 577k]
  |  Branch (130:39): [True: 156, False: 589]
  ------------------
  131|    156|        return true;
  132|    156|    }
  133|   577k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   577k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.13k, False: 573k]
  ------------------
  135|   577k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.13k|            SCN_UNLIKELY_ATTR
  137|  4.13k|            return true;
  138|  4.13k|        }
  139|   577k|    }
  140|       |
  141|   573k|    return false;
  142|   577k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   573k|{
  147|   573k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 47.9k, False: 525k]
  ------------------
  148|  47.9k|        SCN_MSVC_PUSH
  149|  47.9k|        SCN_MSVC_IGNORE(4146)
  150|  47.9k|        return static_cast<T>(
  151|  47.9k|            -std::numeric_limits<T>::max() -
  152|  47.9k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  47.9k|        SCN_MSVC_POP
  154|  47.9k|    }
  155|       |
  156|   525k|    return static_cast<T>(u64val);
  157|   573k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   590k|{
  126|   590k|    auto max_digits = maxdigits_u64(base);
  127|   590k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.92k, False: 586k]
  ------------------
  128|  3.92k|        return true;
  129|  3.92k|    }
  130|   586k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.94k, False: 584k]
  |  Branch (130:39): [True: 250, False: 1.69k]
  ------------------
  131|    250|        return true;
  132|    250|    }
  133|   586k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   586k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 307, False: 586k]
  ------------------
  135|   586k|                      static_cast<uint64_t>(is_negative)) {
  136|    307|            SCN_UNLIKELY_ATTR
  137|    307|            return true;
  138|    307|        }
  139|   586k|    }
  140|       |
  141|   586k|    return false;
  142|   586k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   586k|{
  147|   586k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 52.0k, False: 534k]
  ------------------
  148|  52.0k|        SCN_MSVC_PUSH
  149|  52.0k|        SCN_MSVC_IGNORE(4146)
  150|  52.0k|        return static_cast<T>(
  151|  52.0k|            -std::numeric_limits<T>::max() -
  152|  52.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  52.0k|        SCN_MSVC_POP
  154|  52.0k|    }
  155|       |
  156|   534k|    return static_cast<T>(u64val);
  157|   586k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   410k|{
  126|   410k|    auto max_digits = maxdigits_u64(base);
  127|   410k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.88k, False: 408k]
  ------------------
  128|  1.88k|        return true;
  129|  1.88k|    }
  130|   408k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 339, False: 408k]
  |  Branch (130:39): [True: 96, False: 243]
  ------------------
  131|     96|        return true;
  132|     96|    }
  133|   408k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   408k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 12.8k, False: 395k]
  ------------------
  135|   408k|                      static_cast<uint64_t>(is_negative)) {
  136|  12.8k|            SCN_UNLIKELY_ATTR
  137|  12.8k|            return true;
  138|  12.8k|        }
  139|   408k|    }
  140|       |
  141|   395k|    return false;
  142|   408k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   395k|{
  147|   395k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 395k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   395k|    return static_cast<T>(u64val);
  157|   395k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   479k|{
  126|   479k|    auto max_digits = maxdigits_u64(base);
  127|   479k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.88k, False: 477k]
  ------------------
  128|  1.88k|        return true;
  129|  1.88k|    }
  130|   477k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 351, False: 477k]
  |  Branch (130:39): [True: 108, False: 243]
  ------------------
  131|    108|        return true;
  132|    108|    }
  133|   477k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   477k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.49k, False: 475k]
  ------------------
  135|   477k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.49k|            SCN_UNLIKELY_ATTR
  137|  1.49k|            return true;
  138|  1.49k|        }
  139|   477k|    }
  140|       |
  141|   475k|    return false;
  142|   477k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   475k|{
  147|   475k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 475k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   475k|    return static_cast<T>(u64val);
  157|   475k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   482k|{
  126|   482k|    auto max_digits = maxdigits_u64(base);
  127|   482k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.93k, False: 480k]
  ------------------
  128|  1.93k|        return true;
  129|  1.93k|    }
  130|   480k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 639, False: 479k]
  |  Branch (130:39): [True: 198, False: 441]
  ------------------
  131|    198|        return true;
  132|    198|    }
  133|   480k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   480k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 480k]
  ------------------
  135|   480k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   480k|    }
  140|       |
  141|   480k|    return false;
  142|   480k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   480k|{
  147|   480k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 480k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   480k|    return static_cast<T>(u64val);
  157|   480k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|   975k|{
   34|   975k|    uint64_t val{};
   35|   975k|    std::memcpy(&val, input, sizeof(uint64_t));
   36|   975k|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  543|   975k|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (543:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|   975k|    return val;
   40|   975k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|   102k|{
   44|   102k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|   102k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|   102k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|   102k|    word -= 0x3030303030303030;
   48|   102k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|   102k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|   102k|    return static_cast<uint32_t>(word);
   51|   102k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|   872k|{
   55|   872k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|   872k|              0x8080808080808080));
   57|   872k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   171k|{
  164|   171k|    uint64_t u64val{};
  165|   171k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   171k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   171k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   171k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.27k, False: 166k]
  |  |  ------------------
  ------------------
  170|   171k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  5.27k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  5.27k|                                     "Integer overflow");
  173|  5.27k|    }
  174|       |
  175|   166k|    val = store_result<T>(u64val, is_negative);
  176|   166k|    return ptr;
  177|   171k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.04M|{
   76|  1.04M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  2.38M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 2.13M, False: 240k]
  ------------------
   79|  2.13M|        const auto digit = char_to_int(*begin);
   80|  2.13M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 803k, False: 1.33M]
  ------------------
   81|   803k|            break;
   82|   803k|        }
   83|  1.33M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.33M|        ++begin;
   85|  1.33M|    }
   86|       |
   87|  1.04M|    return begin;
   88|  1.04M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.04M|{
   63|  1.04M|    while (
   64|  1.14M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 872k, False: 274k]
  ------------------
   65|  1.14M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 102k, False: 769k]
  ------------------
   66|   102k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|   102k|                                      get_eight_digits_word(p));
   68|   102k|        p += 8;
   69|   102k|    }
   70|  1.04M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  76.5k|{
  185|  76.5k|    uint64_t u64val{};
  186|  76.5k|    const CharT* begin = input.data();
  187|  76.5k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   279k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 264k, False: 14.6k]
  ------------------
  190|   264k|        const auto digit = char_to_int(*begin);
  191|   264k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 61.9k, False: 202k]
  ------------------
  192|  61.9k|            break;
  193|  61.9k|        }
  194|   202k|        u64val =
  195|   202k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   202k|        ++begin;
  197|   202k|    }
  198|       |
  199|  76.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  76.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.04k, False: 68.4k]
  |  |  ------------------
  ------------------
  201|  76.5k|                                               is_negative))) {
  202|  8.04k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  8.04k|                                     "Integer overflow");
  204|  8.04k|    }
  205|       |
  206|  68.4k|    val = store_result<T>(u64val, is_negative);
  207|  68.4k|    return begin;
  208|  76.5k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   210k|{
  185|   210k|    uint64_t u64val{};
  186|   210k|    const CharT* begin = input.data();
  187|   210k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   751k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 701k, False: 50.1k]
  ------------------
  190|   701k|        const auto digit = char_to_int(*begin);
  191|   701k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 160k, False: 541k]
  ------------------
  192|   160k|            break;
  193|   160k|        }
  194|   541k|        u64val =
  195|   541k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   541k|        ++begin;
  197|   541k|    }
  198|       |
  199|   210k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   210k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 14.2k, False: 196k]
  |  |  ------------------
  ------------------
  201|   210k|                                               is_negative))) {
  202|  14.2k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  14.2k|                                     "Integer overflow");
  204|  14.2k|    }
  205|       |
  206|   196k|    val = store_result<T>(u64val, is_negative);
  207|   196k|    return begin;
  208|   210k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   201k|{
  164|   201k|    uint64_t u64val{};
  165|   201k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   201k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   201k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   201k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.30k, False: 199k]
  |  |  ------------------
  ------------------
  170|   201k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.30k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.30k|                                     "Integer overflow");
  173|  2.30k|    }
  174|       |
  175|   199k|    val = store_result<T>(u64val, is_negative);
  176|   199k|    return ptr;
  177|   201k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   114k|{
  185|   114k|    uint64_t u64val{};
  186|   114k|    const CharT* begin = input.data();
  187|   114k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   371k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 355k, False: 16.1k]
  ------------------
  190|   355k|        const auto digit = char_to_int(*begin);
  191|   355k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 97.9k, False: 257k]
  ------------------
  192|  97.9k|            break;
  193|  97.9k|        }
  194|   257k|        u64val =
  195|   257k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   257k|        ++begin;
  197|   257k|    }
  198|       |
  199|   114k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   114k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.93k, False: 112k]
  |  |  ------------------
  ------------------
  201|   114k|                                               is_negative))) {
  202|  1.93k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.93k|                                     "Integer overflow");
  204|  1.93k|    }
  205|       |
  206|   112k|    val = store_result<T>(u64val, is_negative);
  207|   112k|    return begin;
  208|   114k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   265k|{
  185|   265k|    uint64_t u64val{};
  186|   265k|    const CharT* begin = input.data();
  187|   265k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   896k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 840k, False: 56.3k]
  ------------------
  190|   840k|        const auto digit = char_to_int(*begin);
  191|   840k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 209k, False: 630k]
  ------------------
  192|   209k|            break;
  193|   209k|        }
  194|   630k|        u64val =
  195|   630k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   630k|        ++begin;
  197|   630k|    }
  198|       |
  199|   265k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   265k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 3.43k, False: 262k]
  |  |  ------------------
  ------------------
  201|   265k|                                               is_negative))) {
  202|  3.43k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.43k|                                     "Integer overflow");
  204|  3.43k|    }
  205|       |
  206|   262k|    val = store_result<T>(u64val, is_negative);
  207|   262k|    return begin;
  208|   265k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   204k|{
  164|   204k|    uint64_t u64val{};
  165|   204k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   204k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   204k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   204k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.42k, False: 203k]
  |  |  ------------------
  ------------------
  170|   204k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.42k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.42k|                                     "Integer overflow");
  173|  1.42k|    }
  174|       |
  175|   203k|    val = store_result<T>(u64val, is_negative);
  176|   203k|    return ptr;
  177|   204k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   116k|{
  185|   116k|    uint64_t u64val{};
  186|   116k|    const CharT* begin = input.data();
  187|   116k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   398k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 381k, False: 16.5k]
  ------------------
  190|   381k|        const auto digit = char_to_int(*begin);
  191|   381k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 99.9k, False: 281k]
  ------------------
  192|  99.9k|            break;
  193|  99.9k|        }
  194|   281k|        u64val =
  195|   281k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   281k|        ++begin;
  197|   281k|    }
  198|       |
  199|   116k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   116k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.02k, False: 115k]
  |  |  ------------------
  ------------------
  201|   116k|                                               is_negative))) {
  202|  1.02k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.02k|                                     "Integer overflow");
  204|  1.02k|    }
  205|       |
  206|   115k|    val = store_result<T>(u64val, is_negative);
  207|   115k|    return begin;
  208|   116k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   269k|{
  185|   269k|    uint64_t u64val{};
  186|   269k|    const CharT* begin = input.data();
  187|   269k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   934k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 877k, False: 57.2k]
  ------------------
  190|   877k|        const auto digit = char_to_int(*begin);
  191|   877k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 212k, False: 664k]
  ------------------
  192|   212k|            break;
  193|   212k|        }
  194|   664k|        u64val =
  195|   664k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   664k|        ++begin;
  197|   664k|    }
  198|       |
  199|   269k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   269k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.03k, False: 267k]
  |  |  ------------------
  ------------------
  201|   269k|                                               is_negative))) {
  202|  2.03k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.03k|                                     "Integer overflow");
  204|  2.03k|    }
  205|       |
  206|   267k|    val = store_result<T>(u64val, is_negative);
  207|   267k|    return begin;
  208|   269k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   142k|{
  164|   142k|    uint64_t u64val{};
  165|   142k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   142k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   142k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   142k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 2.44k, False: 140k]
  |  |  ------------------
  ------------------
  170|   142k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.44k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.44k|                                     "Integer overflow");
  173|  2.44k|    }
  174|       |
  175|   140k|    val = store_result<T>(u64val, is_negative);
  176|   140k|    return ptr;
  177|   142k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  76.5k|{
  185|  76.5k|    uint64_t u64val{};
  186|  76.5k|    const CharT* begin = input.data();
  187|  76.5k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   206k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 193k, False: 13.2k]
  ------------------
  190|   193k|        const auto digit = char_to_int(*begin);
  191|   193k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 63.3k, False: 130k]
  ------------------
  192|  63.3k|            break;
  193|  63.3k|        }
  194|   130k|        u64val =
  195|   130k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   130k|        ++begin;
  197|   130k|    }
  198|       |
  199|  76.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  76.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.83k, False: 74.7k]
  |  |  ------------------
  ------------------
  201|  76.5k|                                               is_negative))) {
  202|  1.83k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.83k|                                     "Integer overflow");
  204|  1.83k|    }
  205|       |
  206|  74.7k|    val = store_result<T>(u64val, is_negative);
  207|  74.7k|    return begin;
  208|  76.5k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   191k|{
  185|   191k|    uint64_t u64val{};
  186|   191k|    const CharT* begin = input.data();
  187|   191k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   505k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 461k, False: 43.9k]
  ------------------
  190|   461k|        const auto digit = char_to_int(*begin);
  191|   461k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 147k, False: 314k]
  ------------------
  192|   147k|            break;
  193|   147k|        }
  194|   314k|        u64val =
  195|   314k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   314k|        ++begin;
  197|   314k|    }
  198|       |
  199|   191k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   191k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 10.5k, False: 180k]
  |  |  ------------------
  ------------------
  201|   191k|                                               is_negative))) {
  202|  10.5k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  10.5k|                                     "Integer overflow");
  204|  10.5k|    }
  205|       |
  206|   180k|    val = store_result<T>(u64val, is_negative);
  207|   180k|    return begin;
  208|   191k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   161k|{
  164|   161k|    uint64_t u64val{};
  165|   161k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   161k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   161k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   161k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.08k, False: 160k]
  |  |  ------------------
  ------------------
  170|   161k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.08k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.08k|                                     "Integer overflow");
  173|  1.08k|    }
  174|       |
  175|   160k|    val = store_result<T>(u64val, is_negative);
  176|   160k|    return ptr;
  177|   161k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  94.0k|{
  185|  94.0k|    uint64_t u64val{};
  186|  94.0k|    const CharT* begin = input.data();
  187|  94.0k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   251k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 236k, False: 14.5k]
  ------------------
  190|   236k|        const auto digit = char_to_int(*begin);
  191|   236k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 79.4k, False: 157k]
  ------------------
  192|  79.4k|            break;
  193|  79.4k|        }
  194|   157k|        u64val =
  195|   157k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   157k|        ++begin;
  197|   157k|    }
  198|       |
  199|  94.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  94.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 796, False: 93.2k]
  |  |  ------------------
  ------------------
  201|  94.0k|                                               is_negative))) {
  202|    796|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    796|                                     "Integer overflow");
  204|    796|    }
  205|       |
  206|  93.2k|    val = store_result<T>(u64val, is_negative);
  207|  93.2k|    return begin;
  208|  94.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   223k|{
  185|   223k|    uint64_t u64val{};
  186|   223k|    const CharT* begin = input.data();
  187|   223k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   598k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 549k, False: 48.5k]
  ------------------
  190|   549k|        const auto digit = char_to_int(*begin);
  191|   549k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 175k, False: 374k]
  ------------------
  192|   175k|            break;
  193|   175k|        }
  194|   374k|        u64val =
  195|   374k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   374k|        ++begin;
  197|   374k|    }
  198|       |
  199|   223k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   223k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.60k, False: 222k]
  |  |  ------------------
  ------------------
  201|   223k|                                               is_negative))) {
  202|  1.60k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.60k|                                     "Integer overflow");
  204|  1.60k|    }
  205|       |
  206|   222k|    val = store_result<T>(u64val, is_negative);
  207|   222k|    return begin;
  208|   223k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   162k|{
  164|   162k|    uint64_t u64val{};
  165|   162k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   162k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   162k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   162k|    if (SCN_UNLIKELY(
  ------------------
  |  |  157|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 699, False: 161k]
  |  |  ------------------
  ------------------
  170|   162k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    699|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    699|                                     "Integer overflow");
  173|    699|    }
  174|       |
  175|   161k|    val = store_result<T>(u64val, is_negative);
  176|   161k|    return ptr;
  177|   162k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  94.5k|{
  185|  94.5k|    uint64_t u64val{};
  186|  94.5k|    const CharT* begin = input.data();
  187|  94.5k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   255k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 241k, False: 14.6k]
  ------------------
  190|   241k|        const auto digit = char_to_int(*begin);
  191|   241k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 79.9k, False: 161k]
  ------------------
  192|  79.9k|            break;
  193|  79.9k|        }
  194|   161k|        u64val =
  195|   161k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   161k|        ++begin;
  197|   161k|    }
  198|       |
  199|  94.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  94.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 498, False: 94.0k]
  |  |  ------------------
  ------------------
  201|  94.5k|                                               is_negative))) {
  202|    498|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    498|                                     "Integer overflow");
  204|    498|    }
  205|       |
  206|  94.0k|    val = store_result<T>(u64val, is_negative);
  207|  94.0k|    return begin;
  208|  94.5k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   225k|{
  185|   225k|    uint64_t u64val{};
  186|   225k|    const CharT* begin = input.data();
  187|   225k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   606k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 558k, False: 48.7k]
  ------------------
  190|   558k|        const auto digit = char_to_int(*begin);
  191|   558k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 176k, False: 381k]
  ------------------
  192|   176k|            break;
  193|   176k|        }
  194|   381k|        u64val =
  195|   381k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   381k|        ++begin;
  197|   381k|    }
  198|       |
  199|   225k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   225k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  157|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 934, False: 224k]
  |  |  ------------------
  ------------------
  201|   225k|                                               is_negative))) {
  202|    934|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    934|                                     "Integer overflow");
  204|    934|    }
  205|       |
  206|   224k|    val = store_result<T>(u64val, is_negative);
  207|   224k|    return begin;
  208|   225k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   109k|    {
  324|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   109k|        return read_default_with_base(range, value, 0);
  326|   109k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   109k|    {
  287|   109k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   109k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   109k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   109k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   109k|                return unexpected_scan_error(
  293|   109k|                    scan_error::invalid_scanned_value,
  294|   109k|                    "Unexpected '-' sign when parsing an "
  295|   109k|                    "unsigned value");
  296|   109k|            }
  297|   109k|        }
  298|       |
  299|   109k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 26.6k, False: 83.1k]
  ------------------
  300|  26.6k|            value = T{0};
  301|  26.6k|            return std::next(prefix_result.iterator);
  302|  26.6k|        }
  303|       |
  304|   166k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  83.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 72, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|  83.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   166k|                                     ranges::subrange{prefix_result.iterator,
  306|   166k|                                                      ranges::end(range)},
  307|   166k|                                     prefix_result.parsed_base));
  308|       |
  309|   166k|        auto buf = make_contiguous_buffer(
  310|   166k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   166k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.71k, False: 78.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.71k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  78.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  78.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  78.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  78.3k|        return ranges_polyfill::batch_next(
  316|  78.3k|            prefix_result.iterator,
  317|  78.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   166k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.48M|{
  121|  2.48M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.48M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.48M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.48M|        parse_integer_base_prefix(
  126|  2.48M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.48M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 752k, False: 1.73M]
  ------------------
  129|   752k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.39k, False: 750k]
  ------------------
  130|   752k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 434k, False: 315k]
  ------------------
  131|   437k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   437k|                digits_begin_it, ranges::begin(range));
  133|   437k|        }
  134|   315k|        else {
  135|   315k|            parsed_zero = false;
  136|   315k|        }
  137|   752k|    }
  138|  1.73M|    else {
  139|  1.73M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.77k, False: 1.73M]
  ------------------
  140|  1.73M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 94.9k, False: 1.63M]
  ------------------
  141|  99.6k|            digits_begin_it = base_prefix_begin_it;
  142|  99.6k|        }
  143|  1.73M|    }
  144|       |
  145|  2.48M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.31M, False: 177k]
  ------------------
  146|  2.31M|        sign = sign_type::plus_sign;
  147|  2.31M|    }
  148|  2.48M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.48M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.48M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.48M|{
   88|  2.48M|    switch (base) {
   89|  67.0k|        case 2:
  ------------------
  |  Branch (89:9): [True: 67.0k, False: 2.42M]
  ------------------
   90|       |            // allow 0b/0B
   91|  67.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  67.0k|                    false};
   93|       |
   94|   142k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 142k, False: 2.34M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   142k|            bool zero_parsed = false;
   97|   142k|            auto it = apply_opt(
   98|   142k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   142k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   357k|        case 16:
  ------------------
  |  Branch (102:9): [True: 357k, False: 2.13M]
  ------------------
  103|       |            // allow 0x/0X
  104|   357k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   357k|                    false};
  106|       |
  107|  1.60M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.60M, False: 887k]
  ------------------
  108|       |            // detect base
  109|  1.60M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   320k|        default:
  ------------------
  |  Branch (111:9): [True: 320k, False: 2.16M]
  ------------------
  112|       |            // no base prefix allowed
  113|   320k|            return {ranges::begin(range), base, false};
  114|  2.48M|    }
  115|  2.48M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.65M|{
   38|  1.65M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.65M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  1.72M|{
   53|  1.72M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 25.4k, False: 1.69M]
  ------------------
   54|  25.4k|        return *r;
   55|  25.4k|    }
   56|       |
   57|  1.69M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 752k, False: 945k]
  ------------------
   58|   752k|        zero_parsed = true;
   59|   752k|        return *r;
   60|   752k|    }
   61|       |
   62|   945k|    return unexpected(parse_error::error);
   63|  1.69M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  1.95M|{
   45|  1.95M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.95M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.60M|{
   69|  1.60M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 12.1k, False: 1.59M]
  ------------------
   70|  12.1k|        return {*r, 16, false};
   71|  12.1k|    }
   72|  1.59M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 8.82k, False: 1.58M]
  ------------------
   73|  8.82k|        return {*r, 2, false};
   74|  8.82k|    }
   75|  1.58M|    {
   76|  1.58M|        bool zero_parsed{false};
   77|  1.58M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 718k, False: 863k]
  ------------------
   78|   718k|            return {*r, 8, zero_parsed};
   79|   718k|        }
   80|  1.58M|    }
   81|   863k|    return {ranges::begin(range), 10, false};
   82|  1.58M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.68M|{
  156|  1.68M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.68M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.68M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.20k, False: 1.68M]
  |  |  ------------------
  ------------------
  160|  1.20k|            return unexpected_scan_error(
  161|  1.20k|                scan_error::invalid_scanned_value,
  162|  1.20k|                "Failed to parse integer: No digits found");
  163|  1.20k|        }
  164|  1.68M|        return ranges::end(range);
  165|  1.68M|    }
  166|  1.68M|    else {
  167|  1.68M|        return read_while1_code_unit(
  168|  1.68M|                   range, [&](char_type ch)
  169|  1.68M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.68M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.68M|                scan_error::invalid_scanned_value,
  172|  1.68M|                "Failed to parse integer: No digits found"));
  173|  1.68M|    }
  174|  1.68M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   127k|    {
  324|   127k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   127k|        return read_default_with_base(range, value, 0);
  326|   127k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   127k|    {
  287|   127k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   127k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   127k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   127k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   127k|                return unexpected_scan_error(
  293|   127k|                    scan_error::invalid_scanned_value,
  294|   127k|                    "Unexpected '-' sign when parsing an "
  295|   127k|                    "unsigned value");
  296|   127k|            }
  297|   127k|        }
  298|       |
  299|   127k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.5k, False: 96.5k]
  ------------------
  300|  30.5k|            value = T{0};
  301|  30.5k|            return std::next(prefix_result.iterator);
  302|  30.5k|        }
  303|       |
  304|   192k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 108, False: 96.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   192k|                                     ranges::subrange{prefix_result.iterator,
  306|   192k|                                                      ranges::end(range)},
  307|   192k|                                     prefix_result.parsed_base));
  308|       |
  309|   192k|        auto buf = make_contiguous_buffer(
  310|   192k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   192k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.31k, False: 92.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.31k|    }                                                  \
  |  |  |  |   70|  96.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  92.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  92.1k|                                    prefix_result.parsed_base));
  314|       |
  315|  92.1k|        return ranges_polyfill::batch_next(
  316|  92.1k|            prefix_result.iterator,
  317|  92.1k|            ranges::distance(buf.view().begin(), result_it));
  318|   192k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   129k|    {
  324|   129k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   129k|        return read_default_with_base(range, value, 0);
  326|   129k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   129k|    {
  287|   129k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   129k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   129k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   129k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   129k|                return unexpected_scan_error(
  293|   129k|                    scan_error::invalid_scanned_value,
  294|   129k|                    "Unexpected '-' sign when parsing an "
  295|   129k|                    "unsigned value");
  296|   129k|            }
  297|   129k|        }
  298|       |
  299|   129k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 30.9k, False: 98.5k]
  ------------------
  300|  30.9k|            value = T{0};
  301|  30.9k|            return std::next(prefix_result.iterator);
  302|  30.9k|        }
  303|       |
  304|   196k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  98.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 120, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|  98.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   196k|                                     ranges::subrange{prefix_result.iterator,
  306|   196k|                                                      ranges::end(range)},
  307|   196k|                                     prefix_result.parsed_base));
  308|       |
  309|   196k|        auto buf = make_contiguous_buffer(
  310|   196k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   196k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  98.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.18k, False: 94.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.18k|    }                                                  \
  |  |  |  |   70|  98.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  94.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  94.2k|                                    prefix_result.parsed_base));
  314|       |
  315|  94.2k|        return ranges_polyfill::batch_next(
  316|  94.2k|            prefix_result.iterator,
  317|  94.2k|            ranges::distance(buf.view().begin(), result_it));
  318|   196k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  98.9k|    {
  324|  98.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  98.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  98.9k|        return read_default_with_base(range, value, 0);
  326|  98.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  98.9k|    {
  287|  98.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  98.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  98.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 98.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  98.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  98.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  98.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  98.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.22k, False: 96.7k]
  ------------------
  292|  2.22k|                return unexpected_scan_error(
  293|  2.22k|                    scan_error::invalid_scanned_value,
  294|  2.22k|                    "Unexpected '-' sign when parsing an "
  295|  2.22k|                    "unsigned value");
  296|  2.22k|            }
  297|  98.9k|        }
  298|       |
  299|  96.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 25.4k, False: 71.2k]
  ------------------
  300|  25.4k|            value = T{0};
  301|  25.4k|            return std::next(prefix_result.iterator);
  302|  25.4k|        }
  303|       |
  304|   142k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  71.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  71.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   142k|                                     ranges::subrange{prefix_result.iterator,
  306|   142k|                                                      ranges::end(range)},
  307|   142k|                                     prefix_result.parsed_base));
  308|       |
  309|   142k|        auto buf = make_contiguous_buffer(
  310|   142k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   142k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  71.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.76k, False: 68.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.76k|    }                                                  \
  |  |  |  |   70|  71.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  68.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  68.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  68.4k|        return ranges_polyfill::batch_next(
  316|  68.4k|            prefix_result.iterator,
  317|  68.4k|            ranges::distance(buf.view().begin(), result_it));
  318|   142k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   110k|    {
  324|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   110k|        return read_default_with_base(range, value, 0);
  326|   110k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   110k|    {
  287|   110k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   110k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   110k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   110k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.28k, False: 108k]
  ------------------
  292|  2.28k|                return unexpected_scan_error(
  293|  2.28k|                    scan_error::invalid_scanned_value,
  294|  2.28k|                    "Unexpected '-' sign when parsing an "
  295|  2.28k|                    "unsigned value");
  296|  2.28k|            }
  297|   110k|        }
  298|       |
  299|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.6k, False: 79.3k]
  ------------------
  300|  28.6k|            value = T{0};
  301|  28.6k|            return std::next(prefix_result.iterator);
  302|  28.6k|        }
  303|       |
  304|   158k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 79.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  79.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   158k|                                     ranges::subrange{prefix_result.iterator,
  306|   158k|                                                      ranges::end(range)},
  307|   158k|                                     prefix_result.parsed_base));
  308|       |
  309|   158k|        auto buf = make_contiguous_buffer(
  310|   158k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   158k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.47k, False: 76.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.47k|    }                                                  \
  |  |  |  |   70|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  76.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  76.8k|                                    prefix_result.parsed_base));
  314|       |
  315|  76.8k|        return ranges_polyfill::batch_next(
  316|  76.8k|            prefix_result.iterator,
  317|  76.8k|            ranges::distance(buf.view().begin(), result_it));
  318|   158k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   110k|    {
  324|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   110k|        return read_default_with_base(range, value, 0);
  326|   110k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   110k|    {
  287|   110k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   110k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   110k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   110k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.33k, False: 108k]
  ------------------
  292|  2.33k|                return unexpected_scan_error(
  293|  2.33k|                    scan_error::invalid_scanned_value,
  294|  2.33k|                    "Unexpected '-' sign when parsing an "
  295|  2.33k|                    "unsigned value");
  296|  2.33k|            }
  297|   110k|        }
  298|       |
  299|   108k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 28.6k, False: 79.7k]
  ------------------
  300|  28.6k|            value = T{0};
  301|  28.6k|            return std::next(prefix_result.iterator);
  302|  28.6k|        }
  303|       |
  304|   159k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   159k|                                     ranges::subrange{prefix_result.iterator,
  306|   159k|                                                      ranges::end(range)},
  307|   159k|                                     prefix_result.parsed_base));
  308|       |
  309|   159k|        auto buf = make_contiguous_buffer(
  310|   159k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   159k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.37k, False: 77.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  77.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  77.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  77.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  77.3k|        return ranges_polyfill::batch_next(
  316|  77.3k|            prefix_result.iterator,
  317|  77.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   159k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   339k|{
  185|   339k|    std::basic_string<CharT> output;
  186|   339k|    std::string thsep_indices;
  187|   339k|    auto it = ranges::begin(range);
  188|   339k|    bool digit_matched = false;
  189|  1.50M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.49M, False: 4.79k]
  ------------------
  190|  1.49M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 72.4k, False: 1.42M]
  ------------------
  191|  72.4k|            thsep_indices.push_back(static_cast<char>(
  192|  72.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  72.4k|        }
  194|  1.42M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 334k, False: 1.08M]
  ------------------
  195|   334k|            break;
  196|   334k|        }
  197|  1.08M|        else {
  198|  1.08M|            output.push_back(*it);
  199|  1.08M|            digit_matched = true;
  200|  1.08M|        }
  201|  1.49M|    }
  202|   339k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 8.31k, False: 331k]
  |  |  ------------------
  ------------------
  203|  8.31k|        return unexpected_scan_error(
  204|  8.31k|            scan_error::invalid_scanned_value,
  205|  8.31k|            "Failed to parse integer: No digits found");
  206|  8.31k|    }
  207|   331k|    return std::tuple{it, output, thsep_indices};
  208|   339k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.79k|                return unexpected_scan_error(
  293|  5.79k|                    scan_error::invalid_scanned_value,
  294|  5.79k|                    "Unexpected '-' sign when parsing an "
  295|  5.79k|                    "unsigned value");
  296|  5.79k|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   193k|{
  121|   193k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   193k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   193k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   193k|        parse_integer_base_prefix(
  126|   193k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   193k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 193k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   193k|    else {
  139|   193k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 193k]
  ------------------
  140|   193k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 169k, False: 23.1k]
  ------------------
  141|   169k|            digits_begin_it = base_prefix_begin_it;
  142|   169k|        }
  143|   193k|    }
  144|       |
  145|   193k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 193k, False: 0]
  ------------------
  146|   193k|        sign = sign_type::plus_sign;
  147|   193k|    }
  148|   193k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   193k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   193k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   193k|{
   88|   193k|    switch (base) {
   89|  23.1k|        case 2:
  ------------------
  |  Branch (89:9): [True: 23.1k, False: 169k]
  ------------------
   90|       |            // allow 0b/0B
   91|  23.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  23.1k|                    false};
   93|       |
   94|  23.1k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 23.1k, False: 169k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  23.1k|            bool zero_parsed = false;
   97|  23.1k|            auto it = apply_opt(
   98|  23.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  23.1k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  42.4k|        case 16:
  ------------------
  |  Branch (102:9): [True: 42.4k, False: 150k]
  ------------------
  103|       |            // allow 0x/0X
  104|  42.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  42.4k|                    false};
  106|       |
  107|  81.1k|        case 0:
  ------------------
  |  Branch (107:9): [True: 81.1k, False: 111k]
  ------------------
  108|       |            // detect base
  109|  81.1k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  23.1k|        default:
  ------------------
  |  Branch (111:9): [True: 23.1k, False: 169k]
  ------------------
  112|       |            // no base prefix allowed
  113|  23.1k|            return {ranges::begin(range), base, false};
  114|   193k|    }
  115|   193k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   104k|{
   38|   104k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   104k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   104k|{
   53|   104k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 104k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   104k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 104k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   104k|    return unexpected(parse_error::error);
   63|   104k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   123k|{
   45|   123k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   123k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  81.1k|{
   69|  81.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 81.1k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  81.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 81.1k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  81.1k|    {
   76|  81.1k|        bool zero_parsed{false};
   77|  81.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 81.1k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  81.1k|    }
   81|  81.1k|    return {ranges::begin(range), 10, false};
   82|  81.1k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   169k|{
  156|   169k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   169k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   169k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   169k|            return unexpected_scan_error(
  161|   169k|                scan_error::invalid_scanned_value,
  162|   169k|                "Failed to parse integer: No digits found");
  163|   169k|        }
  164|   169k|        return ranges::end(range);
  165|   169k|    }
  166|   169k|    else {
  167|   169k|        return read_while1_code_unit(
  168|   169k|                   range, [&](char_type ch)
  169|   169k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   169k|            .transform_error(map_parse_error_to_scan_error(
  171|   169k|                scan_error::invalid_scanned_value,
  172|   169k|                "Failed to parse integer: No digits found"));
  173|   169k|    }
  174|   169k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   216k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.79k|                return unexpected_scan_error(
  293|  5.79k|                    scan_error::invalid_scanned_value,
  294|  5.79k|                    "Unexpected '-' sign when parsing an "
  295|  5.79k|                    "unsigned value");
  296|  5.79k|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  5.79k|                return unexpected_scan_error(
  293|  5.79k|                    scan_error::invalid_scanned_value,
  294|  5.79k|                    "Unexpected '-' sign when parsing an "
  295|  5.79k|                    "unsigned value");
  296|  5.79k|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.79k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.79k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  5.79k|    {
  324|  5.79k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  5.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  5.79k|        return read_default_with_base(range, value, 0);
  326|  5.79k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  5.79k|    {
  287|  5.79k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  5.79k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  5.79k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  5.79k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 5.79k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  5.79k|        }
  298|       |
  299|  5.79k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 5.79k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  5.79k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.79k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  5.79k|                                     ranges::subrange{prefix_result.iterator,
  306|  5.79k|                                                      ranges::end(range)},
  307|  5.79k|                                     prefix_result.parsed_base));
  308|       |
  309|  5.79k|        auto buf = make_contiguous_buffer(
  310|  5.79k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  5.79k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  5.79k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  23.1k|{
  185|  23.1k|    std::basic_string<CharT> output;
  186|  23.1k|    std::string thsep_indices;
  187|  23.1k|    auto it = ranges::begin(range);
  188|  23.1k|    bool digit_matched = false;
  189|  23.1k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 23.1k, False: 0]
  ------------------
  190|  23.1k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 23.1k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  23.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 23.1k, False: 0]
  ------------------
  195|  23.1k|            break;
  196|  23.1k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  23.1k|    }
  202|  23.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 23.1k, False: 0]
  |  |  ------------------
  ------------------
  203|  23.1k|        return unexpected_scan_error(
  204|  23.1k|            scan_error::invalid_scanned_value,
  205|  23.1k|            "Failed to parse integer: No digits found");
  206|  23.1k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  23.1k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  1.98M|    {
  280|  1.98M|        detail::check_int_type_specs(specs, eh);
  281|  1.98M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   267k|    {
  335|   267k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   267k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   267k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 24.1k, False: 242k]
  ------------------
  339|  24.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  24.1k|                return unexpected_scan_error(
  341|  24.1k|                    scan_error::invalid_scanned_value,
  342|  24.1k|                    "Unexpected '-' sign when parsing an "
  343|  24.1k|                    "unsigned value");
  344|  24.1k|            }
  345|  24.1k|            else {
  346|  24.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 24.1k]
  ------------------
  347|  24.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  24.1k|            }
  353|  24.1k|        }
  354|       |
  355|   267k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 41.7k, False: 225k]
  ------------------
  356|  41.7k|            value = T{0};
  357|  41.7k|            return std::next(prefix_result.iterator);
  358|  41.7k|        }
  359|       |
  360|   225k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   225k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 169k, False: 55.5k]
  |  |  ------------------
  ------------------
  361|   169k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 172, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    172|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    172|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    172|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    172|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    172|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   169k|                    parse_integer_digits_without_thsep(
  363|   169k|                        ranges::subrange{prefix_result.iterator,
  364|   169k|                                         ranges::end(range)},
  365|   169k|                        prefix_result.parsed_base));
  366|       |
  367|   169k|            auto buf = make_contiguous_buffer(
  368|   169k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   169k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 17.0k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.0k|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   152k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   152k|                                        prefix_result.parsed_base));
  372|       |
  373|   152k|            return ranges_polyfill::batch_next(
  374|   152k|                prefix_result.iterator,
  375|   152k|                ranges::distance(buf.view().begin(), result_it));
  376|   169k|        }
  377|       |
  378|  55.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  55.5k|            localized_number_formatting_options<CharT>{loc};
  383|  55.5k|#endif
  384|       |
  385|  55.5k|        SCN_TRY(
  ------------------
  |  |   71|  55.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.40k, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.40k|    }                                                  \
  |  |  |  |   70|  55.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  54.1k|            parse_digits_result,
  387|  54.1k|            parse_integer_digits_with_thsep(
  388|  54.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  54.1k|                prefix_result.parsed_base, locale_options));
  390|  54.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  54.1k|            parse_digits_result;
  392|       |
  393|  54.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 774, False: 53.3k]
  ------------------
  394|    774|            if (auto e = check_thsep_grouping(
  395|    774|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    774|                    thsep_indices, locale_options.grouping);
  397|    774|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 374, False: 400]
  |  |  ------------------
  ------------------
  398|    374|                return unexpected(e);
  399|    374|            }
  400|    774|        }
  401|       |
  402|  53.7k|        auto nothsep_source_view =
  403|  53.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  53.7k|        SCN_TRY(
  ------------------
  |  |   71|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.39k, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.39k|    }                                                  \
  |  |  |  |   70|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  52.3k|            nothsep_source_it,
  406|  52.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  52.3k|                                prefix_result.parsed_base));
  408|       |
  409|  52.3k|        return ranges_polyfill::batch_next(
  410|  52.3k|            prefix_result.iterator,
  411|  52.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  52.3k|                ranges::ssize(thsep_indices));
  413|  53.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   343k|    {
  335|   343k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   343k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   343k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 26.4k, False: 316k]
  ------------------
  339|  26.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  26.4k|                return unexpected_scan_error(
  341|  26.4k|                    scan_error::invalid_scanned_value,
  342|  26.4k|                    "Unexpected '-' sign when parsing an "
  343|  26.4k|                    "unsigned value");
  344|  26.4k|            }
  345|  26.4k|            else {
  346|  26.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 26.4k]
  ------------------
  347|  26.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  26.4k|            }
  353|  26.4k|        }
  354|       |
  355|   343k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.1k, False: 296k]
  ------------------
  356|  47.1k|            value = T{0};
  357|  47.1k|            return std::next(prefix_result.iterator);
  358|  47.1k|        }
  359|       |
  360|   296k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   296k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 231k, False: 64.4k]
  |  |  ------------------
  ------------------
  361|   231k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 264, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    264|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   231k|                    parse_integer_digits_without_thsep(
  363|   231k|                        ranges::subrange{prefix_result.iterator,
  364|   231k|                                         ranges::end(range)},
  365|   231k|                        prefix_result.parsed_base));
  366|       |
  367|   231k|            auto buf = make_contiguous_buffer(
  368|   231k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   231k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15.8k, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.8k|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   215k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   215k|                                        prefix_result.parsed_base));
  372|       |
  373|   215k|            return ranges_polyfill::batch_next(
  374|   215k|                prefix_result.iterator,
  375|   215k|                ranges::distance(buf.view().begin(), result_it));
  376|   231k|        }
  377|       |
  378|  64.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  64.4k|            localized_number_formatting_options<CharT>{loc};
  383|  64.4k|#endif
  384|       |
  385|  64.4k|        SCN_TRY(
  ------------------
  |  |   71|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.84k, False: 62.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.84k|    }                                                  \
  |  |  |  |   70|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  62.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  62.5k|            parse_digits_result,
  387|  62.5k|            parse_integer_digits_with_thsep(
  388|  62.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  62.5k|                prefix_result.parsed_base, locale_options));
  390|  62.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  62.5k|            parse_digits_result;
  392|       |
  393|  62.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 856, False: 61.7k]
  ------------------
  394|    856|            if (auto e = check_thsep_grouping(
  395|    856|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    856|                    thsep_indices, locale_options.grouping);
  397|    856|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 444, False: 412]
  |  |  ------------------
  ------------------
  398|    444|                return unexpected(e);
  399|    444|            }
  400|    856|        }
  401|       |
  402|  62.1k|        auto nothsep_source_view =
  403|  62.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  62.1k|        SCN_TRY(
  ------------------
  |  |   71|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 640, False: 61.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    640|    }                                                  \
  |  |  |  |   70|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  61.4k|            nothsep_source_it,
  406|  61.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  61.4k|                                prefix_result.parsed_base));
  408|       |
  409|  61.4k|        return ranges_polyfill::batch_next(
  410|  61.4k|            prefix_result.iterator,
  411|  61.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  61.4k|                ranges::ssize(thsep_indices));
  413|  62.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   349k|    {
  335|   349k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   349k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   349k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 27.7k, False: 322k]
  ------------------
  339|  27.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  27.7k|                return unexpected_scan_error(
  341|  27.7k|                    scan_error::invalid_scanned_value,
  342|  27.7k|                    "Unexpected '-' sign when parsing an "
  343|  27.7k|                    "unsigned value");
  344|  27.7k|            }
  345|  27.7k|            else {
  346|  27.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 27.7k]
  ------------------
  347|  27.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  27.7k|            }
  353|  27.7k|        }
  354|       |
  355|   349k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 47.7k, False: 302k]
  ------------------
  356|  47.7k|            value = T{0};
  357|  47.7k|            return std::next(prefix_result.iterator);
  358|  47.7k|        }
  359|       |
  360|   302k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   302k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 236k, False: 65.7k]
  |  |  ------------------
  ------------------
  361|   236k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 296, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    296|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   236k|                    parse_integer_digits_without_thsep(
  363|   236k|                        ranges::subrange{prefix_result.iterator,
  364|   236k|                                         ranges::end(range)},
  365|   236k|                        prefix_result.parsed_base));
  366|       |
  367|   236k|            auto buf = make_contiguous_buffer(
  368|   236k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   236k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15.5k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.5k|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   220k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   220k|                                        prefix_result.parsed_base));
  372|       |
  373|   220k|            return ranges_polyfill::batch_next(
  374|   220k|                prefix_result.iterator,
  375|   220k|                ranges::distance(buf.view().begin(), result_it));
  376|   236k|        }
  377|       |
  378|  65.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  65.7k|            localized_number_formatting_options<CharT>{loc};
  383|  65.7k|#endif
  384|       |
  385|  65.7k|        SCN_TRY(
  ------------------
  |  |   71|  65.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.02k, False: 63.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  65.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  63.7k|            parse_digits_result,
  387|  63.7k|            parse_integer_digits_with_thsep(
  388|  63.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  63.7k|                prefix_result.parsed_base, locale_options));
  390|  63.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  63.7k|            parse_digits_result;
  392|       |
  393|  63.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 878, False: 62.8k]
  ------------------
  394|    878|            if (auto e = check_thsep_grouping(
  395|    878|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    878|                    thsep_indices, locale_options.grouping);
  397|    878|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 464, False: 414]
  |  |  ------------------
  ------------------
  398|    464|                return unexpected(e);
  399|    464|            }
  400|    878|        }
  401|       |
  402|  63.2k|        auto nothsep_source_view =
  403|  63.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  63.2k|        SCN_TRY(
  ------------------
  |  |   71|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 366, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    366|    }                                                  \
  |  |  |  |   70|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  62.8k|            nothsep_source_it,
  406|  62.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  62.8k|                                prefix_result.parsed_base));
  408|       |
  409|  62.8k|        return ranges_polyfill::batch_next(
  410|  62.8k|            prefix_result.iterator,
  411|  62.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  62.8k|                ranges::ssize(thsep_indices));
  413|  63.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   254k|    {
  335|   254k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   254k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   254k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.17k, False: 246k]
  ------------------
  339|  8.17k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.17k|                return unexpected_scan_error(
  341|  8.17k|                    scan_error::invalid_scanned_value,
  342|  8.17k|                    "Unexpected '-' sign when parsing an "
  343|  8.17k|                    "unsigned value");
  344|  8.17k|            }
  345|  8.17k|            else {
  346|  8.17k|                if (specs.type ==
  347|  8.17k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.17k|                    return unexpected_scan_error(
  349|  8.17k|                        scan_error::invalid_scanned_value,
  350|  8.17k|                        "'u'-option disallows negative values");
  351|  8.17k|                }
  352|  8.17k|            }
  353|  8.17k|        }
  354|       |
  355|   246k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 39.6k, False: 206k]
  ------------------
  356|  39.6k|            value = T{0};
  357|  39.6k|            return std::next(prefix_result.iterator);
  358|  39.6k|        }
  359|       |
  360|   206k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   206k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 158k, False: 47.6k]
  |  |  ------------------
  ------------------
  361|   158k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 40, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     40|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   158k|                    parse_integer_digits_without_thsep(
  363|   158k|                        ranges::subrange{prefix_result.iterator,
  364|   158k|                                         ranges::end(range)},
  365|   158k|                        prefix_result.parsed_base));
  366|       |
  367|   158k|            auto buf = make_contiguous_buffer(
  368|   158k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   158k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.8k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.8k|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   147k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   147k|                                        prefix_result.parsed_base));
  372|       |
  373|   147k|            return ranges_polyfill::batch_next(
  374|   147k|                prefix_result.iterator,
  375|   147k|                ranges::distance(buf.view().begin(), result_it));
  376|   158k|        }
  377|       |
  378|  47.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  47.6k|            localized_number_formatting_options<CharT>{loc};
  383|  47.6k|#endif
  384|       |
  385|  47.6k|        SCN_TRY(
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 950, False: 46.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    950|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    950|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    950|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    950|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    950|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  46.7k|            parse_digits_result,
  387|  46.7k|            parse_integer_digits_with_thsep(
  388|  46.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  46.7k|                prefix_result.parsed_base, locale_options));
  390|  46.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  46.7k|            parse_digits_result;
  392|       |
  393|  46.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 650, False: 46.0k]
  ------------------
  394|    650|            if (auto e = check_thsep_grouping(
  395|    650|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    650|                    thsep_indices, locale_options.grouping);
  397|    650|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 264, False: 386]
  |  |  ------------------
  ------------------
  398|    264|                return unexpected(e);
  399|    264|            }
  400|    650|        }
  401|       |
  402|  46.4k|        auto nothsep_source_view =
  403|  46.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  46.4k|        SCN_TRY(
  ------------------
  |  |   71|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 608, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    608|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    608|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    608|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    608|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    608|    }                                                  \
  |  |  |  |   70|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  45.8k|            nothsep_source_it,
  406|  45.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  45.8k|                                prefix_result.parsed_base));
  408|       |
  409|  45.8k|        return ranges_polyfill::batch_next(
  410|  45.8k|            prefix_result.iterator,
  411|  45.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  45.8k|                ranges::ssize(thsep_indices));
  413|  46.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   293k|    {
  335|   293k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   293k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   293k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.38k, False: 285k]
  ------------------
  339|  8.38k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.38k|                return unexpected_scan_error(
  341|  8.38k|                    scan_error::invalid_scanned_value,
  342|  8.38k|                    "Unexpected '-' sign when parsing an "
  343|  8.38k|                    "unsigned value");
  344|  8.38k|            }
  345|  8.38k|            else {
  346|  8.38k|                if (specs.type ==
  347|  8.38k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.38k|                    return unexpected_scan_error(
  349|  8.38k|                        scan_error::invalid_scanned_value,
  350|  8.38k|                        "'u'-option disallows negative values");
  351|  8.38k|                }
  352|  8.38k|            }
  353|  8.38k|        }
  354|       |
  355|   285k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 43.9k, False: 241k]
  ------------------
  356|  43.9k|            value = T{0};
  357|  43.9k|            return std::next(prefix_result.iterator);
  358|  43.9k|        }
  359|       |
  360|   241k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   241k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 188k, False: 53.0k]
  |  |  ------------------
  ------------------
  361|   188k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 42, False: 188k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   188k|                    parse_integer_digits_without_thsep(
  363|   188k|                        ranges::subrange{prefix_result.iterator,
  364|   188k|                                         ranges::end(range)},
  365|   188k|                        prefix_result.parsed_base));
  366|       |
  367|   188k|            auto buf = make_contiguous_buffer(
  368|   188k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   188k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.1k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   178k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   178k|                                        prefix_result.parsed_base));
  372|       |
  373|   178k|            return ranges_polyfill::batch_next(
  374|   178k|                prefix_result.iterator,
  375|   178k|                ranges::distance(buf.view().begin(), result_it));
  376|   188k|        }
  377|       |
  378|  53.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  53.0k|            localized_number_formatting_options<CharT>{loc};
  383|  53.0k|#endif
  384|       |
  385|  53.0k|        SCN_TRY(
  ------------------
  |  |   71|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.02k, False: 52.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  52.0k|            parse_digits_result,
  387|  52.0k|            parse_integer_digits_with_thsep(
  388|  52.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  52.0k|                prefix_result.parsed_base, locale_options));
  390|  52.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  52.0k|            parse_digits_result;
  392|       |
  393|  52.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 706, False: 51.3k]
  ------------------
  394|    706|            if (auto e = check_thsep_grouping(
  395|    706|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    706|                    thsep_indices, locale_options.grouping);
  397|    706|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 308, False: 398]
  |  |  ------------------
  ------------------
  398|    308|                return unexpected(e);
  399|    308|            }
  400|    706|        }
  401|       |
  402|  51.7k|        auto nothsep_source_view =
  403|  51.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  51.7k|        SCN_TRY(
  ------------------
  |  |   71|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 296, False: 51.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    296|    }                                                  \
  |  |  |  |   70|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  51.4k|            nothsep_source_it,
  406|  51.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  51.4k|                                prefix_result.parsed_base));
  408|       |
  409|  51.4k|        return ranges_polyfill::batch_next(
  410|  51.4k|            prefix_result.iterator,
  411|  51.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  51.4k|                ranges::ssize(thsep_indices));
  413|  51.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   295k|    {
  335|   295k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   295k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   295k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.50k, False: 286k]
  ------------------
  339|  8.50k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.50k|                return unexpected_scan_error(
  341|  8.50k|                    scan_error::invalid_scanned_value,
  342|  8.50k|                    "Unexpected '-' sign when parsing an "
  343|  8.50k|                    "unsigned value");
  344|  8.50k|            }
  345|  8.50k|            else {
  346|  8.50k|                if (specs.type ==
  347|  8.50k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.50k|                    return unexpected_scan_error(
  349|  8.50k|                        scan_error::invalid_scanned_value,
  350|  8.50k|                        "'u'-option disallows negative values");
  351|  8.50k|                }
  352|  8.50k|            }
  353|  8.50k|        }
  354|       |
  355|   286k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 43.9k, False: 242k]
  ------------------
  356|  43.9k|            value = T{0};
  357|  43.9k|            return std::next(prefix_result.iterator);
  358|  43.9k|        }
  359|       |
  360|   242k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   242k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 189k, False: 53.2k]
  |  |  ------------------
  ------------------
  361|   189k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 42, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   189k|                    parse_integer_digits_without_thsep(
  363|   189k|                        ranges::subrange{prefix_result.iterator,
  364|   189k|                                         ranges::end(range)},
  365|   189k|                        prefix_result.parsed_base));
  366|       |
  367|   189k|            auto buf = make_contiguous_buffer(
  368|   189k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   189k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9.89k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.89k|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   179k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   179k|                                        prefix_result.parsed_base));
  372|       |
  373|   179k|            return ranges_polyfill::batch_next(
  374|   179k|                prefix_result.iterator,
  375|   179k|                ranges::distance(buf.view().begin(), result_it));
  376|   189k|        }
  377|       |
  378|  53.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  53.2k|            localized_number_formatting_options<CharT>{loc};
  383|  53.2k|#endif
  384|       |
  385|  53.2k|        SCN_TRY(
  ------------------
  |  |   71|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.07k, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  52.2k|            parse_digits_result,
  387|  52.2k|            parse_integer_digits_with_thsep(
  388|  52.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  52.2k|                prefix_result.parsed_base, locale_options));
  390|  52.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  52.2k|            parse_digits_result;
  392|       |
  393|  52.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 710, False: 51.4k]
  ------------------
  394|    710|            if (auto e = check_thsep_grouping(
  395|    710|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    710|                    thsep_indices, locale_options.grouping);
  397|    710|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 312, False: 398]
  |  |  ------------------
  ------------------
  398|    312|                return unexpected(e);
  399|    312|            }
  400|    710|        }
  401|       |
  402|  51.8k|        auto nothsep_source_view =
  403|  51.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  51.8k|        SCN_TRY(
  ------------------
  |  |   71|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 180, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    180|    }                                                  \
  |  |  |  |   70|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  51.7k|            nothsep_source_it,
  406|  51.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  51.7k|                                prefix_result.parsed_base));
  408|       |
  409|  51.7k|        return ranges_polyfill::batch_next(
  410|  51.7k|            prefix_result.iterator,
  411|  51.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  51.7k|                ranges::ssize(thsep_indices));
  413|  51.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  23.1k|    {
  335|  23.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 23.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  23.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  23.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 23.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  23.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 23.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  23.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  23.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 19.3k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  19.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 15.4k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.4k|    }                                                  \
  |  |  |  |   70|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  27.0k|    {
  335|  27.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  27.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  27.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 27.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  27.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 27.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  27.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  23.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.3k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  3.86k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  3.86k|                                        prefix_result.parsed_base));
  372|       |
  373|  3.86k|            return ranges_polyfill::batch_next(
  374|  3.86k|                prefix_result.iterator,
  375|  3.86k|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  27.0k|    {
  335|  27.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  27.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  27.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 27.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  27.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 27.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  27.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  23.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.3k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  3.86k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  3.86k|                                        prefix_result.parsed_base));
  372|       |
  373|  3.86k|            return ranges_polyfill::batch_next(
  374|  3.86k|                prefix_result.iterator,
  375|  3.86k|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  27.0k|    {
  335|  27.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  27.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  27.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 27.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  27.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 27.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  27.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  23.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.3k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  3.86k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  3.86k|                                        prefix_result.parsed_base));
  372|       |
  373|  3.86k|            return ranges_polyfill::batch_next(
  374|  3.86k|                prefix_result.iterator,
  375|  3.86k|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  27.0k|    {
  335|  27.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  27.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  27.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 27.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  27.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 27.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  27.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  23.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.3k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  3.86k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  3.86k|                                        prefix_result.parsed_base));
  372|       |
  373|  3.86k|            return ranges_polyfill::batch_next(
  374|  3.86k|                prefix_result.iterator,
  375|  3.86k|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  27.0k|    {
  335|  27.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  27.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  27.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 27.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  27.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 27.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  27.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 23.1k, False: 3.86k]
  |  |  ------------------
  ------------------
  361|  23.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 19.3k, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  3.86k|                    parse_integer_digits_without_thsep(
  363|  3.86k|                        ranges::subrange{prefix_result.iterator,
  364|  3.86k|                                         ranges::end(range)},
  365|  3.86k|                        prefix_result.parsed_base));
  366|       |
  367|  3.86k|            auto buf = make_contiguous_buffer(
  368|  3.86k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  3.86k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 3.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  3.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  3.86k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  3.86k|                                        prefix_result.parsed_base));
  372|       |
  373|  3.86k|            return ranges_polyfill::batch_next(
  374|  3.86k|                prefix_result.iterator,
  375|  3.86k|                ranges::distance(buf.view().begin(), result_it));
  376|  3.86k|        }
  377|       |
  378|  3.86k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  3.86k|            localized_number_formatting_options<CharT>{loc};
  383|  3.86k|#endif
  384|       |
  385|  3.86k|        SCN_TRY(
  ------------------
  |  |   71|  3.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.86k|    }                                                  \
  |  |  |  |   70|  3.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  99.4k|    {
  324|  99.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  99.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  99.4k|        return read_default_with_base(range, value, 0);
  326|  99.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  99.4k|    {
  287|  99.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  99.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  99.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 99.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  99.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  99.4k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  99.4k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  99.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  99.4k|                return unexpected_scan_error(
  293|  99.4k|                    scan_error::invalid_scanned_value,
  294|  99.4k|                    "Unexpected '-' sign when parsing an "
  295|  99.4k|                    "unsigned value");
  296|  99.4k|            }
  297|  99.4k|        }
  298|       |
  299|  99.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 23.1k, False: 76.3k]
  ------------------
  300|  23.1k|            value = T{0};
  301|  23.1k|            return std::next(prefix_result.iterator);
  302|  23.1k|        }
  303|       |
  304|   152k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  76.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  76.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 87, False: 76.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     87|    }                                                  \
  |  |  |  |   70|  76.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   152k|                                     ranges::subrange{prefix_result.iterator,
  306|   152k|                                                      ranges::end(range)},
  307|   152k|                                     prefix_result.parsed_base));
  308|       |
  309|   152k|        auto buf = make_contiguous_buffer(
  310|   152k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   152k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  76.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 9.04k, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.04k|    }                                                  \
  |  |  |  |   70|  76.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  67.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  67.1k|                                    prefix_result.parsed_base));
  314|       |
  315|  67.1k|        return ranges_polyfill::batch_next(
  316|  67.1k|            prefix_result.iterator,
  317|  67.1k|            ranges::distance(buf.view().begin(), result_it));
  318|   152k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.29M|{
  121|  2.29M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 2.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.29M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.29M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.29M|        parse_integer_base_prefix(
  126|  2.29M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.29M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 652k, False: 1.64M]
  ------------------
  129|   652k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.66k, False: 649k]
  ------------------
  130|   652k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 381k, False: 268k]
  ------------------
  131|   384k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   384k|                digits_begin_it, ranges::begin(range));
  133|   384k|        }
  134|   268k|        else {
  135|   268k|            parsed_zero = false;
  136|   268k|        }
  137|   652k|    }
  138|  1.64M|    else {
  139|  1.64M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.22k, False: 1.63M]
  ------------------
  140|  1.64M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 237k, False: 1.40M]
  ------------------
  141|   242k|            digits_begin_it = base_prefix_begin_it;
  142|   242k|        }
  143|  1.64M|    }
  144|       |
  145|  2.29M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.16M, False: 132k]
  ------------------
  146|  2.16M|        sign = sign_type::plus_sign;
  147|  2.16M|    }
  148|  2.29M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.29M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.29M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.29M|{
   88|  2.29M|    switch (base) {
   89|  79.9k|        case 2:
  ------------------
  |  Branch (89:9): [True: 79.9k, False: 2.21M]
  ------------------
   90|       |            // allow 0b/0B
   91|  79.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  79.9k|                    false};
   93|       |
   94|   136k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 136k, False: 2.15M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   136k|            bool zero_parsed = false;
   97|   136k|            auto it = apply_opt(
   98|   136k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   136k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   328k|        case 16:
  ------------------
  |  Branch (102:9): [True: 328k, False: 1.96M]
  ------------------
  103|       |            // allow 0x/0X
  104|   328k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   328k|                    false};
  106|       |
  107|  1.45M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.45M, False: 838k]
  ------------------
  108|       |            // detect base
  109|  1.45M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   293k|        default:
  ------------------
  |  Branch (111:9): [True: 293k, False: 2.00M]
  ------------------
  112|       |            // no base prefix allowed
  113|   293k|            return {ranges::begin(range), base, false};
  114|  2.29M|    }
  115|  2.29M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.52M|{
   38|  1.52M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.52M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  1.57M|{
   53|  1.57M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 23.3k, False: 1.55M]
  ------------------
   54|  23.3k|        return *r;
   55|  23.3k|    }
   56|       |
   57|  1.55M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 652k, False: 898k]
  ------------------
   58|   652k|        zero_parsed = true;
   59|   652k|        return *r;
   60|   652k|    }
   61|       |
   62|   898k|    return unexpected(parse_error::error);
   63|  1.55M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  1.78M|{
   45|  1.78M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.78M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.45M|{
   69|  1.45M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 11.9k, False: 1.44M]
  ------------------
   70|  11.9k|        return {*r, 16, false};
   71|  11.9k|    }
   72|  1.44M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 7.67k, False: 1.43M]
  ------------------
   73|  7.67k|        return {*r, 2, false};
   74|  7.67k|    }
   75|  1.43M|    {
   76|  1.43M|        bool zero_parsed{false};
   77|  1.43M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 625k, False: 811k]
  ------------------
   78|   625k|            return {*r, 8, zero_parsed};
   79|   625k|        }
   80|  1.43M|    }
   81|   811k|    return {ranges::begin(range), 10, false};
   82|  1.43M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.57M|{
  156|  1.57M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.57M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.57M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 1.43k, False: 1.57M]
  |  |  ------------------
  ------------------
  160|  1.43k|            return unexpected_scan_error(
  161|  1.43k|                scan_error::invalid_scanned_value,
  162|  1.43k|                "Failed to parse integer: No digits found");
  163|  1.43k|        }
  164|  1.57M|        return ranges::end(range);
  165|  1.57M|    }
  166|  1.57M|    else {
  167|  1.57M|        return read_while1_code_unit(
  168|  1.57M|                   range, [&](char_type ch)
  169|  1.57M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.57M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.57M|                scan_error::invalid_scanned_value,
  172|  1.57M|                "Failed to parse integer: No digits found"));
  173|  1.57M|    }
  174|  1.57M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   113k|    {
  324|   113k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   113k|        return read_default_with_base(range, value, 0);
  326|   113k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   113k|    {
  287|   113k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   113k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   113k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   113k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   113k|                return unexpected_scan_error(
  293|   113k|                    scan_error::invalid_scanned_value,
  294|   113k|                    "Unexpected '-' sign when parsing an "
  295|   113k|                    "unsigned value");
  296|   113k|            }
  297|   113k|        }
  298|       |
  299|   113k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 26.8k, False: 86.7k]
  ------------------
  300|  26.8k|            value = T{0};
  301|  26.8k|            return std::next(prefix_result.iterator);
  302|  26.8k|        }
  303|       |
  304|   173k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  86.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 123, False: 86.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    123|    }                                                  \
  |  |  |  |   70|  86.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   173k|                                     ranges::subrange{prefix_result.iterator,
  306|   173k|                                                      ranges::end(range)},
  307|   173k|                                     prefix_result.parsed_base));
  308|       |
  309|   173k|        auto buf = make_contiguous_buffer(
  310|   173k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   173k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  86.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.63k, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.63k|    }                                                  \
  |  |  |  |   70|  86.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  78.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  78.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  78.0k|        return ranges_polyfill::batch_next(
  316|  78.0k|            prefix_result.iterator,
  317|  78.0k|            ranges::distance(buf.view().begin(), result_it));
  318|   173k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   115k|    {
  324|   115k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   115k|        return read_default_with_base(range, value, 0);
  326|   115k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   115k|    {
  287|   115k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   115k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   115k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   115k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   115k|                return unexpected_scan_error(
  293|   115k|                    scan_error::invalid_scanned_value,
  294|   115k|                    "Unexpected '-' sign when parsing an "
  295|   115k|                    "unsigned value");
  296|   115k|            }
  297|   115k|        }
  298|       |
  299|   115k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 27.1k, False: 88.4k]
  ------------------
  300|  27.1k|            value = T{0};
  301|  27.1k|            return std::next(prefix_result.iterator);
  302|  27.1k|        }
  303|       |
  304|   176k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 135, False: 88.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    135|    }                                                  \
  |  |  |  |   70|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   176k|                                     ranges::subrange{prefix_result.iterator,
  306|   176k|                                                      ranges::end(range)},
  307|   176k|                                     prefix_result.parsed_base));
  308|       |
  309|   176k|        auto buf = make_contiguous_buffer(
  310|   176k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   176k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  88.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 8.51k, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.51k|    }                                                  \
  |  |  |  |   70|  88.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  79.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  79.7k|                                    prefix_result.parsed_base));
  314|       |
  315|  79.7k|        return ranges_polyfill::batch_next(
  316|  79.7k|            prefix_result.iterator,
  317|  79.7k|            ranges::distance(buf.view().begin(), result_it));
  318|   176k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  91.2k|    {
  324|  91.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  91.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  91.2k|        return read_default_with_base(range, value, 0);
  326|  91.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  91.2k|    {
  287|  91.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  91.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 91.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  91.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  91.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  91.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  91.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.57k, False: 89.6k]
  ------------------
  292|  1.57k|                return unexpected_scan_error(
  293|  1.57k|                    scan_error::invalid_scanned_value,
  294|  1.57k|                    "Unexpected '-' sign when parsing an "
  295|  1.57k|                    "unsigned value");
  296|  1.57k|            }
  297|  91.2k|        }
  298|       |
  299|  89.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 22.1k, False: 67.4k]
  ------------------
  300|  22.1k|            value = T{0};
  301|  22.1k|            return std::next(prefix_result.iterator);
  302|  22.1k|        }
  303|       |
  304|   134k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  67.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 67.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  67.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   134k|                                     ranges::subrange{prefix_result.iterator,
  306|   134k|                                                      ranges::end(range)},
  307|   134k|                                     prefix_result.parsed_base));
  308|       |
  309|   134k|        auto buf = make_contiguous_buffer(
  310|   134k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   134k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  67.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.75k, False: 59.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.75k|    }                                                  \
  |  |  |  |   70|  67.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  59.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  59.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  59.6k|        return ranges_polyfill::batch_next(
  316|  59.6k|            prefix_result.iterator,
  317|  59.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   134k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   101k|    {
  324|   101k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   101k|        return read_default_with_base(range, value, 0);
  326|   101k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   101k|    {
  287|   101k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   101k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   101k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   101k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.63k, False: 100k]
  ------------------
  292|  1.63k|                return unexpected_scan_error(
  293|  1.63k|                    scan_error::invalid_scanned_value,
  294|  1.63k|                    "Unexpected '-' sign when parsing an "
  295|  1.63k|                    "unsigned value");
  296|  1.63k|            }
  297|   101k|        }
  298|       |
  299|   100k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 25.3k, False: 74.9k]
  ------------------
  300|  25.3k|            value = T{0};
  301|  25.3k|            return std::next(prefix_result.iterator);
  302|  25.3k|        }
  303|       |
  304|   149k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  74.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 74.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  74.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   149k|                                     ranges::subrange{prefix_result.iterator,
  306|   149k|                                                      ranges::end(range)},
  307|   149k|                                     prefix_result.parsed_base));
  308|       |
  309|   149k|        auto buf = make_contiguous_buffer(
  310|   149k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   149k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  74.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.47k, False: 67.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.47k|    }                                                  \
  |  |  |  |   70|  74.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  67.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  67.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  67.4k|        return ranges_polyfill::batch_next(
  316|  67.4k|            prefix_result.iterator,
  317|  67.4k|            ranges::distance(buf.view().begin(), result_it));
  318|   149k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   102k|    {
  324|   102k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   102k|        return read_default_with_base(range, value, 0);
  326|   102k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   102k|    {
  287|   102k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   102k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   102k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   102k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.68k, False: 100k]
  ------------------
  292|  1.68k|                return unexpected_scan_error(
  293|  1.68k|                    scan_error::invalid_scanned_value,
  294|  1.68k|                    "Unexpected '-' sign when parsing an "
  295|  1.68k|                    "unsigned value");
  296|  1.68k|            }
  297|   102k|        }
  298|       |
  299|   100k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 25.3k, False: 75.2k]
  ------------------
  300|  25.3k|            value = T{0};
  301|  25.3k|            return std::next(prefix_result.iterator);
  302|  25.3k|        }
  303|       |
  304|   150k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 75.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   150k|                                     ranges::subrange{prefix_result.iterator,
  306|   150k|                                                      ranges::end(range)},
  307|   150k|                                     prefix_result.parsed_base));
  308|       |
  309|   150k|        auto buf = make_contiguous_buffer(
  310|   150k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   150k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 7.36k, False: 67.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.36k|    }                                                  \
  |  |  |  |   70|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  67.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  67.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  67.8k|                                    prefix_result.parsed_base));
  314|       |
  315|  67.8k|        return ranges_polyfill::batch_next(
  316|  67.8k|            prefix_result.iterator,
  317|  67.8k|            ranges::distance(buf.view().begin(), result_it));
  318|   150k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   313k|{
  185|   313k|    std::basic_string<CharT> output;
  186|   313k|    std::string thsep_indices;
  187|   313k|    auto it = ranges::begin(range);
  188|   313k|    bool digit_matched = false;
  189|  1.29M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.29M, False: 5.11k]
  ------------------
  190|  1.29M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 56.6k, False: 1.23M]
  ------------------
  191|  56.6k|            thsep_indices.push_back(static_cast<char>(
  192|  56.6k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  56.6k|        }
  194|  1.23M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 308k, False: 925k]
  ------------------
  195|   308k|            break;
  196|   308k|        }
  197|   925k|        else {
  198|   925k|            output.push_back(*it);
  199|   925k|            digit_matched = true;
  200|   925k|        }
  201|  1.29M|    }
  202|   313k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 28.0k, False: 285k]
  |  |  ------------------
  ------------------
  203|  28.0k|        return unexpected_scan_error(
  204|  28.0k|            scan_error::invalid_scanned_value,
  205|  28.0k|            "Failed to parse integer: No digits found");
  206|  28.0k|    }
  207|   285k|    return std::tuple{it, output, thsep_indices};
  208|   313k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  1.96M|    {
  280|  1.96M|        detail::check_int_type_specs(specs, eh);
  281|  1.96M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   247k|    {
  335|   247k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   247k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   247k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 16.8k, False: 230k]
  ------------------
  339|  16.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  16.8k|                return unexpected_scan_error(
  341|  16.8k|                    scan_error::invalid_scanned_value,
  342|  16.8k|                    "Unexpected '-' sign when parsing an "
  343|  16.8k|                    "unsigned value");
  344|  16.8k|            }
  345|  16.8k|            else {
  346|  16.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 16.8k]
  ------------------
  347|  16.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  16.8k|            }
  353|  16.8k|        }
  354|       |
  355|   247k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 36.3k, False: 210k]
  ------------------
  356|  36.3k|            value = T{0};
  357|  36.3k|            return std::next(prefix_result.iterator);
  358|  36.3k|        }
  359|       |
  360|   210k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   210k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 159k, False: 50.9k]
  |  |  ------------------
  ------------------
  361|   159k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 222, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    222|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   159k|                    parse_integer_digits_without_thsep(
  363|   159k|                        ranges::subrange{prefix_result.iterator,
  364|   159k|                                         ranges::end(range)},
  365|   159k|                        prefix_result.parsed_base));
  366|       |
  367|   159k|            auto buf = make_contiguous_buffer(
  368|   159k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   159k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 31.4k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.4k|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   128k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   128k|                                        prefix_result.parsed_base));
  372|       |
  373|   128k|            return ranges_polyfill::batch_next(
  374|   128k|                prefix_result.iterator,
  375|   128k|                ranges::distance(buf.view().begin(), result_it));
  376|   159k|        }
  377|       |
  378|  50.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  50.9k|            localized_number_formatting_options<CharT>{loc};
  383|  50.9k|#endif
  384|       |
  385|  50.9k|        SCN_TRY(
  ------------------
  |  |   71|  50.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  50.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  50.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.68k, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.68k|    }                                                  \
  |  |  |  |   70|  50.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  46.3k|            parse_digits_result,
  387|  46.3k|            parse_integer_digits_with_thsep(
  388|  46.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  46.3k|                prefix_result.parsed_base, locale_options));
  390|  46.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  46.3k|            parse_digits_result;
  392|       |
  393|  46.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 638, False: 45.6k]
  ------------------
  394|    638|            if (auto e = check_thsep_grouping(
  395|    638|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    638|                    thsep_indices, locale_options.grouping);
  397|    638|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 294, False: 344]
  |  |  ------------------
  ------------------
  398|    294|                return unexpected(e);
  399|    294|            }
  400|    638|        }
  401|       |
  402|  46.0k|        auto nothsep_source_view =
  403|  46.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  46.0k|        SCN_TRY(
  ------------------
  |  |   71|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.09k, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  44.9k|            nothsep_source_it,
  406|  44.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  44.9k|                                prefix_result.parsed_base));
  408|       |
  409|  44.9k|        return ranges_polyfill::batch_next(
  410|  44.9k|            prefix_result.iterator,
  411|  44.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  44.9k|                ranges::ssize(thsep_indices));
  413|  46.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   311k|    {
  335|   311k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   311k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   311k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   311k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 18.1k, False: 293k]
  ------------------
  339|  18.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  18.1k|                return unexpected_scan_error(
  341|  18.1k|                    scan_error::invalid_scanned_value,
  342|  18.1k|                    "Unexpected '-' sign when parsing an "
  343|  18.1k|                    "unsigned value");
  344|  18.1k|            }
  345|  18.1k|            else {
  346|  18.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 18.1k]
  ------------------
  347|  18.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  18.1k|            }
  353|  18.1k|        }
  354|       |
  355|   311k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 41.5k, False: 270k]
  ------------------
  356|  41.5k|            value = T{0};
  357|  41.5k|            return std::next(prefix_result.iterator);
  358|  41.5k|        }
  359|       |
  360|   270k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   270k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 212k, False: 57.9k]
  |  |  ------------------
  ------------------
  361|   212k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   212k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   212k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   212k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 314, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    314|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    314|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    314|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    314|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    314|    }                                                  \
  |  |  |  |   70|   212k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   211k|                    parse_integer_digits_without_thsep(
  363|   211k|                        ranges::subrange{prefix_result.iterator,
  364|   211k|                                         ranges::end(range)},
  365|   211k|                        prefix_result.parsed_base));
  366|       |
  367|   211k|            auto buf = make_contiguous_buffer(
  368|   211k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   211k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 30.2k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.2k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   181k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   181k|                                        prefix_result.parsed_base));
  372|       |
  373|   181k|            return ranges_polyfill::batch_next(
  374|   181k|                prefix_result.iterator,
  375|   181k|                ranges::distance(buf.view().begin(), result_it));
  376|   211k|        }
  377|       |
  378|  57.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  57.9k|            localized_number_formatting_options<CharT>{loc};
  383|  57.9k|#endif
  384|       |
  385|  57.9k|        SCN_TRY(
  ------------------
  |  |   71|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.95k, False: 52.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.95k|    }                                                  \
  |  |  |  |   70|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  52.9k|            parse_digits_result,
  387|  52.9k|            parse_integer_digits_with_thsep(
  388|  52.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  52.9k|                prefix_result.parsed_base, locale_options));
  390|  52.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  52.9k|            parse_digits_result;
  392|       |
  393|  52.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 706, False: 52.2k]
  ------------------
  394|    706|            if (auto e = check_thsep_grouping(
  395|    706|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    706|                    thsep_indices, locale_options.grouping);
  397|    706|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 350, False: 356]
  |  |  ------------------
  ------------------
  398|    350|                return unexpected(e);
  399|    350|            }
  400|    706|        }
  401|       |
  402|  52.6k|        auto nothsep_source_view =
  403|  52.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  52.6k|        SCN_TRY(
  ------------------
  |  |   71|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 520, False: 52.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    520|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    520|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    520|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    520|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    520|    }                                                  \
  |  |  |  |   70|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  52.0k|            nothsep_source_it,
  406|  52.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  52.0k|                                prefix_result.parsed_base));
  408|       |
  409|  52.0k|        return ranges_polyfill::batch_next(
  410|  52.0k|            prefix_result.iterator,
  411|  52.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  52.0k|                ranges::ssize(thsep_indices));
  413|  52.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   316k|    {
  335|   316k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   316k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   316k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 19.1k, False: 297k]
  ------------------
  339|  19.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  19.1k|                return unexpected_scan_error(
  341|  19.1k|                    scan_error::invalid_scanned_value,
  342|  19.1k|                    "Unexpected '-' sign when parsing an "
  343|  19.1k|                    "unsigned value");
  344|  19.1k|            }
  345|  19.1k|            else {
  346|  19.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 19.1k]
  ------------------
  347|  19.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  19.1k|            }
  353|  19.1k|        }
  354|       |
  355|   316k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 41.9k, False: 274k]
  ------------------
  356|  41.9k|            value = T{0};
  357|  41.9k|            return std::next(prefix_result.iterator);
  358|  41.9k|        }
  359|       |
  360|   274k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   274k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 215k, False: 58.9k]
  |  |  ------------------
  ------------------
  361|   215k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 346, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    346|    }                                                  \
  |  |  |  |   70|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   215k|                    parse_integer_digits_without_thsep(
  363|   215k|                        ranges::subrange{prefix_result.iterator,
  364|   215k|                                         ranges::end(range)},
  365|   215k|                        prefix_result.parsed_base));
  366|       |
  367|   215k|            auto buf = make_contiguous_buffer(
  368|   215k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   215k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 29.9k, False: 185k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.9k|    }                                                  \
  |  |  |  |   70|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   185k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   185k|                                        prefix_result.parsed_base));
  372|       |
  373|   185k|            return ranges_polyfill::batch_next(
  374|   185k|                prefix_result.iterator,
  375|   185k|                ranges::distance(buf.view().begin(), result_it));
  376|   215k|        }
  377|       |
  378|  58.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  58.9k|            localized_number_formatting_options<CharT>{loc};
  383|  58.9k|#endif
  384|       |
  385|  58.9k|        SCN_TRY(
  ------------------
  |  |   71|  58.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 5.07k, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.07k|    }                                                  \
  |  |  |  |   70|  58.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  53.9k|            parse_digits_result,
  387|  53.9k|            parse_integer_digits_with_thsep(
  388|  53.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  53.9k|                prefix_result.parsed_base, locale_options));
  390|  53.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  53.9k|            parse_digits_result;
  392|       |
  393|  53.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 728, False: 53.1k]
  ------------------
  394|    728|            if (auto e = check_thsep_grouping(
  395|    728|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    728|                    thsep_indices, locale_options.grouping);
  397|    728|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    728|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 370, False: 358]
  |  |  ------------------
  ------------------
  398|    370|                return unexpected(e);
  399|    370|            }
  400|    728|        }
  401|       |
  402|  53.5k|        auto nothsep_source_view =
  403|  53.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  53.5k|        SCN_TRY(
  ------------------
  |  |   71|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 300, False: 53.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  53.2k|            nothsep_source_it,
  406|  53.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  53.2k|                                prefix_result.parsed_base));
  408|       |
  409|  53.2k|        return ranges_polyfill::batch_next(
  410|  53.2k|            prefix_result.iterator,
  411|  53.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  53.2k|                ranges::ssize(thsep_indices));
  413|  53.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   240k|    {
  335|   240k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   240k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   240k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 5.72k, False: 234k]
  ------------------
  339|  5.72k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  5.72k|                return unexpected_scan_error(
  341|  5.72k|                    scan_error::invalid_scanned_value,
  342|  5.72k|                    "Unexpected '-' sign when parsing an "
  343|  5.72k|                    "unsigned value");
  344|  5.72k|            }
  345|  5.72k|            else {
  346|  5.72k|                if (specs.type ==
  347|  5.72k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  5.72k|                    return unexpected_scan_error(
  349|  5.72k|                        scan_error::invalid_scanned_value,
  350|  5.72k|                        "'u'-option disallows negative values");
  351|  5.72k|                }
  352|  5.72k|            }
  353|  5.72k|        }
  354|       |
  355|   234k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 34.7k, False: 200k]
  ------------------
  356|  34.7k|            value = T{0};
  357|  34.7k|            return std::next(prefix_result.iterator);
  358|  34.7k|        }
  359|       |
  360|   200k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 155k, False: 45.0k]
  |  |  ------------------
  ------------------
  361|   155k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 50, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   154k|                    parse_integer_digits_without_thsep(
  363|   154k|                        ranges::subrange{prefix_result.iterator,
  364|   154k|                                         ranges::end(range)},
  365|   154k|                        prefix_result.parsed_base));
  366|       |
  367|   154k|            auto buf = make_contiguous_buffer(
  368|   154k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   154k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.3k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.3k|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   127k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   127k|                                        prefix_result.parsed_base));
  372|       |
  373|   127k|            return ranges_polyfill::batch_next(
  374|   127k|                prefix_result.iterator,
  375|   127k|                ranges::distance(buf.view().begin(), result_it));
  376|   154k|        }
  377|       |
  378|  45.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  45.0k|            localized_number_formatting_options<CharT>{loc};
  383|  45.0k|#endif
  384|       |
  385|  45.0k|        SCN_TRY(
  ------------------
  |  |   71|  45.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.40k, False: 40.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.40k|    }                                                  \
  |  |  |  |   70|  45.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  40.6k|            parse_digits_result,
  387|  40.6k|            parse_integer_digits_with_thsep(
  388|  40.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  40.6k|                prefix_result.parsed_base, locale_options));
  390|  40.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  40.6k|            parse_digits_result;
  392|       |
  393|  40.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 542, False: 40.1k]
  ------------------
  394|    542|            if (auto e = check_thsep_grouping(
  395|    542|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    542|                    thsep_indices, locale_options.grouping);
  397|    542|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    542|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 212, False: 330]
  |  |  ------------------
  ------------------
  398|    212|                return unexpected(e);
  399|    212|            }
  400|    542|        }
  401|       |
  402|  40.4k|        auto nothsep_source_view =
  403|  40.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  40.4k|        SCN_TRY(
  ------------------
  |  |   71|  40.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 540, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    540|    }                                                  \
  |  |  |  |   70|  40.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  39.9k|            nothsep_source_it,
  406|  39.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  39.9k|                                prefix_result.parsed_base));
  408|       |
  409|  39.9k|        return ranges_polyfill::batch_next(
  410|  39.9k|            prefix_result.iterator,
  411|  39.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  39.9k|                ranges::ssize(thsep_indices));
  413|  40.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   276k|    {
  335|   276k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   276k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   276k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 5.90k, False: 271k]
  ------------------
  339|  5.90k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  5.90k|                return unexpected_scan_error(
  341|  5.90k|                    scan_error::invalid_scanned_value,
  342|  5.90k|                    "Unexpected '-' sign when parsing an "
  343|  5.90k|                    "unsigned value");
  344|  5.90k|            }
  345|  5.90k|            else {
  346|  5.90k|                if (specs.type ==
  347|  5.90k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  5.90k|                    return unexpected_scan_error(
  349|  5.90k|                        scan_error::invalid_scanned_value,
  350|  5.90k|                        "'u'-option disallows negative values");
  351|  5.90k|                }
  352|  5.90k|            }
  353|  5.90k|        }
  354|       |
  355|   271k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 38.9k, False: 232k]
  ------------------
  356|  38.9k|            value = T{0};
  357|  38.9k|            return std::next(prefix_result.iterator);
  358|  38.9k|        }
  359|       |
  360|   232k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   232k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 181k, False: 50.0k]
  |  |  ------------------
  ------------------
  361|   181k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 52, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     52|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     52|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     52|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     52|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     52|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   181k|                    parse_integer_digits_without_thsep(
  363|   181k|                        ranges::subrange{prefix_result.iterator,
  364|   181k|                                         ranges::end(range)},
  365|   181k|                        prefix_result.parsed_base));
  366|       |
  367|   181k|            auto buf = make_contiguous_buffer(
  368|   181k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   181k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.6k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.6k|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   155k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   155k|                                        prefix_result.parsed_base));
  372|       |
  373|   155k|            return ranges_polyfill::batch_next(
  374|   155k|                prefix_result.iterator,
  375|   155k|                ranges::distance(buf.view().begin(), result_it));
  376|   181k|        }
  377|       |
  378|  50.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  50.0k|            localized_number_formatting_options<CharT>{loc};
  383|  50.0k|#endif
  384|       |
  385|  50.0k|        SCN_TRY(
  ------------------
  |  |   71|  50.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  50.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  50.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.47k, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.47k|    }                                                  \
  |  |  |  |   70|  50.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  45.6k|            parse_digits_result,
  387|  45.6k|            parse_integer_digits_with_thsep(
  388|  45.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  45.6k|                prefix_result.parsed_base, locale_options));
  390|  45.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  45.6k|            parse_digits_result;
  392|       |
  393|  45.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 590, False: 45.0k]
  ------------------
  394|    590|            if (auto e = check_thsep_grouping(
  395|    590|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    590|                    thsep_indices, locale_options.grouping);
  397|    590|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 248, False: 342]
  |  |  ------------------
  ------------------
  398|    248|                return unexpected(e);
  399|    248|            }
  400|    590|        }
  401|       |
  402|  45.3k|        auto nothsep_source_view =
  403|  45.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  45.3k|        SCN_TRY(
  ------------------
  |  |   71|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 248, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    248|    }                                                  \
  |  |  |  |   70|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  45.1k|            nothsep_source_it,
  406|  45.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  45.1k|                                prefix_result.parsed_base));
  408|       |
  409|  45.1k|        return ranges_polyfill::batch_next(
  410|  45.1k|            prefix_result.iterator,
  411|  45.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  45.1k|                ranges::ssize(thsep_indices));
  413|  45.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   278k|    {
  335|   278k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   278k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   278k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.04k, False: 272k]
  ------------------
  339|  6.04k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.04k|                return unexpected_scan_error(
  341|  6.04k|                    scan_error::invalid_scanned_value,
  342|  6.04k|                    "Unexpected '-' sign when parsing an "
  343|  6.04k|                    "unsigned value");
  344|  6.04k|            }
  345|  6.04k|            else {
  346|  6.04k|                if (specs.type ==
  347|  6.04k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.04k|                    return unexpected_scan_error(
  349|  6.04k|                        scan_error::invalid_scanned_value,
  350|  6.04k|                        "'u'-option disallows negative values");
  351|  6.04k|                }
  352|  6.04k|            }
  353|  6.04k|        }
  354|       |
  355|   272k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 39.0k, False: 233k]
  ------------------
  356|  39.0k|            value = T{0};
  357|  39.0k|            return std::next(prefix_result.iterator);
  358|  39.0k|        }
  359|       |
  360|   233k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|   233k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 183k, False: 50.2k]
  |  |  ------------------
  ------------------
  361|   183k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 52, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     52|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     52|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     52|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     52|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     52|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   183k|                    parse_integer_digits_without_thsep(
  363|   183k|                        ranges::subrange{prefix_result.iterator,
  364|   183k|                                         ranges::end(range)},
  365|   183k|                        prefix_result.parsed_base));
  366|       |
  367|   183k|            auto buf = make_contiguous_buffer(
  368|   183k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   183k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26.3k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.3k|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   156k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   156k|                                        prefix_result.parsed_base));
  372|       |
  373|   156k|            return ranges_polyfill::batch_next(
  374|   156k|                prefix_result.iterator,
  375|   156k|                ranges::distance(buf.view().begin(), result_it));
  376|   183k|        }
  377|       |
  378|  50.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  50.2k|            localized_number_formatting_options<CharT>{loc};
  383|  50.2k|#endif
  384|       |
  385|  50.2k|        SCN_TRY(
  ------------------
  |  |   71|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.51k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.51k|    }                                                  \
  |  |  |  |   70|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  45.7k|            parse_digits_result,
  387|  45.7k|            parse_integer_digits_with_thsep(
  388|  45.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  45.7k|                prefix_result.parsed_base, locale_options));
  390|  45.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  45.7k|            parse_digits_result;
  392|       |
  393|  45.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 590, False: 45.1k]
  ------------------
  394|    590|            if (auto e = check_thsep_grouping(
  395|    590|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    590|                    thsep_indices, locale_options.grouping);
  397|    590|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 248, False: 342]
  |  |  ------------------
  ------------------
  398|    248|                return unexpected(e);
  399|    248|            }
  400|    590|        }
  401|       |
  402|  45.5k|        auto nothsep_source_view =
  403|  45.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  45.5k|        SCN_TRY(
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 138, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    138|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  45.3k|            nothsep_source_it,
  406|  45.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  45.3k|                                prefix_result.parsed_base));
  408|       |
  409|  45.3k|        return ranges_polyfill::batch_next(
  410|  45.3k|            prefix_result.iterator,
  411|  45.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  45.3k|                ranges::ssize(thsep_indices));
  413|  45.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   333k|{
  121|   333k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   333k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   333k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   333k|        parse_integer_base_prefix(
  126|   333k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   333k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 333k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   333k|    else {
  139|   333k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 333k]
  ------------------
  140|   333k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 292k, False: 40.8k]
  ------------------
  141|   292k|            digits_begin_it = base_prefix_begin_it;
  142|   292k|        }
  143|   333k|    }
  144|       |
  145|   333k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 333k, False: 0]
  ------------------
  146|   333k|        sign = sign_type::plus_sign;
  147|   333k|    }
  148|   333k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   333k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   333k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   333k|{
   88|   333k|    switch (base) {
   89|  40.8k|        case 2:
  ------------------
  |  Branch (89:9): [True: 40.8k, False: 292k]
  ------------------
   90|       |            // allow 0b/0B
   91|  40.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  40.8k|                    false};
   93|       |
   94|  40.8k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 40.8k, False: 292k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  40.8k|            bool zero_parsed = false;
   97|  40.8k|            auto it = apply_opt(
   98|  40.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  40.8k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  67.9k|        case 16:
  ------------------
  |  Branch (102:9): [True: 67.9k, False: 265k]
  ------------------
  103|       |            // allow 0x/0X
  104|  67.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  67.9k|                    false};
  106|       |
  107|   142k|        case 0:
  ------------------
  |  Branch (107:9): [True: 142k, False: 190k]
  ------------------
  108|       |            // detect base
  109|   142k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  252|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  40.8k|        default:
  ------------------
  |  Branch (111:9): [True: 40.8k, False: 292k]
  ------------------
  112|       |            // no base prefix allowed
  113|  40.8k|            return {ranges::begin(range), base, false};
  114|   333k|    }
  115|   333k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   183k|{
   38|   183k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  252|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   183k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   183k|{
   53|   183k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 183k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   183k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 183k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   183k|    return unexpected(parse_error::error);
   63|   183k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   210k|{
   45|   210k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   210k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   142k|{
   69|   142k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 142k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   142k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 142k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   142k|    {
   76|   142k|        bool zero_parsed{false};
   77|   142k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 142k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   142k|    }
   81|   142k|    return {ranges::begin(range), 10, false};
   82|   142k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   292k|{
  156|   292k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   292k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   292k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   292k|            return unexpected_scan_error(
  161|   292k|                scan_error::invalid_scanned_value,
  162|   292k|                "Failed to parse integer: No digits found");
  163|   292k|        }
  164|   292k|        return ranges::end(range);
  165|   292k|    }
  166|   292k|    else {
  167|   292k|        return read_while1_code_unit(
  168|   292k|                   range, [&](char_type ch)
  169|   292k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   292k|            .transform_error(map_parse_error_to_scan_error(
  171|   292k|                scan_error::invalid_scanned_value,
  172|   292k|                "Failed to parse integer: No digits found"));
  173|   292k|    }
  174|   292k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   455k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  10.2k|                return unexpected_scan_error(
  293|  10.2k|                    scan_error::invalid_scanned_value,
  294|  10.2k|                    "Unexpected '-' sign when parsing an "
  295|  10.2k|                    "unsigned value");
  296|  10.2k|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  10.2k|    {
  324|  10.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  231|  10.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  10.2k|        return read_default_with_base(range, value, 0);
  326|  10.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  10.2k|    {
  287|  10.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  10.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  10.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 10.2k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  10.2k|        }
  298|       |
  299|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 10.2k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  10.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 10.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  10.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  10.2k|                                                      ranges::end(range)},
  307|  10.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  10.2k|        auto buf = make_contiguous_buffer(
  310|  10.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  10.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  10.2k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  40.8k|{
  185|  40.8k|    std::basic_string<CharT> output;
  186|  40.8k|    std::string thsep_indices;
  187|  40.8k|    auto it = ranges::begin(range);
  188|  40.8k|    bool digit_matched = false;
  189|  40.8k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 40.8k, False: 0]
  ------------------
  190|  40.8k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 40.8k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  40.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 40.8k, False: 0]
  ------------------
  195|  40.8k|            break;
  196|  40.8k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  40.8k|    }
  202|  40.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 40.8k, False: 0]
  |  |  ------------------
  ------------------
  203|  40.8k|        return unexpected_scan_error(
  204|  40.8k|            scan_error::invalid_scanned_value,
  205|  40.8k|            "Failed to parse integer: No digits found");
  206|  40.8k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  40.8k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  40.8k|    {
  335|  40.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 40.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  40.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  40.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 40.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  40.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 40.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  40.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  40.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.0k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  34.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.2k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.6k|    {
  335|  47.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.6k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.6k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.6k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  47.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 40.8k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  40.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.0k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.0k|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.80k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.80k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.80k|            return ranges_polyfill::batch_next(
  374|  6.80k|                prefix_result.iterator,
  375|  6.80k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.6k|    {
  335|  47.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.6k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.6k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.6k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  47.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 40.8k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  40.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.0k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.0k|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.80k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.80k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.80k|            return ranges_polyfill::batch_next(
  374|  6.80k|                prefix_result.iterator,
  375|  6.80k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  40.8k|    {
  335|  40.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 40.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  40.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  40.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 40.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  40.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 40.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  40.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  40.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 34.0k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  34.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 27.2k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      4|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      4|                                        prefix_result.parsed_base));
  372|       |
  373|      4|            return ranges_polyfill::batch_next(
  374|      4|                prefix_result.iterator,
  375|      4|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.6k|    {
  335|  47.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.6k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.6k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.6k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  47.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 40.8k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  40.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.0k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.0k|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.80k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.80k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.80k|            return ranges_polyfill::batch_next(
  374|  6.80k|                prefix_result.iterator,
  375|  6.80k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.6k|    {
  335|  47.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.6k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.6k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.6k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  156|  47.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 40.8k, False: 6.80k]
  |  |  ------------------
  ------------------
  361|  40.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.0k, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.0k|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  6.80k|                    parse_integer_digits_without_thsep(
  363|  6.80k|                        ranges::subrange{prefix_result.iterator,
  364|  6.80k|                                         ranges::end(range)},
  365|  6.80k|                        prefix_result.parsed_base));
  366|       |
  367|  6.80k|            auto buf = make_contiguous_buffer(
  368|  6.80k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  6.80k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 6.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  6.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  6.80k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  6.80k|                                        prefix_result.parsed_base));
  372|       |
  373|  6.80k|            return ranges_polyfill::batch_next(
  374|  6.80k|                prefix_result.iterator,
  375|  6.80k|                ranges::distance(buf.view().begin(), result_it));
  376|  6.80k|        }
  377|       |
  378|  6.80k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  6.80k|            localized_number_formatting_options<CharT>{loc};
  383|  6.80k|#endif
  384|       |
  385|  6.80k|        SCN_TRY(
  ------------------
  |  |   71|  6.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.80k|    }                                                  \
  |  |  |  |   70|  6.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.48M|{
   69|  2.48M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.48M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.31M, False: 177k]
  ------------------
   71|  2.31M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.31M, False: 0]
  ------------------
   72|  2.31M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.31M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.31M|    }
   76|       |
   77|   177k|    auto& it = *r;
   78|   177k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 134k, False: 43.2k]
  ------------------
   79|   134k|        return std::pair{it, sign_type::minus_sign};
   80|   134k|    }
   81|  43.2k|    return std::pair{it, sign_type::plus_sign};
   82|   177k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  23.6M|{
   51|  23.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  23.6M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.57k|{
  140|  4.57k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  246|  4.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  4.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.57k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.16k, False: 2.40k]
  ------------------
  143|  2.16k|        SCN_UNLIKELY_ATTR
  144|  2.16k|        return {scan_error::invalid_scanned_value,
  145|  2.16k|                "Invalid thousands separator grouping"};
  146|  2.16k|    }
  147|       |
  148|  2.40k|    return {};
  149|  4.57k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.57k|{
  101|  4.57k|    transform_thsep_indices(
  102|  4.57k|        thsep_indices,
  103|  4.57k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.57k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.57k|    for (auto grouping_it = grouping.begin();
  107|  4.57k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.57k]
  |  Branch (107:10): [True: 0, False: 4.57k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.57k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.57k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.57k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  58.0k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 54.4k, False: 3.59k]
  ------------------
  119|  54.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 982, False: 53.5k]
  ------------------
  120|    982|            return false;
  121|    982|        }
  122|  54.4k|    }
  123|       |
  124|  3.59k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.59k, False: 0]
  ------------------
  125|  3.59k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.18k, False: 2.40k]
  ------------------
  126|  1.18k|            return false;
  127|  1.18k|        }
  128|  3.59k|    }
  129|       |
  130|  2.40k|    SCN_CLANG_POP
  131|       |
  132|  2.40k|    return true;
  133|  3.59k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  8.36k|{
   87|   131k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 122k, False: 8.36k]
  ------------------
   88|   122k|         ++thsep_it) {
   89|   122k|        const auto tmp = *thsep_it;
   90|   122k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   122k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   122k|    }
   93|  8.36k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  8.36k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   193k|{
   69|   193k|    auto r = read_one_of_code_unit(range, "+-");
   70|   193k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 193k, False: 0]
  ------------------
   71|   193k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 193k, False: 0]
  ------------------
   72|   193k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   193k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   193k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.29M|{
   69|  2.29M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.29M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.16M, False: 132k]
  ------------------
   71|  2.16M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.16M, False: 0]
  ------------------
   72|  2.16M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.16M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.16M|    }
   76|       |
   77|   132k|    auto& it = *r;
   78|   132k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 93.2k, False: 38.8k]
  ------------------
   79|  93.2k|        return std::pair{it, sign_type::minus_sign};
   80|  93.2k|    }
   81|  38.8k|    return std::pair{it, sign_type::plus_sign};
   82|   132k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  11.8M|{
   55|  11.8M|#if WCHAR_MIN < 0
   56|  11.8M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 11.8M, False: 29.9k]
  |  Branch (56:20): [True: 11.5M, False: 318k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  11.5M|        return char_to_int(static_cast<char>(ch));
   61|  11.5M|    }
   62|   348k|    return 255;
   63|  11.8M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  3.79k|{
  140|  3.79k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  246|  3.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  3.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  3.79k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.72k, False: 2.07k]
  ------------------
  143|  1.72k|        SCN_UNLIKELY_ATTR
  144|  1.72k|        return {scan_error::invalid_scanned_value,
  145|  1.72k|                "Invalid thousands separator grouping"};
  146|  1.72k|    }
  147|       |
  148|  2.07k|    return {};
  149|  3.79k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  3.79k|{
  101|  3.79k|    transform_thsep_indices(
  102|  3.79k|        thsep_indices,
  103|  3.79k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  3.79k|    auto thsep_it = thsep_indices.rbegin();
  106|  3.79k|    for (auto grouping_it = grouping.begin();
  107|  3.79k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 3.79k]
  |  Branch (107:10): [True: 0, False: 3.79k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  3.79k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  3.79k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  3.79k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  46.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 43.7k, False: 3.12k]
  ------------------
  119|  43.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 672, False: 43.1k]
  ------------------
  120|    672|            return false;
  121|    672|        }
  122|  43.7k|    }
  123|       |
  124|  3.12k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.12k, False: 0]
  ------------------
  125|  3.12k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.05k, False: 2.07k]
  ------------------
  126|  1.05k|            return false;
  127|  1.05k|        }
  128|  3.12k|    }
  129|       |
  130|  2.07k|    SCN_CLANG_POP
  131|       |
  132|  2.07k|    return true;
  133|  3.12k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   333k|{
   69|   333k|    auto r = read_one_of_code_unit(range, "+-");
   70|   333k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 333k, False: 0]
  ------------------
   71|   333k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 333k, False: 0]
  ------------------
   72|   333k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   333k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   333k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   110k|    {
  122|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   110k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   110k|                          basic_contiguous_scan_context<char_type>>) {
  126|   110k|            auto rd = make_reader<T, char_type>();
  127|   110k|            return impl(rd, range, value);
  128|   110k|        }
  129|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   110k|            auto rd = make_reader<T, char_type>();
  131|   110k|            if (!is_segment_contiguous(range)) {
  132|   110k|                return impl(rd, range, value);
  133|   110k|            }
  134|   110k|            auto crange = get_as_contiguous(range);
  135|   110k|            SCN_TRY(it, impl(rd, crange, value));
  136|   110k|            return ranges_polyfill::batch_next(
  137|   110k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   110k|        }
  139|   110k|        else {
  140|   110k|            SCN_EXPECT(false);
  141|   110k|            SCN_UNREACHABLE;
  142|   110k|        }
  143|   110k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   110k|    {
  112|   110k|        SCN_TRY(it,
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.00k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.00k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   109k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   109k|                    .transform_error(make_eof_scan_error));
  115|   109k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   109k|                               loc);
  117|   110k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.51M|{
   43|  2.51M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 20.1k, False: 2.49M]
  |  |  ------------------
  ------------------
   44|  20.1k|        return unexpected(e);
   45|  20.1k|    }
   46|       |
   47|  2.49M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.49M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.49M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.49M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   128k|    {
  122|   128k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   128k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   128k|                          basic_contiguous_scan_context<char_type>>) {
  126|   128k|            auto rd = make_reader<T, char_type>();
  127|   128k|            return impl(rd, range, value);
  128|   128k|        }
  129|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   128k|            auto rd = make_reader<T, char_type>();
  131|   128k|            if (!is_segment_contiguous(range)) {
  132|   128k|                return impl(rd, range, value);
  133|   128k|            }
  134|   128k|            auto crange = get_as_contiguous(range);
  135|   128k|            SCN_TRY(it, impl(rd, crange, value));
  136|   128k|            return ranges_polyfill::batch_next(
  137|   128k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   128k|        }
  139|   128k|        else {
  140|   128k|            SCN_EXPECT(false);
  141|   128k|            SCN_UNREACHABLE;
  142|   128k|        }
  143|   128k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   128k|    {
  112|   128k|        SCN_TRY(it,
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.37k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.37k|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   127k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   127k|                    .transform_error(make_eof_scan_error));
  115|   127k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   127k|                               loc);
  117|   128k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   130k|    {
  122|   130k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   130k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   130k|                          basic_contiguous_scan_context<char_type>>) {
  126|   130k|            auto rd = make_reader<T, char_type>();
  127|   130k|            return impl(rd, range, value);
  128|   130k|        }
  129|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   130k|            auto rd = make_reader<T, char_type>();
  131|   130k|            if (!is_segment_contiguous(range)) {
  132|   130k|                return impl(rd, range, value);
  133|   130k|            }
  134|   130k|            auto crange = get_as_contiguous(range);
  135|   130k|            SCN_TRY(it, impl(rd, crange, value));
  136|   130k|            return ranges_polyfill::batch_next(
  137|   130k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   130k|        }
  139|   130k|        else {
  140|   130k|            SCN_EXPECT(false);
  141|   130k|            SCN_UNREACHABLE;
  142|   130k|        }
  143|   130k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   130k|    {
  112|   130k|        SCN_TRY(it,
  ------------------
  |  |   71|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.48k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   129k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   129k|                    .transform_error(make_eof_scan_error));
  115|   129k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   129k|                               loc);
  117|   130k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|  99.7k|    {
  122|  99.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  99.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  99.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  99.7k|            auto rd = make_reader<T, char_type>();
  127|  99.7k|            return impl(rd, range, value);
  128|  99.7k|        }
  129|  99.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  99.7k|            auto rd = make_reader<T, char_type>();
  131|  99.7k|            if (!is_segment_contiguous(range)) {
  132|  99.7k|                return impl(rd, range, value);
  133|  99.7k|            }
  134|  99.7k|            auto crange = get_as_contiguous(range);
  135|  99.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  99.7k|            return ranges_polyfill::batch_next(
  137|  99.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  99.7k|        }
  139|  99.7k|        else {
  140|  99.7k|            SCN_EXPECT(false);
  141|  99.7k|            SCN_UNREACHABLE;
  142|  99.7k|        }
  143|  99.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  99.7k|    {
  112|  99.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  99.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 798, False: 98.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    798|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    798|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    798|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    798|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    798|    }                                                  \
  |  |  |  |   70|  99.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  98.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  98.9k|                    .transform_error(make_eof_scan_error));
  115|  98.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  98.9k|                               loc);
  117|  99.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   111k|    {
  122|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   111k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   111k|                          basic_contiguous_scan_context<char_type>>) {
  126|   111k|            auto rd = make_reader<T, char_type>();
  127|   111k|            return impl(rd, range, value);
  128|   111k|        }
  129|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   111k|            auto rd = make_reader<T, char_type>();
  131|   111k|            if (!is_segment_contiguous(range)) {
  132|   111k|                return impl(rd, range, value);
  133|   111k|            }
  134|   111k|            auto crange = get_as_contiguous(range);
  135|   111k|            SCN_TRY(it, impl(rd, crange, value));
  136|   111k|            return ranges_polyfill::batch_next(
  137|   111k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   111k|        }
  139|   111k|        else {
  140|   111k|            SCN_EXPECT(false);
  141|   111k|            SCN_UNREACHABLE;
  142|   111k|        }
  143|   111k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   111k|    {
  112|   111k|        SCN_TRY(it,
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.01k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   110k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   110k|                    .transform_error(make_eof_scan_error));
  115|   110k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   110k|                               loc);
  117|   111k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   111k|    {
  122|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   111k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   111k|                          basic_contiguous_scan_context<char_type>>) {
  126|   111k|            auto rd = make_reader<T, char_type>();
  127|   111k|            return impl(rd, range, value);
  128|   111k|        }
  129|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   111k|            auto rd = make_reader<T, char_type>();
  131|   111k|            if (!is_segment_contiguous(range)) {
  132|   111k|                return impl(rd, range, value);
  133|   111k|            }
  134|   111k|            auto crange = get_as_contiguous(range);
  135|   111k|            SCN_TRY(it, impl(rd, crange, value));
  136|   111k|            return ranges_polyfill::batch_next(
  137|   111k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   111k|        }
  139|   111k|        else {
  140|   111k|            SCN_EXPECT(false);
  141|   111k|            SCN_UNREACHABLE;
  142|   111k|        }
  143|   111k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   111k|    {
  112|   111k|        SCN_TRY(it,
  ------------------
  |  |   71|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.07k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   110k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   110k|                    .transform_error(make_eof_scan_error));
  115|   110k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   110k|                               loc);
  117|   111k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   193k|{
   43|   193k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 22, False: 193k]
  |  |  ------------------
  ------------------
   44|     22|        return unexpected(e);
   45|     22|    }
   46|       |
   47|   193k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 193k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   193k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   193k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  5.79k|    {
  122|  5.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  5.79k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  5.79k|            auto rd = make_reader<T, char_type>();
  127|  5.79k|            return impl(rd, range, value);
  128|  5.79k|        }
  129|  5.79k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.79k|            auto rd = make_reader<T, char_type>();
  131|  5.79k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 5.79k, False: 0]
  ------------------
  132|  5.79k|                return impl(rd, range, value);
  133|  5.79k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  5.79k|        else {
  140|  5.79k|            SCN_EXPECT(false);
  141|  5.79k|            SCN_UNREACHABLE;
  142|  5.79k|        }
  143|  5.79k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  5.79k|    {
  112|  5.79k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3, False: 5.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.79k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  5.79k|                    .transform_error(make_eof_scan_error));
  115|  5.79k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  5.79k|                               loc);
  117|  5.79k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   269k|    {
  223|   269k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   269k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   269k|                          basic_contiguous_scan_context<char_type>>) {
  227|   269k|            auto rd = make_reader<T, char_type>();
  228|   269k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 269k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   269k|            return impl(rd, range, value);
  233|   269k|        }
  234|   269k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   269k|            auto rd = make_reader<T, char_type>();
  236|   269k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   269k|                return unexpected(e);
  238|   269k|            }
  239|       |
  240|   269k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   269k|                return impl(rd, range, value);
  242|   269k|            }
  243|       |
  244|   269k|            auto crange = get_as_contiguous(range);
  245|   269k|            SCN_TRY(it, impl(rd, crange, value));
  246|   269k|            return ranges_polyfill::batch_next(
  247|   269k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   269k|        }
  249|   269k|        else {
  250|   269k|            SCN_EXPECT(false);
  251|   269k|            SCN_UNREACHABLE;
  252|   269k|        }
  253|   269k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   269k|    {
  205|   269k|        SCN_TRY(it,
  ------------------
  |  |   71|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.83k, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.83k|    }                                                  \
  |  |  |  |   70|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   267k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   267k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   267k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   267k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 267k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   267k|        return rd.read_specs(subr, specs, value, loc);
  218|   267k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   347k|    {
  223|   347k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   347k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   347k|                          basic_contiguous_scan_context<char_type>>) {
  227|   347k|            auto rd = make_reader<T, char_type>();
  228|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   347k|            return impl(rd, range, value);
  233|   347k|        }
  234|   347k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   347k|            auto rd = make_reader<T, char_type>();
  236|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   347k|                return unexpected(e);
  238|   347k|            }
  239|       |
  240|   347k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   347k|                return impl(rd, range, value);
  242|   347k|            }
  243|       |
  244|   347k|            auto crange = get_as_contiguous(range);
  245|   347k|            SCN_TRY(it, impl(rd, crange, value));
  246|   347k|            return ranges_polyfill::batch_next(
  247|   347k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   347k|        }
  249|   347k|        else {
  250|   347k|            SCN_EXPECT(false);
  251|   347k|            SCN_UNREACHABLE;
  252|   347k|        }
  253|   347k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   347k|    {
  205|   347k|        SCN_TRY(it,
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.17k, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.17k|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   343k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   343k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   343k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   343k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 343k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   343k|        return rd.read_specs(subr, specs, value, loc);
  218|   343k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   354k|    {
  223|   354k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   354k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   354k|                          basic_contiguous_scan_context<char_type>>) {
  227|   354k|            auto rd = make_reader<T, char_type>();
  228|   354k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   354k|            return impl(rd, range, value);
  233|   354k|        }
  234|   354k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   354k|            auto rd = make_reader<T, char_type>();
  236|   354k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   354k|                return unexpected(e);
  238|   354k|            }
  239|       |
  240|   354k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   354k|                return impl(rd, range, value);
  242|   354k|            }
  243|       |
  244|   354k|            auto crange = get_as_contiguous(range);
  245|   354k|            SCN_TRY(it, impl(rd, crange, value));
  246|   354k|            return ranges_polyfill::batch_next(
  247|   354k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   354k|        }
  249|   354k|        else {
  250|   354k|            SCN_EXPECT(false);
  251|   354k|            SCN_UNREACHABLE;
  252|   354k|        }
  253|   354k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   354k|    {
  205|   354k|        SCN_TRY(it,
  ------------------
  |  |   71|   354k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   354k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   354k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.51k, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.51k|    }                                                  \
  |  |  |  |   70|   354k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   349k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   349k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   349k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   349k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 349k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   349k|        return rd.read_specs(subr, specs, value, loc);
  218|   349k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   256k|    {
  223|   256k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   256k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   256k|                          basic_contiguous_scan_context<char_type>>) {
  227|   256k|            auto rd = make_reader<T, char_type>();
  228|   256k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   256k|            return impl(rd, range, value);
  233|   256k|        }
  234|   256k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   256k|            auto rd = make_reader<T, char_type>();
  236|   256k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   256k|                return unexpected(e);
  238|   256k|            }
  239|       |
  240|   256k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   256k|                return impl(rd, range, value);
  242|   256k|            }
  243|       |
  244|   256k|            auto crange = get_as_contiguous(range);
  245|   256k|            SCN_TRY(it, impl(rd, crange, value));
  246|   256k|            return ranges_polyfill::batch_next(
  247|   256k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   256k|        }
  249|   256k|        else {
  250|   256k|            SCN_EXPECT(false);
  251|   256k|            SCN_UNREACHABLE;
  252|   256k|        }
  253|   256k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   256k|    {
  205|   256k|        SCN_TRY(it,
  ------------------
  |  |   71|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.25k, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.25k|    }                                                  \
  |  |  |  |   70|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   254k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   254k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   254k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   254k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 254k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   254k|        return rd.read_specs(subr, specs, value, loc);
  218|   254k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   296k|    {
  223|   296k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   296k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   296k|                          basic_contiguous_scan_context<char_type>>) {
  227|   296k|            auto rd = make_reader<T, char_type>();
  228|   296k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 296k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   296k|            return impl(rd, range, value);
  233|   296k|        }
  234|   296k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   296k|            auto rd = make_reader<T, char_type>();
  236|   296k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   296k|                return unexpected(e);
  238|   296k|            }
  239|       |
  240|   296k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   296k|                return impl(rd, range, value);
  242|   296k|            }
  243|       |
  244|   296k|            auto crange = get_as_contiguous(range);
  245|   296k|            SCN_TRY(it, impl(rd, crange, value));
  246|   296k|            return ranges_polyfill::batch_next(
  247|   296k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   296k|        }
  249|   296k|        else {
  250|   296k|            SCN_EXPECT(false);
  251|   296k|            SCN_UNREACHABLE;
  252|   296k|        }
  253|   296k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   296k|    {
  205|   296k|        SCN_TRY(it,
  ------------------
  |  |   71|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.00k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.00k|    }                                                  \
  |  |  |  |   70|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   293k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   293k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   293k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   293k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 293k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   293k|        return rd.read_specs(subr, specs, value, loc);
  218|   293k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   298k|    {
  223|   298k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   298k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   298k|                          basic_contiguous_scan_context<char_type>>) {
  227|   298k|            auto rd = make_reader<T, char_type>();
  228|   298k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 298k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   298k|            return impl(rd, range, value);
  233|   298k|        }
  234|   298k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   298k|            auto rd = make_reader<T, char_type>();
  236|   298k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   298k|                return unexpected(e);
  238|   298k|            }
  239|       |
  240|   298k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   298k|                return impl(rd, range, value);
  242|   298k|            }
  243|       |
  244|   298k|            auto crange = get_as_contiguous(range);
  245|   298k|            SCN_TRY(it, impl(rd, crange, value));
  246|   298k|            return ranges_polyfill::batch_next(
  247|   298k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   298k|        }
  249|   298k|        else {
  250|   298k|            SCN_EXPECT(false);
  251|   298k|            SCN_UNREACHABLE;
  252|   298k|        }
  253|   298k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   298k|    {
  205|   298k|        SCN_TRY(it,
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.18k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.18k|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   295k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   295k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   295k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   295k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 295k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   295k|        return rd.read_specs(subr, specs, value, loc);
  218|   295k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  23.1k|    {
  223|  23.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  23.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  23.1k|            auto rd = make_reader<T, char_type>();
  228|  23.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  23.1k|                return unexpected(e);
  230|  23.1k|            }
  231|       |
  232|  23.1k|            return impl(rd, range, value);
  233|  23.1k|        }
  234|  23.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  23.1k|            auto rd = make_reader<T, char_type>();
  236|  23.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 23.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  23.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 23.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  23.1k|                return impl(rd, range, value);
  242|  23.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  23.1k|        else {
  250|  23.1k|            SCN_EXPECT(false);
  251|  23.1k|            SCN_UNREACHABLE;
  252|  23.1k|        }
  253|  23.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  23.1k|    {
  205|  23.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 14, False: 23.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     14|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  23.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  23.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  23.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  23.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 23.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  23.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  23.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  27.0k|    {
  223|  27.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  27.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  27.0k|            auto rd = make_reader<T, char_type>();
  228|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  27.0k|                return unexpected(e);
  230|  27.0k|            }
  231|       |
  232|  27.0k|            return impl(rd, range, value);
  233|  27.0k|        }
  234|  27.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  27.0k|            auto rd = make_reader<T, char_type>();
  236|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  27.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 27.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  27.0k|                return impl(rd, range, value);
  242|  27.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  27.0k|        else {
  250|  27.0k|            SCN_EXPECT(false);
  251|  27.0k|            SCN_UNREACHABLE;
  252|  27.0k|        }
  253|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  27.0k|    {
  205|  27.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  27.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  27.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  27.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  27.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 27.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  27.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  27.0k|    {
  223|  27.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  27.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  27.0k|            auto rd = make_reader<T, char_type>();
  228|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  27.0k|                return unexpected(e);
  230|  27.0k|            }
  231|       |
  232|  27.0k|            return impl(rd, range, value);
  233|  27.0k|        }
  234|  27.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  27.0k|            auto rd = make_reader<T, char_type>();
  236|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  27.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 27.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  27.0k|                return impl(rd, range, value);
  242|  27.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  27.0k|        else {
  250|  27.0k|            SCN_EXPECT(false);
  251|  27.0k|            SCN_UNREACHABLE;
  252|  27.0k|        }
  253|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  27.0k|    {
  205|  27.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  27.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  27.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  27.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  27.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 27.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  27.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  27.0k|    {
  223|  27.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  27.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  27.0k|            auto rd = make_reader<T, char_type>();
  228|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  27.0k|                return unexpected(e);
  230|  27.0k|            }
  231|       |
  232|  27.0k|            return impl(rd, range, value);
  233|  27.0k|        }
  234|  27.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  27.0k|            auto rd = make_reader<T, char_type>();
  236|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  27.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 27.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  27.0k|                return impl(rd, range, value);
  242|  27.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  27.0k|        else {
  250|  27.0k|            SCN_EXPECT(false);
  251|  27.0k|            SCN_UNREACHABLE;
  252|  27.0k|        }
  253|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  27.0k|    {
  205|  27.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  27.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  27.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  27.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  27.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 27.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  27.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  27.0k|    {
  223|  27.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  27.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  27.0k|            auto rd = make_reader<T, char_type>();
  228|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  27.0k|                return unexpected(e);
  230|  27.0k|            }
  231|       |
  232|  27.0k|            return impl(rd, range, value);
  233|  27.0k|        }
  234|  27.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  27.0k|            auto rd = make_reader<T, char_type>();
  236|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  27.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 27.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  27.0k|                return impl(rd, range, value);
  242|  27.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  27.0k|        else {
  250|  27.0k|            SCN_EXPECT(false);
  251|  27.0k|            SCN_UNREACHABLE;
  252|  27.0k|        }
  253|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  27.0k|    {
  205|  27.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  27.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  27.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  27.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  27.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 27.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  27.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  27.0k|    {
  223|  27.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  27.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  27.0k|            auto rd = make_reader<T, char_type>();
  228|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  27.0k|                return unexpected(e);
  230|  27.0k|            }
  231|       |
  232|  27.0k|            return impl(rd, range, value);
  233|  27.0k|        }
  234|  27.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  27.0k|            auto rd = make_reader<T, char_type>();
  236|  27.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  27.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 27.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  27.0k|                return impl(rd, range, value);
  242|  27.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  27.0k|        else {
  250|  27.0k|            SCN_EXPECT(false);
  251|  27.0k|            SCN_UNREACHABLE;
  252|  27.0k|        }
  253|  27.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  27.0k|    {
  205|  27.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 18, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  27.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  27.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  27.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  27.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 27.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  27.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  27.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   100k|    {
  122|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   100k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   100k|                          basic_contiguous_scan_context<char_type>>) {
  126|   100k|            auto rd = make_reader<T, char_type>();
  127|   100k|            return impl(rd, range, value);
  128|   100k|        }
  129|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   100k|            auto rd = make_reader<T, char_type>();
  131|   100k|            if (!is_segment_contiguous(range)) {
  132|   100k|                return impl(rd, range, value);
  133|   100k|            }
  134|   100k|            auto crange = get_as_contiguous(range);
  135|   100k|            SCN_TRY(it, impl(rd, crange, value));
  136|   100k|            return ranges_polyfill::batch_next(
  137|   100k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   100k|        }
  139|   100k|        else {
  140|   100k|            SCN_EXPECT(false);
  141|   100k|            SCN_UNREACHABLE;
  142|   100k|        }
  143|   100k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   100k|    {
  112|   100k|        SCN_TRY(it,
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.08k, False: 99.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  99.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  99.4k|                    .transform_error(make_eof_scan_error));
  115|  99.4k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  99.4k|                               loc);
  117|   100k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.32M|{
   43|  2.32M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 21.1k, False: 2.30M]
  |  |  ------------------
  ------------------
   44|  21.1k|        return unexpected(e);
   45|  21.1k|    }
   46|       |
   47|  2.30M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.30M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.30M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.30M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   115k|    {
  122|   115k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   115k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   115k|                          basic_contiguous_scan_context<char_type>>) {
  126|   115k|            auto rd = make_reader<T, char_type>();
  127|   115k|            return impl(rd, range, value);
  128|   115k|        }
  129|   115k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   115k|            auto rd = make_reader<T, char_type>();
  131|   115k|            if (!is_segment_contiguous(range)) {
  132|   115k|                return impl(rd, range, value);
  133|   115k|            }
  134|   115k|            auto crange = get_as_contiguous(range);
  135|   115k|            SCN_TRY(it, impl(rd, crange, value));
  136|   115k|            return ranges_polyfill::batch_next(
  137|   115k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   115k|        }
  139|   115k|        else {
  140|   115k|            SCN_EXPECT(false);
  141|   115k|            SCN_UNREACHABLE;
  142|   115k|        }
  143|   115k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   115k|    {
  112|   115k|        SCN_TRY(it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.45k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.45k|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   113k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   113k|                    .transform_error(make_eof_scan_error));
  115|   113k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   113k|                               loc);
  117|   115k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   117k|    {
  122|   117k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   117k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   117k|                          basic_contiguous_scan_context<char_type>>) {
  126|   117k|            auto rd = make_reader<T, char_type>();
  127|   117k|            return impl(rd, range, value);
  128|   117k|        }
  129|   117k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   117k|            auto rd = make_reader<T, char_type>();
  131|   117k|            if (!is_segment_contiguous(range)) {
  132|   117k|                return impl(rd, range, value);
  133|   117k|            }
  134|   117k|            auto crange = get_as_contiguous(range);
  135|   117k|            SCN_TRY(it, impl(rd, crange, value));
  136|   117k|            return ranges_polyfill::batch_next(
  137|   117k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   117k|        }
  139|   117k|        else {
  140|   117k|            SCN_EXPECT(false);
  141|   117k|            SCN_UNREACHABLE;
  142|   117k|        }
  143|   117k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   117k|    {
  112|   117k|        SCN_TRY(it,
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.56k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.56k|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   115k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   115k|                    .transform_error(make_eof_scan_error));
  115|   115k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   115k|                               loc);
  117|   117k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|  92.0k|    {
  122|  92.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  92.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  92.0k|                          basic_contiguous_scan_context<char_type>>) {
  126|  92.0k|            auto rd = make_reader<T, char_type>();
  127|  92.0k|            return impl(rd, range, value);
  128|  92.0k|        }
  129|  92.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  92.0k|            auto rd = make_reader<T, char_type>();
  131|  92.0k|            if (!is_segment_contiguous(range)) {
  132|  92.0k|                return impl(rd, range, value);
  133|  92.0k|            }
  134|  92.0k|            auto crange = get_as_contiguous(range);
  135|  92.0k|            SCN_TRY(it, impl(rd, crange, value));
  136|  92.0k|            return ranges_polyfill::batch_next(
  137|  92.0k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  92.0k|        }
  139|  92.0k|        else {
  140|  92.0k|            SCN_EXPECT(false);
  141|  92.0k|            SCN_UNREACHABLE;
  142|  92.0k|        }
  143|  92.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  92.0k|    {
  112|  92.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  92.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  92.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 867, False: 91.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    867|    }                                                  \
  |  |  |  |   70|  92.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  91.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  91.2k|                    .transform_error(make_eof_scan_error));
  115|  91.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  91.2k|                               loc);
  117|  92.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   103k|    {
  122|   103k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   103k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   103k|                          basic_contiguous_scan_context<char_type>>) {
  126|   103k|            auto rd = make_reader<T, char_type>();
  127|   103k|            return impl(rd, range, value);
  128|   103k|        }
  129|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   103k|            auto rd = make_reader<T, char_type>();
  131|   103k|            if (!is_segment_contiguous(range)) {
  132|   103k|                return impl(rd, range, value);
  133|   103k|            }
  134|   103k|            auto crange = get_as_contiguous(range);
  135|   103k|            SCN_TRY(it, impl(rd, crange, value));
  136|   103k|            return ranges_polyfill::batch_next(
  137|   103k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   103k|        }
  139|   103k|        else {
  140|   103k|            SCN_EXPECT(false);
  141|   103k|            SCN_UNREACHABLE;
  142|   103k|        }
  143|   103k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   103k|    {
  112|   103k|        SCN_TRY(it,
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.08k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   101k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   101k|                    .transform_error(make_eof_scan_error));
  115|   101k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   101k|                               loc);
  117|   103k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   103k|    {
  122|   103k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   103k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   103k|                          basic_contiguous_scan_context<char_type>>) {
  126|   103k|            auto rd = make_reader<T, char_type>();
  127|   103k|            return impl(rd, range, value);
  128|   103k|        }
  129|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   103k|            auto rd = make_reader<T, char_type>();
  131|   103k|            if (!is_segment_contiguous(range)) {
  132|   103k|                return impl(rd, range, value);
  133|   103k|            }
  134|   103k|            auto crange = get_as_contiguous(range);
  135|   103k|            SCN_TRY(it, impl(rd, crange, value));
  136|   103k|            return ranges_polyfill::batch_next(
  137|   103k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   103k|        }
  139|   103k|        else {
  140|   103k|            SCN_EXPECT(false);
  141|   103k|            SCN_UNREACHABLE;
  142|   103k|        }
  143|   103k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   103k|    {
  112|   103k|        SCN_TRY(it,
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 1.14k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   102k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   102k|                    .transform_error(make_eof_scan_error));
  115|   102k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   102k|                               loc);
  117|   103k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   250k|    {
  223|   250k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   250k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   250k|                          basic_contiguous_scan_context<char_type>>) {
  227|   250k|            auto rd = make_reader<T, char_type>();
  228|   250k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   250k|            return impl(rd, range, value);
  233|   250k|        }
  234|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   250k|            auto rd = make_reader<T, char_type>();
  236|   250k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   250k|                return unexpected(e);
  238|   250k|            }
  239|       |
  240|   250k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   250k|                return impl(rd, range, value);
  242|   250k|            }
  243|       |
  244|   250k|            auto crange = get_as_contiguous(range);
  245|   250k|            SCN_TRY(it, impl(rd, crange, value));
  246|   250k|            return ranges_polyfill::batch_next(
  247|   250k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   250k|        }
  249|   250k|        else {
  250|   250k|            SCN_EXPECT(false);
  251|   250k|            SCN_UNREACHABLE;
  252|   250k|        }
  253|   250k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   250k|    {
  205|   250k|        SCN_TRY(it,
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.13k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.13k|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   247k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   247k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   247k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   247k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 247k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   247k|        return rd.read_specs(subr, specs, value, loc);
  218|   247k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   316k|    {
  223|   316k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   316k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   316k|                          basic_contiguous_scan_context<char_type>>) {
  227|   316k|            auto rd = make_reader<T, char_type>();
  228|   316k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   316k|            return impl(rd, range, value);
  233|   316k|        }
  234|   316k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   316k|            auto rd = make_reader<T, char_type>();
  236|   316k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   316k|                return unexpected(e);
  238|   316k|            }
  239|       |
  240|   316k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   316k|                return impl(rd, range, value);
  242|   316k|            }
  243|       |
  244|   316k|            auto crange = get_as_contiguous(range);
  245|   316k|            SCN_TRY(it, impl(rd, crange, value));
  246|   316k|            return ranges_polyfill::batch_next(
  247|   316k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   316k|        }
  249|   316k|        else {
  250|   316k|            SCN_EXPECT(false);
  251|   316k|            SCN_UNREACHABLE;
  252|   316k|        }
  253|   316k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   316k|    {
  205|   316k|        SCN_TRY(it,
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.48k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.48k|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   311k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   311k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   311k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   311k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 311k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   311k|        return rd.read_specs(subr, specs, value, loc);
  218|   311k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   321k|    {
  223|   321k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   321k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   321k|                          basic_contiguous_scan_context<char_type>>) {
  227|   321k|            auto rd = make_reader<T, char_type>();
  228|   321k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   321k|            return impl(rd, range, value);
  233|   321k|        }
  234|   321k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   321k|            auto rd = make_reader<T, char_type>();
  236|   321k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   321k|                return unexpected(e);
  238|   321k|            }
  239|       |
  240|   321k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   321k|                return impl(rd, range, value);
  242|   321k|            }
  243|       |
  244|   321k|            auto crange = get_as_contiguous(range);
  245|   321k|            SCN_TRY(it, impl(rd, crange, value));
  246|   321k|            return ranges_polyfill::batch_next(
  247|   321k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   321k|        }
  249|   321k|        else {
  250|   321k|            SCN_EXPECT(false);
  251|   321k|            SCN_UNREACHABLE;
  252|   321k|        }
  253|   321k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   321k|    {
  205|   321k|        SCN_TRY(it,
  ------------------
  |  |   71|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 4.81k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.81k|    }                                                  \
  |  |  |  |   70|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   316k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   316k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   316k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   316k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 316k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   316k|        return rd.read_specs(subr, specs, value, loc);
  218|   316k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   243k|    {
  223|   243k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   243k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   243k|                          basic_contiguous_scan_context<char_type>>) {
  227|   243k|            auto rd = make_reader<T, char_type>();
  228|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   243k|            return impl(rd, range, value);
  233|   243k|        }
  234|   243k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   243k|            auto rd = make_reader<T, char_type>();
  236|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   243k|                return unexpected(e);
  238|   243k|            }
  239|       |
  240|   243k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   243k|                return impl(rd, range, value);
  242|   243k|            }
  243|       |
  244|   243k|            auto crange = get_as_contiguous(range);
  245|   243k|            SCN_TRY(it, impl(rd, crange, value));
  246|   243k|            return ranges_polyfill::batch_next(
  247|   243k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   243k|        }
  249|   243k|        else {
  250|   243k|            SCN_EXPECT(false);
  251|   243k|            SCN_UNREACHABLE;
  252|   243k|        }
  253|   243k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   243k|    {
  205|   243k|        SCN_TRY(it,
  ------------------
  |  |   71|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 2.53k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.53k|    }                                                  \
  |  |  |  |   70|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   240k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   240k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   240k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   240k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 240k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   240k|        return rd.read_specs(subr, specs, value, loc);
  218|   240k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   280k|    {
  223|   280k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   280k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   280k|                          basic_contiguous_scan_context<char_type>>) {
  227|   280k|            auto rd = make_reader<T, char_type>();
  228|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   280k|            return impl(rd, range, value);
  233|   280k|        }
  234|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   280k|            auto rd = make_reader<T, char_type>();
  236|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   280k|                return unexpected(e);
  238|   280k|            }
  239|       |
  240|   280k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   280k|                return impl(rd, range, value);
  242|   280k|            }
  243|       |
  244|   280k|            auto crange = get_as_contiguous(range);
  245|   280k|            SCN_TRY(it, impl(rd, crange, value));
  246|   280k|            return ranges_polyfill::batch_next(
  247|   280k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   280k|        }
  249|   280k|        else {
  250|   280k|            SCN_EXPECT(false);
  251|   280k|            SCN_UNREACHABLE;
  252|   280k|        }
  253|   280k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   280k|    {
  205|   280k|        SCN_TRY(it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.28k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.28k|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   276k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   276k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   276k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   276k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 276k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   276k|        return rd.read_specs(subr, specs, value, loc);
  218|   276k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   281k|    {
  223|   281k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   281k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   281k|                          basic_contiguous_scan_context<char_type>>) {
  227|   281k|            auto rd = make_reader<T, char_type>();
  228|   281k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   281k|            return impl(rd, range, value);
  233|   281k|        }
  234|   281k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   281k|            auto rd = make_reader<T, char_type>();
  236|   281k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   281k|                return unexpected(e);
  238|   281k|            }
  239|       |
  240|   281k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   281k|                return impl(rd, range, value);
  242|   281k|            }
  243|       |
  244|   281k|            auto crange = get_as_contiguous(range);
  245|   281k|            SCN_TRY(it, impl(rd, crange, value));
  246|   281k|            return ranges_polyfill::batch_next(
  247|   281k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   281k|        }
  249|   281k|        else {
  250|   281k|            SCN_EXPECT(false);
  251|   281k|            SCN_UNREACHABLE;
  252|   281k|        }
  253|   281k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   281k|    {
  205|   281k|        SCN_TRY(it,
  ------------------
  |  |   71|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 3.46k, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.46k|    }                                                  \
  |  |  |  |   70|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   278k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   278k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   278k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   278k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 278k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   278k|        return rd.read_specs(subr, specs, value, loc);
  218|   278k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   333k|{
   43|   333k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 38, False: 333k]
  |  |  ------------------
  ------------------
   44|     38|        return unexpected(e);
   45|     38|    }
   46|       |
   47|   333k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 333k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   333k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  252|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   333k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  10.2k|    {
  122|  10.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.2k|            auto rd = make_reader<T, char_type>();
  127|  10.2k|            return impl(rd, range, value);
  128|  10.2k|        }
  129|  10.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.2k|            auto rd = make_reader<T, char_type>();
  131|  10.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.2k, False: 0]
  ------------------
  132|  10.2k|                return impl(rd, range, value);
  133|  10.2k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.2k|        else {
  140|  10.2k|            SCN_EXPECT(false);
  141|  10.2k|            SCN_UNREACHABLE;
  142|  10.2k|        }
  143|  10.2k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.2k|    {
  112|  10.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 6, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.2k|                    .transform_error(make_eof_scan_error));
  115|  10.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.2k|                               loc);
  117|  10.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  40.8k|    {
  223|  40.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  40.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  40.8k|            auto rd = make_reader<T, char_type>();
  228|  40.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  40.8k|                return unexpected(e);
  230|  40.8k|            }
  231|       |
  232|  40.8k|            return impl(rd, range, value);
  233|  40.8k|        }
  234|  40.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  40.8k|            auto rd = make_reader<T, char_type>();
  236|  40.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 40.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  40.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 40.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  40.8k|                return impl(rd, range, value);
  242|  40.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  40.8k|        else {
  250|  40.8k|            SCN_EXPECT(false);
  251|  40.8k|            SCN_UNREACHABLE;
  252|  40.8k|        }
  253|  40.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  40.8k|    {
  205|  40.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 26, False: 40.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  40.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  40.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  40.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  40.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 40.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  40.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  40.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.6k|    {
  223|  47.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.6k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.6k|            auto rd = make_reader<T, char_type>();
  228|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.6k|                return unexpected(e);
  230|  47.6k|            }
  231|       |
  232|  47.6k|            return impl(rd, range, value);
  233|  47.6k|        }
  234|  47.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.6k|            auto rd = make_reader<T, char_type>();
  236|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.6k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.6k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.6k|                return impl(rd, range, value);
  242|  47.6k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.6k|        else {
  250|  47.6k|            SCN_EXPECT(false);
  251|  47.6k|            SCN_UNREACHABLE;
  252|  47.6k|        }
  253|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.6k|    {
  205|  47.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 36, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.6k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.6k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.6k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.6k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.6k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.6k|    {
  223|  47.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.6k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.6k|            auto rd = make_reader<T, char_type>();
  228|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.6k|                return unexpected(e);
  230|  47.6k|            }
  231|       |
  232|  47.6k|            return impl(rd, range, value);
  233|  47.6k|        }
  234|  47.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.6k|            auto rd = make_reader<T, char_type>();
  236|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.6k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.6k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.6k|                return impl(rd, range, value);
  242|  47.6k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.6k|        else {
  250|  47.6k|            SCN_EXPECT(false);
  251|  47.6k|            SCN_UNREACHABLE;
  252|  47.6k|        }
  253|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.6k|    {
  205|  47.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 36, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.6k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.6k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.6k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.6k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.6k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  40.8k|    {
  223|  40.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  40.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  40.8k|            auto rd = make_reader<T, char_type>();
  228|  40.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  40.8k|                return unexpected(e);
  230|  40.8k|            }
  231|       |
  232|  40.8k|            return impl(rd, range, value);
  233|  40.8k|        }
  234|  40.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  40.8k|            auto rd = make_reader<T, char_type>();
  236|  40.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 40.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  40.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 40.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  40.8k|                return impl(rd, range, value);
  242|  40.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  40.8k|        else {
  250|  40.8k|            SCN_EXPECT(false);
  251|  40.8k|            SCN_UNREACHABLE;
  252|  40.8k|        }
  253|  40.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  40.8k|    {
  205|  40.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 28, False: 40.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     28|    }                                                  \
  |  |  |  |   70|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  40.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  40.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  40.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  40.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 40.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  40.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  40.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.6k|    {
  223|  47.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.6k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.6k|            auto rd = make_reader<T, char_type>();
  228|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.6k|                return unexpected(e);
  230|  47.6k|            }
  231|       |
  232|  47.6k|            return impl(rd, range, value);
  233|  47.6k|        }
  234|  47.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.6k|            auto rd = make_reader<T, char_type>();
  236|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.6k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.6k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.6k|                return impl(rd, range, value);
  242|  47.6k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.6k|        else {
  250|  47.6k|            SCN_EXPECT(false);
  251|  47.6k|            SCN_UNREACHABLE;
  252|  47.6k|        }
  253|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.6k|    {
  205|  47.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 36, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.6k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.6k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.6k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.6k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.6k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.6k|    {
  223|  47.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.6k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.6k|            auto rd = make_reader<T, char_type>();
  228|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.6k|                return unexpected(e);
  230|  47.6k|            }
  231|       |
  232|  47.6k|            return impl(rd, range, value);
  233|  47.6k|        }
  234|  47.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.6k|            auto rd = make_reader<T, char_type>();
  236|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 47.6k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.6k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.6k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.6k|                return impl(rd, range, value);
  242|  47.6k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.6k|        else {
  250|  47.6k|            SCN_EXPECT(false);
  251|  47.6k|            SCN_UNREACHABLE;
  252|  47.6k|        }
  253|  47.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.6k|    {
  205|  47.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 36, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.6k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.6k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.6k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.6k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.6k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.6k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.13M|{
  110|  1.13M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.13M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   386k|{
   89|   386k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 386k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   386k|    constexpr auto enc = get_encoding<CharT>();
   94|   386k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   386k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   386k|    }
   97|   386k|    else if constexpr (enc == encoding::utf16) {
   98|   386k|        return simdutf::validate_utf16(
   99|   386k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   386k|    }
  101|   386k|    else if constexpr (enc == encoding::utf32) {
  102|   386k|        return simdutf::validate_utf32(
  103|   386k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   386k|    }
  105|   386k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   193k|{
  449|   193k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 193k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   193k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   193k|        SCN_EXPECT(output.size() >= input.size());
  455|   193k|        std::memcpy(output.data(), input.data(),
  456|   193k|                    input.size() * sizeof(SourceCharT));
  457|   193k|        return input.size();
  458|   193k|    }
  459|       |
  460|   193k|    const auto result = [&]() {
  461|   193k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   193k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   193k|        if constexpr (src_enc == encoding::utf8) {
  465|   193k|            if constexpr (dest_enc == encoding::utf16) {
  466|   193k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   193k|                    input.data(), input.size(),
  468|   193k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   193k|            }
  470|   193k|            else {
  471|   193k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   193k|                    input.data(), input.size(),
  473|   193k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   193k|            }
  475|   193k|        }
  476|   193k|        else if constexpr (src_enc == encoding::utf16) {
  477|   193k|            if constexpr (dest_enc == encoding::utf8) {
  478|   193k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   193k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   193k|                    input.size(), output.data());
  481|   193k|            }
  482|   193k|            else {
  483|   193k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   193k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   193k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   193k|            }
  487|   193k|        }
  488|   193k|        else if constexpr (src_enc == encoding::utf32) {
  489|   193k|            if constexpr (dest_enc == encoding::utf8) {
  490|   193k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   193k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   193k|                    input.size(), output.data());
  493|   193k|            }
  494|   193k|            else {
  495|   193k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   193k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   193k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   193k|            }
  499|   193k|        }
  500|   193k|    }();
  501|       |
  502|   193k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  157|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|   193k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  247|   193k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|   193k|    return result.count;
  507|   193k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|   193k|    const auto result = [&]() {
  461|   193k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   193k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   193k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|   193k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|   193k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   193k|                    input.data(), input.size(),
  468|   193k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   193k|            }
  470|   193k|            else {
  471|   193k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   193k|                    input.data(), input.size(),
  473|   193k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   193k|            }
  475|   193k|        }
  476|   193k|        else if constexpr (src_enc == encoding::utf16) {
  477|   193k|            if constexpr (dest_enc == encoding::utf8) {
  478|   193k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   193k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   193k|                    input.size(), output.data());
  481|   193k|            }
  482|   193k|            else {
  483|   193k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   193k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   193k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   193k|            }
  487|   193k|        }
  488|   193k|        else if constexpr (src_enc == encoding::utf32) {
  489|   193k|            if constexpr (dest_enc == encoding::utf8) {
  490|   193k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   193k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   193k|                    input.size(), output.data());
  493|   193k|            }
  494|   193k|            else {
  495|   193k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   193k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   193k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   193k|            }
  499|   193k|        }
  500|   193k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   386k|{
  116|   386k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|   386k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   386k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 386k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   386k|    constexpr auto enc = get_encoding<CharT>();
  124|   386k|    char32_t output{};
  125|   386k|    size_t ret{};
  126|   386k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   386k|#ifndef NDEBUG
  128|   386k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 386k, False: 0]
  ------------------
  129|   386k|            auto len =
  130|   386k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   386k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  246|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   386k|        }
  133|   386k|#endif
  134|   386k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   386k|    }
  136|   386k|    else if constexpr (enc == encoding::utf16) {
  137|   386k|#ifndef NDEBUG
  138|   386k|        if (validate_unicode(input)) {
  139|   386k|            auto len = simdutf::utf32_length_from_utf16(
  140|   386k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   386k|            SCN_EXPECT(len == 1);
  142|   386k|        }
  143|   386k|#endif
  144|   386k|        ret = simdutf::convert_utf16_to_utf32(
  145|   386k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   386k|    }
  147|   386k|    else if constexpr (enc == encoding::utf32) {
  148|   386k|        output = static_cast<char32_t>(input[0]);
  149|   386k|        ret = output < detail::invalid_code_point;
  150|   386k|    }
  151|       |
  152|   386k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  157|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 386k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   386k|    return static_cast<char32_t>(output);
  156|   386k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   113k|{
  263|   113k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|   113k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   113k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 5.07k, False: 108k]
  |  |  ------------------
  ------------------
  267|  5.07k|        return {get_start_of_next_code_point(input),
  268|  5.07k|                detail::invalid_code_point};
  269|  5.07k|    }
  270|   108k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  157|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 839, False: 107k]
  |  |  ------------------
  ------------------
  271|    839|        return {input.end(), detail::invalid_code_point};
  272|    839|    }
  273|       |
  274|   107k|    constexpr auto enc = get_encoding<CharT>();
  275|   107k|    std::size_t result{1};
  276|   107k|    char32_t output{};
  277|   107k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   107k|        result = simdutf::convert_utf8_to_utf32(
  279|   107k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   107k|    }
  281|   107k|    else if constexpr (enc == encoding::utf16) {
  282|   107k|        result = simdutf::convert_utf16_to_utf32(
  283|   107k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   107k|    }
  285|   107k|    else if constexpr (enc == encoding::utf32) {
  286|   107k|        SCN_EXPECT(len == 1);
  287|   107k|        output = static_cast<char32_t>(input[0]);
  288|   107k|    }
  289|       |
  290|   107k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  157|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 4.20k, False: 103k]
  |  |  ------------------
  ------------------
  291|  4.20k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.20k|                detail::invalid_code_point};
  293|  4.20k|    }
  294|       |
  295|   103k|    return {input.begin() + len, output};
  296|   107k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  9.28k|{
  248|  9.28k|    auto it = input.begin();
  249|  59.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 56.8k, False: 2.38k]
  ------------------
  250|  56.8k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 6.90k, False: 49.8k]
  ------------------
  251|  6.90k|            break;
  252|  6.90k|        }
  253|  56.8k|    }
  254|       |
  255|  9.28k|    return it;
  256|  9.28k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  35.8M|{
  110|  35.8M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  35.8M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  2.64M|{
  449|  2.64M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 2.64M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  2.64M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  2.64M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  246|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|  2.64M|        std::memcpy(output.data(), input.data(),
  456|  2.64M|                    input.size() * sizeof(SourceCharT));
  457|  2.64M|        return input.size();
  458|  2.64M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  247|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  243|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  1.00M|{
  116|  1.00M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  246|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|  1.00M|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  1.00M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  1.00M|    constexpr auto enc = get_encoding<CharT>();
  124|  1.00M|    char32_t output{};
  125|  1.00M|    size_t ret{};
  126|  1.00M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.00M|#ifndef NDEBUG
  128|  1.00M|        if (validate_unicode(input)) {
  129|  1.00M|            auto len =
  130|  1.00M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  1.00M|            SCN_EXPECT(len == 1);
  132|  1.00M|        }
  133|  1.00M|#endif
  134|  1.00M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  1.00M|    }
  136|  1.00M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  1.00M|#ifndef NDEBUG
  138|  1.00M|        if (validate_unicode(input)) {
  139|  1.00M|            auto len = simdutf::utf32_length_from_utf16(
  140|  1.00M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  1.00M|            SCN_EXPECT(len == 1);
  142|  1.00M|        }
  143|  1.00M|#endif
  144|  1.00M|        ret = simdutf::convert_utf16_to_utf32(
  145|  1.00M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  1.00M|    }
  147|  1.00M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  1.00M|        output = static_cast<char32_t>(input[0]);
  149|  1.00M|        ret = output < detail::invalid_code_point;
  150|  1.00M|    }
  151|       |
  152|  1.00M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  157|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  1.00M|    return static_cast<char32_t>(output);
  156|  1.00M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  6.55M|{
   29|       |    // Pattern_White_Space property
   30|  6.55M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 6.54M, False: 14.3k]
  |  Branch (30:27): [True: 2.34M, False: 4.20M]
  ------------------
   31|  6.55M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 1.29M, False: 2.91M]
  ------------------
   32|  6.55M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 7.81k, False: 2.91M]
  ------------------
   33|  6.55M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 2.09k, False: 2.90M]
  ------------------
   34|  6.55M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 11.5k, False: 2.89M]
  ------------------
   35|  6.55M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.68k, False: 2.89M]
  ------------------
   36|  6.55M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 2.89M]
  ------------------
   37|  6.55M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  5.13M|{
   58|  5.13M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  5.13M|        static_cast<unsigned char>(ch))];
   60|  5.13M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  2.72M|{
   92|  2.72M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  2.72M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.89M|    {
   57|  1.89M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  5.40M|    {
   61|  5.40M|        return m_current;
   62|  5.40M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.50M|    {
   66|  3.50M|        return m_range.end();
   67|  3.50M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.68M|    {
   81|  1.68M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.68M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.68M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.68M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.68M|        }
   87|  1.68M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.68M|    static_cast<    \
  |  |  251|  1.68M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.68M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.82M|    {
   71|  1.82M|        return ranges::subrange{begin(), end()};
   72|  1.82M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.81M|    {
   57|  1.81M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.95M|    {
   61|  4.95M|        return m_current;
   62|  4.95M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  3.14M|    {
   66|  3.14M|        return m_range.end();
   67|  3.14M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.44M|    {
   81|  1.44M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  246|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.44M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.44M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.44M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.44M|        }
   87|  1.44M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  250|  1.44M|    static_cast<    \
  |  |  251|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.44M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.69M|    {
   71|  1.69M|        return ranges::subrange{begin(), end()};
   72|  1.69M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   432k|    {
  205|   432k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   432k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   169k|    {
  196|   169k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   216k|              cvref<T> obj = *get<T>(fn);
  187|   216k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   216k|                  obj(static_cast<decltype(args)>(args)...);
  189|   216k|              }
  190|   216k|              else {
  191|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   216k|              }
  193|   216k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   216k|    {
  126|   216k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   216k|            return static_cast<T*>(s.m_cp);
  128|   216k|        }
  129|   216k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   216k|            return static_cast<T*>(s.m_p);
  131|   216k|        }
  132|   216k|        else {
  133|   216k|            return reinterpret_cast<T*>(s.m_fp);
  134|   216k|        }
  135|   216k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   169k|        {
  104|   169k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  12.8M|    {
  205|  12.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  12.8M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.83M|    {
  196|  2.83M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  6.44M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.44M|              cvref<T> obj = *get<T>(fn);
  187|  6.44M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.44M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.44M|              }
  190|  6.44M|              else {
  191|  6.44M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.44M|              }
  193|  6.44M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  6.44M|    {
  126|  6.44M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.44M|            return static_cast<T*>(s.m_cp);
  128|  6.44M|        }
  129|  6.44M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.44M|            return static_cast<T*>(s.m_p);
  131|  6.44M|        }
  132|  6.44M|        else {
  133|  6.44M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.44M|        }
  135|  6.44M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.83M|        {
  104|  2.83M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   193k|    {
  196|   193k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   579k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   579k|              cvref<T> obj = *get<T>(fn);
  187|   579k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   579k|                  obj(static_cast<decltype(args)>(args)...);
  189|   579k|              }
  190|   579k|              else {
  191|   579k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   579k|              }
  193|   579k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   579k|    {
  126|   579k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   579k|            return static_cast<T*>(s.m_cp);
  128|   579k|        }
  129|   579k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   579k|            return static_cast<T*>(s.m_p);
  131|   579k|        }
  132|   579k|        else {
  133|   579k|            return reinterpret_cast<T*>(s.m_fp);
  134|   579k|        }
  135|   579k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   193k|        {
  104|   193k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   169k|    {
  196|   169k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   216k|              cvref<T> obj = *get<T>(fn);
  187|   216k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   216k|                  obj(static_cast<decltype(args)>(args)...);
  189|   216k|              }
  190|   216k|              else {
  191|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   216k|              }
  193|   216k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   216k|    {
  126|   216k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   216k|            return static_cast<T*>(s.m_cp);
  128|   216k|        }
  129|   216k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   216k|            return static_cast<T*>(s.m_p);
  131|   216k|        }
  132|   216k|        else {
  133|   216k|            return reinterpret_cast<T*>(s.m_fp);
  134|   216k|        }
  135|   216k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   169k|        {
  104|   169k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.30M|    {
  196|  2.30M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  4.53M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.53M|              cvref<T> obj = *get<T>(fn);
  187|  4.53M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.53M|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.53M|              }
  190|  4.53M|              else {
  191|  4.53M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.53M|              }
  193|  4.53M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  4.53M|    {
  126|  4.53M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.53M|            return static_cast<T*>(s.m_cp);
  128|  4.53M|        }
  129|  4.53M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  4.53M|            return static_cast<T*>(s.m_p);
  131|  4.53M|        }
  132|  4.53M|        else {
  133|  4.53M|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.53M|        }
  135|  4.53M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.30M|        {
  104|  2.30M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|   911k|    {
  205|   911k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  252|   911k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   911k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   292k|    {
  196|   292k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   455k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   455k|              cvref<T> obj = *get<T>(fn);
  187|   455k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   455k|                  obj(static_cast<decltype(args)>(args)...);
  189|   455k|              }
  190|   455k|              else {
  191|   455k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   455k|              }
  193|   455k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   455k|    {
  126|   455k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   455k|            return static_cast<T*>(s.m_cp);
  128|   455k|        }
  129|   455k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   455k|            return static_cast<T*>(s.m_p);
  131|   455k|        }
  132|   455k|        else {
  133|   455k|            return reinterpret_cast<T*>(s.m_fp);
  134|   455k|        }
  135|   455k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   292k|        {
  104|   292k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   333k|    {
  196|   333k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  1.33M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.33M|              cvref<T> obj = *get<T>(fn);
  187|  1.33M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.33M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.33M|              }
  190|  1.33M|              else {
  191|  1.33M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.33M|              }
  193|  1.33M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  1.33M|    {
  126|  1.33M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.33M|            return static_cast<T*>(s.m_cp);
  128|  1.33M|        }
  129|  1.33M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.33M|            return static_cast<T*>(s.m_p);
  131|  1.33M|        }
  132|  1.33M|        else {
  133|  1.33M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.33M|        }
  135|  1.33M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   333k|        {
  104|   333k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   292k|    {
  196|   292k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   455k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   455k|              cvref<T> obj = *get<T>(fn);
  187|   455k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   455k|                  obj(static_cast<decltype(args)>(args)...);
  189|   455k|              }
  190|   455k|              else {
  191|   455k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   455k|              }
  193|   455k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   455k|    {
  126|   455k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   455k|            return static_cast<T*>(s.m_cp);
  128|   455k|        }
  129|   455k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   455k|            return static_cast<T*>(s.m_p);
  131|   455k|        }
  132|   455k|        else {
  133|   455k|            return reinterpret_cast<T*>(s.m_fp);
  134|   455k|        }
  135|   455k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   292k|        {
  104|   292k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  56.0k|{
   44|  56.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|  56.0k|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  56.0k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  22.8M|{
   30|  22.8M|    return e != eof_error::good;
   31|  22.8M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   167k|{
   91|   167k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  246|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|   167k|    return parse_error::eof;
   93|   167k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  5.79M|    {
   69|  5.79M|        return a.m_code == b.m_code;
   70|  5.79M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  26.5M|    {
   55|  26.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  231|  26.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  26.5M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   398k|    return [code, msg](parse_error err) {
  115|   398k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   398k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   398k|{
  100|   398k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 398k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   398k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 398k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   398k|    return scan_error{code, msg};
  109|   398k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   462k|{
  114|   462k|    return [code, msg](parse_error err) {
  115|   462k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   462k|    };
  117|   462k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.17M|{
  587|  1.17M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.17M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   125k|{
  595|   125k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   125k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 9.65k, False: 115k]
  |  |  ------------------
  ------------------
  597|  9.65k|        source.sync(*n);
  598|  9.65k|    }
  599|   115k|    else {
  600|   115k|        source.sync_all();
  601|   115k|    }
  602|   125k|    return n;
  603|   125k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.11M|{
  611|  1.11M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.11M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   217k|{
  619|   217k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   217k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   217k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 13.6k, False: 204k]
  |  |  ------------------
  ------------------
  621|  13.6k|        source.sync(*n);
  622|  13.6k|    }
  623|   204k|    else {
  624|   204k|        source.sync_all();
  625|   204k|    }
  626|   217k|    return n;
  627|   217k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.17M|{
  544|  1.17M|    return vscan_internal(source, format, args);
  545|  1.17M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   125k|{
  550|   125k|    auto n = vscan_internal(source, format, args);
  551|   125k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 9.65k, False: 115k]
  |  |  ------------------
  ------------------
  552|  9.65k|        source.sync(*n);
  553|  9.65k|    }
  554|   115k|    else {
  555|   115k|        source.sync_all();
  556|   115k|    }
  557|   125k|    return n;
  558|   125k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.11M|{
  564|  1.11M|    return vscan_internal(source, format, args);
  565|  1.11M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   217k|{
  570|   217k|    auto n = vscan_internal(source, format, args);
  571|   217k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|   217k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 13.6k, False: 204k]
  |  |  ------------------
  ------------------
  572|  13.6k|        source.sync(*n);
  573|  13.6k|    }
  574|   204k|    else {
  575|   204k|        source.sync_all();
  576|   204k|    }
  577|   217k|    return n;
  578|   217k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   231k|{
  654|   231k|    return vscan_value_internal(source, arg);
  655|   231k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  11.5k|{
  659|  11.5k|    auto n = vscan_value_internal(source, arg);
  660|  11.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  11.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  11.5k|    else {
  664|  11.5k|        source.sync_all();
  665|  11.5k|    }
  666|  11.5k|    return n;
  667|  11.5k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   210k|{
  673|   210k|    return vscan_value_internal(source, arg);
  674|   210k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  20.4k|{
  679|  20.4k|    auto n = vscan_value_internal(source, arg);
  680|  20.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  156|  20.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  20.4k|    else {
  684|  20.4k|        source.sync_all();
  685|  20.4k|    }
  686|  20.4k|    return n;
  687|  20.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   251k|{
  476|   251k|    const auto argcount = args.size();
  477|   251k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 23.1k, False: 227k]
  |  Branch (477:60): [True: 23.1k, False: 0]
  ------------------
  478|  23.1k|        auto arg = args.get(0);
  479|  23.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  23.1k|    static_cast<    \
  |  |  251|  23.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  23.1k|    }
  481|       |
  482|   227k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 227k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   227k|    SCN_UNLIKELY_ATTR
  490|   227k|    {
  491|   227k|        auto handler = format_handler<false, CharT>{
  492|   227k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   227k|    static_cast<    \
  |  |  251|   227k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   227k|        return vscan_parse_format_string(format, handler);
  494|   227k|    }
  495|   227k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.60M|{
   36|  2.60M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.12M, False: 485k]
  ------------------
   37|  2.12M|        return false;
   38|  2.12M|    }
   39|   485k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 485k, False: 0]
  |  Branch (39:39): [True: 485k, False: 0]
  ------------------
   40|  2.60M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  34.7k|{
   69|  34.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  34.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 34.7k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  34.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|  34.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 34.7k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  34.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  34.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|  34.7k|    static_cast<    \
  |  |  251|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  34.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  34.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  34.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.7k|    }                                                  \
  |  |  |  |   70|  34.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  34.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.89M|    {
  314|  1.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  4.33M|    {
  133|  4.33M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  157|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  4.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.89M|    {
  264|  1.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.89M|{
  441|  1.89M|    const auto beg = handler.get_ctx().begin();
  442|  1.89M|    detail::parse_format_string<false>(format, handler);
  443|  1.89M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 208k, False: 1.68M]
  |  |  ------------------
  ------------------
  444|   208k|        return unexpected(handler.error);
  445|   208k|    }
  446|  1.68M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.89M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  12.6M|    {
  425|  12.6M|        return ctx.get();
  426|  12.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  12.6M|    {
  268|  12.6M|        return contiguous_ctx;
  269|  12.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.57M|    {
  318|  3.57M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.57M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.57M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.89M|{
   92|  1.89M|    auto arg = ctx.arg(id);
   93|  1.89M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.89M|    return arg;
   97|  1.89M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  4.33M|    {
  208|  4.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  4.33M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  157|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  4.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  4.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.33M, False: 0]
  |  |  ------------------
  ------------------
  218|  4.33M|            visited_args_lower64 |= (1ull << id);
  219|  4.33M|            return;
  220|  4.33M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  4.33M|    {
  193|  4.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  157|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  4.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  156|  4.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 4.33M, False: 0]
  |  |  ------------------
  ------------------
  199|  4.33M|            return (visited_args_lower64 >> id) & 1ull;
  200|  4.33M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  4.33M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   768k|    {
  177|   768k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  157|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 768k, False: 0]
  |  |  ------------------
  ------------------
  178|   768k|            error = err;
  179|   768k|        }
  180|   768k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.89M|    {
  347|  1.89M|        return parse_ctx.next_arg_id();
  348|  1.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.89M|    {
  388|  1.89M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.89M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.89M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.89M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.89M|        auto specs = detail::format_specs{};
  401|  1.89M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.89M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.89M|            arg.type()};
  404|       |
  405|  1.89M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.89M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.89M]
  |  Branch (406:29): [True: 46.3k, False: 1.84M]
  ------------------
  407|  46.3k|            SCN_UNLIKELY_ATTR
  408|  46.3k|            on_error("Missing '}' in format string");
  409|  46.3k|            return parse_ctx.begin();
  410|  46.3k|        }
  411|  1.84M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 23.1k, False: 1.82M]
  |  |  ------------------
  ------------------
  412|  23.1k|            return parse_ctx.begin();
  413|  23.1k|        }
  414|  1.82M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.82M|        on_visit_scan_arg(
  417|  1.82M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.82M|                                           get_ctx().locale()},
  419|  1.82M|            arg);
  420|  1.82M|        return parse_ctx.begin();
  421|  1.84M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.89M|    {
  112|  1.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.82M|    {
  359|  1.82M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.82M]
  |  Branch (359:23): [True: 0, False: 1.82M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.82M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.82M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 139k, False: 1.68M]
  |  |  ------------------
  ------------------
  366|   139k|            on_error(r.error());
  367|   139k|        }
  368|  1.68M|        else {
  369|  1.68M|            get_ctx().advance_to(*r);
  370|  1.68M|        }
  371|  1.82M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   640k|    {
  172|   640k|        SCN_UNLIKELY_ATTR
  173|   640k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   640k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  4.33M|    {
  140|  4.33M|        {
  141|  4.33M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 4.33M]
  ------------------
  142|  4.33M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 4.33M]
  ------------------
  143|  4.33M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  4.33M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  4.33M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 4.33M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  4.33M|        }
  150|       |
  151|  4.33M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 4.33M, False: 0]
  ------------------
  152|  4.33M|            return;
  153|  4.33M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  4.33M|    {
  188|  4.33M|        return error;
  189|  4.33M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  12.6M|    {
  184|  12.6M|        return static_cast<bool>(error);
  185|  12.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   227k|    {
  314|   227k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   227k|    {
  241|   227k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   227k|{
  441|   227k|    const auto beg = handler.get_ctx().begin();
  442|   227k|    detail::parse_format_string<false>(format, handler);
  443|   227k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 208k, False: 19.3k]
  |  |  ------------------
  ------------------
  444|   208k|        return unexpected(handler.error);
  445|   208k|    }
  446|  19.3k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   227k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.03M|    {
  425|  1.03M|        return ctx.get();
  426|  1.03M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.03M|    {
  245|  1.03M|        return ctx;
  246|  1.03M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   247k|    {
  318|   247k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 247k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   247k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   227k|{
   92|   227k|    auto arg = ctx.arg(id);
   93|   227k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   227k|    return arg;
   97|   227k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   227k|    {
  347|   227k|        return parse_ctx.next_arg_id();
  348|   227k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   227k|    {
  388|   227k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   227k|        set_arg_as_visited(arg_id);
  390|       |
  391|   227k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 227k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   227k|        auto specs = detail::format_specs{};
  401|   227k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   227k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   227k|            arg.type()};
  404|       |
  405|   227k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   227k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 227k]
  |  Branch (406:29): [True: 46.3k, False: 181k]
  ------------------
  407|  46.3k|            SCN_UNLIKELY_ATTR
  408|  46.3k|            on_error("Missing '}' in format string");
  409|  46.3k|            return parse_ctx.begin();
  410|  46.3k|        }
  411|   181k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 23.1k, False: 158k]
  |  |  ------------------
  ------------------
  412|  23.1k|            return parse_ctx.begin();
  413|  23.1k|        }
  414|   158k|        parse_ctx.advance_to(begin);
  415|       |
  416|   158k|        on_visit_scan_arg(
  417|   158k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   158k|                                           get_ctx().locale()},
  419|   158k|            arg);
  420|   158k|        return parse_ctx.begin();
  421|   181k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   227k|    {
  112|   227k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   158k|    {
  359|   158k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 158k]
  |  Branch (359:23): [True: 0, False: 158k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   158k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   158k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 139k, False: 19.3k]
  |  |  ------------------
  ------------------
  366|   139k|            on_error(r.error());
  367|   139k|        }
  368|  19.3k|        else {
  369|  19.3k|            get_ctx().advance_to(*r);
  370|  19.3k|        }
  371|   158k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.35M|{
  456|  2.35M|    const auto argcount = args.size();
  457|  2.35M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 462k, False: 1.89M]
  |  Branch (457:60): [True: 462k, False: 0]
  ------------------
  458|   462k|        auto arg = args.get(0);
  459|   462k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   462k|    static_cast<    \
  |  |  251|   462k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   462k|    }
  461|       |
  462|  1.89M|    auto handler = format_handler<true, CharT>{
  463|  1.89M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.89M|                                       source.data() + source.size()},
  465|  1.89M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.89M|    static_cast<    \
  |  |  251|  1.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.89M|    static_cast<    \
  |  |  251|  1.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.89M|    return vscan_parse_format_string(format, handler);
  467|  2.35M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   693k|{
   49|   693k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 693k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   693k|    auto reader =
   55|   693k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   693k|            ranges::subrange<const CharT*>{source.data(),
   57|   693k|                                           source.data() + source.size()},
   58|   693k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   693k|    static_cast<    \
  |  |  251|   693k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   693k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   693k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   693k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   693k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 34.7k, False: 658k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.7k|    }                                                  \
  |  |  |  |   70|   693k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   658k|    return ranges::distance(source.data(), it);
   61|   693k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.23M|{
  456|  2.23M|    const auto argcount = args.size();
  457|  2.23M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 420k, False: 1.81M]
  |  Branch (457:60): [True: 420k, False: 0]
  ------------------
  458|   420k|        auto arg = args.get(0);
  459|   420k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  250|   420k|    static_cast<    \
  |  |  251|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   420k|    }
  461|       |
  462|  1.81M|    auto handler = format_handler<true, CharT>{
  463|  1.81M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.81M|                                       source.data() + source.size()},
  465|  1.81M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.81M|    static_cast<    \
  |  |  251|  1.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|  1.81M|    static_cast<    \
  |  |  251|  1.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.81M|    return vscan_parse_format_string(format, handler);
  467|  2.23M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.67M|{
   36|  2.67M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.21M, False: 461k]
  ------------------
   37|  2.21M|        return false;
   38|  2.21M|    }
   39|   461k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 461k, False: 0]
  |  Branch (39:39): [True: 461k, False: 0]
  ------------------
   40|  2.67M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   631k|{
   49|   631k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 631k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   631k|    auto reader =
   55|   631k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   631k|            ranges::subrange<const CharT*>{source.data(),
   57|   631k|                                           source.data() + source.size()},
   58|   631k|            SCN_MOVE(args), loc};
  ------------------
  |  |  250|   631k|    static_cast<    \
  |  |  251|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   631k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   631k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   631k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   631k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 61.2k, False: 570k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.2k|    }                                                  \
  |  |  |  |   70|   631k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|   570k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   570k|    return ranges::distance(source.data(), it);
   61|   631k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.81M|    {
  314|  1.81M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.81M|    {
  264|  1.81M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.81M|{
  441|  1.81M|    const auto beg = handler.get_ctx().begin();
  442|  1.81M|    detail::parse_format_string<false>(format, handler);
  443|  1.81M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 367k, False: 1.44M]
  |  |  ------------------
  ------------------
  444|   367k|        return unexpected(handler.error);
  445|   367k|    }
  446|  1.44M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.81M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  11.7M|    {
  425|  11.7M|        return ctx.get();
  426|  11.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  11.7M|    {
  268|  11.7M|        return contiguous_ctx;
  269|  11.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  3.26M|    {
  318|  3.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.26M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.81M|{
   92|  1.81M|    auto arg = ctx.arg(id);
   93|  1.81M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.81M|    return arg;
   97|  1.81M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.81M|    {
  347|  1.81M|        return parse_ctx.next_arg_id();
  348|  1.81M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.81M|    {
  388|  1.81M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.81M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.81M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.81M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.81M|        auto specs = detail::format_specs{};
  401|  1.81M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.81M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.81M|            arg.type()};
  404|       |
  405|  1.81M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.81M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.81M]
  |  Branch (406:29): [True: 81.6k, False: 1.73M]
  ------------------
  407|  81.6k|            SCN_UNLIKELY_ATTR
  408|  81.6k|            on_error("Missing '}' in format string");
  409|  81.6k|            return parse_ctx.begin();
  410|  81.6k|        }
  411|  1.73M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 40.8k, False: 1.69M]
  |  |  ------------------
  ------------------
  412|  40.8k|            return parse_ctx.begin();
  413|  40.8k|        }
  414|  1.69M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.69M|        on_visit_scan_arg(
  417|  1.69M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.69M|                                           get_ctx().locale()},
  419|  1.69M|            arg);
  420|  1.69M|        return parse_ctx.begin();
  421|  1.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.81M|    {
  112|  1.81M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.69M|    {
  359|  1.69M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.69M]
  |  Branch (359:23): [True: 0, False: 1.69M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.69M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.69M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 245k, False: 1.44M]
  |  |  ------------------
  ------------------
  366|   245k|            on_error(r.error());
  367|   245k|        }
  368|  1.44M|        else {
  369|  1.44M|            get_ctx().advance_to(*r);
  370|  1.44M|        }
  371|  1.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   435k|{
  476|   435k|    const auto argcount = args.size();
  477|   435k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 40.8k, False: 394k]
  |  Branch (477:60): [True: 40.8k, False: 0]
  ------------------
  478|  40.8k|        auto arg = args.get(0);
  479|  40.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  250|  40.8k|    static_cast<    \
  |  |  251|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  40.8k|    }
  481|       |
  482|   394k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 394k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   394k|    SCN_UNLIKELY_ATTR
  490|   394k|    {
  491|   394k|        auto handler = format_handler<false, CharT>{
  492|   394k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   394k|    static_cast<    \
  |  |  251|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  250|   394k|    static_cast<    \
  |  |  251|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   394k|        return vscan_parse_format_string(format, handler);
  494|   394k|    }
  495|   394k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  61.2k|{
   69|  61.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 61.2k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  61.2k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  156|  61.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (156:25): [True: 0, False: 61.2k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  250|      0|    static_cast<    \
  |  |  251|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  61.2k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  61.2k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  250|  61.2k|    static_cast<    \
  |  |  251|  61.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  61.2k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  157|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (157:25): [True: 61.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.2k|    }                                                  \
  |  |  |  |   70|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  252|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  61.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   394k|    {
  314|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   394k|    {
  241|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   394k|{
  441|   394k|    const auto beg = handler.get_ctx().begin();
  442|   394k|    detail::parse_format_string<false>(format, handler);
  443|   394k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 367k, False: 27.2k]
  |  |  ------------------
  ------------------
  444|   367k|        return unexpected(handler.error);
  445|   367k|    }
  446|  27.2k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   394k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.78M|    {
  425|  1.78M|        return ctx.get();
  426|  1.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.78M|    {
  245|  1.78M|        return ctx;
  246|  1.78M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   422k|    {
  318|   422k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 422k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   422k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   394k|{
   92|   394k|    auto arg = ctx.arg(id);
   93|   394k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  157|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   394k|    return arg;
   97|   394k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   394k|    {
  347|   394k|        return parse_ctx.next_arg_id();
  348|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   394k|    {
  388|   394k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   394k|        set_arg_as_visited(arg_id);
  390|       |
  391|   394k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 394k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   394k|        auto specs = detail::format_specs{};
  401|   394k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   394k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   394k|            arg.type()};
  404|       |
  405|   394k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   394k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 394k]
  |  Branch (406:29): [True: 81.6k, False: 313k]
  ------------------
  407|  81.6k|            SCN_UNLIKELY_ATTR
  408|  81.6k|            on_error("Missing '}' in format string");
  409|  81.6k|            return parse_ctx.begin();
  410|  81.6k|        }
  411|   313k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  157|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 40.8k, False: 272k]
  |  |  ------------------
  ------------------
  412|  40.8k|            return parse_ctx.begin();
  413|  40.8k|        }
  414|   272k|        parse_ctx.advance_to(begin);
  415|       |
  416|   272k|        on_visit_scan_arg(
  417|   272k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   272k|                                           get_ctx().locale()},
  419|   272k|            arg);
  420|   272k|        return parse_ctx.begin();
  421|   313k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   394k|    {
  112|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   272k|    {
  359|   272k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 272k]
  |  Branch (359:23): [True: 0, False: 272k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   272k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  252|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   272k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  157|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (157:25): [True: 245k, False: 27.2k]
  |  |  ------------------
  ------------------
  366|   245k|            on_error(r.error());
  367|   245k|        }
  368|  27.2k|        else {
  369|  27.2k|            get_ctx().advance_to(*r);
  370|  27.2k|        }
  371|   272k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   231k|{
  502|   231k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   231k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  11.5k|{
  502|  11.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  11.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   210k|{
  502|   210k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   210k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  20.4k|{
  502|  20.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  252|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  20.4k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  1.93k|{
   52|  1.93k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  246|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  243|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.93k|    string_buffer.resize(data.size());
   56|  1.93k|    std::copy(data.begin(), data.end(),
   57|  1.93k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.93k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.93k|    const auto wsv_reinterpret_size =
   62|  1.93k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 135, False: 1.79k]
  ------------------
   63|  1.93k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.93k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  1.93k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.93k|    std::wstring_view wsv_transcoded;
   69|  1.93k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.47k, False: 460]
  ------------------
   70|  1.47k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.47k|        else {
   79|  1.47k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.47k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.47k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.47k|                sv.data(), sv.size(),
   83|  1.47k|                reinterpret_cast<char32_t*>(
   84|  1.47k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.47k|        }
   86|  1.47k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.47k|    }
   88|       |
   89|  1.93k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  1.93k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.93k|{
  140|  1.93k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.93k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.93k|    buf.resize(sizeof...(Args));
  143|  1.93k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.93k|    return {buf.data(), buf.size()};
  145|  1.93k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  1.93k|{
  126|  1.93k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.93k|        return format_string_view_buffer;
  128|  1.93k|    }
  129|  1.93k|    else {
  130|  1.93k|        return wformat_string_view_buffer;
  131|  1.93k|    }
  132|  1.93k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  1.93k|{
  200|  1.93k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  1.93k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  1.93k|                                   format_strings);
  203|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   177k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   177k|            auto result = scn::scan<T>(
  156|   177k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   177k|                scn::runtime_format(f));
  158|   177k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 158k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   158k|            it = result->begin();
  162|   158k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   177k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   177k|            auto result = scn::scan<T>(
  170|   177k|                global_locale,
  171|   177k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   177k|                scn::runtime_format(f));
  173|   177k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 158k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   158k|            it = result->begin();
  177|   158k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  36.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  36.9k|            auto result = scn::scan_value<T>(
  185|  36.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  36.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 34.9k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  34.9k|            it = result->begin();
  190|  34.9k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   167k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   167k|            auto result = scn::scan<T>(
  156|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   167k|                scn::runtime_format(f));
  158|   167k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 147k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   147k|            it = result->begin();
  162|   147k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   167k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   167k|            auto result = scn::scan<T>(
  170|   167k|                global_locale,
  171|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   167k|                scn::runtime_format(f));
  173|   167k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 147k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   147k|            it = result->begin();
  177|   147k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  33.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  33.2k|            auto result = scn::scan_value<T>(
  185|  33.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  33.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 31.3k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  31.3k|            it = result->begin();
  190|  31.3k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   222k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   222k|            auto result = scn::scan<T>(
  156|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   222k|                scn::runtime_format(f));
  158|   222k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 203k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   203k|            it = result->begin();
  162|   203k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   222k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   222k|            auto result = scn::scan<T>(
  170|   222k|                global_locale,
  171|   222k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   222k|                scn::runtime_format(f));
  173|   222k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 203k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   203k|            it = result->begin();
  177|   203k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  42.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  42.8k|            auto result = scn::scan_value<T>(
  185|  42.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  42.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 40.9k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  40.9k|            it = result->begin();
  190|  40.9k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   191k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   191k|            auto result = scn::scan<T>(
  156|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   191k|                scn::runtime_format(f));
  158|   191k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 171k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   171k|            it = result->begin();
  162|   171k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   191k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   191k|            auto result = scn::scan<T>(
  170|   191k|                global_locale,
  171|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   191k|                scn::runtime_format(f));
  173|   191k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 171k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   171k|            it = result->begin();
  177|   171k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  37.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  37.1k|            auto result = scn::scan_value<T>(
  185|  37.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  37.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 35.1k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  35.1k|            it = result->begin();
  190|  35.1k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   226k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   226k|            auto result = scn::scan<T>(
  156|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   226k|                scn::runtime_format(f));
  158|   226k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 207k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   207k|            it = result->begin();
  162|   207k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   226k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   226k|            auto result = scn::scan<T>(
  170|   226k|                global_locale,
  171|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   226k|                scn::runtime_format(f));
  173|   226k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 207k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   207k|            it = result->begin();
  177|   207k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  43.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  43.6k|            auto result = scn::scan_value<T>(
  185|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  43.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 41.7k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  41.7k|            it = result->begin();
  190|  41.7k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|   192k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   192k|            auto result = scn::scan<T>(
  156|   192k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   192k|                scn::runtime_format(f));
  158|   192k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 172k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|   172k|            it = result->begin();
  162|   172k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|   192k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   192k|            auto result = scn::scan<T>(
  170|   192k|                global_locale,
  171|   192k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   192k|                scn::runtime_format(f));
  173|   192k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 172k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|   172k|            it = result->begin();
  177|   172k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  37.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  37.2k|            auto result = scn::scan_value<T>(
  185|  37.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  37.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 35.3k]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|  35.3k|            it = result->begin();
  190|  35.3k|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  19.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  19.3k|            auto result = scn::scan<T>(
  156|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  19.3k|                scn::runtime_format(f));
  158|  19.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|      1|            it = result->begin();
  162|      1|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            auto result = scn::scan<T>(
  170|  19.3k|                global_locale,
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  19.3k|                scn::runtime_format(f));
  173|  19.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|      1|            it = result->begin();
  177|      1|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  21.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  21.2k|            auto result = scn::scan<T>(
  156|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  21.2k|                scn::runtime_format(f));
  158|  21.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1.93k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|  1.93k|            it = result->begin();
  162|  1.93k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  21.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.2k|            auto result = scn::scan<T>(
  170|  21.2k|                global_locale,
  171|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  21.2k|                scn::runtime_format(f));
  173|  21.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1.93k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|  1.93k|            it = result->begin();
  177|  1.93k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  21.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  21.2k|            auto result = scn::scan<T>(
  156|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  21.2k|                scn::runtime_format(f));
  158|  21.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1.93k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|  1.93k|            it = result->begin();
  162|  1.93k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  21.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.2k|            auto result = scn::scan<T>(
  170|  21.2k|                global_locale,
  171|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  21.2k|                scn::runtime_format(f));
  173|  21.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1.93k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|  1.93k|            it = result->begin();
  177|  1.93k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  21.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  21.2k|            auto result = scn::scan<T>(
  156|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  21.2k|                scn::runtime_format(f));
  158|  21.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1.93k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|  1.93k|            it = result->begin();
  162|  1.93k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  21.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.2k|            auto result = scn::scan<T>(
  170|  21.2k|                global_locale,
  171|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  21.2k|                scn::runtime_format(f));
  173|  21.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1.93k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|  1.93k|            it = result->begin();
  177|  1.93k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  21.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  21.2k|            auto result = scn::scan<T>(
  156|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  21.2k|                scn::runtime_format(f));
  158|  21.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1.93k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|  1.93k|            it = result->begin();
  162|  1.93k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  21.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.2k|            auto result = scn::scan<T>(
  170|  21.2k|                global_locale,
  171|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  21.2k|                scn::runtime_format(f));
  173|  21.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1.93k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|  1.93k|            it = result->begin();
  177|  1.93k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.93k|{
  151|       |    // Regular scan
  152|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 19.3k, False: 1.93k]
  ------------------
  153|  19.3k|        auto it = scn::ranges::begin(source);
  154|  21.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  21.2k|            auto result = scn::scan<T>(
  156|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  21.2k|                scn::runtime_format(f));
  158|  21.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 19.3k, False: 1.93k]
  ------------------
  159|  19.3k|                break;
  160|  19.3k|            }
  161|  1.93k|            it = result->begin();
  162|  1.93k|        }
  163|  19.3k|    }
  164|       |
  165|       |    // scan localized
  166|  19.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 19.3k, False: 1.93k]
  ------------------
  167|  19.3k|        auto it = scn::ranges::begin(source);
  168|  21.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  21.2k|            auto result = scn::scan<T>(
  170|  21.2k|                global_locale,
  171|  21.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  21.2k|                scn::runtime_format(f));
  173|  21.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 19.3k, False: 1.93k]
  ------------------
  174|  19.3k|                break;
  175|  19.3k|            }
  176|  1.93k|            it = result->begin();
  177|  1.93k|        }
  178|  19.3k|    }
  179|       |
  180|       |    // scan_value
  181|  1.93k|    {
  182|  1.93k|        auto it = scn::ranges::begin(source);
  183|  1.93k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.93k|            auto result = scn::scan_value<T>(
  185|  1.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.93k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.93k, False: 0]
  ------------------
  187|  1.93k|                break;
  188|  1.93k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  1.93k|    }
  192|  1.93k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  1.93k|{
  109|  1.93k|    using char_type = ranges::range_value_t<Source>;
  110|  1.93k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  1.93k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  1.93k|              std::back_inserter(deque));
  113|  1.93k|    return deque;
  114|  1.93k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  1.93k|{
   98|  1.93k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  1.93k|        return noncontiguous_buffer;
  100|  1.93k|    }
  101|  1.93k|    else {
  102|  1.93k|        return wnoncontiguous_buffer;
  103|  1.93k|    }
  104|  1.93k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.93k|{
  140|  1.93k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.93k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.93k|    buf.resize(sizeof...(Args));
  143|  1.93k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.93k|    return {buf.data(), buf.size()};
  145|  1.93k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  1.93k|{
  126|  1.93k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.93k|        return format_string_view_buffer;
  128|  1.93k|    }
  129|  1.93k|    else {
  130|  1.93k|        return wformat_string_view_buffer;
  131|  1.93k|    }
  132|  1.93k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.40k|{
  200|  3.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.40k|                                   format_strings);
  203|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   168k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   168k|            auto result = scn::scan<T>(
  156|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   168k|                scn::runtime_format(f));
  158|   168k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 134k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   134k|            it = result->begin();
  162|   134k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   168k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   168k|            auto result = scn::scan<T>(
  170|   168k|                global_locale,
  171|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   168k|                scn::runtime_format(f));
  173|   168k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 134k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   134k|            it = result->begin();
  177|   134k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  33.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  33.5k|            auto result = scn::scan_value<T>(
  185|  33.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  33.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 30.0k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  30.0k|            it = result->begin();
  190|  30.0k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   162k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   162k|            auto result = scn::scan<T>(
  156|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   162k|                scn::runtime_format(f));
  158|   162k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 128k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   128k|            it = result->begin();
  162|   128k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   162k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   162k|            auto result = scn::scan<T>(
  170|   162k|                global_locale,
  171|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   162k|                scn::runtime_format(f));
  173|   162k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 128k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   128k|            it = result->begin();
  177|   128k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  30.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  30.6k|            auto result = scn::scan_value<T>(
  185|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  30.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 27.2k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  27.2k|            it = result->begin();
  190|  27.2k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   206k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   206k|            auto result = scn::scan<T>(
  156|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   206k|                scn::runtime_format(f));
  158|   206k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 172k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   172k|            it = result->begin();
  162|   172k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   206k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   206k|            auto result = scn::scan<T>(
  170|   206k|                global_locale,
  171|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   206k|                scn::runtime_format(f));
  173|   206k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 172k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   172k|            it = result->begin();
  177|   172k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  38.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  38.3k|            auto result = scn::scan_value<T>(
  185|  38.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  38.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 34.9k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  34.9k|            it = result->begin();
  190|  34.9k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   184k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   184k|            auto result = scn::scan<T>(
  156|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   184k|                scn::runtime_format(f));
  158|   184k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 150k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   150k|            it = result->begin();
  162|   150k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   184k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   184k|            auto result = scn::scan<T>(
  170|   184k|                global_locale,
  171|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   184k|                scn::runtime_format(f));
  173|   184k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 150k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   150k|            it = result->begin();
  177|   150k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  34.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  34.3k|            auto result = scn::scan_value<T>(
  185|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  34.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 30.9k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  30.9k|            it = result->begin();
  190|  30.9k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   210k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   210k|            auto result = scn::scan<T>(
  156|   210k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   210k|                scn::runtime_format(f));
  158|   210k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 176k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   176k|            it = result->begin();
  162|   176k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   210k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   210k|            auto result = scn::scan<T>(
  170|   210k|                global_locale,
  171|   210k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   210k|                scn::runtime_format(f));
  173|   210k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 176k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   176k|            it = result->begin();
  177|   176k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  39.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  39.0k|            auto result = scn::scan_value<T>(
  185|  39.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  39.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 35.6k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  35.6k|            it = result->begin();
  190|  35.6k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|   185k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   185k|            auto result = scn::scan<T>(
  156|   185k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   185k|                scn::runtime_format(f));
  158|   185k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 151k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|   151k|            it = result->begin();
  162|   151k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|   185k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   185k|            auto result = scn::scan<T>(
  170|   185k|                global_locale,
  171|   185k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   185k|                scn::runtime_format(f));
  173|   185k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 151k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|   151k|            it = result->begin();
  177|   151k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  34.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  34.4k|            auto result = scn::scan_value<T>(
  185|  34.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  34.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 31.0k]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|  31.0k|            it = result->begin();
  190|  31.0k|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  34.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.0k|            auto result = scn::scan<T>(
  156|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.0k|                scn::runtime_format(f));
  158|  34.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 1]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|      1|            it = result->begin();
  162|      1|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  34.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.0k|            auto result = scn::scan<T>(
  170|  34.0k|                global_locale,
  171|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.0k|                scn::runtime_format(f));
  173|  34.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 1]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|      1|            it = result->begin();
  177|      1|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  34.0k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.0k|            auto result = scn::scan<T>(
  156|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.0k|                scn::runtime_format(f));
  158|  34.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 2]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|      2|            it = result->begin();
  162|      2|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  34.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.0k|            auto result = scn::scan<T>(
  170|  34.0k|                global_locale,
  171|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.0k|                scn::runtime_format(f));
  173|  34.0k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 2]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|      2|            it = result->begin();
  177|      2|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  37.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  37.4k|            auto result = scn::scan<T>(
  156|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  37.4k|                scn::runtime_format(f));
  158|  37.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 3.40k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|  3.40k|            it = result->begin();
  162|  3.40k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  37.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  37.4k|            auto result = scn::scan<T>(
  170|  37.4k|                global_locale,
  171|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  37.4k|                scn::runtime_format(f));
  173|  37.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 3.40k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|  3.40k|            it = result->begin();
  177|  3.40k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  37.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  37.4k|            auto result = scn::scan<T>(
  156|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  37.4k|                scn::runtime_format(f));
  158|  37.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 3.40k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|  3.40k|            it = result->begin();
  162|  3.40k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  37.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  37.4k|            auto result = scn::scan<T>(
  170|  37.4k|                global_locale,
  171|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  37.4k|                scn::runtime_format(f));
  173|  37.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 3.40k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|  3.40k|            it = result->begin();
  177|  3.40k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  37.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  37.4k|            auto result = scn::scan<T>(
  156|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  37.4k|                scn::runtime_format(f));
  158|  37.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 3.40k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|  3.40k|            it = result->begin();
  162|  3.40k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  37.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  37.4k|            auto result = scn::scan<T>(
  170|  37.4k|                global_locale,
  171|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  37.4k|                scn::runtime_format(f));
  173|  37.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 3.40k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|  3.40k|            it = result->begin();
  177|  3.40k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.40k|{
  151|       |    // Regular scan
  152|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 34.0k, False: 3.40k]
  ------------------
  153|  34.0k|        auto it = scn::ranges::begin(source);
  154|  37.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  37.4k|            auto result = scn::scan<T>(
  156|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  37.4k|                scn::runtime_format(f));
  158|  37.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 34.0k, False: 3.40k]
  ------------------
  159|  34.0k|                break;
  160|  34.0k|            }
  161|  3.40k|            it = result->begin();
  162|  3.40k|        }
  163|  34.0k|    }
  164|       |
  165|       |    // scan localized
  166|  34.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 34.0k, False: 3.40k]
  ------------------
  167|  34.0k|        auto it = scn::ranges::begin(source);
  168|  37.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  37.4k|            auto result = scn::scan<T>(
  170|  37.4k|                global_locale,
  171|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  37.4k|                scn::runtime_format(f));
  173|  37.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 34.0k, False: 3.40k]
  ------------------
  174|  34.0k|                break;
  175|  34.0k|            }
  176|  3.40k|            it = result->begin();
  177|  3.40k|        }
  178|  34.0k|    }
  179|       |
  180|       |    // scan_value
  181|  3.40k|    {
  182|  3.40k|        auto it = scn::ranges::begin(source);
  183|  3.40k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.40k|            auto result = scn::scan_value<T>(
  185|  3.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.40k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.40k, False: 0]
  ------------------
  187|  3.40k|                break;
  188|  3.40k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.40k|    }
  192|  3.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.40k|{
  109|  3.40k|    using char_type = ranges::range_value_t<Source>;
  110|  3.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.40k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.40k|              std::back_inserter(deque));
  113|  3.40k|    return deque;
  114|  3.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.40k|{
   98|  3.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.40k|        return noncontiguous_buffer;
  100|  3.40k|    }
  101|  3.40k|    else {
  102|  3.40k|        return wnoncontiguous_buffer;
  103|  3.40k|    }
  104|  3.40k|}

LLVMFuzzerTestOneInput:
   59|  1.93k|{
   60|  1.93k|    scn::fuzz::run({data, size});
   61|  1.93k|    return 0;
   62|  1.93k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  1.93k|{
   36|  1.93k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 1.93k]
  |  Branch (36:42): [True: 0, False: 1.93k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  1.93k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  1.93k|    auto f =
   43|  1.93k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  1.93k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  1.93k|    do_basic_run(sv, f);
   46|       |
   47|  1.93k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  1.93k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  1.93k|                                          L"{:'}", L"{:'L}");
   50|  1.93k|    do_basic_run(wsv_reinterpret, wf);
   51|  1.93k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.47k, False: 460]
  ------------------
   52|  1.47k|        do_basic_run(wsv_transcode, wf);
   53|  1.47k|    }
   54|  1.93k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  1.93k|{
   25|  1.93k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.93k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.93k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.93k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.93k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.93k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.93k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  1.93k|{
   25|  1.93k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.93k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.93k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.93k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.93k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.93k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.93k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.40k|{
   25|  3.40k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.40k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.40k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.40k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.40k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.40k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.40k|{
   25|  3.40k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.40k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.40k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.40k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.40k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.40k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.40k|}

